name: HumanEval_95_check_dict_case
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return checkDictCase(dict, \"a\");\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf36rno1x.java:19: error: method checkDictCase in class Problem\
    \ cannot be applied to given types;\n        return checkDictCase(dict, \"a\"\
    );\n               ^\n  required: HashMap<String,String>\n  found: HashMap<String,String>,String\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpf36rno1x.java:23:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf36rno1x.java:24: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf36rno1x.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf36rno1x.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpf36rno1x.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpf36rno1x.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     if (dict.keySet().stream().allMatch(x -> x.equals(x.toLowerCase()))) {\n\
    \            return true;\n        }\n        if (dict.keySet().stream().allMatch(x\
    \ -> x.equals(x.toUpperCase()))) {\n            return true;\n        }\n    \
    \    return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmk98fgiq.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpmk98fgiq.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmk98fgiq.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmk98fgiq.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmk98fgiq.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpmk98fgiq.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        throw new UnsupportedOperationException(\"Not Implemented Yet\");\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph37osuy1.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmph37osuy1.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmph37osuy1.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmph37osuy1.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmph37osuy1.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmph37osuy1.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        int lowCase = 0;\n        int upCase = 0;\n        for (String key\
    \ : dict.keySet()) {\n            if (key.equals(key.toLowerCase())) lowCase++;\n\
    \            else if (key.equals(key.toUpperCase())) upCase++;\n            else\
    \ return false;\n        }\n        return lowCase == dict.size() || upCase ==\
    \ dict.size();\nreturn true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpscy48npd.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpscy48npd.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpscy48npd.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpscy48npd.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpscy48npd.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpscy48npd.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszsgmong.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpszsgmong.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpszsgmong.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpszsgmong.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpszsgmong.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpszsgmong.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().map(x -> x.toLowerCase()).collect(Collectors.toSet()).size()\
    \ == 1 ||\n               dict.keySet().stream().map(x -> x.toUpperCase()).collect(Collectors.toSet()).size()\
    \ == 1;\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplafg475b.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplafg475b.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplafg475b.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplafg475b.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplafg475b.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplafg475b.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: write your code here.\n        return false;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzkpyovrw.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpzkpyovrw.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzkpyovrw.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzkpyovrw.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzkpyovrw.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpzkpyovrw.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjrwxycmm.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjrwxycmm.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjrwxycmm.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjrwxycmm.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjrwxycmm.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjrwxycmm.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptd96n_rp.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmptd96n_rp.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptd96n_rp.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptd96n_rp.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptd96n_rp.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptd96n_rp.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n \
    \       // get the first key and determine if it is uppercase or lowercase\n \
    \       String firstKey = dict.keySet().iterator().next();\n        boolean isFirstUpper\
    \ = firstKey.toUpperCase().equals(firstKey);\n\n        // check all the keys\
    \ to determine if they all match the first key\n        for (String key : dict.keySet())\
    \ {\n            if (isFirstUpper && !key.toUpperCase().equals(key)) {\n     \
    \           return false;\n            } else if (!isFirstUpper && !key.toLowerCase().equals(key))\
    \ {\n                return false;\n            }\n        }\n\n        return\
    \ true;\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9bawilf.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpv9bawilf.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv9bawilf.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv9bawilf.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv9bawilf.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpv9bawilf.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean upper = true;\n        boolean lower = true;\n        for\
    \ (String s : dict.keySet()) {\n            if (Character.isUpperCase(s.charAt(0)))\
    \ upper = false;\n            if (Character.isLowerCase(s.charAt(0))) lower =\
    \ false;\n        }\n        return upper || lower;\nreturn true;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bh2k8hf.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2bh2k8hf.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2bh2k8hf.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2bh2k8hf.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2bh2k8hf.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2bh2k8hf.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here:\n        return false;\nreturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfsffkpy9.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfsffkpy9.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfsffkpy9.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfsffkpy9.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfsffkpy9.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfsffkpy9.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Boolean lower = null;\n        for (String key : dict.keySet()) {\n    \
    \        if (lower == null) {\n                lower = key.equals(key.toLowerCase());\n\
    \            } else if (lower && !key.equals(key.toLowerCase())) {\n         \
    \       return false;\n            } else if (!lower && !key.equals(key.toUpperCase()))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwy55iw69.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpwy55iw69.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwy55iw69.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwy55iw69.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwy55iw69.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpwy55iw69.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        // NOTE: Use the HashMap methods you learned\
    \ in the previous exercise\n        return false;\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplpvnkf2r.java:25: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplpvnkf2r.java:26:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplpvnkf2r.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplpvnkf2r.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplpvnkf2r.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplpvnkf2r.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        throw new UnsupportedOperationException(\"Waiting to be implemented.\"\
    );\nreturn true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij9to_mk.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpij9to_mk.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpij9to_mk.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpij9to_mk.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpij9to_mk.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpij9to_mk.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb2xpicql.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpb2xpicql.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb2xpicql.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb2xpicql.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb2xpicql.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpb2xpicql.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     ArrayList<String> dictKeys = new ArrayList<>(dict.keySet());\n        ArrayList<String>\
    \ dictKeysLower = new ArrayList<>();\n        ArrayList<String> dictKeysUpper\
    \ = new ArrayList<>();\n        for (String key : dictKeys) {\n            dictKeysLower.add(key.toLowerCase());\n\
    \            dictKeysUpper.add(key.toUpperCase());\n        }\n        if (dictKeys.equals(dictKeysLower)\
    \ || dictKeys.equals(dictKeysUpper)) {\n            return true;\n        }\n\
    \        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplzhtiv8b.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplzhtiv8b.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplzhtiv8b.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplzhtiv8b.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplzhtiv8b.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplzhtiv8b.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String s : dict.keySet()) {\n\
    \            if (!(s.equals(s.toLowerCase()) || s.equals(s.toUpperCase()))) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqfmxdlk.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppqfmxdlk.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppqfmxdlk.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppqfmxdlk.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppqfmxdlk.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppqfmxdlk.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        boolean allLower = dict.keySet().stream().allMatch(key\
    \ -> key.matches(\"^[a-z]+$\"));\n        boolean allUpper = dict.keySet().stream().allMatch(key\
    \ -> key.matches(\"^[A-Z]+$\"));\n        return allLower || allUpper;\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwi0shazr.java:26: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpwi0shazr.java:27:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwi0shazr.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwi0shazr.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwi0shazr.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpwi0shazr.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean upperCase = false;\n        boolean lowerCase = false;\n\
    \        for (String key : dict.keySet()) {\n            if (key.charAt(0) >=\
    \ 'A' && key.charAt(0) <= 'Z')\n                upperCase = true;\n          \
    \  else if (key.charAt(0) >= 'a' && key.charAt(0) <= 'z')\n                lowerCase\
    \ = true;\n            else\n                return false;\n        }\n      \
    \  return upperCase != lowerCase;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplum2g8n1.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplum2g8n1.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplum2g8n1.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplum2g8n1.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplum2g8n1.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplum2g8n1.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> dictSet = dict.keySet();\n        boolean flag = true;\n\
    \        int check = 0;\n        for (String s : dictSet) {\n            if (check\
    \ == 0) {\n                if (Character.isUpperCase(s.charAt(0))) {\n       \
    \             check = 1;\n                } else {\n                    check\
    \ = 2;\n                }\n            } else {\n                if (check ==\
    \ 1) {\n                    if (Character.isLowerCase(s.charAt(0))) {\n      \
    \                  flag = false;\n                        break;\n           \
    \         }\n                } else {\n                    if (Character.isUpperCase(s.charAt(0)))\
    \ {\n                        flag = false;\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ flag;\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5cc6k_ex.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5cc6k_ex.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5cc6k_ex.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5cc6k_ex.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5cc6k_ex.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5cc6k_ex.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Implement the function here and return True or False based on\
    \ \n        // the above description.\n        ArrayList<String> lower = new ArrayList<String>();\n\
    \        ArrayList<String> upper = new ArrayList<String>();\n        for (Map.Entry<String,\
    \ String> entry : dict.entrySet()) {\n            if(entry.getKey().matches(\"\
    ^[a-z]+$\")){\n                lower.add(entry.getKey());\n            }\n   \
    \         else if(entry.getKey().matches(\"^[A-Z]+$\")){\n                upper.add(entry.getKey());\n\
    \            }\n            else{\n                return false;\n           \
    \ }\n        }\n        if(lower.size() == dict.size() || upper.size() == dict.size()){\n\
    \            return true;\n        }\n        else{\n            return false;\n\
    \        }\nreturn true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzuiaoor.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfzuiaoor.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfzuiaoor.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfzuiaoor.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfzuiaoor.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfzuiaoor.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean lower = false;\n        boolean upper = false;\n        for\
    \ (String key : dict.keySet()) {\n            if (Character.isLowerCase(key.charAt(0)))\
    \ {\n                lower = true;\n            } else if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                upper = true;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return (lower != upper);\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpesbp97oq.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpesbp97oq.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpesbp97oq.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpesbp97oq.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpesbp97oq.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpesbp97oq.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // hash map is a data structure that maps keys to values\n      \
    \  // for (k:v in dict)\n        //   if k is upper case\n        //     if other\
    \ keys are not upper case\n        //       return false\n        //   if k is\
    \ lower case\n        //     if other keys are not lower case\n        //    \
    \   return false\n        // return true\n        boolean isUpper = false;\n \
    \       boolean isLower = false;\n        for (String key : dict.keySet()) {\n\
    \            if (key.toUpperCase().equals(key)) {\n                isUpper = true;\n\
    \            } else if (key.toLowerCase().equals(key)) {\n                isLower\
    \ = true;\n            } else {\n                return false;\n            }\n\
    \        }\n        return !(isUpper && isLower);\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpheljdfdj.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpheljdfdj.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpheljdfdj.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpheljdfdj.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpheljdfdj.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpheljdfdj.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3k8fggdv.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3k8fggdv.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3k8fggdv.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3k8fggdv.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3k8fggdv.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3k8fggdv.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean lowerCase = true;\n        boolean upperCase = true;\n  \
    \      if (dict.size() == 0) {\n            return false;\n        }\n       \
    \ for (Map.Entry<String,String> entry : dict.entrySet()) {\n            if (entry.getKey().toLowerCase().equals(entry.getKey()))\
    \ {\n                upperCase = false;\n            }\n            if (entry.getKey().toUpperCase().equals(entry.getKey()))\
    \ {\n                lowerCase = false;\n            }\n        }\n        return\
    \ (lowerCase || upperCase);\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkoi_kwr1.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpkoi_kwr1.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkoi_kwr1.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkoi_kwr1.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkoi_kwr1.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpkoi_kwr1.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // use only Java's standard library classes, no extra packages\n\
    \        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppatz9p15.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppatz9p15.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppatz9p15.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppatz9p15.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppatz9p15.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppatz9p15.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        ArrayList<Boolean> cases = new ArrayList<Boolean>();\n        for\
    \ (Map.Entry<String, String> entry : dict.entrySet()) {\n            cases.add(isLowerCase(entry.getKey()));\n\
    \        }\n        return cases.stream().distinct().count() == 1;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_686wge1.java:21: error: cannot find symbol\n            cases.add(isLowerCase(entry.getKey()));\n\
    \                      ^\n  symbol:   method isLowerCase(String)\n  location:\
    \ class Problem\n/tmp/tmp_686wge1.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_686wge1.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_686wge1.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_686wge1.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_686wge1.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_686wge1.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interfac"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(String::isUpperCase)\n   \
    \            || dict.keySet().stream().allMatch(String::isLowerCase);\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcfv0weu4.java:19: error: invalid method reference\n        return\
    \ dict.keySet().stream().allMatch(String::isUpperCase)\n                     \
    \                          ^\n  cannot find symbol\n    symbol:   method isUpperCase()\n\
    \    location: class String\n/tmp/tmpcfv0weu4.java:20: error: invalid method reference\n\
    \               || dict.keySet().stream().allMatch(String::isLowerCase);\n   \
    \                                               ^\n  cannot find symbol\n    symbol:\
    \   method isLowerCase()\n    location: class String\n/tmp/tmpcfv0weu4.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcfv0weu4.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcfv0weu4.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcfv0weu4.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcfv0weu4.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,Stri"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch( x -> x.equals(x.toLowerCase())\
    \ ) ||\n               dict.keySet().stream().allMatch( x -> x.equals(x.toUpperCase())\
    \ );\nreturn true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0f41sr50.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0f41sr50.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0f41sr50.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0f41sr50.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0f41sr50.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0f41sr50.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(s -> s.toLowerCase().equals(s))\n\
    \        || dict.keySet().stream().allMatch(s -> s.toUpperCase().equals(s));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3v4qwcol.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3v4qwcol.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3v4qwcol.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3v4qwcol.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3v4qwcol.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3v4qwcol.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz1a71hik.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpz1a71hik.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz1a71hik.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz1a71hik.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz1a71hik.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpz1a71hik.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        String x = \"\";\n        String y = \"\";\n        if (dict.isEmpty())\
    \ {\n            return false;\n        }\n        for (String key : dict.keySet())\
    \ {\n            x = key;\n            break;\n        }\n        for (String\
    \ key : dict.keySet()) {\n            y = key;\n            break;\n        }\n\
    \        if (x.toUpperCase().equals(x) && y.toUpperCase().equals(y)) {\n     \
    \       return true;\n        }\n        else if (x.toLowerCase().equals(x) &&\
    \ y.toLowerCase().equals(y)) {\n            return true;\n        }\n        else\
    \ {\n            return false;\n        }\nreturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8b43cmug.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp8b43cmug.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8b43cmug.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8b43cmug.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8b43cmug.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8b43cmug.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Boolean isUpper = true;\n        for (String key : dict.keySet())\
    \ {\n            char c = key.charAt(0);\n            if (isUpper == null) {\n\
    \                isUpper = Character.isUpperCase(c);\n            } else if (isUpper\
    \ != Character.isUpperCase(c)) {\n                return false;\n            }\n\
    \        }\n        return true;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpprn970sb.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpprn970sb.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpprn970sb.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpprn970sb.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpprn970sb.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpprn970sb.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(p -> p.equals(p.toLowerCase()))\
    \ || dict.keySet().stream().allMatch(p -> p.equals(p.toUpperCase()));\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprn_xxt7_.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmprn_xxt7_.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprn_xxt7_.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprn_xxt7_.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprn_xxt7_.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmprn_xxt7_.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Boolean keys_are_upper = null;\n        for (String key : dict.keySet())\
    \ {\n            if (keys_are_upper == null) {\n                keys_are_upper\
    \ = key.equals(key.toUpperCase());\n            } else {\n                if (keys_are_upper\
    \ != key.equals(key.toUpperCase())) {\n                    return false;\n   \
    \             }\n            }\n        }\n        return true;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplav5s_j8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplav5s_j8.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplav5s_j8.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplav5s_j8.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplav5s_j8.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplav5s_j8.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // write your code here\n        return false;\nreturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhg5nxem.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpzhg5nxem.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzhg5nxem.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzhg5nxem.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzhg5nxem.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpzhg5nxem.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7c4sqoqb.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7c4sqoqb.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7c4sqoqb.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7c4sqoqb.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7c4sqoqb.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7c4sqoqb.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        //fill in your code here.\n        boolean result = true;\n     \
    \   String [] keys = dict.keySet().toArray(new String[dict.size()]);\n       \
    \ String [] values = dict.values().toArray(new String[dict.size()]);\n       \
    \ boolean lowerCase = keys[0].equals(keys[0].toLowerCase());\n        boolean\
    \ upperCase = keys[0].equals(keys[0].toUpperCase());\n        for(int i = 0; i\
    \ < keys.length; i++){\n            if(!keys[i].equals(keys[i].toLowerCase())\
    \ && !keys[i].equals(keys[i].toUpperCase())){\n                result = false;\n\
    \                break;\n            }\n            if(lowerCase && !keys[i].equals(keys[i].toLowerCase())){\n\
    \                result = false;\n                break;\n            }\n    \
    \        if(upperCase && !keys[i].equals(keys[i].toUpperCase())){\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttqsiuv_.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpttqsiuv_.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpttqsiuv_.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpttqsiuv_.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpttqsiuv_.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpttqsiuv_.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfjk2frby.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfjk2frby.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfjk2frby.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfjk2frby.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfjk2frby.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfjk2frby.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     String upperKeys = dict.keySet().stream().map(key -> key.toUpperCase()).collect(Collectors.joining());\n\
    \        String lowerKeys = dict.keySet().stream().map(key -> key.toLowerCase()).collect(Collectors.joining());\n\
    \        if (upperKeys.equals(lowerKeys)) {\n            return false;\n     \
    \   }\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe608_qmc.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpe608_qmc.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe608_qmc.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe608_qmc.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe608_qmc.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpe608_qmc.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here.\n        // return true;\n        if (dict.size()==0)\
    \ {\n            return false;\n        }\n        int lowerCount = 0;\n     \
    \   int upperCount = 0;\n        Set<String> keys = dict.keySet();\n        for\
    \ (String key : keys) {\n            if (key.equals(key.toLowerCase())) {\n  \
    \              lowerCount++;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                upperCount++;\n            }\n        }\n        if (lowerCount\
    \ == dict.size() || upperCount == dict.size()) {\n            return true;\n \
    \       }\n        return false;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4j5m12wk.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4j5m12wk.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4j5m12wk.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4j5m12wk.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4j5m12wk.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4j5m12wk.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxasngh2b.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpxasngh2b.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxasngh2b.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxasngh2b.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxasngh2b.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxasngh2b.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n      boolean flag = true;\n      if(dict.size() == 0) {\n        return\
    \ false;\n      }\n      for(String k : dict.keySet()) {\n        if(k.toUpperCase().equals(k))\
    \ {\n          if(flag) {\n            flag = true;\n          }\n        } else\
    \ if(k.toLowerCase().equals(k)) {\n          if(flag) {\n            flag = true;\n\
    \          }\n        } else {\n          flag = false;\n        }\n      }\n\
    \      return flag;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx5ynw4lb.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpx5ynw4lb.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx5ynw4lb.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx5ynw4lb.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx5ynw4lb.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpx5ynw4lb.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean lowerCase = true;\n        boolean upperCase = true;\n  \
    \      for (String key : dict.keySet()) {\n            if (key.equals(key.toLowerCase()))\
    \ {\n                upperCase = false;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                lowerCase = false;\n            } else {\n              \
    \  return false;\n            }\n        }\n        return lowerCase || upperCase;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9coszoeo.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9coszoeo.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9coszoeo.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9coszoeo.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9coszoeo.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9coszoeo.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // check if the input dictionary is empty\n        if (dict.isEmpty())\
    \ {\n            return false;\n        }\n        String firstKey = dict.keySet().stream().findFirst().get();\n\
    \        char firstKeyFirstChar = firstKey.charAt(0);\n        boolean lowerCase\
    \ = Character.isLowerCase(firstKeyFirstChar);\n        return dict.keySet().stream().allMatch(k\
    \ -> {\n            boolean klowerCase = Character.isLowerCase(k.charAt(0));\n\
    \            return lowerCase == klowerCase;\n        });\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpll81kthf.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpll81kthf.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpll81kthf.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpll81kthf.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpll81kthf.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpll81kthf.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     // Solution 1:\n        // Iterate through all the keys in the dictionary\
    \ and return False\n        // if any key is not in lower or upper case.\n   \
    \     // Iterate through all the keys in the dictionary and return False\n   \
    \     // if any key is not in lower or upper case.\n        // for (String key\
    \ : dict.keySet()) {\n        //     if (!key.equals(key.toLowerCase()) &&\n \
    \       //         !key.equals(key.toUpperCase())) {\n        //         return\
    \ false;\n        //     }\n        // }\n        // return true;\n        //\
    \ Solution 2:\n        // If the first key is in lower case then all keys are\
    \ in lower case\n        // or if the first key is in upper case then all keys\
    \ are in upper case.\n        // return dict.keySet().stream().allMatch(k -> k.equals(k.toLowerCase()))\
    \ ||\n        //        dict.keySet().stream().allMatch(k -> k.equals(k.toUpperCase()));\n\
    \        // Solution 3:\n        // If the first key is in lower case then all\
    \ keys are in lower case\n        // or if the first key is in upper case then\
    \ all keys are in upper case.\n        // return dict.keySet().stream().allMatch(k\
    \ -> k.equals(k.toLowerCase())) ||\n        //        dict.keySet().stream().allMatch(k\
    \ -> k.equals(k.toUpperCase()));\n        // Solution 4:\n        // If the first\
    \ key is in lower case then all keys are in lower case\n        // or if the first\
    \ key is in upper case then all keys are in upper case.\n        return dict.keySet().stream().allMatch(k\
    \ -> k.equals(k.toLowerCase())) ||\n               dict.keySet().stream().allMatch(k\
    \ -> k.equals(k.toUpperCase()));\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjc56psd6.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjc56psd6.java:53:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjc56psd6.java:54: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjc56psd6.java:55: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjc56psd6.java:56: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjc56psd6.java:57: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here.\n        List<String> keys = new ArrayList<String>(dict.keySet());\n\
    \        if (keys.size() == 0) return false;\n        boolean isUpperCase = keys.get(0).equals(keys.get(0).toUpperCase());\n\
    \        for (String key : keys) {\n            if (isUpperCase) {\n         \
    \       if (!key.equals(key.toUpperCase())) return false;\n            } else\
    \ {\n                if (!key.equals(key.toLowerCase())) return false;\n     \
    \       }\n        }\n        return true;\nreturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6eehvm1s.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp6eehvm1s.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6eehvm1s.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6eehvm1s.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp6eehvm1s.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp6eehvm1s.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        ArrayList<Boolean> caseCheckList = new ArrayList<Boolean>();\n  \
    \      dict.forEach((k,v) -> caseCheckList.add(Character.isUpperCase(k.charAt(0))));\n\
    \        boolean allUpperCase = caseCheckList.stream().allMatch(b -> b.booleanValue()\
    \ == true);\n        boolean allLowerCase = caseCheckList.stream().allMatch(b\
    \ -> b.booleanValue() == false);\n        return (allUpperCase || allLowerCase);\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp84g8d0z2.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp84g8d0z2.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp84g8d0z2.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp84g8d0z2.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp84g8d0z2.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp84g8d0z2.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n \
    \       HashSet<String> upperKeys = new HashSet<String>();\n        HashSet<String>\
    \ lowerKeys = new HashSet<String>();\n        for (Map.Entry<String,String> entry\
    \ : dict.entrySet()) {\n            if (entry.getKey().equals(entry.getKey().toUpperCase()))\
    \ {\n                upperKeys.add(entry.getKey());\n            } else if (entry.getKey().equals(entry.getKey().toLowerCase()))\
    \ {\n                lowerKeys.add(entry.getKey());\n            } else {\n  \
    \              return false;\n            }\n        }\n\n        return lowerKeys.size()\
    \ == 0 || upperKeys.size() == 0;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0nam5ly4.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0nam5ly4.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0nam5ly4.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0nam5ly4.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0nam5ly4.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0nam5ly4.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        int uppercase = 0;\n        int lowercase = 0;\n        if (dict.isEmpty())\
    \ {\n            return false;\n        }\n        for (Map.Entry<String, String>\
    \ entry : dict.entrySet()) {\n            String key = entry.getKey();\n     \
    \       if (Character.isUpperCase(key.charAt(0))) {\n                uppercase++;\n\
    \            } else {\n                lowercase++;\n            }\n        }\n\
    \        if (uppercase == 0 || lowercase == 0) {\n            return true;\n \
    \       }\n        return false;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprbkb4t37.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmprbkb4t37.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprbkb4t37.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprbkb4t37.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprbkb4t37.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmprbkb4t37.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        throw new UnsupportedOperationException(\"Not Implemented\");\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_hew35qg.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_hew35qg.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_hew35qg.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_hew35qg.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_hew35qg.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_hew35qg.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplm0lgck4.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplm0lgck4.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplm0lgck4.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplm0lgck4.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplm0lgck4.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplm0lgck4.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean allLowercase = true;\n        boolean allUppercase = true;\n\
    \        for (String key : dict.keySet()) {\n            if (key.toLowerCase().equals(key))\
    \ {\n                allUppercase = false;\n            } else if (key.toUpperCase().equals(key))\
    \ {\n                allLowercase = false;\n            } else {\n           \
    \     return false;\n            }\n        }\n        return allLowercase ||\
    \ allUppercase;\nreturn true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpka6om2d1.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpka6om2d1.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpka6om2d1.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpka6om2d1.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpka6om2d1.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpka6om2d1.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(String::isUpperCase) ||\n\
    \               dict.keySet().stream().allMatch(String::isLowerCase);\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3dh2xoem.java:19: error: invalid method reference\n        return\
    \ dict.keySet().stream().allMatch(String::isUpperCase) ||\n                  \
    \                             ^\n  cannot find symbol\n    symbol:   method isUpperCase()\n\
    \    location: class String\n/tmp/tmp3dh2xoem.java:20: error: invalid method reference\n\
    \               dict.keySet().stream().allMatch(String::isLowerCase);\n      \
    \                                         ^\n  cannot find symbol\n    symbol:\
    \   method isLowerCase()\n    location: class String\n/tmp/tmp3dh2xoem.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3dh2xoem.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3dh2xoem.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3dh2xoem.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3dh2xoem.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        else {\n            Boolean\
    \ allLower = null;\n            for (String key : dict.keySet()) {\n         \
    \       boolean lower = key.toLowerCase().equals(key);\n                if (allLower\
    \ == null) allLower = lower;\n                else if (allLower != lower) return\
    \ false;\n            }\n            return true;\n        }\nreturn true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5lzqkrom.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5lzqkrom.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5lzqkrom.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5lzqkrom.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5lzqkrom.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5lzqkrom.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: Place code here\n        throw new RuntimeException(\"checkDictCase\
    \ not implemented yet\");\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplhc9bhem.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplhc9bhem.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplhc9bhem.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplhc9bhem.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplhc9bhem.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplhc9bhem.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(k -> k.matches(\"[a-z]*\"\
    ))\n            || dict.keySet().stream().allMatch(k -> k.matches(\"[A-Z]*\"));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr9vvm1xe.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpr9vvm1xe.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr9vvm1xe.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr9vvm1xe.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr9vvm1xe.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpr9vvm1xe.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isLower = true;\n        boolean isUpper = true;\n      \
    \  for (Map.Entry<String,String> entry : dict.entrySet()) {\n            if (isLower)\
    \ {\n                isLower = entry.getKey().equals(entry.getKey().toLowerCase());\n\
    \            }\n            if (isUpper) {\n                isUpper = entry.getKey().equals(entry.getKey().toUpperCase());\n\
    \            }\n        }\n        return isLower || isUpper;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm165bmol.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpm165bmol.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm165bmol.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm165bmol.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm165bmol.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpm165bmol.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3bqwwgqw.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3bqwwgqw.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3bqwwgqw.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3bqwwgqw.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3bqwwgqw.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3bqwwgqw.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        String capital = \"\";\n        String lowercase = \"\";\n      \
    \  if (dict.isEmpty()) {\n            return false;\n        }\n        for (String\
    \ key : dict.keySet()) {\n            if (key.equals(key.toUpperCase())) {\n \
    \               capital += key;\n            } else if (key.equals(key.toLowerCase()))\
    \ {\n                lowercase += key;\n            } else {\n               \
    \ return false;\n            }\n        }\n        if (capital.equals(\"\") ||\
    \ lowercase.equals(\"\")) {\n            return true;\n        } else {\n    \
    \        return false;\n        }\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpolxnu5wz.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpolxnu5wz.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpolxnu5wz.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpolxnu5wz.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpolxnu5wz.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpolxnu5wz.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     return dict.keySet().stream().allMatch(s -> s.toLowerCase().equals(s)) ||\n\
    \            dict.keySet().stream().allMatch(s -> s.toUpperCase().equals(s));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp417w1d5a.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp417w1d5a.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp417w1d5a.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp417w1d5a.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp417w1d5a.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp417w1d5a.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp70lwtlai.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp70lwtlai.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp70lwtlai.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp70lwtlai.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp70lwtlai.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp70lwtlai.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        String lower = dict.keySet().stream().map(x -> x.toLowerCase()).collect(Collectors.joining(\"\
    \"));\n        String upper = dict.keySet().stream().map(x -> x.toUpperCase()).collect(Collectors.joining(\"\
    \"));\n        return (lower.equals(upper) && !lower.isEmpty()) || (lower.equals(dict.keySet().stream().collect(Collectors.joining(\"\
    \"))) && !lower.isEmpty());\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuienfjfj.java:25: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpuienfjfj.java:26:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpuienfjfj.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpuienfjfj.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpuienfjfj.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpuienfjfj.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n\t// Your code here.\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90pslx_h.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp90pslx_h.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp90pslx_h.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp90pslx_h.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp90pslx_h.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp90pslx_h.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(s -> Character.isUpperCase(s.charAt(0)))\
    \ ||\n               dict.keySet().stream().allMatch(s -> Character.isLowerCase(s.charAt(0)));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgymggahs.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpgymggahs.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgymggahs.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgymggahs.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgymggahs.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpgymggahs.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Add your code here\n        return false;\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwedk99ya.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpwedk99ya.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwedk99ya.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwedk99ya.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpwedk99ya.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpwedk99ya.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppcdmetdg.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppcdmetdg.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppcdmetdg.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppcdmetdg.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppcdmetdg.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppcdmetdg.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     String firstKey = dict.keySet().iterator().next();\n        if (Character.isLowerCase(firstKey.charAt(0)))\
    \ {\n            for (String key : dict.keySet()) {\n                if (!key.equals(key.toLowerCase()))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     } else {\n            for (String key : dict.keySet()) {\n             \
    \   if (!key.equals(key.toUpperCase())) {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpax5v_y6h.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpax5v_y6h.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpax5v_y6h.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpax5v_y6h.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpax5v_y6h.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpax5v_y6h.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9v4uhw0h.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9v4uhw0h.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9v4uhw0h.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9v4uhw0h.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9v4uhw0h.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9v4uhw0h.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean lower=true;\n        boolean upper=true;\n        if(dict.isEmpty())\
    \ {\n            return false;\n        }\n        for(String i:dict.keySet())\
    \ {\n            if(i.equals(i.toLowerCase())) {\n                upper=false;\n\
    \            }\n            else if(i.equals(i.toUpperCase())) {\n           \
    \     lower=false;\n            }\n            else {\n                return\
    \ false;\n            }\n        }\n        return upper || lower;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr84l4p4y.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpr84l4p4y.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr84l4p4y.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr84l4p4y.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpr84l4p4y.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpr84l4p4y.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: your code here!\n        return false;\nreturn true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfz7vshdr.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfz7vshdr.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfz7vshdr.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfz7vshdr.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfz7vshdr.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfz7vshdr.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\nreturn true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmjap46i8.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpmjap46i8.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmjap46i8.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmjap46i8.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmjap46i8.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpmjap46i8.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpos_4gwi4.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpos_4gwi4.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpos_4gwi4.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpos_4gwi4.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpos_4gwi4.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpos_4gwi4.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     HashSet<Boolean> set = new HashSet<>();\n        for (String key : dict.keySet())\
    \ {\n            set.add(key.matches(\"^[a-z]+$\"));\n        }\n        return\
    \ set.size() == 1;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8ws016b.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpl8ws016b.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpl8ws016b.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpl8ws016b.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpl8ws016b.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpl8ws016b.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkm62s9k0.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpkm62s9k0.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkm62s9k0.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkm62s9k0.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkm62s9k0.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpkm62s9k0.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        boolean lower = true;\n\
    \        boolean upper = true;\n        for (String k : dict.keySet()) {\n   \
    \         if (k.length() == 0) return false;\n            if (Character.isLowerCase(k.charAt(0)))\
    \ {\n                upper = false;\n            } else {\n                lower\
    \ = false;\n            }\n        }\n        return lower || upper;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphlo3uq56.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphlo3uq56.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphlo3uq56.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphlo3uq56.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphlo3uq56.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphlo3uq56.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return checkDictCase(dict, true);\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjnb9izgt.java:19: error: method checkDictCase in class Problem\
    \ cannot be applied to given types;\n        return checkDictCase(dict, true);\n\
    \               ^\n  required: HashMap<String,String>\n  found: HashMap<String,String>,boolean\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpjnb9izgt.java:23:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjnb9izgt.java:24: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjnb9izgt.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjnb9izgt.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjnb9izgt.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjnb9izgt.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: Write the code.\n        boolean upper = false;\n      \
    \  boolean lower = false;\n        for(String key : dict.keySet()) {\n       \
    \     if(isUpperCase(key)) {\n                upper = true;\n            }\n \
    \           else {\n                lower = true;\n            }\n        }\n\
    \        if(lower && upper) {\n            return false;\n        }\n        return\
    \ true;\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphawkpcc_.java:23: error: cannot find symbol\n            if(isUpperCase(key))\
    \ {\n               ^\n  symbol:   method isUpperCase(String)\n  location: class\
    \ Problem\n/tmp/tmphawkpcc_.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphawkpcc_.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphawkpcc_.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphawkpcc_.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphawkpcc_.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphawkpcc_.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        //TODO implement this method\n        return false;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpinq5imo8.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpinq5imo8.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpinq5imo8.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpinq5imo8.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpinq5imo8.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpinq5imo8.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here!\n        return true;\nreturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7wpclmc.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpb7wpclmc.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb7wpclmc.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb7wpclmc.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb7wpclmc.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpb7wpclmc.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Do not change the lines below.\n        PrintStream out = System.out;\n\
    \        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\
    \        // Implement this function.\n\n        return false;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpigfnfsp0.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpigfnfsp0.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpigfnfsp0.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpigfnfsp0.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpigfnfsp0.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpigfnfsp0.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        throw new NotImplementedException();\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22hi26tx.java:19: error: cannot find symbol\n        throw new\
    \ NotImplementedException();\n                  ^\n  symbol:   class NotImplementedException\n\
    \  location: class Problem\n/tmp/tmp22hi26tx.java:23: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n                                        \
    \                ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp22hi26tx.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n                                              \
    \          ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp22hi26tx.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp22hi26tx.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp22hi26tx.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp22hi26tx.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n7 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     boolean lowerCase = true;\n        boolean upperCase = true;\n        for\
    \ (String key : dict.keySet()) {\n            if (key.equals(key.toLowerCase()))\
    \ {\n                upperCase = false;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                lowerCase = false;\n            } else {\n              \
    \  return false;\n            }\n        }\n        return lowerCase ^ upperCase;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpobfwlay6.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpobfwlay6.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpobfwlay6.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpobfwlay6.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpobfwlay6.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpobfwlay6.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return checkDictCase(dict, true);\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjy6qtrdd.java:19: error: method checkDictCase in class Problem\
    \ cannot be applied to given types;\n        return checkDictCase(dict, true);\n\
    \               ^\n  required: HashMap<String,String>\n  found: HashMap<String,String>,boolean\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpjy6qtrdd.java:23:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjy6qtrdd.java:24: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjy6qtrdd.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjy6qtrdd.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjy6qtrdd.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjy6qtrdd.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        String [] d = dict.keySet().toArray(new String[0]);\n        for\
    \ (int i = 0; i < d.length; i++) {\n            if (Character.isLowerCase(d[i].charAt(0)))\
    \ {\n                for (int j = i; j < d.length; j++) {\n                  \
    \  if (Character.isUpperCase(d[j].charAt(0))) {\n                        return\
    \ false;\n                    }\n                }\n            } else {\n   \
    \             for (int j = i; j < d.length; j++) {\n                    if (Character.isLowerCase(d[j].charAt(0)))\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            }\n        }\n        return true;\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpclgnqa7d.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpclgnqa7d.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpclgnqa7d.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpclgnqa7d.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpclgnqa7d.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpclgnqa7d.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> set = dict.keySet();\n        boolean flag = true;\n       \
    \ for (String str : set) {\n            if (!str.equals(str.toLowerCase()) &&\
    \ !str.equals(str.toUpperCase())) {\n                flag = false;\n         \
    \       break;\n            }\n        }\n        return flag;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ikhyh75.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2ikhyh75.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2ikhyh75.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2ikhyh75.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2ikhyh75.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2ikhyh75.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Insert your code here\n        return false;\nreturn true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhs4kmvz.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfhs4kmvz.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfhs4kmvz.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfhs4kmvz.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfhs4kmvz.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfhs4kmvz.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // write code here\n        return true;\nreturn true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpybs3tlks.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpybs3tlks.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpybs3tlks.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpybs3tlks.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpybs3tlks.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpybs3tlks.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.isEmpty() ? false : dict.keySet().stream().map(s -> s.toUpperCase()).collect(Collectors.toSet()).equals(dict.keySet())\
    \ || dict.keySet().stream().map(s -> s.toLowerCase()).collect(Collectors.toSet()).equals(dict.keySet());\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1o2i7s0i.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1o2i7s0i.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1o2i7s0i.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1o2i7s0i.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1o2i7s0i.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1o2i7s0i.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean lower = true;\n        boolean upper = true;\n        if\
    \ (dict.isEmpty()) {\n            return false;\n        }\n        for (String\
    \ key : dict.keySet()) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                lower = false;\n            } else {\n                upper\
    \ = false;\n            }\n        }\n        return lower || upper;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplorwle7b.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplorwle7b.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplorwle7b.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplorwle7b.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplorwle7b.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplorwle7b.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n\t\tboolean result = true;\n\t\tboolean flagUpper = false;\n\t\tboolean flagLower\
    \ = false;\n\t\tfor (String key : dict.keySet()) {\n\t\t\tif (flagUpper && flagLower)\
    \ {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (key.equals(key.toUpperCase()))\
    \ {\n\t\t\t\tflagUpper = true;\n\t\t\t} else if (key.equals(key.toLowerCase()))\
    \ {\n\t\t\t\tflagLower = true;\n\t\t\t} else {\n\t\t\t\tresult = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20lt_5a1.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp20lt_5a1.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp20lt_5a1.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp20lt_5a1.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp20lt_5a1.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp20lt_5a1.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean b = true;\n        for (String s : dict.keySet()) {\n   \
    \         if (!s.toLowerCase().equals(s) && !s.toUpperCase().equals(s)) {\n  \
    \              b = false;\n                break;\n            }\n        }\n\
    \        return b;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_23dici.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpb_23dici.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb_23dici.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb_23dici.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpb_23dici.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpb_23dici.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here.\n        int upper = 0;\n        int lower\
    \ = 0;\n        boolean upperCase = false;\n        boolean lowerCase = false;\n\
    \        for (String key : dict.keySet()) {\n            if (key.equals(key.toUpperCase()))\
    \ {\n                upper += 1;\n            }\n            if (key.equals(key.toLowerCase()))\
    \ {\n                lower += 1;\n            }\n        }\n        if (upper\
    \ == dict.size()) {\n            upperCase = true;\n        }\n        if (lower\
    \ == dict.size()) {\n            lowerCase = true;\n        }\n        if ((upperCase\
    \ || lowerCase) && (upper != dict.size() && lower != dict.size())) {\n       \
    \     return false;\n        }\n        return true;\nreturn true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp467x17fh.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp467x17fh.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp467x17fh.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp467x17fh.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp467x17fh.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp467x17fh.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // // Uncomment the following lines when you are ready to test your\
    \ code.\n        // HashMap<String,String> dict1 = new HashMap<String,String>();\n\
    \        // dict1.put(\"a\",\"apple\");\n        // dict1.put(\"b\",\"banana\"\
    );\n        // System.out.println(checkDictCase(dict1));\n        // dict1.clear();\n\
    \        // dict1.put(\"a\",\"apple\");\n        // dict1.put(\"A\",\"banana\"\
    );\n        // dict1.put(\"B\",\"banana\");\n        // System.out.println(checkDictCase(dict1));\n\
    \        // dict1.clear();\n        // dict1.put(\"a\",\"apple\");\n        //\
    \ dict1.put(\"8\",\"banana\");\n        // dict1.put(\"a\",\"apple\");\n     \
    \   // System.out.println(checkDictCase(dict1));\n        // dict1.clear();\n\
    \        // dict1.put(\"Name\",\"John\");\n        // dict1.put(\"Age\",\"36\"\
    );\n        // dict1.put(\"City\",\"Houston\");\n        // System.out.println(checkDictCase(dict1));\n\
    \        // dict1.clear();\n        // dict1.put(\"STATE\",\"NC\");\n        //\
    \ dict1.put(\"ZIP\",\"12345\");\n        // System.out.println(checkDictCase(dict1));\n\
    \        // dict1.clear();\n        // System.out.println(checkDictCase(dict1));\n\
    \        String lower_case_regex = \"^[a-z]+$\";\n        String upper_case_regex\
    \ = \"^[A-Z]+$\";\n        if (dict.isEmpty()) {\n            return false;\n\
    \        }\n        ArrayList<String> keys = new ArrayList<String>(dict.keySet());\n\
    \        boolean all_lower = true;\n        boolean all_upper = true;\n      \
    \  for (String key : keys) {\n            all_lower = all_lower && key.matches(lower_case_regex);\n\
    \            all_upper = all_upper && key.matches(upper_case_regex);\n       \
    \ }\n        return all_lower || all_upper;\nreturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp55930vxc.java:61: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp55930vxc.java:62:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp55930vxc.java:63: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp55930vxc.java:64: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp55930vxc.java:65: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp55930vxc.java:66: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(s -> s.toLowerCase().equals(s)\
    \ || s.toUpperCase().equals(s));\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0fn4unw9.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0fn4unw9.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0fn4unw9.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0fn4unw9.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0fn4unw9.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0fn4unw9.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     for (String key : dict.keySet()) {\n            if (key.equals(key.toLowerCase()))\
    \ {\n                return true;\n            }\n            if (key.equals(key.toUpperCase()))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsriids9p.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpsriids9p.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsriids9p.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsriids9p.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsriids9p.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpsriids9p.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     boolean lowerCase = false;\n        boolean upperCase = false;\n       \
    \ for (String key : dict.keySet()) {\n            if (key.equals(key.toLowerCase()))\
    \ {\n                lowerCase = true;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                upperCase = true;\n            } else {\n               \
    \ return false;\n            }\n        }\n        return (lowerCase && !upperCase)\
    \ || (!lowerCase && upperCase);\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1w0k09t4.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1w0k09t4.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1w0k09t4.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1w0k09t4.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1w0k09t4.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1w0k09t4.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean lowercase = true;\n        boolean uppercase = true;\n  \
    \      for (String key : dict.keySet()) {\n            if (key.toLowerCase().equals(key))\
    \ lowercase = false;\n            if (key.toUpperCase().equals(key)) uppercase\
    \ = false;\n        }\n        return (lowercase || uppercase);\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7otwynhs.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7otwynhs.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7otwynhs.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7otwynhs.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7otwynhs.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7otwynhs.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isUpperCase = false;\n        boolean isLowerCase = false;\n\
    \        if (dict.isEmpty()) {\n            return false;\n        }\n       \
    \ for (Map.Entry<String, String> entry : dict.entrySet()) {\n            if (entry.getKey().equals(entry.getKey().toUpperCase()))\
    \ {\n                isUpperCase = true;\n            }\n            if (entry.getKey().equals(entry.getKey().toLowerCase()))\
    \ {\n                isLowerCase = true;\n            }\n        }\n        if\
    \ ((isUpperCase && isLowerCase) || (!isUpperCase && !isLowerCase)) {\n       \
    \     return false;\n        }\n        return true;\nreturn true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptgcyjkas.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmptgcyjkas.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptgcyjkas.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptgcyjkas.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptgcyjkas.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptgcyjkas.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        throw new UnsupportedOperationException(\"Not implemented yet.\"\
    );\nreturn true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzjbnjrzd.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpzjbnjrzd.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzjbnjrzd.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzjbnjrzd.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpzjbnjrzd.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpzjbnjrzd.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // remove duplicates and check to see that all keys are strings\n\
    \        // that only have letters\n        HashSet<String> keys = new HashSet<>(dict.keySet());\n\
    \        for (String key : keys) {\n            // check that all keys are strings\
    \ that only have letters\n            String lcKey = key.toLowerCase();\n    \
    \        String ucKey = key.toUpperCase();\n            // check that all keys\
    \ are string with only letters\n            if (key.equals(lcKey) || key.equals(ucKey))\
    \ {\n                continue;\n            } else {\n                return false;\n\
    \            }\n        }\n        // If all keys are all lower case or all upper\
    \ case\n        boolean lowerCase = true;\n        boolean upperCase = true;\n\
    \        for (String key : keys) {\n            if (Character.isLowerCase(key.charAt(0)))\
    \ {\n                upperCase = false;\n            } else {\n              \
    \  lowerCase = false;\n            }\n        }\n        return lowerCase || upperCase;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy62355au.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpy62355au.java:48:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpy62355au.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpy62355au.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpy62355au.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpy62355au.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt3ic4kex.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpt3ic4kex.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt3ic4kex.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt3ic4kex.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt3ic4kex.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpt3ic4kex.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1p9rwnxy.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp1p9rwnxy.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1p9rwnxy.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1p9rwnxy.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp1p9rwnxy.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp1p9rwnxy.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        return false;\nreturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp11lm2k43.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp11lm2k43.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp11lm2k43.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp11lm2k43.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp11lm2k43.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp11lm2k43.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        return dict.keySet().stream().map(String::toUpperCase).collect(Collectors.toSet()).size()\
    \ == 1 ||\n               dict.keySet().stream().map(String::toLowerCase).collect(Collectors.toSet()).size()\
    \ == 1;\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbb0qcup.java:25: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpkbb0qcup.java:26:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkbb0qcup.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkbb0qcup.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkbb0qcup.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpkbb0qcup.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        boolean allLowerCase =\
    \ true;\n        boolean allUpperCase = true;\n        for (String key : dict.keySet())\
    \ {\n            allLowerCase = allLowerCase && key.equals(key.toLowerCase());\n\
    \            allUpperCase = allUpperCase && key.equals(key.toUpperCase());\n \
    \       }\n        return allLowerCase || allUpperCase;\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpywnfn1ma.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpywnfn1ma.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpywnfn1ma.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpywnfn1ma.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpywnfn1ma.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpywnfn1ma.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n\t\t// TODO: Fill in this function.\n\t\tfor(Map.Entry<String, String> entry\
    \ : dict.entrySet()) {\n\t\t\tString key = entry.getKey();\n\t\t\tString value\
    \ = entry.getValue();\n\t\t\tif(!value.equals(\"apple\") || !value.equals(\"banana\"\
    )) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(key.equals(\"a\") || key.equals(\"\
    b\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n        return\
    \ false;\nreturn true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2xr1l0k.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpm2xr1l0k.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm2xr1l0k.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm2xr1l0k.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm2xr1l0k.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpm2xr1l0k.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return !dict.isEmpty() && dict.keySet().stream().map(String::toUpperCase).allMatch(dict.keySet()::contains);\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpksug4p4h.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpksug4p4h.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpksug4p4h.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpksug4p4h.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpksug4p4h.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpksug4p4h.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        HashMap<String, String> upperDict = new HashMap<String, String>();\n\
    \        HashMap<String, String> lowerDict = new HashMap<String, String>();\n\
    \        String[] lowerKeys = dict.keySet().toArray(new String[dict.size()]);\n\
    \        String[] upperKeys = dict.keySet().toArray(new String[dict.size()]);\n\
    \        for (int i = 0; i < dict.size(); i++) {\n            upperKeys[i] = upperKeys[i].toUpperCase();\n\
    \            lowerKeys[i] = lowerKeys[i].toLowerCase();\n        }\n        for\
    \ (int i = 0; i < dict.size(); i++) {\n            upperDict.put(upperKeys[i],\
    \ dict.get(upperKeys[i]));\n            lowerDict.put(lowerKeys[i], dict.get(lowerKeys[i]));\n\
    \        }\n        if (dict.keySet().equals(upperDict.keySet()) || dict.keySet().equals(lowerDict.keySet()))\
    \ {\n            return true;\n        }\n        return false;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvs7399yn.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpvs7399yn.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvs7399yn.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvs7399yn.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvs7399yn.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpvs7399yn.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Type your code here\n        // Input the dictionary\n       \
    \ // Implement the algorithm\n        int number_of_lowercase_letters = 0;\n \
    \       int number_of_uppercase_letters = 0;\n        for (String key : dict.keySet())\
    \ {\n            int number_of_lowercase_letters_in_key = 0;\n            int\
    \ number_of_uppercase_letters_in_key = 0;\n            for (int index = 0; index\
    \ < key.length(); index += 1) {\n                char character = key.charAt(index);\n\
    \                if (character >= 'a' && character <= 'z') {\n               \
    \     number_of_lowercase_letters_in_key += 1;\n                } else if (character\
    \ >= 'A' && character <= 'Z') {\n                    number_of_uppercase_letters_in_key\
    \ += 1;\n                }\n            }\n            if (number_of_lowercase_letters_in_key\
    \ > 0 &&\n                number_of_uppercase_letters_in_key > 0) {\n        \
    \        return false;\n            } else if (number_of_lowercase_letters_in_key\
    \ > 0) {\n                number_of_lowercase_letters += 1;\n            } else\
    \ if (number_of_uppercase_letters_in_key > 0) {\n                number_of_uppercase_letters\
    \ += 1;\n            }\n        }\n        return number_of_lowercase_letters\
    \ == 0 ||\n               number_of_uppercase_letters == 0;\nreturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpetc43zuj.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpetc43zuj.java:50:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpetc43zuj.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpetc43zuj.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpetc43zuj.java:53: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpetc43zuj.java:54: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        String previousKey = null;\n\
    \        String previousUpperKey = null;\n        String previousLowerKey = null;\n\
    \        String previousValue = null;\n        String previousUpperValue = null;\n\
    \        String previousLowerValue = null;\n        for (Map.Entry<String,String>\
    \ entry : dict.entrySet()) {\n            String key = entry.getKey();\n     \
    \       String value = entry.getValue();\n            if (previousKey == null)\
    \ {\n                previousKey = key;\n                previousUpperKey = key.toUpperCase();\n\
    \                previousLowerKey = key.toLowerCase();\n                previousValue\
    \ = value;\n                previousUpperValue = value.toUpperCase();\n      \
    \          previousLowerValue = value.toLowerCase();\n            } else {\n \
    \               if (!key.equals(previousKey) && !key.equals(previousUpperKey)\
    \ && !key.equals(previousLowerKey)) {\n                    return false;\n   \
    \             }\n                if (!value.equals(previousValue) && !value.equals(previousUpperValue)\
    \ && !value.equals(previousLowerValue)) {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpafn_tcun.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpafn_tcun.java:50:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpafn_tcun.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpafn_tcun.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpafn_tcun.java:53: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpafn_tcun.java:54: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprtjkmn1b.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmprtjkmn1b.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprtjkmn1b.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprtjkmn1b.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprtjkmn1b.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmprtjkmn1b.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here.\n        return true;\nreturn true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz9ldl51k.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpz9ldl51k.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz9ldl51k.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz9ldl51k.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz9ldl51k.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpz9ldl51k.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     for (String key : dict.keySet()) {\n            if (key.toUpperCase().equals(key))\
    \ {\n                for (String key2 : dict.keySet()) {\n                   \
    \ if (!key2.toUpperCase().equals(key2)) {\n                        return false;\n\
    \                    }\n                }\n                return true;\n    \
    \        }\n            if (key.toLowerCase().equals(key)) {\n               \
    \ for (String key2 : dict.keySet()) {\n                    if (!key2.toLowerCase().equals(key2))\
    \ {\n                        return false;\n                    }\n          \
    \      }\n                return true;\n            }\n        }\n        return\
    \ false;\nreturn true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplkdg77yy.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmplkdg77yy.java:45:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplkdg77yy.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplkdg77yy.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmplkdg77yy.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmplkdg77yy.java:49: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if(dict.size() == 0) {\n        \
    \    result = false;\n        }\n        else {\n            Set<String> set =\
    \ dict.keySet();\n            boolean allUpper = true;\n            boolean allLower\
    \ = true;\n            for(String key : set) {\n                if(!(key.toUpperCase().equals(key)))\
    \ {\n                    allUpper = false;\n                }\n              \
    \  if(!(key.toLowerCase().equals(key))) {\n                    allLower = false;\n\
    \                }\n            }\n            if(!(allUpper ^ allLower)) {\n\
    \                result = false;\n            }\n        }\n        return result;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfixjqspo.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfixjqspo.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfixjqspo.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfixjqspo.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfixjqspo.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfixjqspo.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        if (dict.size() == 1)\
    \ return true;\n        final int[] count = {0};\n        if (dict.keySet().stream().allMatch(key\
    \ -> key.equals(key.toLowerCase()))) count[0]++;\n        if (dict.keySet().stream().allMatch(key\
    \ -> key.equals(key.toUpperCase()))) count[0]++;\n        return count[0] > 0;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp28hlejv_.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp28hlejv_.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp28hlejv_.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp28hlejv_.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp28hlejv_.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp28hlejv_.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (Map.Entry<String, String> entry\
    \ : dict.entrySet()) {\n            if (entry.getKey().equals(entry.getKey().toLowerCase()))\
    \ {\n                result = true;\n            } else if (entry.getKey().equals(entry.getKey().toUpperCase()))\
    \ {\n                result = true;\n            } else {\n                result\
    \ = false;\n            }\n        }\n        return result;\nreturn true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_19bqv_c.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_19bqv_c.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_19bqv_c.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_19bqv_c.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_19bqv_c.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_19bqv_c.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (!key.toLowerCase().equals(key) && !key.toUpperCase().equals(key))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_vpf5_al.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_vpf5_al.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_vpf5_al.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_vpf5_al.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_vpf5_al.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_vpf5_al.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     boolean upper = false;\n        boolean lower = false;\n        for (String\
    \ key : dict.keySet()) {\n            String keyUpper = key.toUpperCase();\n \
    \           String keyLower = key.toLowerCase();\n            upper = upper ||\
    \ key.equals(keyUpper);\n            lower = lower || key.equals(keyLower);\n\
    \        }\n        return upper != lower;\nreturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm64u3hwp.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpm64u3hwp.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm64u3hwp.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm64u3hwp.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpm64u3hwp.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpm64u3hwp.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // write your code here\n        return false;\nreturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlis0_wp.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpvlis0_wp.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvlis0_wp.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvlis0_wp.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvlis0_wp.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpvlis0_wp.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your Code Here\n        Set<String> keySet = dict.keySet();\n\
    \        List<String> keyList = new ArrayList<String>(keySet);\n        boolean\
    \ x = true;\n        boolean y = true;\n        if(keyList.size() == 0) {\n  \
    \          return false;\n        }\n        for(int i = 0; i < keyList.size();\
    \ i++) {\n            if(!keyList.get(i).equals(keyList.get(i).toLowerCase()))\
    \ {\n                x = false;\n            }\n            if(!keyList.get(i).equals(keyList.get(i).toUpperCase()))\
    \ {\n                y = false;\n            }\n        }\n        if(x == true\
    \ || y == true) {\n            return true;\n        }\n        return false;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp94onloue.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp94onloue.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp94onloue.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp94onloue.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp94onloue.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp94onloue.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return Arrays.stream(dict.keySet().toArray()).map(s -> s.getClass().getName()).distinct().count()\
    \ == 1;\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpda7_f58x.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpda7_f58x.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpda7_f58x.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpda7_f58x.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpda7_f58x.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpda7_f58x.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here\n        return true;\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpowvcs3ut.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpowvcs3ut.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpowvcs3ut.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpowvcs3ut.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpowvcs3ut.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpowvcs3ut.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n\t\tboolean allUpper = true;\n\t\tboolean allLower = true;\n\t\tfor (String\
    \ key : dict.keySet()) {\n\t\t\tif (!key.toUpperCase().equals(key)) {\n\t\t\t\t\
    allUpper = false;\n\t\t\t}\n\t\t\tif (!key.toLowerCase().equals(key)) {\n\t\t\t\
    \tallLower = false;\n\t\t\t}\n\t\t}\n\t\treturn allUpper || allLower;\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_u745ayy.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_u745ayy.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_u745ayy.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_u745ayy.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_u745ayy.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_u745ayy.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().map(x -> x.equals(x.toLowerCase())\
    \ || x.equals(x.toUpperCase())).reduce(true, (x,y) -> x && y);\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_65a8xt5.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_65a8xt5.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_65a8xt5.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_65a8xt5.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_65a8xt5.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_65a8xt5.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg01g7_mp.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpg01g7_mp.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg01g7_mp.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg01g7_mp.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg01g7_mp.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpg01g7_mp.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean all_lower = true;\n        boolean all_upper = true;\n  \
    \      for (String key : dict.keySet()) {\n            all_lower = all_lower &&\
    \ key.equals(key.toLowerCase());\n            all_upper = all_upper && key.equals(key.toUpperCase());\n\
    \        }\n        return all_lower || all_upper;\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzr8x5q2.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdzr8x5q2.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdzr8x5q2.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdzr8x5q2.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdzr8x5q2.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdzr8x5q2.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     boolean all_upper = true;\n        boolean all_lower = true;\n        for\
    \ (String k : dict.keySet()) {\n            if (Character.isUpperCase(k.charAt(0)))\
    \ {\n                all_lower = false;\n            } else {\n              \
    \  all_upper = false;\n            }\n        }\n        return (all_upper ||\
    \ all_lower);\nreturn true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp66h3iheu.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp66h3iheu.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp66h3iheu.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp66h3iheu.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp66h3iheu.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp66h3iheu.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        for (String key : dict.keySet()) {\n            // take the first\
    \ character of the first key\n            char ch = key.charAt(0);\n         \
    \   // check if it is uppercase or lowercase\n            if (Character.isUpperCase(ch))\
    \ {\n                // check the rest of the keys are upper case\n          \
    \      for (String key2 : dict.keySet()) {\n                    if (!key2.equals(key))\
    \ {\n                        if (!key2.equals(key2.toUpperCase())) {\n       \
    \                     return false;\n                        }\n             \
    \       }\n                }\n            } else {\n                // check the\
    \ rest of the keys are lower case\n                for (String key2 : dict.keySet())\
    \ {\n                    if (!key2.equals(key)) {\n                        if\
    \ (!key2.equals(key2.toLowerCase())) {\n                            return false;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            return true;\n        }\n        return false;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp50cuppk_.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp50cuppk_.java:49:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp50cuppk_.java:50: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp50cuppk_.java:51: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp50cuppk_.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp50cuppk_.java:53: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     boolean isAllLower = true;\n        boolean isAllUpper = true;\n       \
    \ for (String key : dict.keySet()) {\n            isAllLower = isAllLower && key.equals(key.toLowerCase());\n\
    \            isAllUpper = isAllUpper && key.equals(key.toUpperCase());\n     \
    \   }\n        return isAllLower || isAllUpper;\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ule0d1y.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp7ule0d1y.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7ule0d1y.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7ule0d1y.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp7ule0d1y.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp7ule0d1y.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt8i2k5qv.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpt8i2k5qv.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt8i2k5qv.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt8i2k5qv.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpt8i2k5qv.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpt8i2k5qv.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean lowerCase = false;\n        boolean upperCase = false;\n\
    \        for (Map.Entry<String,String> entry : dict.entrySet()) {\n          \
    \  if (entry.getKey().matches(\"^[a-z]+$\")) {\n                lowerCase = true;\n\
    \            } else if (entry.getKey().matches(\"^[A-Z]+$\")) {\n            \
    \    upperCase = true;\n            } else {\n                return false;\n\
    \            }\n        }\n        return lowerCase && upperCase;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbxaq8ldb.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpbxaq8ldb.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbxaq8ldb.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbxaq8ldb.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbxaq8ldb.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbxaq8ldb.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(x -> x.toLowerCase().equals(x))\
    \ ||\n               dict.keySet().stream().allMatch(x -> x.toUpperCase().equals(x));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi4lcfio2.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpi4lcfio2.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi4lcfio2.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi4lcfio2.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi4lcfio2.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpi4lcfio2.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        int lowercase = 0;\n        int uppercase = 0;\n        // your code\
    \ here\n        for (String key : dict.keySet()) {\n            if (key.equals(key.toLowerCase()))\n\
    \                lowercase++;\n            else if (key.equals(key.toUpperCase()))\n\
    \                uppercase++;\n            else\n                return false;\n\
    \        }\n        if (lowercase == 0 && uppercase == 0)\n            return\
    \ false;\n        else if (lowercase == 0 || uppercase == 0)\n            return\
    \ true;\n        else\n            return false;\nreturn true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmu3gxlz5.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpmu3gxlz5.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmu3gxlz5.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmu3gxlz5.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmu3gxlz5.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpmu3gxlz5.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpivecoyr0.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpivecoyr0.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpivecoyr0.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpivecoyr0.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpivecoyr0.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpivecoyr0.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        int c = 0;\n        for (Map.Entry<String,String> s : dict.entrySet())\
    \ {\n            if (s.getKey().equals(s.getKey().toLowerCase())) {\n        \
    \        c += 1;\n            }\n        }\n        return (c == dict.size() ||\
    \ c == 0);\nreturn true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgpiy3wk_.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpgpiy3wk_.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgpiy3wk_.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgpiy3wk_.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgpiy3wk_.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpgpiy3wk_.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n    \treturn true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpizbjvums.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpizbjvums.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpizbjvums.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpizbjvums.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpizbjvums.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpizbjvums.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return Arrays.stream(dict.keySet().toArray()).allMatch(a -> ((String)a).equals(((String)a).toLowerCase()))\
    \ || Arrays.stream(dict.keySet().toArray()).allMatch(a -> ((String)a).equals(((String)a).toUpperCase()));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppysk30xu.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppysk30xu.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppysk30xu.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppysk30xu.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppysk30xu.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppysk30xu.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg0732w7g.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpg0732w7g.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg0732w7g.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg0732w7g.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpg0732w7g.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpg0732w7g.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your Code Here\n        throw new UnsupportedOperationException(\"\
    Method not implemented\");\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfk38xibr.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfk38xibr.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfk38xibr.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfk38xibr.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfk38xibr.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfk38xibr.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Fill in your code below, and return the correct output.\n    \
    \    // Do not change anything above this line.\n        // Your code must be\
    \ in exactly 2 lines.\n        return dict.isEmpty() ? false : dict.keySet().stream().allMatch(x\
    \ -> x.equals(x.toLowerCase())) || dict.keySet().stream().allMatch(x -> x.equals(x.toUpperCase()));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkihgoe5q.java:26: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpkihgoe5q.java:27:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkihgoe5q.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkihgoe5q.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpkihgoe5q.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpkihgoe5q.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(x -> x.equals(x.toLowerCase()))\
    \ ||\n            dict.keySet().stream().allMatch(x -> x.equals(x.toUpperCase()));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9pph4w62.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9pph4w62.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9pph4w62.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9pph4w62.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9pph4w62.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9pph4w62.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: Fill in the body of this function\n        return false;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppghcwzhf.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppghcwzhf.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppghcwzhf.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppghcwzhf.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppghcwzhf.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppghcwzhf.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n    \tint lower = 0;\n    \tint upper = 0;\n    \tfor (Map.Entry<String,\
    \ String> x : dict.entrySet()) {\n    \t\tif (x.getKey().equals(x.getKey().toLowerCase()))\
    \ {\n    \t\t\tlower++;\n    \t\t}\n    \t\telse if (x.getKey().equals(x.getKey().toUpperCase()))\
    \ {\n    \t\t\tupper++;\n    \t\t}\n    \t}\n    \treturn (lower == dict.size()\
    \ || upper == dict.size());\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3knz_p4l.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3knz_p4l.java:34:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3knz_p4l.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3knz_p4l.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3knz_p4l.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3knz_p4l.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean check = true;\n        int lowNum = 0;\n        int upNum\
    \ = 0;\n        int notNum = 0;\n        for (String i : dict.keySet()) {\n  \
    \          if (i.toLowerCase().equals(i)) {\n                lowNum++;\n     \
    \       } else if (i.toUpperCase().equals(i)) {\n                upNum++;\n  \
    \          } else {\n                notNum++;\n            }\n        }\n   \
    \     if (lowNum > 0 && upNum > 0) {\n            check = false;\n        } else\
    \ if (notNum > 0) {\n            check = false;\n        }\n        return check;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppn_f1w78.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmppn_f1w78.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppn_f1w78.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppn_f1w78.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmppn_f1w78.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmppn_f1w78.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // write code here to check if the given dictionary is valid\n  \
    \      // according to the specification given above. The code should\n      \
    \  // return True or False depending on the validity of the\n        // dictionary.\n\
    \        if (dict.isEmpty()) {\n            return false;\n        }\n       \
    \ boolean one = false;\n        for (Map.Entry<String, String> entry : dict.entrySet())\
    \ {\n            String key = entry.getKey();\n            if (key.equals(key.toLowerCase()))\
    \ {\n                one = true;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                one = false;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return true;\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdn9l_g5.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpfdn9l_g5.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfdn9l_g5.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfdn9l_g5.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpfdn9l_g5.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpfdn9l_g5.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllUpper = false;\n        boolean isAllLower = false;\n\
    \        if (dict.size()==0) {\n            return false;\n        }\n       \
    \ isAllUpper = dict.keySet().stream().allMatch(s -> s.equals(s.toUpperCase()));\n\
    \        isAllLower = dict.keySet().stream().allMatch(s -> s.equals(s.toLowerCase()));\n\
    \        return isAllUpper || isAllLower;\nreturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3gavc2n5.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3gavc2n5.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3gavc2n5.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3gavc2n5.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3gavc2n5.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3gavc2n5.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(str -> str.toLowerCase().equals(str))\
    \ || dict.keySet().stream().allMatch(str -> str.toUpperCase().equals(str));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpag8wonk_.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpag8wonk_.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpag8wonk_.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpag8wonk_.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpag8wonk_.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpag8wonk_.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // your code goes here\n        return false;\nreturn true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmp4i_6fi.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpmp4i_6fi.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmp4i_6fi.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmp4i_6fi.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmp4i_6fi.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpmp4i_6fi.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // @@@@ TODO: Write code here.\n        return false;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp451_skwr.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp451_skwr.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp451_skwr.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp451_skwr.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp451_skwr.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp451_skwr.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        int count = 0;\n        for (String key : dict.keySet()) {\n    \
    \        if (key.toUpperCase().equals(key)) {\n                count++;\n    \
    \        }\n        }\n        return count == dict.size() || count == 0;\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpadckmeth.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpadckmeth.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpadckmeth.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpadckmeth.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpadckmeth.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpadckmeth.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpluitq2h5.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpluitq2h5.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpluitq2h5.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpluitq2h5.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpluitq2h5.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpluitq2h5.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n \
    \       List<Boolean> caseList = new ArrayList<>();\n        for (String key :\
    \ dict.keySet()) {\n            caseList.add(Character.isUpperCase(key.charAt(0)));\n\
    \        }\n\n        HashSet<Boolean> caseSet = new HashSet<>(caseList);\n  \
    \      if (caseSet.size() > 1) {\n            return false;\n        }\n\n   \
    \     return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9yyfy5nj.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9yyfy5nj.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9yyfy5nj.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9yyfy5nj.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9yyfy5nj.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9yyfy5nj.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     int ctr = 0;\n        Set<String> keys = dict.keySet();\n        boolean\
    \ isLowerCase = keys.iterator().next().equals(keys.iterator().next().toLowerCase());\n\
    \        for (String key : keys) {\n            if (isLowerCase) {\n         \
    \       if (!key.equals(key.toLowerCase())) {\n                    return false;\n\
    \                }\n            } else {\n                if (!key.equals(key.toUpperCase()))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3s846bgq.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp3s846bgq.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3s846bgq.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3s846bgq.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp3s846bgq.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp3s846bgq.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        int nonUpper = 0;\n        int nonLower\
    \ = 0;\n        for (Map.Entry<String, String> entry : dict.entrySet()) {\n  \
    \          String key = entry.getKey();\n            for (int i = 0; i < key.length();\
    \ i++) {\n                if (Character.isUpperCase(key.charAt(i))) {\n      \
    \              nonUpper++;\n                } else {\n                    nonLower++;\n\
    \                }\n            }\n        }\n        return nonUpper == 0 ||\
    \ nonLower == 0;\nreturn true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_9_vn5jz.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_9_vn5jz.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_9_vn5jz.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_9_vn5jz.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_9_vn5jz.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_9_vn5jz.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        throw new UnsupportedOperationException(\"Waiting to be implemented.\"\
    );\nreturn true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpss0l82_m.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpss0l82_m.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpss0l82_m.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpss0l82_m.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpss0l82_m.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpss0l82_m.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your solution goes here\n        int uppercase = 0;\n        int\
    \ lowercase = 0;\n        for (String key : dict.keySet()) {\n            if (key.toUpperCase().equals(key))\
    \ {\n                uppercase += 1;\n            } else if (key.toLowerCase().equals(key))\
    \ {\n                lowercase += 1;\n            }\n        }\n        if (uppercase\
    \ == dict.size() || lowercase == dict.size()) {\n            return true;\n  \
    \      } else {\n            return false;\n        }\nreturn true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdriayjah.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdriayjah.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdriayjah.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdriayjah.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdriayjah.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdriayjah.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        boolean lower = dict.keySet().stream().allMatch(key\
    \ -> key.equals(key.toLowerCase()));\n        boolean upper = dict.keySet().stream().allMatch(key\
    \ -> key.equals(key.toUpperCase()));\n        return lower || upper;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_wdutyb.java:26: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpk_wdutyb.java:27:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpk_wdutyb.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpk_wdutyb.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpk_wdutyb.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpk_wdutyb.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() > 0) {\n        \
    \    String key = dict.keySet().iterator().next();\n            String test =\
    \ key.toUpperCase();\n            if (key.equals(test)) {\n                for\
    \ (String x : dict.keySet()) {\n                    if (!x.equals(x.toUpperCase()))\
    \ {\n                        result = false;\n                        break;\n\
    \                    }\n                }\n            } else {\n            \
    \    for (String x : dict.keySet()) {\n                    if (!x.equals(x.toLowerCase()))\
    \ {\n                        result = false;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\nreturn true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp52rkgkdg.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp52rkgkdg.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp52rkgkdg.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp52rkgkdg.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp52rkgkdg.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp52rkgkdg.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgt57xxxj.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpgt57xxxj.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgt57xxxj.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgt57xxxj.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpgt57xxxj.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpgt57xxxj.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Check if dict is empty.\n        if (dict.isEmpty()) {\n     \
    \       return false;\n        }\n\n        // Store keys in list.\n        List<String>\
    \ keys = new ArrayList<String>(dict.keySet());\n\n        // Check if all keys\
    \ are upper case.\n        boolean allUpper = true;\n        for (String key :\
    \ keys) {\n            if (!key.equals(key.toUpperCase())) {\n               \
    \ allUpper = false;\n                break;\n            }\n        }\n\n    \
    \    // Check if all keys are lower case.\n        boolean allLower = true;\n\
    \        for (String key : keys) {\n            if (!key.equals(key.toLowerCase()))\
    \ {\n                allLower = false;\n                break;\n            }\n\
    \        }\n\n        // Return True if all keys are upper case or all keys are\
    \ lower case.\n        if (allUpper || allLower) {\n            return true;\n\
    \        } else {\n            return false;\n        }\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90ne_o8g.java:54: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp90ne_o8g.java:55:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp90ne_o8g.java:56: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp90ne_o8g.java:57: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp90ne_o8g.java:58: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp90ne_o8g.java:59: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isUpperCase = true;\n        for (Map.Entry<String, String>\
    \ entry : dict.entrySet()) {\n            String key = entry.getKey();\n     \
    \       if (key.equals(key.toLowerCase())) {\n                isUpperCase = false;\n\
    \                break;\n            }\n        }\n        if (isUpperCase) {\n\
    \            return true;\n        }\n        for (Map.Entry<String, String> entry\
    \ : dict.entrySet()) {\n            String key = entry.getKey();\n           \
    \ if (key.equals(key.toUpperCase())) {\n                isUpperCase = true;\n\
    \                break;\n            }\n        }\n        return isUpperCase;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpre4087i7.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpre4087i7.java:42:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpre4087i7.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpre4087i7.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpre4087i7.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpre4087i7.java:46: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.isEmpty() ? false : dict.keySet().stream().allMatch(k\
    \ -> k.equals(k.toLowerCase())) || dict.keySet().stream().allMatch(k -> k.equals(k.toUpperCase()));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnruxr8ab.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpnruxr8ab.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnruxr8ab.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnruxr8ab.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpnruxr8ab.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpnruxr8ab.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2dj9leox.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2dj9leox.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2dj9leox.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2dj9leox.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2dj9leox.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2dj9leox.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        String [] values = new String[2];\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key.equals(key.toLowerCase()))\
    \ {\n                values[0] = key;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                values[1] = key;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return values[0] != null || values[1]\
    \ != null;\nreturn true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa6opfymd.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpa6opfymd.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpa6opfymd.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpa6opfymd.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpa6opfymd.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpa6opfymd.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // We will track the number of keys as either upper-case or lower-case\n\
    \        int upper = 0;\n        int lower = 0;\n        // Iterate through the\
    \ dictionary to see which keys are upper-case\n        // and which are lower-case.\
    \  Keep track of each with the counter\n        // variables upper and lower.\n\
    \        for (String key : dict.keySet()) {\n            if (key.toUpperCase().equals(key))\
    \ {\n                upper++;\n            } else {\n                lower++;\n\
    \            }\n        }\n        // Return True if all keys are upper-case,\
    \ lower-case, or if the\n        // dictionary is empty, else return False.\n\
    \        return (upper == dict.size() || lower == dict.size() || dict.size() ==\
    \ 0);\nreturn true;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpabvgq2i5.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpabvgq2i5.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpabvgq2i5.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpabvgq2i5.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpabvgq2i5.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpabvgq2i5.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // loop through the keys, converting each one to lower case\n   \
    \     // and comparing the value that is returned with the key itself\n      \
    \  // if the value returned is not equal to the key, then return false\n     \
    \   for (String s : dict.keySet()) {\n            if (!(s.toLowerCase().equals(s)))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq8l34712.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpq8l34712.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpq8l34712.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpq8l34712.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpq8l34712.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpq8l34712.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        String anyKey = dict.keySet().iterator().next();\n\
    \        String anyValue = dict.get(anyKey);\n        String testString = anyKey\
    \ + anyValue;\n        if(!testString.equals(testString.toLowerCase()) && !testString.equals(testString.toUpperCase()))\
    \ {\n            result = false;\n        }\n        return result;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv16ln8k0.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpv16ln8k0.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv16ln8k0.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv16ln8k0.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv16ln8k0.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpv16ln8k0.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5s1bre0v.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5s1bre0v.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5s1bre0v.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5s1bre0v.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5s1bre0v.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5s1bre0v.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean allUpper = true;\n        boolean allLower = true;\n    \
    \    for (String s : dict.keySet()) {\n            if (s.equals(s.toUpperCase()))\n\
    \                allLower = false;\n            else\n                allUpper\
    \ = false;\n        }\n        return dict.size() != 0 && (allUpper || allLower);\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcz61ghow.java:31: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpcz61ghow.java:32:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcz61ghow.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcz61ghow.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcz61ghow.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpcz61ghow.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE GOES HERE\n        boolean isUpper = true;\n       \
    \ boolean isLower = true;\n        if (dict.isEmpty()) return false;\n       \
    \ else {\n            String[] keys = dict.keySet().toArray(new String[dict.size()]);\n\
    \            for (int i = 0; i < keys.length; i++) {\n                if (!Character.isUpperCase(keys[i].charAt(0)))\
    \ isUpper = false;\n                if (!Character.isLowerCase(keys[i].charAt(0)))\
    \ isLower = false;\n            }\n            return isUpper ^ isLower;\n   \
    \     }\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz1v_0l5a.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpz1v_0l5a.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz1v_0l5a.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz1v_0l5a.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz1v_0l5a.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpz1v_0l5a.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // write your code here\n        // return true if the dict has all\
    \ lowercase keys\n        // return false if the dict has all uppercase keys\n\
    \        // if mixed or empty, return false\n        return true;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp5yur2w8.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpp5yur2w8.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpp5yur2w8.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpp5yur2w8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpp5yur2w8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpp5yur2w8.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE GOES HERE\n        //return true;\n        if(dict.isEmpty())\n\
    \            return false;\n        else if(dict.keySet().stream().allMatch(k\
    \ -> k.equals(k.toLowerCase())) || dict.keySet().stream().allMatch(k -> k.equals(k.toUpperCase())))\n\
    \            return true;\n        else\n            return false;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ab29lpy.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2ab29lpy.java:31:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2ab29lpy.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2ab29lpy.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2ab29lpy.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2ab29lpy.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean allLower = true;\n        boolean allUpper = true;\n    \
    \    for (String key : dict.keySet()) {\n            allLower = allLower && key.toLowerCase().equals(key);\n\
    \            allUpper = allUpper && key.toUpperCase().equals(key);\n        }\n\
    \        return allLower || allUpper;\nreturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphn34a74o.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphn34a74o.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphn34a74o.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphn34a74o.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphn34a74o.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphn34a74o.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<Character> set = new\
    \ HashSet<>();\n        for (String key : dict.keySet())\n            for (char\
    \ c : key.toCharArray())\n                set.add(c);\n        return (set.size()\
    \ == 1 && set.contains('a')) || (set.size() == 1 && set.contains('A'));\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubdnavm5.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpubdnavm5.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpubdnavm5.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpubdnavm5.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpubdnavm5.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpubdnavm5.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isLower = false;\n        boolean isUpper = false;\n    \
    \    for (String k : dict.keySet()) {\n            if (k.toLowerCase().equals(k))\
    \ {\n                isLower = true;\n            } else if (k.toUpperCase().equals(k))\
    \ {\n                isUpper = true;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return isLower ^ isUpper;\nreturn\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphetc1509.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmphetc1509.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphetc1509.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphetc1509.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmphetc1509.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmphetc1509.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n      Set<String> keySet = dict.keySet();\n      for (String key : keySet)\
    \ {\n        if (!key.equals(key.toLowerCase()) && !key.equals(key.toUpperCase()))\
    \ {\n          return false;\n        }\n      }\n      return true;\nreturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjvc889t.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpbjvc889t.java:30:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbjvc889t.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbjvc889t.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbjvc889t.java:33: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbjvc889t.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here\n        boolean upperCase = true;\n     \
    \   boolean lowerCase = true;\n        for (String key : dict.keySet()) {\n  \
    \          if (!key.equals(key.toUpperCase())) {\n                upperCase =\
    \ false;\n            }\n            if (!key.equals(key.toLowerCase())) {\n \
    \               lowerCase = false;\n            }\n        }\n        return upperCase\
    \ || lowerCase;\nreturn true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyjucahs4.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpyjucahs4.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpyjucahs4.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpyjucahs4.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpyjucahs4.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpyjucahs4.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n\t\treturn true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsogd_ble.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpsogd_ble.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsogd_ble.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsogd_ble.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpsogd_ble.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpsogd_ble.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // <-- Your code here.\n        return false;\nreturn true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoub0amt6.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpoub0amt6.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpoub0amt6.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpoub0amt6.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpoub0amt6.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpoub0amt6.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo3xnrvyo.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpo3xnrvyo.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo3xnrvyo.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo3xnrvyo.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpo3xnrvyo.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpo3xnrvyo.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\nreturn true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9wny3fh.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpx9wny3fh.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx9wny3fh.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx9wny3fh.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpx9wny3fh.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpx9wny3fh.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        boolean isLower = true;\n      \
    \  for (Map.Entry<String, String> entry : dict.entrySet()) {\n            String\
    \ key = entry.getKey();\n            String value = entry.getValue();\n      \
    \      if (Character.isUpperCase(key.charAt(0))) {\n                isLower =\
    \ false;\n                break;\n            }\n        }\n        if (isLower)\
    \ {\n            for (Map.Entry<String, String> entry : dict.entrySet()) {\n \
    \               String key = entry.getKey();\n                String value = entry.getValue();\n\
    \                if (Character.isLowerCase(key.charAt(0))) {\n               \
    \     return true;\n                }\n            }\n        } else {\n     \
    \       for (Map.Entry<String, String> entry : dict.entrySet()) {\n          \
    \      String key = entry.getKey();\n                String value = entry.getValue();\n\
    \                if (Character.isUpperCase(key.charAt(0))) {\n               \
    \     return true;\n                }\n            }\n        }\n        return\
    \ false;\nreturn true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaz45xdw3.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpaz45xdw3.java:51:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpaz45xdw3.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpaz45xdw3.java:53: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpaz45xdw3.java:54: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpaz45xdw3.java:55: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE GOES HERE\n        boolean flag = true;\n        for(String\
    \ key : dict.keySet()){\n            for(int i = 0; i < key.length(); i++){\n\
    \                char c = key.charAt(i);\n                if(Character.isUpperCase(c)){\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n            }\n        }\n        return flag;\nreturn true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbubjtjpa.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpbubjtjpa.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbubjtjpa.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbubjtjpa.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbubjtjpa.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbubjtjpa.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        List<String> keyList = new ArrayList<>(dict.keySet());\n\
    \        if (keyList.size() < 1) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < keyList.size(); i++) {\n            if (keyList.get(i).equals(keyList.get(i).toLowerCase()))\
    \ {\n                for (int j = 0; j < keyList.size(); j++) {\n            \
    \        if (!keyList.get(j).equals(keyList.get(j).toLowerCase())) {\n       \
    \                 return false;\n                    }\n                }\n  \
    \          } else if (keyList.get(i).equals(keyList.get(i).toUpperCase())) {\n\
    \                for (int j = 0; j < keyList.size(); j++) {\n                \
    \    if (!keyList.get(j).equals(keyList.get(j).toUpperCase())) {\n           \
    \             return false;\n                    }\n                }\n      \
    \      } else {\n                return false;\n            }\n        }\n   \
    \     return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bnsk_ji.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2bnsk_ji.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2bnsk_ji.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2bnsk_ji.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2bnsk_ji.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2bnsk_ji.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: Implement your code here\n        \n        return false;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps1k0fod_.java:25: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmps1k0fod_.java:26:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps1k0fod_.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps1k0fod_.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps1k0fod_.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmps1k0fod_.java:30: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        int cnt = 0;\n        for (String\
    \ key : keys) {\n            if (key.equals(key.toLowerCase())) {\n          \
    \      cnt += 1;\n            }\n        }\n        if (cnt == keys.size() ||\
    \ keys.size() == cnt) {\n            return true;\n        }\n        return false;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9rr_csky.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp9rr_csky.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9rr_csky.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9rr_csky.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp9rr_csky.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp9rr_csky.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // write your code here\n        return false;\nreturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv0m9ozvd.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpv0m9ozvd.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv0m9ozvd.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv0m9ozvd.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv0m9ozvd.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpv0m9ozvd.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ytu5ioh.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp8ytu5ioh.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8ytu5ioh.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8ytu5ioh.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8ytu5ioh.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8ytu5ioh.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcu2ul_7l.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpcu2ul_7l.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcu2ul_7l.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcu2ul_7l.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpcu2ul_7l.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpcu2ul_7l.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        int lower_count = 0;\n        int upper_count = 0;\n        for (String\
    \ key : dict.keySet()) {\n            if (Character.isLowerCase(key.charAt(0)))\
    \ {\n                lower_count++;\n            } else if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                upper_count++;\n            }\n        }\n        if (lower_count\
    \ > 0 && upper_count > 0) {\n            return false;\n        }\n        return\
    \ true;\nreturn true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ygqa0ji.java:35: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5ygqa0ji.java:36:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5ygqa0ji.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5ygqa0ji.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5ygqa0ji.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5ygqa0ji.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        HashMap<String,Boolean> check = new HashMap<String,Boolean>();\n\
    \        for (String key : dict.keySet()) {\n            boolean flag = false;\n\
    \            if (key.toUpperCase().equals(key)) {\n                flag = true;\n\
    \            }\n            check.put(key, flag);\n        }\n        boolean\
    \ init = true;\n        boolean first_val = true;\n        boolean first_key =\
    \ true;\n        for (String key : check.keySet()) {\n            if (first_key)\
    \ {\n                first_key = false;\n                init = check.get(key);\n\
    \            }\n            else {\n                if (init != check.get(key))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0lr6n72m.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lr6n72m.java:46:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lr6n72m.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lr6n72m.java:48: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lr6n72m.java:49: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lr6n72m.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // write code here.\n        boolean mixed = false;\n        boolean\
    \ lower = false;\n        boolean upper = false;\n        for (Map.Entry<String,\
    \ String> entry : dict.entrySet()) {\n            if(isLower(entry.getKey()))\
    \ {\n                lower = true;\n            }\n            if(isUpper(entry.getKey()))\
    \ {\n                upper = true;\n            }\n            if(lower && upper)\
    \ {\n                mixed = true;\n                break;\n            }\n  \
    \      }\n        return !mixed;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0p2bys0_.java:24: error: cannot find symbol\n            if(isLower(entry.getKey()))\
    \ {\n               ^\n  symbol:   method isLower(String)\n  location: class Problem\n\
    /tmp/tmp0p2bys0_.java:27: error: cannot find symbol\n            if(isUpper(entry.getKey()))\
    \ {\n               ^\n  symbol:   method isUpper(String)\n  location: class Problem\n\
    /tmp/tmp0p2bys0_.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0p2bys0_.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0p2bys0_.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0p2bys0_.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0p2bys0_.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0p2bys0_.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"S"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean firstIsUpper = false;\n        boolean firstIsLower = false;\n\
    \        Set<String> firstKeys = dict.keySet();\n        if (firstKeys.size()\
    \ > 0) {\n            String firstKey = firstKeys.toArray(new String[0])[0];\n\
    \            firstIsUpper = firstKey.toUpperCase().equals(firstKey);\n       \
    \     firstIsLower = firstKey.toLowerCase().equals(firstKey);\n        }\n   \
    \     for (String key : dict.keySet()) {\n            if (firstIsUpper && !key.toUpperCase().equals(key))\
    \ {\n                return false;\n            }\n            if (firstIsLower\
    \ && !key.toLowerCase().equals(key)) {\n                return false;\n      \
    \      }\n        }\n        return true;\nreturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeme8yy9g.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpeme8yy9g.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpeme8yy9g.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpeme8yy9g.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpeme8yy9g.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpeme8yy9g.java:44: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\nreturn true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmallbbol.java:23: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpmallbbol.java:24:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmallbbol.java:25: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmallbbol.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpmallbbol.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpmallbbol.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           boolean isUpper = false;\n            boolean isLower = false;\n \
    \           char[] chars = key.toCharArray();\n            for (char c : chars)\
    \ {\n                if (Character.isUpperCase(c)) {\n                    isUpper\
    \ = true;\n                }\n                if (Character.isLowerCase(c)) {\n\
    \                    isLower = true;\n                }\n            }\n     \
    \       if (isUpper && isLower) {\n                return false;\n           \
    \ }\n        }\n        return true;\nreturn true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpspbelm5z.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpspbelm5z.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpspbelm5z.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpspbelm5z.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpspbelm5z.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpspbelm5z.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        boolean isUpper = true;\n\
    \        for (String s : dict.keySet()) {\n            if (s.toUpperCase().equals(s))\
    \ {\n                isUpper = true;\n            } else if (s.toLowerCase().equals(s))\
    \ {\n                isUpper = false;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return true;\nreturn true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptzpmmunz.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmptzpmmunz.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptzpmmunz.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptzpmmunz.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptzpmmunz.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptzpmmunz.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     boolean haveLower = false;\n        boolean haveUpper = false;\n       \
    \ for (String key : dict.keySet()) {\n            if (key.equals(key.toLowerCase()))\
    \ {\n                haveLower = true;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                haveUpper = true;\n            } else {\n               \
    \ return false;\n            }\n        }\n        return haveLower ^ haveUpper;\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdgn7kf31.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpdgn7kf31.java:38:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdgn7kf31.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdgn7kf31.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpdgn7kf31.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpdgn7kf31.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\
    \ should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return\
    \ True.\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n    \treturn dict.keySet().stream().allMatch(s -> s.toLowerCase().equals(s))\
    \ ||\n    \t\t\tdict.keySet().stream().allMatch(s -> s.toUpperCase().equals(s));\n\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw3abvesg.java:24: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpw3abvesg.java:25:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpw3abvesg.java:26: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpw3abvesg.java:27: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpw3abvesg.java:28: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpw3abvesg.java:29: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  exit_code: 1
  status: SyntaxError
