name: HumanEval_120_maximum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array arr of integers and a positive integer k,\
  \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
  \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
  \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
  \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
  \    // Output: [2]\n    // Note:\n    // 1. The length of the array will be in\
  \ the range of [1, 1000].\n    // 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static ArrayList<Integer>\
  \ maximum(ArrayList<Integer> arr, int k) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
  \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
  \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123, (int)20,\
  \ (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
  \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
  \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
  \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
  \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n    assert(maximum((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5, (int)-7))), (1)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)-4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n\
  \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
  \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n  \
  \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
  \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
