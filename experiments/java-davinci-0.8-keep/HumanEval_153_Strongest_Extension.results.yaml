name: HumanEval_153_Strongest_Extension
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return null;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbe6unx0y.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        if (extensions.size() == 0) return\
    \ class_name;\n        double strongest_strength = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            double strength\
    \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(i))) {\n                  \
    \  strength += 1;\n                } else {\n                    strength -= 1;\n\
    \                }\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz05qbx0r.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String str_class_name = class_name.toString();\n\
    \        ArrayList<String> str_extensions = extensions;\n        int num_extensions\
    \ = str_extensions.size();\n        int current_num_extension = 0;\n        int\
    \ strongest_extension_index = 0;\n        int strongest_extension_strength = 0;\n\
    \        boolean first_extension = true;\n        while (current_num_extension\
    \ < num_extensions) {\n            String str_current_extension = str_extensions.get(current_num_extension);\n\
    \            int str_current_extension_length = str_current_extension.length();\n\
    \            int str_current_extension_upper_case_letters = 0;\n            int\
    \ str_current_extension_lower_case_letters = 0;\n            int current_letter_index\
    \ = 0;\n            while (current_letter_index < str_current_extension_length)\
    \ {\n                char current_letter = str_current_extension.charAt(current_letter_index);\n\
    \                if (Character.isUpperCase(current_letter)) {\n              \
    \      str_current_extension_upper_case_letters += 1;\n                } else\
    \ {\n                    str_current_extension_lower_case_letters += 1;\n    \
    \            }\n                current_letter_index += 1;\n            }\n  \
    \          int str_current_extension_strength = str_current_extension_upper_case_letters\
    \ - str_current_extension_lower_case_letters;\n            if (first_extension)\
    \ {\n                strongest_extension_index = current_num_extension;\n    \
    \            strongest_extension_strength = str_current_extension_strength;\n\
    \                first_extension = false;\n            } else {\n            \
    \    if (str_current_extension_strength > strongest_extension_strength) {\n  \
    \                  strongest_extension_index = current_num_extension;\n      \
    \              strongest_extension_strength = str_current_extension_strength;\n\
    \                }\n            }\n            current_num_extension += 1;\n \
    \       }\n        return class_name + \".\" + str_extensions.get(strongest_extension_index);\n\
    \   \nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxnpg_78d.java:62: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest_extension = \"\";\n\
    \        double strength = 0;\n        double temp_strength = 0;\n        int\
    \ cap_count = 0;\n        int sm_count = 0;\n        for (String s : extensions)\
    \ {\n            sm_count = 0;\n            cap_count = 0;\n            for (int\
    \ i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    cap_count++;\n                } else {\n            \
    \        sm_count++;\n                }\n            }\n            temp_strength\
    \ = (double) cap_count - (double) sm_count;\n            if (temp_strength > strength)\
    \ {\n                strength = temp_strength;\n                strongest_extension\
    \ = s;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzab39786.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbbu5iubm.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double strength = -2;\n        int\
    \ max_strength_index = -1;\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            String extension = extensions.get(i);\n            int upper\
    \ = 0;\n            int lower = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                char c = extension.charAt(j);\n                if (Character.isUpperCase(c))\
    \ {\n                    upper++;\n                } else {\n                \
    \    lower++;\n                }\n            }\n            double new_strength\
    \ = (double)upper / (double)lower;\n            if (new_strength > strength) {\n\
    \                strength = new_strength;\n                max_strength_index\
    \ = i;\n            }\n        }\n        return class_name + \".\" + extensions.get(max_strength_index);\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpli39tzyh.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Write your code here\n        if\
    \ (extensions.size() == 0) {\n            return class_name;\n        }\n    \
    \    ArrayList<Double> strength = new ArrayList<Double>();\n        for (String\
    \ ext : extensions) {\n            int cap = ext.chars().filter(Character::isUpperCase).count();\n\
    \            int sm = ext.chars().filter(Character::isLowerCase).count();\n  \
    \          strength.add((double) cap - sm);\n        }\n        int max_index\
    \ = 0;\n        for (int i = 1; i < strength.size(); i++) {\n            if (strength.get(i)\
    \ > strength.get(max_index)) {\n                max_index = i;\n            }\n\
    \        }\n        return class_name + \".\" + extensions.get(max_index);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp094bcvtw.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int cap = ext.chars().filter(Character::isUpperCase).count();\n\
    \                                                                      ^\n/tmp/tmp094bcvtw.java:32:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        int sm = ext.chars().filter(Character::isLowerCase).count();\n      \
    \                                                               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code goes here\n        double\
    \ max_strength = 0;\n        String max_extension = \"\";\n        for (String\
    \ e : extensions) {\n            int cap = 0;\n            int sm = 0;\n     \
    \       for (int i = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            double strength = cap\
    \ - sm;\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_extension = e;\n            }\n        }\n\
    \        return class_name + \".\" + max_extension;\nreturn \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpznnicoe3.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max = 0;\n        String maxExtension\
    \ = \"\";\n        for (String extension : extensions) {\n            double strength\
    \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       strength += Character.isUpperCase(extension.charAt(i)) ? 1 : -1;\n   \
    \         }\n            if (strength > max) {\n                max = strength;\n\
    \                maxExtension = extension;\n            }\n        }\n       \
    \ return class_name + \".\" + maxExtension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyx8qpo4s.java:38: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code here\n        int max\
    \ = 0;\n        String maxStr = \"\";\n        for (String ext : extensions) {\n\
    \            int sum = 0;\n            int sum2 = 0;\n            char[] c = ext.toCharArray();\n\
    \            for (char ch : c) {\n                if (Character.isUpperCase(ch))\
    \ {\n                    sum++;\n                } else {\n                  \
    \  sum2++;\n                }\n            }\n            int strength = sum -\
    \ sum2;\n            if (strength > max) {\n                max = strength;\n\
    \                maxStr = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + maxStr;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv34d_w1k.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // put your code here\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnkuvlxpg.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest_extension = \"\";\n\
    \        String strongest_class = \"\";\n        for (String extension : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ x : extension.toCharArray()) {\n                if (Character.isUpperCase(x))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (Math.abs(cap - sm)\
    \ > Math.abs(cap - sm)) {\n                strongest_extension = extension;\n\
    \                strongest_class = class_name;\n            }\n        }\n   \
    \     return strongest_class + \".\" + strongest_extension;\nreturn \"\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_w7fau5.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpakwd5_2r.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max_strength = 0;\n        String\
    \ strongest_extension = \"\";\n        for (String ext : extensions) {\n     \
    \       double strength = getStrength(ext);\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6sbolhj_.java:28: error: cannot find symbol\n            double\
    \ strength = getStrength(ext);\n                              ^\n  symbol:   method\
    \ getStrength(String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code is here...\n        return\
    \ null;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_s_ovfy.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        class_name = \"Problem$\" + class_name;\n\
    \        double best_strength = Double.MIN_VALUE;\n        String best_extension\
    \ = null;\n        for (String extension : extensions) {\n            double strength\
    \ = 0;\n            char[] chars = extension.toCharArray();\n            for (char\
    \ c : chars) {\n                if (Character.isUpperCase(c)) {\n            \
    \        strength += 1;\n                } else {\n                    strength\
    \ -= 1;\n                }\n            }\n            if (strength > best_strength)\
    \ {\n                best_strength = strength;\n                best_extension\
    \ = extension;\n            }\n        }\n        class_name += \"$\" + best_extension;\n\
    \        return class_name;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj03o9bm6.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        throw new UnsupportedOperationException(\"\
    Unimplemented\");\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpno2brx0e.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code\n        return \"\";\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpglcqszhf.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String s = null;\n        double d\
    \ = 0.0;\n        for (String ext : extensions) {\n            double tmp = ((double)Character.countUpperCase(ext.toCharArray()[0])\
    \ - (double)Character.countLowerCase(ext.toCharArray()[0]));\n            if (tmp\
    \ > d) {\n                d = tmp;\n                s = ext;\n            }\n\
    \        }\n        return class_name + \".\" + s;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyg47ejyu.java:28: error: cannot find symbol\n            double\
    \ tmp = ((double)Character.countUpperCase(ext.toCharArray()[0]) - (double)Character.countLowerCase(ext.toCharArray()[0]));\n\
    \                                           ^\n  symbol:   method countUpperCase(char)\n\
    \  location: class Character\n/tmp/tmpyg47ejyu.java:28: error: cannot find symbol\n\
    \            double tmp = ((double)Character.countUpperCase(ext.toCharArray()[0])\
    \ - (double)Character.countLowerCase(ext.toCharArray()[0]));\n               \
    \                                                                            \
    \         ^\n  symbol:   method countLowerCase(char)\n  location: class Character\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Code here!\n        Double maxStrength\
    \ = Double.NEGATIVE_INFINITY;\n        String maxExtension = \"\";\n        for\
    \ (String ext : extensions) {\n            Double strength = 0.0;\n          \
    \  for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    strength += 1.0;\n                } else {\n        \
    \            strength -= 1.0;\n                }\n            }\n            if\
    \ (strength > maxStrength) {\n                maxStrength = strength;\n      \
    \          maxExtension = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + maxExtension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbu5rth5.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        float strongestStrength = -999999999;\n\
    \        String strongestExtension = \"\";\n        for (String ext : extensions)\
    \ {\n            float strength = ext.chars().filter(x -> x >= 'A' && x <= 'Z').count()\
    \ - ext.chars().filter(x -> x >= 'a' && x <= 'z').count();\n            if (strength\
    \ > strongestStrength) {\n                strongestStrength = strength;\n    \
    \            strongestExtension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + strongestExtension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoxiigrda.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code here\n        return \"\
    my_class.AA\";\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpia9aae8b.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max = Integer.MIN_VALUE;\n    \
    \    String max_name = \"\";\n        for (String ext : extensions) {\n      \
    \      int cap = 0;\n            int sm = 0;\n            for (int i = 0; i <\
    \ ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            int strength = cap - sm;\n\
    \            if (strength > max) {\n                max = strength;\n        \
    \        max_name = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + max_name;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjhgwuzts.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        class_name = class_name.replace(\"\
    _\", \"\");\n        int max = 0;\n        String max_ext = null;\n        for\
    \ (String ext : extensions) {\n            int caps = ext.length() - ext.replaceAll(\"\
    [A-Z]\", \"\").length();\n            int smalls = ext.length() - ext.replaceAll(\"\
    [a-z]\", \"\").length();\n            int diff = caps - smalls;\n            if\
    \ (max_ext == null || max < diff) {\n                max = diff;\n           \
    \     max_ext = ext;\n            }\n        }\n        return class_name + \"\
    .\" + max_ext;\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpor327ux9.java:38: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code is here...\n        double\
    \ maxStrength = 0;\n        String ret = \"\";\n        for (String s : extensions)\
    \ {\n            double strength = (double)s.replaceAll(\"[^A-Z]\", \"\").length()\
    \ - \n                (double)s.replaceAll(\"[^a-z]\", \"\").length();\n     \
    \       if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \                ret = s;\n            }\n        }\n        return class_name\
    \ + \".\" + ret;\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdy1ms_l1.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_capital = 0;\n        int max_lower\
    \ = 0;\n        for (String s : extensions) {\n            for (int i = 0; i <\
    \ s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    max_capital++;\n                } else {\n          \
    \          max_lower++;\n                }\n            }\n        }\n       \
    \ String strongest = extensions.get(0);\n        return class_name + \".\" + strongest;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbzao2rc.java:38: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        final int CAP = 0;\n        final int\
    \ SM = 1;\n        class Extension {\n            int[] strength = new int[2];\n\
    \            String name;\n            int index;\n            public Extension(String\
    \ name, int index) {\n                this.name = name;\n                this.index\
    \ = index;\n                for (int i = 0; i < name.length(); i++) {\n      \
    \              if (Character.isUpperCase(name.charAt(i))) {\n                \
    \        strength[CAP]++;\n                    } else {\n                    \
    \    strength[SM]++;\n                    }\n                }\n            }\n\
    \            public int getIndex() {\n                return index;\n        \
    \    }\n            public int[] getStrength() {\n                return strength;\n\
    \            }\n            public String getName() {\n                return\
    \ name;\n            }\n        }\n        Extension strongest = new Extension(\"\
    \", 0);\n        for (int i = 0; i < extensions.size(); i++) {\n            Extension\
    \ e = new Extension(extensions.get(i), i);\n            if (e.getStrength()[CAP]\
    \ - e.getStrength()[SM] > strongest.getStrength()[CAP] - strongest.getStrength()[SM])\
    \ {\n                strongest = e;\n            } else if (e.getStrength()[CAP]\
    \ - e.getStrength()[SM] == strongest.getStrength()[CAP] - strongest.getStrength()[SM])\
    \ {\n                if (e.getIndex() < strongest.getIndex()) {\n            \
    \        strongest = e;\n                }\n            }\n        }\n       \
    \ return class_name + \".\" + strongest.getName();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph5xetfou.java:64: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String max_ext = \"\";\n        int\
    \ max_ext_strength = 0;\n        for (String ext : extensions) {\n           \
    \ int ext_strength = ext.chars().filter(Character::isUpperCase).count() - ext.chars().filter(Character::isLowerCase).count();\n\
    \            if (ext_strength >= max_ext_strength) {\n                max_ext_strength\
    \ = ext_strength;\n                max_ext = ext;\n            }\n        }\n\
    \        return class_name + \".\" + max_ext;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg2qaisfi.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int ext_strength = ext.chars().filter(Character::isUpperCase).count()\
    \ - ext.chars().filter(Character::isLowerCase).count();\n                    \
    \                                                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return null;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw5x0cxsz.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest_extension = \"\";\n\
    \        int strength = 0;\n        for (String extension : extensions) {\n  \
    \          int CAP = extension.replaceAll(\"[^A-Z]\", \"\").length();\n      \
    \      int SM = extension.replaceAll(\"[^a-z]\", \"\").length();\n           \
    \ int current_strength = CAP - SM;\n            if (current_strength > strength)\
    \ {\n                strength = current_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbt96w_3e.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here.\n        int bestCap\
    \ = 0;\n        int bestSm = 0;\n        String bestExtension = \"\";\n      \
    \  for (String extension : extensions) {\n            int cap = 0;\n         \
    \   int sm = 0;\n            for (char c : extension.toCharArray()) {\n      \
    \          if (Character.isUpperCase(c)) {\n                    cap++;\n     \
    \           } else {\n                    sm++;\n                }\n         \
    \   }\n            if (cap - sm > bestCap - bestSm) {\n                bestCap\
    \ = cap;\n                bestSm = sm;\n                bestExtension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + bestExtension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ge1573i.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Write your code here!\n        double\
    \ top_strength = -9999;\n        String top_name = \"\";\n        for (String\
    \ extension : extensions) {\n            int small_letters = 0;\n            int\
    \ big_letters = 0;\n            for (int i = 0; i < extension.length(); i++) {\n\
    \                if (Character.isUpperCase(extension.charAt(i))) {\n         \
    \           big_letters++;\n                } else {\n                    small_letters++;\n\
    \                }\n            }\n            double strength = big_letters -\
    \ small_letters;\n            if (strength > top_strength) {\n               \
    \ top_strength = strength;\n                top_name = extension;\n          \
    \  }\n        }\n        return class_name + \".\" + top_name;\nreturn \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5subt_s4.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + Collections.max(extensions,\n\
    \            Comparator.comparing(Problem::extensionStrength));\nreturn \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnob9utf1.java:26: error: invalid method reference\n           \
    \ Comparator.comparing(Problem::extensionStrength));\n                       \
    \          ^\n  cannot find symbol\n    symbol:   method extensionStrength()\n\
    \    location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp41hiu2os.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        ArrayList<Pair<String, Integer>> ext\
    \ = new ArrayList<>();\n        for (String i : extensions) {\n            int\
    \ x = 0;\n            for (int j = 0; j < i.length(); j++) {\n               \
    \ if (Character.isUpperCase(i.charAt(j))) {\n                    x++;\n      \
    \          }\n            }\n            ext.add(new Pair<>(i, x - i.length()));\n\
    \        }\n        Pair<String, Integer> max = ext.get(0);\n        for (Pair<String,\
    \ Integer> i : ext) {\n            if (i.getValue1() > max.getValue1()) {\n  \
    \              max = i;\n            }\n        }\n        return class_name +\
    \ \".\" + max.getValue0();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2ofdicv.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your Code Here\n        double best_strength\
    \ = Double.MIN_VALUE;\n        String best_extension = null;\n        for (String\
    \ extension : extensions) {\n            int uppercase = 0;\n            int lowercase\
    \ = 0;\n            for (char c : extension.toCharArray()) {\n               \
    \ if (Character.isUpperCase(c)) {\n                    uppercase++;\n        \
    \        } else {\n                    lowercase++;\n                }\n     \
    \       }\n            double strength = (double) uppercase - (double) lowercase;\n\
    \            if (strength > best_strength) {\n                best_strength =\
    \ strength;\n                best_extension = extension;\n            }\n    \
    \    }\n        return class_name + \".\" + best_extension;\nreturn \"\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprfo52v0i.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code here\n        return \"\
    \";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy7mwn2_i.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double highest = 0;\n        String\
    \ strongest = \"\";\n        for (String e : extensions) {\n            double\
    \ strength = getStrength(e);\n            if (strength > highest) {\n        \
    \        highest = strength;\n                strongest = e;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;\nreturn \"\";\n   \
    \ }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpadirun1q.java:28: error: cannot find symbol\n            double\
    \ strength = getStrength(e);\n                              ^\n  symbol:   method\
    \ getStrength(String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max = Double.NEGATIVE_INFINITY;\n\
    \        String max_name = \"\";\n        for (String s : extensions) {\n    \
    \        double strength = (double)s.replaceAll(\"[^A-Z]\", \"\").length() - s.replaceAll(\"\
    [^a-z]\", \"\").length();\n            if (strength > max) {\n               \
    \ max = strength;\n                max_name = s;\n            }\n        }\n \
    \       return class_name + \".\" + max_name;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpes004iq5.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                char ch = extension.charAt(i);\n                if (Character.isUpperCase(ch))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwef0pqwy.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest_extension = null;\n\
    \        double max_strength = 0;\n        for (String extension : extensions)\
    \ {\n            double strength = 0;\n            int cap = 0;\n            int\
    \ sm = 0;\n            for (char c : extension.toCharArray()) {\n            \
    \    if (Character.isUpperCase(c)) {\n                    cap++;\n           \
    \     } else {\n                    sm++;\n                }\n            }\n\
    \            strength = cap - sm;\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2sti3rpy.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        ArrayList<Pair<String, Double>> pairs\
    \ = new ArrayList<>();\n        for (String s : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for (int i = 0; i < s.length();\
    \ i++) {\n                char c = s.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            pairs.add(new Pair<>(s,\
    \ (double)cap - sm));\n        }\n        Double max = null;\n        String best\
    \ = null;\n        for (Pair<String, Double> p : pairs) {\n            if (max\
    \ == null || p.getValue1() > max) {\n                max = p.getValue1();\n  \
    \              best = p.getValue0();\n            }\n        }\n        return\
    \ class_name + \".\" + best;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa34ez_rd.java:48: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_strength = 0;\n        String\
    \ best_extension = \"\";\n        for (String extension : extensions) {\n    \
    \        int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    strength++;\n                } else {\n                 \
    \   strength--;\n                }\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength;\n                best_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ best_extension;\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mohxaz0.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double curr_strength = -Double.MAX_VALUE;\n\
    \        String answer = \"\";\n        for (String x : extensions) {\n      \
    \      double strength = 0;\n            for (int i = 0; i < x.length(); i++)\
    \ {\n                if (Character.isUpperCase(x.charAt(i))) {\n             \
    \       strength++;\n                } else {\n                    strength--;\n\
    \                }\n            }\n            if (strength > curr_strength) {\n\
    \                curr_strength = strength;\n                answer = x;\n    \
    \        }\n        }\n        return class_name + \".\" + answer;\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6q6liw0l.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here.\n        ArrayList<String>\
    \ best_extensions = new ArrayList<String>();\n        Double best_strength = -1.0;\n\
    \        for (String extension : extensions) {\n            Double strength =\
    \ 0.0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(i))) {\n                  \
    \  strength += 1.0;\n                } else {\n                    strength -=\
    \ 1.0;\n                }\n            }\n            strength /= extension.length();\n\
    \            if (strength > best_strength) {\n                best_strength =\
    \ strength;\n                best_extensions.clear();\n                best_extensions.add(extension);\n\
    \            } else if (strength == best_strength) {\n                best_extensions.add(extension);\n\
    \            }\n        }\n        return class_name + \".\" + best_extensions.get(0);\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf_eh6twu.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        int numCaps\
    \ = 0;\n        int numLower = 0;\n        double strength = 0;\n        double\
    \ strongestStrength = 0;\n        String strongestExtension = \"\";\n        for\
    \ (String extension : extensions) {\n            char[] extensionChars = extension.toCharArray();\n\
    \            for (char c : extensionChars) {\n                if (Character.isUpperCase(c))\
    \ {\n                    numCaps++;\n                } else {\n              \
    \      numLower++;\n                }\n            }\n            strength = numCaps\
    \ - numLower;\n            if (strength > strongestStrength) {\n             \
    \   strongestStrength = strength;\n                strongestExtension = extension;\n\
    \            }\n            numCaps = 0;\n            numLower = 0;\n        }\n\
    \        String result = String.format(\"%s.%s\", class_name, strongestExtension);\n\
    \        return result;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw164nouc.java:50: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + extensions.stream().max(\n\
    \            (ext1, ext2) -> {\n                int strength1 = ext1.replaceAll(\"\
    [^A-Z]\", \"\").length() - ext1.replaceAll(\"[^a-z]\", \"\").length();\n     \
    \           int strength2 = ext2.replaceAll(\"[^A-Z]\", \"\").length() - ext2.replaceAll(\"\
    [^a-z]\", \"\").length();\n                return strength1 - strength2;\n   \
    \         }\n        ).get();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd9qykjm2.java:32: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here.\n        return\
    \ null;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplwx_8x4c.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        \n        return \"\";\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp_cs07t0.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // [optional]\n        // TODO: code\n\
    \        return null;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpod6l_cut.java:28: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max = Integer.MIN_VALUE;\n    \
    \    String ans = \"\";\n        for (String ext : extensions) {\n           \
    \ int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            int n = cap - sm;\n            if\
    \ (n > max) {\n                max = n;\n                ans = ext;\n        \
    \    }\n        }\n        return class_name + \".\" + ans;\nreturn \"\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpleiqwpce.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + extensions.stream().map(Problem::strength).max(Comparator.comparing(Pair::getValue0)).map(Pair::getValue1).get();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6f_chrp5.java:25: error: invalid method reference\n        return\
    \ class_name + \".\" + extensions.stream().map(Problem::strength).max(Comparator.comparing(Pair::getValue0)).map(Pair::getValue1).get();\n\
    \                                                          ^\n  cannot find symbol\n\
    \    symbol:   method strength()\n    location: class Problem\n/tmp/tmp6f_chrp5.java:25:\
    \ error: incompatible types: cannot infer type-variable(s) T,U\n        return\
    \ class_name + \".\" + extensions.stream().map(Problem::strength).max(Comparator.comparing(Pair::getValue0)).map(Pair::getValue1).get();\n\
    \                                                                            \
    \                         ^\n    (argument mismatch; invalid method reference\n\
    \      method getValue0 in class Pair<A,B> cannot be applied to given types\n\
    \        required: no arguments\n        found: Object\n        reason: actual\
    \ and formal argument lists differ in length)\n  where T,U,A,B are type-variables:\n\
    \    T extends Object declared in method <T,U>comparing(Function<? super T,? extends\
    \ U>)\n    U extends Comparable<? super U> declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmp6f_chrp5.java:25: error: invalid method\
    \ reference\n        return class_name + \".\" + extensions.stream().map(Problem::strength).max(Comparator.comparing(Pair::getValue0)).map(Pair::getValue1).get();\n\
    \                                                                            \
    \                          ^\n  non-static method getValue0() cannot be referenced\
    \ from a static context\n  where A is a type-variable:\n    A extends Object declared\
    \ in class Pair\n/tmp/tmp6f_chrp5.java:25: error: invalid method reference\n \
    \       return class_name + \".\" + extensions.stream().map(Problem::strength).max(Comparator.comparing(Pair::getValue0)).map(Pair::getValue1).get();\n\
    \                                                                            \
    \                                                ^\n  non-static "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Please write your code here, and\
    \ leave this as the last line of the function.\n        // The list of extensions\
    \ is contained in the variable 'extensions'\n        // You are expected to return\
    \ a string such as 'class_name.extension_name'\n        // The first and the last\
    \ characters of extension_name must be lowercase\n        // The second and the\
    \ third characters of extension_name must be uppercase\n        // If there are\
    \ multiple extensions that fit the description, you should\n        // return\
    \ the first extension which meets the condition.\n        // Note: The class name\
    \ and the extension name are case sensitive.\n        // If there are no extensions,\
    \ you should return an empty string.\n        return \"\";\nreturn \"\";\n   \
    \ }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp84o47_tc.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max = 0;\n        String clazz\
    \ = \"\";\n        String strongest = \"\";\n        String result = \"\";\n \
    \       int num_cap = 0;\n        int num_sm = 0;\n        // Iterate through\
    \ the arraylist to find the strongest extension\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            // Obtain the number of capital letters in the name of the\
    \ extension\n            num_cap = extensions.get(i).length() - extensions.get(i).replaceAll(\"\
    [A-Z]\", \"\").length();\n            // Obtain the number of small letters in\
    \ the name of the extension\n            num_sm = extensions.get(i).length() -\
    \ extensions.get(i).replaceAll(\"[a-z]\", \"\").length();\n            // Obtain\
    \ the strength of the current extension\n            clazz = (num_cap - num_sm);\n\
    \            // Check whether the strength of the current extension is greater\n\
    \            // than the strongest extension so far\n            if (clazz > max)\
    \ {\n                max = clazz;\n                strongest = extensions.get(i);\n\
    \            }\n        }\n        // Concatenate the class name with the extension\
    \ name\n        result = class_name + \".\" + strongest;\n        return result;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5b9mp4bf.java:38: error: incompatible types: int cannot be converted\
    \ to String\n            clazz = (num_cap - num_sm);\n                       \
    \      ^\n/tmp/tmp5b9mp4bf.java:41: error: bad operand types for binary operator\
    \ '>'\n            if (clazz > max) {\n                      ^\n  first type:\
    \  String\n  second type: int\n/tmp/tmp5b9mp4bf.java:42: error: incompatible types:\
    \ String cannot be converted to int\n                max = clazz;\n          \
    \            ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name;\nreturn \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprv29k_h9.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code goes here\n        int\
    \ max = Integer.MIN_VALUE;\n        String strongest = \"\";\n        for (String\
    \ e : extensions) {\n            int cap = 0;\n            int sm = 0;\n     \
    \       for (int i = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            int strength = cap - sm;\n\
    \            if (strength > max) {\n                max = strength;\n        \
    \        strongest = e;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxw22k18b.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        //YOUR CODE HERE\n        return \"\
    \";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp72phrlwl.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest_extension = \"\";\n\
    \        // YOUR CODE HERE\n        return strongest_extension;\nreturn \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkuhnbbvm.java:28: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        if (extensions.size() == 0) return\
    \ class_name;\n        int strength = 0;\n        String ext = \"\";\n       \
    \ for (String extension : extensions) {\n            int temp = 0;\n         \
    \   for (char c : extension.toCharArray())\n                if (Character.isUpperCase(c))\
    \ temp++;\n                else temp--;\n            if (temp > strength) {\n\
    \                strength = temp;\n                ext = extension;\n        \
    \    }\n        }\n        return class_name + \".\" + ext;\nreturn \"\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_u7lzdmj.java:39: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        int scap\
    \ = 0;\n        int ssm = 0;\n        int cap = 0;\n        int sm = 0;\n    \
    \    String strongestExtension = \"\";\n        for (String ext: extensions) {\n\
    \            cap = 0;\n            sm = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            if (cap - sm > scap - ssm) {\n \
    \               scap = cap;\n                ssm = sm;\n                strongestExtension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpya6r8g2i.java:48: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        var cnt = new HashMap<String, Integer>();\n\
    \        for (var i = 0; i < extensions.size(); i++) {\n            var cap =\
    \ 0;\n            var sm = 0;\n            for (var j = 0; j < extensions.get(i).length();\
    \ j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ cap++;\n                else sm++;\n            }\n            var val = cap\
    \ - sm;\n            if (!cnt.containsKey(extensions.get(i))) {\n            \
    \    cnt.put(extensions.get(i), val);\n            }\n        }\n        var max\
    \ = Collections.max(cnt.values());\n        var max_keys = new ArrayList<String>();\n\
    \        for (var k : cnt.keySet()) {\n            if (cnt.get(k) == max) {\n\
    \                max_keys.add(k);\n            }\n        }\n        var res =\
    \ class_name + \".\" + max_keys.get(0);\n        return res;\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5lc167i0.java:25: error: cannot find symbol\n        var cnt =\
    \ new HashMap<String, Integer>();\n        ^\n  symbol:   class var\n  location:\
    \ class Problem\n/tmp/tmp5lc167i0.java:26: error: cannot find symbol\n       \
    \ for (var i = 0; i < extensions.size(); i++) {\n             ^\n  symbol:   class\
    \ var\n  location: class Problem\n/tmp/tmp5lc167i0.java:27: error: cannot find\
    \ symbol\n            var cap = 0;\n            ^\n  symbol:   class var\n  location:\
    \ class Problem\n/tmp/tmp5lc167i0.java:28: error: cannot find symbol\n       \
    \     var sm = 0;\n            ^\n  symbol:   class var\n  location: class Problem\n\
    /tmp/tmp5lc167i0.java:29: error: cannot find symbol\n            for (var j =\
    \ 0; j < extensions.get(i).length(); j++) {\n                 ^\n  symbol:   class\
    \ var\n  location: class Problem\n/tmp/tmp5lc167i0.java:33: error: cannot find\
    \ symbol\n            var val = cap - sm;\n            ^\n  symbol:   class var\n\
    \  location: class Problem\n/tmp/tmp5lc167i0.java:38: error: cannot find symbol\n\
    \        var max = Collections.max(cnt.values());\n        ^\n  symbol:   class\
    \ var\n  location: class Problem\n/tmp/tmp5lc167i0.java:39: error: cannot find\
    \ symbol\n        var max_keys = new ArrayList<String>();\n        ^\n  symbol:\
    \   class var\n  location: class Problem\n/tmp/tmp5lc167i0.java:40: error: cannot\
    \ find symbol\n        for (var k : cnt.keySet()) {\n             ^\n  symbol:\
    \   class var\n  location: class Problem\n/tmp/tmp5lc167i0.java:45: error: cannot\
    \ find symbol\n        var res = class_name + \".\" + max_keys.get(0);\n     \
    \   ^\n  symbol:   class var\n  location: class Problem\n10 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        // ...\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9eyjxp_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        return \"\
    \";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe6drd0yw.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n      Pair<String, Double> curr_strongest =\
    \ new Pair<String, Double>(\"\", 0.0);\n      // Your code\n      for (String\
    \ extension : extensions) {\n        int capitals = 0;\n        int smalls = 0;\n\
    \        for (char c : extension.toCharArray()) {\n          if (Character.isUpperCase(c))\
    \ {\n            capitals++;\n          } else {\n            smalls++;\n    \
    \      }\n        }\n        double strength = (double)capitals - (double)smalls;\n\
    \        if (strength > curr_strongest.getValue1()) {\n          curr_strongest\
    \ = new Pair<String, Double>(extension, strength);\n        }\n      }\n     \
    \ return class_name + \".\" + curr_strongest.getValue0();\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkjudjplq.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        if (extensions.size() == 0) return\
    \ class_name;\n        String ext = extensions.get(0);\n        double strength\
    \ = strength(ext);\n        for (int i = 1; i < extensions.size(); i++) {\n  \
    \          String curr_ext = extensions.get(i);\n            double curr_strength\
    \ = strength(curr_ext);\n            if (curr_strength > strength) {\n       \
    \         ext = curr_ext;\n                strength = curr_strength;\n       \
    \     }\n        }\n        return class_name + \".\" + ext;\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflj7r4_z.java:27: error: cannot find symbol\n        double strength\
    \ = strength(ext);\n                          ^\n  symbol:   method strength(String)\n\
    \  location: class Problem\n/tmp/tmpflj7r4_z.java:30: error: cannot find symbol\n\
    \            double curr_strength = strength(curr_ext);\n                    \
    \               ^\n  symbol:   method strength(String)\n  location: class Problem\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max = 0;\n        String ans\
    \ = class_name + \".\" + extensions.get(0);\n        for (String extension : extensions)\
    \ {\n            double strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    strength++;\n                } else {\n                 \
    \   strength--;\n                }\n            }\n            if (Math.abs(strength)\
    \ > max) {\n                max = Math.abs(strength);\n                ans = class_name\
    \ + \".\" + extension;\n            }\n        }\n        return ans;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpevhdowx5.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max = Double.NEGATIVE_INFINITY;\n\
    \        String res = \"\";\n        for (String s : extensions) {\n         \
    \   int cap = s.replaceAll(\"[^A-Z]\", \"\").length();\n            int sm = s.replaceAll(\"\
    [^a-z]\", \"\").length();\n            double cur = (double) cap - sm;\n     \
    \       if (cur > max) {\n                max = cur;\n                res = s;\n\
    \            }\n        }\n        return class_name + \".\" + res;\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5h59ifh9.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String bestExtension = \"\";\n    \
    \    double bestStrength = Double.NEGATIVE_INFINITY;\n        for (String extension\
    \ : extensions) {\n            double strength = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > bestStrength) {\n                bestStrength = strength;\n              \
    \  bestExtension = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + bestExtension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm7wiwemi.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        Pair<String, Double> strongest = new\
    \ Pair<String, Double>(\"\", 0.0);\n        for (String extension : extensions)\
    \ {\n            double cap = extension.codePoints().filter(c -> c >= 'A' && c\
    \ <= 'Z').count();\n            double sm = extension.codePoints().filter(c ->\
    \ c >= 'a' && c <= 'z').count();\n            double score = cap - sm;\n     \
    \       if (score > strongest.getValue1()) {\n                strongest = new\
    \ Pair<String, Double>(extension, score);\n            }\n        }\n        return\
    \ class_name + \".\" + strongest.getValue0();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6zxp7he6.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // first check whether the class can\
    \ be loaded or not.\n        try {\n            Class.forName(class_name);\n \
    \       } catch (ClassNotFoundException e) {\n            System.out.println(\"\
    Cannot load class: \" + class_name);\n            System.exit(1);\n        }\n\
    \        // if there is no extension, then return the class name\n        if (extensions.size()\
    \ == 0) {\n            return class_name;\n        } else {\n            // iterate\
    \ through the extensions, and calculate the strength\n            String strongest\
    \ = extensions.get(0);\n            float strength = 0;\n            for (String\
    \ extension : extensions) {\n                int upper = 0;\n                int\
    \ lower = 0;\n                for (int i = 0; i < extension.length(); i++) {\n\
    \                    if (Character.isUpperCase(extension.charAt(i))) {\n     \
    \                   upper++;\n                    } else {\n                 \
    \       lower++;\n                    }\n                }\n                float\
    \ new_strength = (float)upper / (float)lower;\n                if (new_strength\
    \ > strength) {\n                    strength = new_strength;\n              \
    \      strongest = extension;\n                }\n            }\n            return\
    \ class_name + \".\" + strongest;\n        }\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1w9sgoyr.java:57: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Best so far\n        String best_so_far\
    \ = \"\";\n        int best_strength = 0;\n        for (String ext : extensions)\
    \ {\n            int strength = get_strength(ext);\n            if (strength >\
    \ best_strength) {\n                best_so_far = ext;\n                best_strength\
    \ = strength;\n            }\n        }\n        if (best_so_far.length() == 0)\
    \ {\n            return class_name;\n        }\n        return class_name + \"\
    .\" + best_so_far;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgxtvzz0k.java:29: error: cannot find symbol\n            int strength\
    \ = get_strength(ext);\n                           ^\n  symbol:   method get_strength(String)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String ans = class_name + \".\" + extensions.get(0);\n\
    \        int max = 0;\n        for (String s : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for (int i = 0; i < s.length();\
    \ i++) {\n                if (Character.isUpperCase(s.charAt(i))) {\n        \
    \            cap++;\n                } else {\n                    sm++;\n   \
    \             }\n            }\n            int strength = cap - sm;\n       \
    \     if (strength > max) {\n                max = strength;\n               \
    \ ans = class_name + \".\" + s;\n            }\n        }\n        return ans;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_z8cnibc.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        Double strength = -1.0;\n        String\
    \ str = \"\";\n        for (String s : extensions) {\n            int cnt_a =\
    \ 0;\n            int cnt_b = 0;\n            for (int i = 0; i < s.length();\
    \ i++) {\n                if (Character.isUpperCase(s.charAt(i))) {\n        \
    \            cnt_a++;\n                } else {\n                    cnt_b++;\n\
    \                }\n            }\n            Double str_tmp = (double) cnt_a\
    \ - cnt_b;\n            if (str_tmp > strength) {\n                strength =\
    \ str_tmp;\n                str = s;\n            }\n        }\n        return\
    \ class_name + \".\" + str;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplsxc_qwy.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // write your code here\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzye07qrd.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String cl = \"\", ext = \"\";\n   \
    \     double max_strength = 0;\n        for (String extension : extensions) {\n\
    \            double strength = (double) (extension.replaceAll(\"[^A-Z]\", \"\"\
    ).length() - extension.replaceAll(\"[^a-z]\", \"\").length());\n            if\
    \ (strength > max_strength) {\n                cl = class_name;\n            \
    \    ext = extension;\n                max_strength = strength;\n            }\n\
    \        }\n        return cl + \".\" + ext;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmz0ojhp8.java:36: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        throw new UnsupportedOperationException(\"\
    Not Implemented\");\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xk8n70h.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Write your code here\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc92ubpas.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        class Extension\
    \ {\n            String name;\n            int strength;\n            public Extension(String\
    \ name, int strength) {\n                this.name = name;\n                this.strength\
    \ = strength;\n            }\n        }\n        ArrayList<Extension> extList\
    \ = new ArrayList<>();\n        for (String s : extensions) {\n            int\
    \ strength = 0;\n            for (int i = 0; i < s.length(); i++) {\n        \
    \        char c = s.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            extList.add(new\
    \ Extension(s, strength));\n        }\n        Extension strongest = extList.get(0);\n\
    \        for (Extension e : extList) {\n            if (e.strength > strongest.strength)\
    \ {\n                strongest = e;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest.name;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9s1o5ews.java:56: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        class Strength {\n            private\
    \ Double strength;\n            private String extension;\n            public\
    \ Strength(Double strength, String extension) {\n                this.strength\
    \ = strength;\n                this.extension = extension;\n            }\n  \
    \          public Double getStrength() {\n                return this.strength;\n\
    \            }\n            public String getExtension() {\n                return\
    \ this.extension;\n            }\n        }\n        class StrengthComparator\
    \ implements Comparator<Strength> {\n            @Override\n            public\
    \ int compare(Strength a, Strength b) {\n                return Double.compare(a.getStrength(),\
    \ b.getStrength());\n            }\n        }\n        String result = \"\";\n\
    \        StrengthComparator sc = new StrengthComparator();\n        Queue<Strength>\
    \ pq = new PriorityQueue<Strength>(10, sc);\n        Double strength;\n      \
    \  for (String extension : extensions) {\n            strength = (double) (extension.chars().filter(Character::isUpperCase).count()\
    \ - extension.chars().filter(Character::isLowerCase).count());\n            pq.add(new\
    \ Strength(strength, extension));\n        }\n        if (pq.size() == 0) {\n\
    \            return class_name;\n        }\n        else {\n            Strength\
    \ s = pq.poll();\n            return String.format(\"%s.%s\", class_name, s.getExtension());\n\
    \        }\nreturn \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbf3h60s.java:60: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String winner = \"\";\n        for\
    \ (String extension : extensions) {\n            if (winner.isEmpty()) {\n   \
    \             winner = extension;\n            } else {\n                String\
    \ xtras = String.join(\"\",\n                                Stream.of(extension.split(\"\
    \"))\n                                      .filter(e -> !Character.isLetter(e.charAt(0)))\n\
    \                                      .collect(Collectors.toList()));\n     \
    \           String old_xtras = String.join(\"\",\n                           \
    \         Stream.of(winner.split(\"\"))\n                                    \
    \      .filter(e -> !Character.isLetter(e.charAt(0)))\n                      \
    \                    .collect(Collectors.toList()));\n                if (xtras.length()\
    \ != old_xtras.length()) {\n                    if (xtras.length() > old_xtras.length())\
    \ {\n                        winner = extension;\n                    }\n    \
    \            } else {\n                    String new_cap_letters = String.join(\"\
    \",\n                                            Stream.of(extension.split(\"\"\
    ))\n                                                  .filter(e -> Character.isUpperCase(e.charAt(0)))\n\
    \                                                  .collect(Collectors.toList()));\n\
    \                    String old_cap_letters = String.join(\"\",\n            \
    \                                Stream.of(winner.split(\"\"))\n             \
    \                                     .filter(e -> Character.isUpperCase(e.charAt(0)))\n\
    \                                                  .collect(Collectors.toList()));\n\
    \                    String new_small_letters = String.join(\"\",\n          \
    \                                  Stream.of(extension.split(\"\"))\n        \
    \                                          .filter(e -> Character.isLowerCase(e.charAt(0)))\n\
    \                                                  .collect(Collectors.toList()));\n\
    \                    String old_small_letters = String.join(\"\",\n          \
    \                                  Stream.of(winner.split(\"\"))\n           \
    \                                       .filter(e -> Character.isLowerCase(e.charAt(0)))\n\
    \                                                  .collect(Collectors.toList()));\n\
    \                    if (new_cap_letters.length() - new_small_letters.length()\n\
    \                        > old_cap_letters.length() - old_small_letters.length())\
    \ {\n                        winner = extension;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp876ekdr9.java:64: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp876ekdr9.java:64: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp876ekdr9.java:64: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp876ekdr9.java:64: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp876ekdr9.java:64: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp876ekdr9.java:76:\
    \ error: reached end of file while parsing\n}\n ^\n/tmp/tmp876ekdr9.java:77: error:\
    \ reached end of file while parsing\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp32oeh2q5.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String longestExtension = \"\";\n \
    \       double maxStrength = Double.MIN_VALUE;\n        for (String extension\
    \ : extensions) {\n            int upper = 0;\n            int lower = 0;\n  \
    \          for (int i = 0; i < extension.length(); i++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(i))) {\n                    upper++;\n\
    \                } else {\n                    lower++;\n                }\n \
    \           }\n            double extensionStrength = (double) upper - lower;\n\
    \            if (extensionStrength > maxStrength) {\n                maxStrength\
    \ = extensionStrength;\n                longestExtension = extension;\n      \
    \      }\n        }\n        return class_name + \".\" + longestExtension;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw1y6mzys.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code.\n        return \"\"\
    ;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdjqpep0m.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int best_cap = -1;\n        int best_sm\
    \ = 1000;\n        String best_extension = \"\";\n        for (String e : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (int i\
    \ = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > best_cap)\
    \ {\n                best_cap = cap - sm;\n                best_sm = sm;\n   \
    \             best_extension = e;\n            } else if (cap - sm == best_cap\
    \ && sm < best_sm) {\n                best_cap = cap - sm;\n                best_sm\
    \ = sm;\n                best_extension = e;\n            }\n        }\n     \
    \   return class_name + \".\" + best_extension;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxkr61qkt.java:49: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String clazz = class_name;\n      \
    \  Map<Double, String> strengths = new TreeMap<Double, String>();\n        for\
    \ (String extension : extensions) {\n            int caps = extension.replaceAll(\"\
    [^A-Z]\", \"\").length();\n            int smalls = extension.replaceAll(\"[^a-z]\"\
    , \"\").length();\n            double strength = caps - smalls;\n            strengths.put(strength,\
    \ extension);\n        }\n        String strongest_extension = strengths.get(strengths.keySet().toArray()[strengths.size()\
    \ - 1]);\n        return clazz + \".\" + strongest_extension;\nreturn \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwj7t268j.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        ArrayList<Tuple2<String, Double>> strengths\
    \ = new ArrayList<>();\n        for (String ext : extensions) {\n            int\
    \ CAP = (int)ext.chars().filter(Character::isUpperCase).count();\n           \
    \ int SM = (int)ext.chars().filter(Character::isLowerCase).count();\n        \
    \    strengths.add(new Tuple2<>(ext, (double)CAP - SM));\n        }\n        strengths.sort((x,\
    \ y) -> (x.getValue1() > y.getValue1()) ? -1 : 1);\n        // System.out.println(strengths);\n\
    \        return class_name + \".\" + strengths.get(0).getValue0();\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt96sq9ld.java:25: error: cannot find symbol\n        ArrayList<Tuple2<String,\
    \ Double>> strengths = new ArrayList<>();\n                  ^\n  symbol:   class\
    \ Tuple2\n  location: class Problem\n/tmp/tmpt96sq9ld.java:29: error: cannot find\
    \ symbol\n            strengths.add(new Tuple2<>(ext, (double)CAP - SM));\n  \
    \                            ^\n  symbol:   class Tuple2\n  location: class Problem\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        throw new NotImplementedException();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsbanu9i_.java:25: error: cannot find symbol\n        throw new\
    \ NotImplementedException();\n                  ^\n  symbol:   class NotImplementedException\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + extensions.stream().map(t\
    \ -> new Tuple(t, strength(t))).reduce((t1, t2) -> t1.getValue1() > t2.getValue1()\
    \ ? t1 : t2).get().getValue0();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpey1h6c75.java:25: error: cannot find symbol\n        return class_name\
    \ + \".\" + extensions.stream().map(t -> new Tuple(t, strength(t))).reduce((t1,\
    \ t2) -> t1.getValue1() > t2.getValue1() ? t1 : t2).get().getValue0();\n     \
    \                                                                       ^\n  symbol:\
    \   method strength(String)\n  location: class Problem\n/tmp/tmpey1h6c75.java:25:\
    \ error: Tuple is abstract; cannot be instantiated\n        return class_name\
    \ + \".\" + extensions.stream().map(t -> new Tuple(t, strength(t))).reduce((t1,\
    \ t2) -> t1.getValue1() > t2.getValue1() ? t1 : t2).get().getValue0();\n     \
    \                                                          ^\n/tmp/tmpey1h6c75.java:25:\
    \ error: cannot find symbol\n        return class_name + \".\" + extensions.stream().map(t\
    \ -> new Tuple(t, strength(t))).reduce((t1, t2) -> t1.getValue1() > t2.getValue1()\
    \ ? t1 : t2).get().getValue0();\n                                            \
    \                                                                   ^\n  symbol:\
    \   method getValue1()\n  location: variable t1 of type Object\n/tmp/tmpey1h6c75.java:25:\
    \ error: cannot find symbol\n        return class_name + \".\" + extensions.stream().map(t\
    \ -> new Tuple(t, strength(t))).reduce((t1, t2) -> t1.getValue1() > t2.getValue1()\
    \ ? t1 : t2).get().getValue0();\n                                            \
    \                                                                            \
    \        ^\n  symbol:   method getValue1()\n  location: variable t2 of type Object\n\
    /tmp/tmpey1h6c75.java:25: error: cannot find symbol\n        return class_name\
    \ + \".\" + extensions.stream().map(t -> new Tuple(t, strength(t))).reduce((t1,\
    \ t2) -> t1.getValue1() > t2.getValue1() ? t1 : t2).get().getValue0();\n     \
    \                                                                            \
    \                                                                            ^\n\
    \  symbol:   method getValue0()\n  location: class Object\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Good luck!\n        double maxStrength\
    \ = 0;\n        String strongestExtension = \"\";\n        for (String e : extensions)\
    \ {\n            double strength = (double)extensionStrength(e);\n           \
    \ if (strength > maxStrength) {\n                maxStrength = strength;\n   \
    \             strongestExtension = e;\n            }\n        }\n        return\
    \ class_name + \".\" + strongestExtension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7loo9d2.java:29: error: cannot find symbol\n            double\
    \ strength = (double)extensionStrength(e);\n                                 \
    \     ^\n  symbol:   method extensionStrength(String)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String class_name_formatted = class_name.replace(\"\
    _\", \"\");\n        String strongest_extension = extensions.get(0);\n       \
    \ double strongest_strength = computeStrength(strongest_extension);\n        for\
    \ (String extension : extensions) {\n            double strength = computeStrength(extension);\n\
    \            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxx16oyl.java:27: error: cannot find symbol\n        double strongest_strength\
    \ = computeStrength(strongest_extension);\n                                  \
    \  ^\n  symbol:   method computeStrength(String)\n  location: class Problem\n\
    /tmp/tmpuxx16oyl.java:29: error: cannot find symbol\n            double strength\
    \ = computeStrength(extension);\n                              ^\n  symbol:  \
    \ method computeStrength(String)\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double strength = 0.0;\n        String\
    \ strongest_extension = \"\";\n        for (String extension : extensions) {\n\
    \            double s = 0.0;\n            for (char ch : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(ch))\n                    s +=\
    \ 1.0;\n                else\n                    s -= 1.0;\n            }\n \
    \           if (s > strength) {\n                strength = s;\n             \
    \   strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgjgw2a0z.java:41: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + extensions.stream().max(Comparator.comparing(Problem::strength)).get();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk9g1mge3.java:25: error: invalid method reference\n        return\
    \ class_name + \".\" + extensions.stream().max(Comparator.comparing(Problem::strength)).get();\n\
    \                                                                            \
    \   ^\n  cannot find symbol\n    symbol:   method strength()\n    location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        float strongest = 0.0f;\n        String\
    \ winner = \"\";\n        for (String extension : extensions) {\n            float\
    \ current = getStrength(extension);\n            if (current > strongest) {\n\
    \                strongest = current;\n                winner = extension;\n \
    \           }\n        }\n        return class_name + \".\" + winner;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq25h1q0f.java:28: error: cannot find symbol\n            float\
    \ current = getStrength(extension);\n                            ^\n  symbol:\
    \   method getStrength(String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max = Integer.MIN_VALUE;\n    \
    \    String strongest_extension = null;\n        for (String extension : extensions)\
    \ {\n            int cap = (int) extension.chars().filter(ch -> Character.isUpperCase(ch)).count();\n\
    \            int sm = (int) extension.chars().filter(ch -> Character.isLowerCase(ch)).count();\n\
    \            int strength = cap - sm;\n            if (strength > max) {\n   \
    \             max = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnd7bd633.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String extension = null;\n        String\
    \ extension_name = null;\n        float strength = 0.0f;\n        float current_strength\
    \ = 0.0f;\n        for (String s : extensions) {\n            current_strength\
    \ = 0.0f;\n            for (int i = 0; i < s.length(); i++) {\n              \
    \  if (Character.isUpperCase(s.charAt(i))) {\n                    current_strength++;\n\
    \                } else {\n                    current_strength--;\n         \
    \       }\n            }\n            if (current_strength > strength) {\n   \
    \             strength = current_strength;\n                extension = s;\n \
    \           }\n        }\n        if (extension != null) {\n            extension_name\
    \ = class_name + \".\" + extension;\n        }\n        return extension_name;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2s0pwmci.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double d = 0.0;\n        String ext\
    \ = \"\";\n        for (String e : extensions) {\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int i = 0; i < e.length(); i++) {\n\
    \                if (Character.isUpperCase(e.charAt(i))) {\n                 \
    \   cap++;\n                } else {\n                    sm++;\n            \
    \    }\n            }\n            double current = (double)cap - (double)sm;\n\
    \            if (current > d) {\n                d = current;\n              \
    \  ext = e;\n            }\n        }\n        return class_name + \".\" + ext;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5rpd6pm.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // A list of extensions with their\
    \ strengths.\n        List<Pair<String, Integer>> ExtensionStrength = new ArrayList<>();\n\
    \        // Add the extensions and their strengths to the list.\n        for (String\
    \ extension : extensions) {\n            // This will hold the number of uppercase\
    \ letters.\n            Integer uppercase = 0;\n            // This will hold\
    \ the number of lowercase letters.\n            Integer lowercase = 0;\n     \
    \       // Count the uppercase and lowercase letters in the extension.\n     \
    \       for (int i = 0; i < extension.length(); i++) {\n                // Convert\
    \ the character to an integer.\n                int c = (int) extension.charAt(i);\n\
    \                // if it is an uppercase letter.\n                if (c >= 65\
    \ && c <= 90) {\n                    uppercase++;\n                } else if (c\
    \ >= 97 && c <= 122) {\n                    lowercase++;\n                }\n\
    \            }\n            // Add the extension and its strength to the list.\n\
    \            ExtensionStrength.add(new Pair<>(extension, uppercase - lowercase));\n\
    \        }\n        // The strongest extension.\n        Pair<String, Integer>\
    \ Strongest = new Pair<>(\"\", Integer.MIN_VALUE);\n        // For every extension\
    \ in the list of extensions.\n        for (Pair<String, Integer> p : ExtensionStrength)\
    \ {\n            // If the extension is stronger.\n            if (p.getValue1()\
    \ > Strongest.getValue1()) {\n                // Make it the strongest extension.\n\
    \                Strongest = p;\n            }\n        }\n        // return the\
    \ name of the class and the strongest extension.\n        return class_name +\
    \ \".\" + Strongest.getValue0();\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphc_zm51x.java:59: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        if (extensions.size() == 0) {\n   \
    \         return class_name;\n        }\n        String strongest_extension =\
    \ extensions.get(0);\n        int strength = 0;\n        for (String extension\
    \ : extensions) {\n            int new_strength = 0;\n            for (int index\
    \ = 0; index < extension.length(); index++) {\n                if (Character.isUpperCase(extension.charAt(index)))\
    \ {\n                    new_strength++;\n                } else {\n         \
    \           new_strength--;\n                }\n            }\n            if\
    \ (Math.abs(new_strength) > Math.abs(strength)) {\n                strength =\
    \ new_strength;\n                strongest_extension = extension;\n          \
    \  }\n        }\n        return class_name + \".\" + strongest_extension;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph1e07ald.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        throw new NotImplementedException();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp16re8rme.java:25: error: cannot find symbol\n        throw new\
    \ NotImplementedException();\n                  ^\n  symbol:   class NotImplementedException\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest = \"\";\n        double\
    \ strongestStrength = 0;\n        for (String extension : extensions) {\n    \
    \        double strength = ((double)extension.replaceAll(\"[^A-Z]\", \"\").length()\
    \ - extension.replaceAll(\"[^a-z]\", \"\").length()) / (double)extension.length();\n\
    \            if (strength > strongestStrength) {\n                strongestStrength\
    \ = strength;\n                strongest = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest;\nreturn \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9gb7af50.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String result = class_name;\n     \
    \   BigDecimal strength = new BigDecimal(\"0\");\n        BigDecimal curr = new\
    \ BigDecimal(\"0\");\n        String ext = \"\";\n        String curr_ext = \"\
    \";\n        for (String s : extensions) {\n            int uppercase = 0;\n \
    \           int lowercase = 0;\n            for (char c : s.toCharArray()) {\n\
    \                if (Character.isUpperCase(c)) {\n                    uppercase++;\n\
    \                } else {\n                    lowercase++;\n                }\n\
    \            }\n            curr = new BigDecimal(uppercase).subtract(new BigDecimal(lowercase));\n\
    \            if (curr.compareTo(strength) > 0) {\n                strength = curr;\n\
    \                ext = s;\n            }\n        }\n        if (strength.compareTo(new\
    \ BigDecimal(\"0\")) > 0) {\n            result += \".\" + ext;\n        }\n \
    \       return result;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdv9e34a5.java:50: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        throw new RuntimeException(\"Not yet\
    \ implemented\");\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn65ti9bz.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest = \"\";\n        double\
    \ strength = 0;\n        for (String extension : extensions) {\n            double\
    \ new_strength = strong(extension);\n            if (new_strength > strength)\
    \ {\n                strength = new_strength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm5_7fghp.java:28: error: cannot find symbol\n            double\
    \ new_strength = strong(extension);\n                                  ^\n  symbol:\
    \   method strong(String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int current_strength = 0;\n       \
    \ String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    strength++;\n                } else {\n                 \
    \   strength--;\n                }\n            }\n            if (strength >\
    \ current_strength) {\n                current_strength = strength;\n        \
    \        strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkm9cfrqi.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Code goes here\n        String s\
    \ = \"\";\n        int max_strength = 0;\n        String strongest_extension =\
    \ \"\";\n        for (String ext : extensions) {\n            int caps = 0;\n\
    \            int smalls = 0;\n            for (int i = 0; i < ext.length(); i++)\
    \ {\n                if (Character.isUpperCase(ext.charAt(i))) {\n           \
    \         caps++;\n                } else {\n                    smalls++;\n \
    \               }\n            }\n            int strength = caps - smalls;\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = ext;\n            }\n        }\n      \
    \  s = class_name + \".\" + strongest_extension;\n        return s;\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr5j1pdhy.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max_strength = -Double.MAX_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String ext : extensions)\
    \ {\n            int caps = 0;\n            int sm = 0;\n            for (int\
    \ i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   sm++;\n                }\n            }\n            double strength = (double)caps\
    \ - (double)sm;\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = ext;\n            }\n   \
    \     }\n        return class_name + \".\" + strongest_extension;\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0xui9ll.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_strength = 0;\n        String\
    \ strongest_extension = \"\";\n        for (String extension : extensions) {\n\
    \            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    strength++;\n                } else {\n                 \
    \   strength--;\n                }\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4uctygwx.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        \n        String strongest = extensions.get(0);\n\
    \        double max_strength = -2;\n        for (String ext : extensions) {\n\
    \            double strength = 1.0 * count_upper(ext) - count_lower(ext);\n  \
    \          if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp84wex9is.java:29: error: cannot find symbol\n            double\
    \ strength = 1.0 * count_upper(ext) - count_lower(ext);\n                    \
    \                ^\n  symbol:   method count_upper(String)\n  location: class\
    \ Problem\n/tmp/tmp84wex9is.java:29: error: cannot find symbol\n            double\
    \ strength = 1.0 * count_upper(ext) - count_lower(ext);\n                    \
    \                                   ^\n  symbol:   method count_lower(String)\n\
    \  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // <----------------------------------------------------------------------->\n\
    \        // There is NO PARSING or UNPACKING of STRINGS in this problem.\n   \
    \     // <----------------------------------------------------------------------->\n\
    \        // <----------------------------------------------------------------------->\n\
    \        // Write your solution between this comment and the comment below.\n\
    \        // YOU MAY NOT USE ANY CODE FROM OUTSIDE OF THIS FUNCTION OR THE TEST\
    \ WILL FAIL.\n        // <----------------------------------------------------------------------->\n\
    \        String[] ext = new String[extensions.size()];\n        extensions.toArray(ext);\n\
    \        String ans = class_name + \".\" + ext[0];\n        int ans_strength =\
    \ strength(ext[0]);\n        for (int i = 1; i < ext.length; i++) {\n        \
    \    int s = strength(ext[i]);\n            if (s > ans_strength) {\n        \
    \        ans = class_name + \".\" + ext[i];\n                ans_strength = s;\n\
    \            }\n        }\n        return ans;\n        // <----------------------------------------------------------------------->\n\
    \        // Write your solution between this comment and the comment above.\n\
    \        // YOU MAY NOT USE ANY CODE FROM OUTSIDE OF THIS FUNCTION OR THE TEST\
    \ WILL FAIL.\n        // <----------------------------------------------------------------------->\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1j2qxoa2.java:35: error: cannot find symbol\n        int ans_strength\
    \ = strength(ext[0]);\n                           ^\n  symbol:   method strength(String)\n\
    \  location: class Problem\n/tmp/tmp1j2qxoa2.java:37: error: cannot find symbol\n\
    \            int s = strength(ext[i]);\n                    ^\n  symbol:   method\
    \ strength(String)\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        //return class_name + \".\" + extensions.get(0);\n\
    \        String strongest_extension = \"\";\n        float strongest_extension_strength\
    \ = -1.0f;\n        for (String extension : extensions) {\n            float strength\
    \ = ((float)extension.replaceAll(\"[^A-Z]\", \"\").length() - \n             \
    \                 (float)extension.replaceAll(\"[^a-z]\", \"\").length()) / \n\
    \                              (float)extension.length();\n            if (strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0320issf.java:38: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code\n        return null;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr4t5w_gt.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        List<String> possibleExtensions = extensions.stream().map(x\
    \ -> class_name + \".\" + x).collect(Collectors.toList());\n        double currentStrongest\
    \ = 0;\n        String currentStrongestExtension = \"\";\n        for (String\
    \ extension : possibleExtensions) {\n            double extensionStrength = extensionStrength(extension);\n\
    \            if (extensionStrength > currentStrongest) {\n                currentStrongest\
    \ = extensionStrength;\n                currentStrongestExtension = extension;\n\
    \            }\n        }\n        return currentStrongestExtension;\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzni43xy.java:29: error: cannot find symbol\n            double\
    \ extensionStrength = extensionStrength(extension);\n                        \
    \               ^\n  symbol:   method extensionStrength(String)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int index_of_class = class_name.length();\n\
    \        double strength = Double.NEGATIVE_INFINITY;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            double current_strength\
    \ = extension.chars().filter(Character::isUpperCase).count() -\n             \
    \       extension.chars().filter(Character::isLowerCase).count();\n          \
    \  if (current_strength > strength) {\n                strength = current_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppy4e4kwb.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        System.out.printf(\"Given class: %s,\
    \ extensions: %s\\n\", class_name, extensions);\n        return \"\";\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9j57bb2a.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n\
    \        String extension = \"\";\n        for (String ext : extensions) {\n \
    \           int strength = getStrength(ext);\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                extension = ext;\n\
    \            }\n        }\n        return class_name + \".\" + extension;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiqlabrwc.java:28: error: cannot find symbol\n            int strength\
    \ = getStrength(ext);\n                           ^\n  symbol:   method getStrength(String)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        return \"\
    \";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp11q2ihvn.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        //Your code goes here\n        //return\
    \ \"Your answer here\";\n        class extension_strength implements Comparable<extension_strength>\
    \ {\n            String name;\n            int strength;\n            public extension_strength(String\
    \ s, int i) {\n                name = s;\n                strength = i;\n    \
    \        }\n            public int compareTo(extension_strength b) {\n       \
    \         if (this.strength < b.strength) {\n                    return 1;\n \
    \               } else if (this.strength > b.strength) {\n                   \
    \ return -1;\n                } else {\n                    return 0;\n      \
    \          }\n            }\n        }\n        ArrayList<extension_strength>\
    \ lst = new ArrayList<extension_strength>();\n        for (String s : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (int i\
    \ = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            lst.add(new extension_strength(s,\
    \ cap - sm));\n        }\n        Collections.sort(lst);\n        return class_name\
    \ + \".\" + lst.get(0).name;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdob93qku.java:59: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest = \"\";\n        float\
    \ strength = -1;\n        float thisStrength = 0;\n        for (String extension\
    \ : extensions) {\n            char[] extensionChars = extension.toCharArray();\n\
    \            int upperCount = 0;\n            int lowerCount = 0;\n          \
    \  for (char letter : extensionChars) {\n                if (Character.isUpperCase(letter))\
    \ {\n                    upperCount++;\n                } else {\n           \
    \         lowerCount++;\n                }\n            }\n            thisStrength\
    \ = (float)upperCount - (float)lowerCount;\n            if (thisStrength > strength)\
    \ {\n                strength = thisStrength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp53pvrp4z.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here.\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptwuuh0_g.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int strength = 0;\n        String strongest\
    \ = \"\";\n        for (String extension : extensions) {\n            int CAP\
    \ = (int) extension.chars().filter(Character::isUpperCase).count();\n        \
    \    int SM = (int) extension.chars().filter(Character::isLowerCase).count();\n\
    \            int extension_strength = CAP - SM;\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwslrvn1p.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double best_strength = -1;\n      \
    \  String best_extension = \"\";\n        for (String ext : extensions) {\n  \
    \          String class_extension = class_name + \".\" + ext;\n            Class\
    \ c = null;\n            try {\n                c = Class.forName(class_extension);\n\
    \            } catch (ClassNotFoundException e) {\n                continue;\n\
    \            }\n            // c.getDeclaredConstructors();\n            // c.getMethods();\n\
    \            // c.getFields();\n            int n_uppercase = ext.length() - ext.replaceAll(\"\
    [A-Z]\", \"\").length();\n            int n_lowercase = ext.length() - ext.replaceAll(\"\
    [a-z]\", \"\").length();\n            double strength = (double) n_uppercase -\
    \ (double) n_lowercase;\n            if (strength > best_strength) {\n       \
    \         best_strength = strength;\n                best_extension = ext;\n \
    \           }\n        }\n        return class_name + \".\" + best_extension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5kkam7rq.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + Collections.max(extensions,\
    \ new Comparator<String>() {\n            @Override\n            public int compare(String\
    \ a, String b) {\n                int ca = 0, cb = 0;\n                for (int\
    \ i = 0; i < a.length(); i++) {\n                    if (Character.isUpperCase(a.charAt(i)))\
    \ ca++;\n                    else ca--;\n                }\n                for\
    \ (int i = 0; i < b.length(); i++) {\n                    if (Character.isUpperCase(b.charAt(i)))\
    \ cb++;\n                    else cb--;\n                }\n                return\
    \ ca - cb;\n            }\n        });\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3dtgptnw.java:40: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code goes here\n        ArrayList<Pair<String,\
    \ Double>> output = new ArrayList<>();\n        for (String ext : extensions)\
    \ {\n            double CAP = ext.replaceAll(\"[^A-Z]\", \"\").length();\n   \
    \         double SM = ext.replaceAll(\"[^a-z]\", \"\").length();\n           \
    \ output.add(new Pair<>(ext, CAP - SM));\n        }\n        Collections.sort(output,\
    \ new Comparator<Pair<String, Double>>() {\n            @Override\n          \
    \  public int compare(Pair<String, Double> p1, Pair<String, Double> p2) {\n  \
    \              if (p1.getValue1() < p2.getValue1()) {\n                    return\
    \ 1;\n                } else if (p1.getValue1() > p2.getValue1()) {\n        \
    \            return -1;\n                } else {\n                    return\
    \ 0;\n                }\n            }\n        });\n        return class_name\
    \ + \".\" + output.get(0).getValue0();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbhdqn_s5.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code goes here\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjp9jk384.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n\
    \        String strongestExtension = null;\n        for (String extension : extensions)\
    \ {\n            int capCount = extension.replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            int smCount = extension.replaceAll(\"[^a-z]\", \"\").length();\n\
    \            int strength = capCount - smCount;\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                strongestExtension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongestExtension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdcs0aw5o.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max = 0.0;\n        String strongest\
    \ = \"\";\n        for (String ext : extensions) {\n            int caps = 0;\n\
    \            int sm = 0;\n            for (int i = 0; i < ext.length(); i++) {\n\
    \                if (Character.isUpperCase(ext.charAt(i))) {\n               \
    \     caps++;\n                } else {\n                    sm++;\n         \
    \       }\n            }\n            double strength = caps - sm;\n         \
    \   if (strength > max) {\n                max = strength;\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5n35t7qx.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        BigDecimal strength = new BigDecimal(0);\n\
    \        String strongest = \"\";\n        for (String ext : extensions) {\n \
    \           BigDecimal this_strength = new BigDecimal(1);\n            int cap\
    \ = 0;\n            int small = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    small++;\n                }\n \
    \           }\n            this_strength = new BigDecimal(cap);\n            this_strength\
    \ = this_strength.subtract(new BigDecimal(small));\n            if (this_strength.compareTo(strength)\
    \ > 0) {\n                strength = this_strength;\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_eg26wd.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        System.out.println(\"Class Name: \"\
    \ + class_name);\n        System.out.println(\"Extensions: \" + extensions);\n\
    \        String extension_name = \"\";\n        int strength = 0;\n        int\
    \ strong = 0;\n        int cap = 0;\n        int sm = 0;\n        for (String\
    \ extension : extensions) {\n            System.out.println(\"Current Extension:\
    \ \" + extension);\n            for (int i = 0; i < extension.length(); i++) {\n\
    \                if (Character.isUpperCase(extension.charAt(i))) {\n         \
    \           cap++;\n                } else {\n                    sm++;\n    \
    \            }\n            }\n            strong = cap - sm;\n            if\
    \ (strong > strength) {\n                strength = strong;\n                extension_name\
    \ = extension;\n            }\n            System.out.println(\"Strength: \" +\
    \ strong);\n            System.out.println(\"New Strength: \" + strength);\n \
    \           cap = 0;\n            sm = 0;\n        }\n        return class_name\
    \ + \".\" + extension_name;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbu2pial.java:52: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here!\n        // . .\
    \ .\n        return \"\";\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvd1desgc.java:28: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // write your code here\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvsk1vrzx.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        return null;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8jdcp5h.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // your code here\n        return \"\
    \";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp82dgrr9s.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = strength(extension);\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqnqflrib.java:28: error: cannot find symbol\n            int strength\
    \ = strength(extension);\n                           ^\n  symbol:   method strength(String)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest = \"\";\n        double\
    \ maxStrength = 0;\n        int cap;\n        int sm;\n        double strength;\n\
    \        for (String ext : extensions) {\n            cap = 0;\n            sm\
    \ = 0;\n            for (int i = 0; i < ext.length(); i++) {\n               \
    \ if (Character.isUpperCase(ext.charAt(i))) cap++;\n                else sm++;\n\
    \            }\n            strength = (double)cap - (double)sm;\n           \
    \ if (strength >= maxStrength) {\n                maxStrength = strength;\n  \
    \              strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj9tsb1q2.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // write your code here\n        int\
    \ strongest_extension_index = 0;\n        double strongest_extension_strength\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            double\
    \ strength = 0;\n            for (int j = 0; j < extensions.get(i).length(); j++)\
    \ {\n                strength += Character.isUpperCase(extensions.get(i).charAt(j))\
    \ ? 1 : -1;\n            }\n            if (Math.abs(strength) > Math.abs(strongest_extension_strength))\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(strongest_extension_index);\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5bftn98b.java:39: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int maxstrength = 0;\n        String\
    \ ans = \"\";\n        for (String str : extensions) {\n            int capital\
    \ = 0;\n            int small = 0;\n            for (int i = 0; i < str.length();\
    \ i++) {\n                if (Character.isUpperCase(str.charAt(i)))\n        \
    \            capital++;\n                else\n                    small++;\n\
    \            }\n            int strength = capital - small;\n            if (strength\
    \ >= maxstrength) {\n                maxstrength = strength;\n               \
    \ ans = str;\n            }\n        }\n        if (ans.length() == 0)\n     \
    \       return \"null\";\n        else\n            return class_name + \".\"\
    \ + ans;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2efktaaq.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + extensions.stream().reduce((a,\
    \ b) -> {\n            int a_cap = (int)a.chars().filter(c -> Character.isUpperCase(c)).count();\n\
    \            int a_sm = (int)a.chars().filter(c -> Character.isLowerCase(c)).count();\n\
    \            int b_cap = (int)b.chars().filter(c -> Character.isUpperCase(c)).count();\n\
    \            int b_sm = (int)b.chars().filter(c -> Character.isLowerCase(c)).count();\n\
    \            return (a_cap - a_sm > b_cap - b_sm) ? a : b;\n        }).get();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphs3pm1if.java:32: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        System.out.printf(\"Class name: %s\\\
    n\", class_name);\n        Pair<String, Double> p = new Pair<String, Double>(\"\
    \", -1000000.0);\n        for (String e : extensions) {\n            double cp\
    \ = 0.0;\n            double sp = 0.0;\n            for (int i = 0; i < e.length();\
    \ i++) {\n                if (Character.isUpperCase(e.charAt(i))) {\n        \
    \            cp += 1.0;\n                } else {\n                    sp += 1.0;\n\
    \                }\n            }\n            if (p.getValue1() < cp - sp) {\n\
    \                p = new Pair<String, Double>(e, cp - sp);\n            }\n  \
    \      }\n        return String.format(\"%s.%s\", class_name, p.getValue0());\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz16m0cq_.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        Double max_score = Double.MIN_VALUE;\n\
    \        String class_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            String ext = extension.toLowerCase();\n            StringBuilder\
    \ sb = new StringBuilder();\n            Double score = 0.0;\n            int\
    \ cap = 0;\n            int small = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    small++;\n                }\n \
    \           }\n            score = (double) cap - (double) small;\n          \
    \  if (score > max_score) {\n                max_score = score;\n            \
    \    class_extension = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + class_extension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnw2sqv_5.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String res = class_name;\n        int\
    \  maxStrength = 0;\n        for (String ext : extensions) {\n            int\
    \ strength = 0;\n            for (int i = 0; i < ext.length(); i++) {\n      \
    \          if (Character.isUpperCase(ext.charAt(i))) {\n                    strength++;\n\
    \                } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength >= maxStrength) {\n                maxStrength\
    \ = strength;\n                res = class_name + \".\" + ext;\n            }\n\
    \        }\n        return res;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz_4vkc4u.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String result = class_name;\n     \
    \   try {\n            ArrayList<Pair<String, BigDecimal>> extension_strengths\
    \ = new ArrayList<>();\n            BigDecimal strength;\n            String extension;\n\
    \            for (String ext : extensions) {\n                strength = BigDecimal.ZERO;\n\
    \                extension = \"\";\n                for (int i = 0; i < ext.length();\
    \ i++) {\n                    if (Character.isUpperCase(ext.charAt(i)))\n    \
    \                    strength = strength.add(BigDecimal.ONE);\n              \
    \      else\n                        strength = strength.subtract(BigDecimal.ONE);\n\
    \                    extension += ext.charAt(i);\n                }\n        \
    \        extension_strengths.add(new Pair<>(extension, strength));\n         \
    \   }\n            Pair<String, BigDecimal> max_pair = extension_strengths.get(0);\n\
    \            for (Pair<String, BigDecimal> pair : extension_strengths) {\n   \
    \             if (pair.getValue().compareTo(max_pair.getValue()) > 0)\n      \
    \              max_pair = pair;\n            }\n            result += \".\" +\
    \ max_pair.getKey();\n        } catch (Exception e) {\n            e.printStackTrace();\n\
    \        }\n        return result;\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgzh0xvwk.java:44: error: method getValue in class Tuple cannot\
    \ be applied to given types;\n                if (pair.getValue().compareTo(max_pair.getValue())\
    \ > 0)\n                                                      ^\n  required: int\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    /tmp/tmpgzh0xvwk.java:44: error: method getValue in class Tuple cannot be applied\
    \ to given types;\n                if (pair.getValue().compareTo(max_pair.getValue())\
    \ > 0)\n                        ^\n  required: int\n  found: no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmpgzh0xvwk.java:47:\
    \ error: cannot find symbol\n            result += \".\" + max_pair.getKey();\n\
    \                                    ^\n  symbol:   method getKey()\n  location:\
    \ variable max_pair of type Pair<String,BigDecimal>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String rv = class_name;\n        //\
    \ Your code here\n        String strongestExtension = null;\n        Double strongest\
    \ = 0.0;\n        for (String ext : extensions) {\n            Double strength\
    \ = 0.0;\n            for (int i = 0; i < ext.length(); i++) {\n             \
    \   if (Character.isUpperCase(ext.charAt(i))) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            if (strongestExtension == null || strength\
    \ > strongest) {\n                strongestExtension = ext;\n                strongest\
    \ = strength;\n            }\n        }\n        rv += \".\" + strongestExtension;\n\
    \        return rv;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt9eixoot.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ul281w2.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code goes here.\n        return\
    \ null;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnqwnbqem.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double strongest = 0;\n        String\
    \ extension = \"\";\n        for (String ext : extensions) {\n            double\
    \ strength = 0;\n            for (int i = 0; i < ext.length(); i++) {\n      \
    \          if (Character.isUpperCase(ext.charAt(i))) {\n                    strength++;\n\
    \                } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength > strongest) {\n                strongest\
    \ = strength;\n                extension = ext;\n            }\n        }\n  \
    \      return class_name + \".\" + extension;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpowt2sz_0.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest_extension = null;\n\
    \        int strongest_strength = 0;\n        for (String ext : extensions) {\n\
    \            int uppercase = 0;\n            int lowercase = 0;\n            for\
    \ (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    uppercase++;\n                } else {\n            \
    \        lowercase++;\n                }\n            }\n            int strength\
    \ = uppercase - lowercase;\n            if (strength > strongest_strength) {\n\
    \                strongest_strength = strength;\n                strongest_extension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9w_0mq_.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        double max_strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            double strength = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsrcs05nl.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        try {\n            int max = 0;\n \
    \           String str = \"\";\n            for (String extension : extensions)\
    \ {\n                int cap = 0;\n                int sm = 0;\n             \
    \   for (int i = 0; i < extension.length(); i++) {\n                    if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                        cap++;\n                    } else {\n          \
    \              sm++;\n                    }\n                }\n             \
    \   if (cap - sm > max) {\n                    max = cap - sm;\n             \
    \       str = extension;\n                }\n            }\n            return\
    \ class_name + \".\" + str;\n        } catch (Exception e) {\n            return\
    \ \"\";\n        }\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxmwxis2h.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        Pair<String, Double> strongest = new\
    \ Pair<>(\"\", Double.MIN_VALUE);\n        extensions.forEach(s -> {\n       \
    \     double strength = (double) s.replaceAll(\"[^A-Z]\", \"\").length() - (double)\
    \ s.replaceAll(\"[^a-z]\", \"\").length();\n            if (strength > strongest.getValue1())\
    \ {\n                strongest = new Pair<>(s, strength);\n            }\n   \
    \     });\n        return class_name + \".\" + strongest.getValue0();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp57togkod.java:33: error: unreachable statement\nreturn \"\";\n\
    ^\n/tmp/tmp57togkod.java:28: error: local variables referenced from a lambda expression\
    \ must be final or effectively final\n            if (strength > strongest.getValue1())\
    \ {\n                           ^\n/tmp/tmp57togkod.java:29: error: local variables\
    \ referenced from a lambda expression must be final or effectively final\n   \
    \             strongest = new Pair<>(s, strength);\n                ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max = Double.NEGATIVE_INFINITY;\n\
    \        int max_index = -1;\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            String ext = extensions.get(i);\n            int CAP = 0;\n \
    \           int SM = 0;\n            for (int j = 0; j < ext.length(); j++) {\n\
    \                if (Character.isUpperCase(ext.charAt(j))) {\n               \
    \     CAP++;\n                } else {\n                    SM++;\n          \
    \      }\n            }\n            double strength = (double) CAP - SM;\n  \
    \          if (strength > max) {\n                max = strength;\n          \
    \      max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + extensions.get(max_index);\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdeqtyes_.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        // use the\
    \ class with the strongest extension\n        double max_strength = 0;\n     \
    \   String best_class = \"\";\n        for (String ext : extensions) {\n     \
    \       double strength = 0;\n            for (int i = 0; i < ext.length(); i++)\
    \ {\n                char c = ext.charAt(i);\n                if (Character.isUpperCase(c))\n\
    \                    strength++;\n                else\n                    strength--;\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                best_class = ext;\n            }\n        }\n \
    \       return class_name + \".\" + best_class;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmput38cto_.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max = 0;\n        String answer\
    \ = \"\";\n        for (String ext : extensions) {\n            int cap = 0;\n\
    \            int small = 0;\n            for (int i = 0; i < ext.length(); i++)\
    \ {\n                char c = ext.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  small++;\n                }\n            }\n            if (cap - small > max)\
    \ {\n                max = cap - small;\n                answer = ext;\n     \
    \       }\n        }\n        return class_name + \".\" + answer;\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwq9qqba9.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest = \"\";\n        double\
    \ s = 0;\n        for (String e : extensions) {\n            double e_s = (double)\
    \ count_upper(e) - count_lower(e);\n            if (e_s > s) {\n             \
    \   s = e_s;\n                strongest = e;\n            }\n        }\n     \
    \   return class_name + \".\" + strongest;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwp4aacmd.java:28: error: cannot find symbol\n            double\
    \ e_s = (double) count_upper(e) - count_lower(e);\n                          \
    \        ^\n  symbol:   method count_upper(String)\n  location: class Problem\n\
    /tmp/tmpwp4aacmd.java:28: error: cannot find symbol\n            double e_s =\
    \ (double) count_upper(e) - count_lower(e);\n                                \
    \                   ^\n  symbol:   method count_lower(String)\n  location: class\
    \ Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_strength = 0;\n        String\
    \ max_extension = null;\n        for (String extension : extensions) {\n     \
    \       int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) cap++;\n                else\
    \ sm++;\n            }\n            int strength = cap - sm;\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  max_extension = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + max_extension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp30yaqej7.java:41: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphe9jmjt6.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        //...\n        return null;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jdmpalp.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        Pair<String, Double> strongest = new\
    \ Pair<String, Double>(\"\", 0.0);\n        for (String extension : extensions)\
    \ {\n            Pair<String, Double> p = new Pair<String, Double>(extension,\
    \ \n                    (double)extension.replaceAll(\"[^A-Z]\", \"\").length()\
    \ - \n                    (double)extension.replaceAll(\"[^a-z]\", \"\").length());\n\
    \            if (p.getValue1() > strongest.getValue1()) {\n                strongest\
    \ = p;\n            }\n        }\n        return class_name + \".\" + strongest.getValue0();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4p27yere.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String class_name_copy = class_name;\n\
    \        ArrayList<String> extensions_copy = extensions;\n        double strength\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String ext: extensions_copy)\
    \ {\n            double fraction = (double) ext.replaceAll(\"[^A-Z]\", \"\").length()\
    \ \n                              - ext.replaceAll(\"[^a-z]\", \"\").length();\n\
    \            if (fraction > strength) {\n                strength = fraction;\n\
    \                strongest_extension = ext;\n            }\n        }\n      \
    \  String ret_val = class_name_copy + \".\" + strongest_extension;\n        return\
    \ ret_val;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkj3aog98.java:39: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return null;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt1qp_p6t.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String best_extension = null;\n   \
    \     double max_strength = Double.NEGATIVE_INFINITY;\n        for (String extension\
    \ : extensions) {\n            int CAP = (int) extension.chars().filter(Character::isUpperCase).count();\n\
    \            int SM = (int) extension.chars().filter(Character::isLowerCase).count();\n\
    \            double current_strength = (double) CAP - SM;\n            if (current_strength\
    \ > max_strength) {\n                max_strength = current_strength;\n      \
    \          best_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + best_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdnseaz3h.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here!\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2cza02vx.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int strong = 0;\n        String best\
    \ = \"\";\n        for (String ext : extensions) {\n            int caps = 0;\n\
    \            int lower = 0;\n            for (char c : ext.toCharArray()) {\n\
    \                if (Character.isUpperCase(c)) {\n                    caps++;\n\
    \                } else {\n                    lower++;\n                }\n \
    \           }\n            int comp = caps - lower;\n            if (comp > strong)\
    \ {\n                strong = comp;\n                best = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + best;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphfqa_ai4.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double strongest = -1;\n        String\
    \ ans = \"\";\n        for (String ext : extensions) {\n            int upper\
    \ = 0;\n            int lower = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                char c = ext.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    upper++;\n                } else {\n                \
    \    lower++;\n                }\n            }\n            double strength =\
    \ upper - lower;\n            if (strength > strongest) {\n                strongest\
    \ = strength;\n                ans = class_name + \".\" + ext;\n            }\n\
    \        }\n        return ans;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk50s4d5q.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaoh64gda.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return class_name + \".\" + extensions.stream().max(new\
    \ Comparator<String>() {\n                public int compare(String o1, String\
    \ o2) {\n                    int o1cap = o1.replaceAll(\"[^A-Z]\", \"\").length();\n\
    \                    int o1sm = o1.replaceAll(\"[^a-z]\", \"\").length();\n  \
    \                  int o2cap = o2.replaceAll(\"[^A-Z]\", \"\").length();\n   \
    \                 int o2sm = o2.replaceAll(\"[^a-z]\", \"\").length();\n     \
    \               float o1s = (float) o1cap / (float) o1sm;\n                  \
    \  float o2s = (float) o2cap / (float) o2sm;\n                    if (o1s > o2s)\
    \ return 1;\n                    if (o1s < o2s) return -1;\n                 \
    \   return 0;\n                }\n            }).get();\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbv4qyhi.java:38: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5kaus4_.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        if (extensions.size() == 0) {\n   \
    \         return class_name;\n        }\n        if (extensions.size() == 1) {\n\
    \            return class_name + \".\" + extensions.get(0);\n        }\n     \
    \   ArrayList<Pair<String, Double>> extension_strengths = new ArrayList<>();\n\
    \        for (String ext : extensions) {\n            int lower = 0;\n       \
    \     int upper = 0;\n            for (int i = 0; i < ext.length(); i++) {\n \
    \               if (Character.isUpperCase(ext.charAt(i))) {\n                \
    \    upper++;\n                } else {\n                    lower++;\n      \
    \          }\n            }\n            double strength = (double) upper - (double)\
    \ lower;\n            extension_strengths.add(new Pair<String, Double>(ext, strength));\n\
    \        }\n        extension_strengths.sort((a, b) -> Double.compare(b.getValue1(),\
    \ a.getValue1()));\n        return class_name + \".\" + extension_strengths.get(0).getValue0();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpou_c4yg1.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double strongest = -1.0;\n        int\
    \ index = -1;\n        for (int i = 0; i < extensions.size(); i++) {\n       \
    \     int CAP = 0;\n            int SM = 0;\n            for (int j = 0; j < extensions.get(i).length();\
    \ j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    CAP++;\n                } else {\n                  \
    \  SM++;\n                }\n            }\n            double strength = (double)CAP\
    \ - (double)SM;\n            if (strength > strongest) {\n                strongest\
    \ = strength;\n                index = i;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions.get(index);\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpua74qzof.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Implement your solution here\n \
    \       int max = 0;\n        String res = \"\";\n        for (String s : extensions)\
    \ {\n            int u = 0;\n            int l = 0;\n            for (int i =\
    \ 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    u++;\n                } else {\n                    l++;\n\
    \                }\n            }\n            int t = u - l;\n            if\
    \ (t > max) {\n                max = t;\n                res = s;\n          \
    \  }\n        }\n        return class_name + \".\" + res;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxo9tk_3q.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        if (extensions.size() == 0) return\
    \ class_name;\n        double max_strength = 0;\n        String max_extension\
    \ = extensions.get(0);\n        for (String extension : extensions) {\n      \
    \      double strength = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            if (strength > max_strength) {\n    \
    \            max_strength = strength;\n                max_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + max_extension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplzzxhts1.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        Pair<String, Double> max_p = new Pair<>(\"\
    \", -1.0);\n        for (String s : extensions) {\n            int caps = (int)s.chars().filter(Character::isUpperCase).count();\n\
    \            int smalls = (int)s.chars().filter(Character::isLowerCase).count();\n\
    \            double strength = ((double)caps - (double)smalls);\n            if\
    \ (strength > max_p.getValue1()) {\n                max_p = Pair.with(s, strength);\n\
    \            }\n        }\n        return String.format(\"%s.%s\", class_name,\
    \ max_p.getValue0());\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphywmklsl.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Good luck!\n        return \"\"\
    ;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphmzqbo82.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int min_strength = Integer.MAX_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String e : extensions)\
    \ {\n            int CAP = 0;\n            int SM = 0;\n            for (int i\
    \ = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i)))\
    \ {\n                    CAP++;\n                } else {\n                  \
    \  SM++;\n                }\n            }\n            int strength = CAP - SM;\n\
    \            if (strength < min_strength) {\n                min_strength = strength;\n\
    \                strongest_extension = e;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppo2uqxdd.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your Code here\n        return \"\
    \";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnfte3484.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max = -Double.MAX_VALUE;\n \
    \       String max_s = \"\";\n        for (String s : extensions) {\n        \
    \    double cnt = 0;\n            double cnt_s = 0;\n            for (int i =\
    \ 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    cnt++;\n                } else {\n                  \
    \  cnt_s++;\n                }\n            }\n            if (cnt-cnt_s > max)\
    \ {\n                max = cnt-cnt_s;\n                max_s = s;\n          \
    \  }\n        }\n        return class_name + \".\" + max_s;\nreturn \"\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp4kkuxro.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        float largest = 0.0f;\n        String\
    \ strongest = \"\";\n        for (String extension : extensions) {\n         \
    \   int upper_count = 0;\n            int lower_count = 0;\n            for (int\
    \ i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    upper_count++;\n                } else {\n          \
    \          lower_count++;\n                }\n            }\n            float\
    \ strength = (float) upper_count - (float) lower_count;\n            if (strength\
    \ > largest) {\n                largest = strength;\n                strongest\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest;\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3r57z96n.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String answer = class_name;\n     \
    \   double max_strength = 0;\n        for (String extension : extensions) {\n\
    \            double strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    strength += 1;\n                } else {\n              \
    \      strength -= 1;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  answer = class_name + \".\" + extension;\n            }\n        }\n      \
    \  return answer;\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_zutps13.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String strongest_extension = \"\";\n\
    \        double strength = 0;\n        int cap = 0;\n        int sm = 0;\n   \
    \     double this_strength = 0;\n        for (String ext : extensions) {\n   \
    \         cap = ext.replaceAll(\"[^A-Z]\", \"\").length();\n            sm = ext.replaceAll(\"\
    [^a-z]\", \"\").length();\n            this_strength = (double)cap - (double)sm;\n\
    \            if (this_strength > strength) {\n                strength = this_strength;\n\
    \                strongest_extension = ext;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwgalk1g7.java:40: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int strength = 0;\n        String class_with_extension\
    \ = \"\";\n        for (String ext : extensions) {\n            int cap = countCapitals(ext);\n\
    \            int sm = countSmallLetters(ext);\n            if (strength < cap\
    \ - sm) {\n                strength = cap - sm;\n                class_with_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n        return class_with_extension;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpumxuw4pn.java:28: error: cannot find symbol\n            int cap\
    \ = countCapitals(ext);\n                      ^\n  symbol:   method countCapitals(String)\n\
    \  location: class Problem\n/tmp/tmpumxuw4pn.java:29: error: cannot find symbol\n\
    \            int sm = countSmallLetters(ext);\n                     ^\n  symbol:\
    \   method countSmallLetters(String)\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // We want to find the extension with\
    \ the strongest strength. In order to do\n        // that, we need to find the\
    \ strength of each extension, and then find the \n        // extension with the\
    \ greatest strength.\n        // Let's find the strength of each extension, and\
    \ return the extension with\n        // the greatest strength.\n        ArrayList<Integer>\
    \ strength = new ArrayList<Integer>();\n        int caps = 0;\n        int lowercase\
    \ = 0;\n        for (String extension : extensions) {\n            for (int i\
    \ = 0; i < extension.length(); i++) {\n                char c = extension.charAt(i);\n\
    \                if (Character.isUpperCase(c)) {\n                    caps++;\n\
    \                } else {\n                    lowercase++;\n                }\n\
    \            }\n            int total = caps - lowercase;\n            strength.add(total);\n\
    \            caps = 0;\n            lowercase = 0;\n        }\n        int largest\
    \ = Collections.max(strength);\n        String strongest = extensions.get(strength.indexOf(largest));\n\
    \        return class_name + \".\" + strongest;\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"\
    ), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp00ic7lpb.java:50: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String exts = \"\";\n        for (String\
    \ ext : extensions) {\n            exts += (getCap(ext) - getSm(ext)) + \":\"\
    ;\n        }\n        String[] exts_arr = exts.split(\":\");\n        int max\
    \ = 0;\n        int index = 0;\n        for (int i = 0; i < exts_arr.length; i++)\
    \ {\n            if (Integer.parseInt(exts_arr[i]) > max) {\n                max\
    \ = Integer.parseInt(exts_arr[i]);\n                index = i;\n            }\n\
    \        }\n        return class_name + \".\" + extensions.get(index);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphsdyf2ig.java:27: error: cannot find symbol\n            exts +=\
    \ (getCap(ext) - getSm(ext)) + \":\";\n                     ^\n  symbol:   method\
    \ getCap(String)\n  location: class Problem\n/tmp/tmphsdyf2ig.java:27: error:\
    \ cannot find symbol\n            exts += (getCap(ext) - getSm(ext)) + \":\";\n\
    \                                   ^\n  symbol:   method getSm(String)\n  location:\
    \ class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // TODO: Write code here\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprlqqfuqc.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        float best_strength = -10000.0f;\n\
    \        String best_extension = null;\n        for (String extension : extensions)\
    \ {\n            int cap = extension.replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            int sm = extension.replaceAll(\"[^a-z]\", \"\").length();\n     \
    \       float strength = (float)cap - (float)sm;\n            if (strength > best_strength)\
    \ {\n                best_strength = strength;\n                best_extension\
    \ = extension;\n            }\n        }\n        return String.format(\"%s.%s\"\
    , class_name, best_extension);\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmju7c81f.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        \nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_r6m432.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        //\n        //\n        //\n      \
    \  //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n       \nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphy4pf2rh.java:199)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int cap, sm, strongest_cap = -1, strongest_sm\
    \ = 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            cap = extension.replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            sm = extension.replaceAll(\"[^a-z]\", \"\").length();\n         \
    \   if (cap - sm > strongest_cap) {\n                strongest_cap = cap - sm;\n\
    \                strongest_sm = sm;\n                strongest_extension = extension;\n\
    \            } else if (cap - sm == strongest_cap && sm < strongest_sm) {\n  \
    \              strongest_cap = cap - sm;\n                strongest_sm = sm;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5g88i0pl.java:41: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // This is your job.\n        return\
    \ null;\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnyvu78dz.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        double max_strength = -Double.MAX_VALUE;\n\
    \        String max_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int num_cap = (int) extension.chars().filter(Character::isUpperCase).count();\n\
    \            int num_small = (int) extension.chars().filter(Character::isLowerCase).count();\n\
    \            double strength = (double) num_cap - num_small;\n            if (strength\
    \ >= max_strength) {\n                max_strength = strength;\n             \
    \   max_extension = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + max_extension;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz_utdpco.java:37: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code goes here\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm49sy8_6.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_zn2m6ss.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj2_upicu.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n\
    \        String max_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = calculate_strength(extension);\n            if\
    \ (strength > max_strength) {\n                max_strength = strength;\n    \
    \            max_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + max_extension;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0huyjcy.java:28: error: cannot find symbol\n            int strength\
    \ = calculate_strength(extension);\n                           ^\n  symbol:  \
    \ method calculate_strength(String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        String best_extension = null;\n   \
    \     double best_score = 0;\n        for (String extension : extensions) {\n\
    \            int upper = 0;\n            int lower = 0;\n            for (char\
    \ c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    upper++;\n                } else {\n                \
    \    lower++;\n                }\n            }\n            double score = (double)\
    \ upper / (double) lower;\n            if (score > best_score) {\n           \
    \     best_score = score;\n                best_extension = extension;\n     \
    \       }\n        }\n        return class_name + \".\" + best_extension;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0cvwa186.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here\n        String strongest\
    \ = \"\";\n        float strongestStrength = -2;\n        for (String extension\
    \ : extensions) {\n            int cap = 0;\n            int sm = 0;\n       \
    \     for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            float strength = (float)\
    \ cap - sm;\n            if (strength > strongestStrength) {\n               \
    \ strongestStrength = strength;\n                strongest = extension;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpty_siiy7.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        // Your code here!\n        return\
    \ \"\";\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_g_e5si8.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        int max = Integer.MIN_VALUE;\n    \
    \    String s = \"\";\n        for (String ext : extensions) {\n            int\
    \ cap = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n      \
    \              cap++;\n                } else {\n                    sm++;\n \
    \               }\n            }\n            if (cap - sm > max) {\n        \
    \        max = cap - sm;\n                s = ext;\n            }\n        }\n\
    \        return class_name + \".\" + s;\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\", (String)\"\
    eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxegjs94v.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        class Extension {\n            String\
    \ name;\n            double str;\n            public Extension(String name, double\
    \ str) {\n                this.name = name;\n                this.str = str;\n\
    \            }\n        }\n        ArrayList<Extension> es = new ArrayList<>();\n\
    \        double max = -999.0;\n        String s = \"\";\n        for (String e\
    \ : extensions) {\n            double cap = 0.0;\n            double sm = 0.0;\n\
    \            for (int i = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            double str = cap - sm;\n\
    \            if (str > max) {\n                max = str;\n                s =\
    \ e;\n            }\n        }\n        return class_name + \".\" + s;\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0msjb6ug.java:53: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        if (extensions.size() == 0) {\n   \
    \         return class_name;\n        }\n        ArrayList<Integer> strength =\
    \ new ArrayList<Integer>();\n        for (String ext : extensions) {\n       \
    \     int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            strength.add(cap - sm);\n        }\n        int index\
    \ = 0;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < strength.size();\
    \ i++) {\n            if (strength.get(i) > max) {\n                max = strength.get(i);\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(index);\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmfomtowb.java:50: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        return null;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
    Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
    , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"\
    NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
    t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
    , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
    K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
    t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
    , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
    okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
    YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
    Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
    _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
    671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0kzvt35.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
    \ ArrayList<String> extensions) {\n        float strength = -1;\n        String\
    \ ext = \"\";\n        for (String s : extensions) {\n            int caps = 0;\n\
    \            int small = 0;\n            for (int i = 0; i < s.length(); i++)\
    \ {\n                if (Character.isUpperCase(s.charAt(i))) {\n             \
    \       caps++;\n                } else {\n                    small++;\n    \
    \            }\n            }\n            float s_strength = (float) caps - small;\n\
    \            if (s_strength > strength) {\n                strength = s_strength;\n\
    \                ext = s;\n            }\n        }\n        return class_name\
    \ + \".\" + ext;\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"\
    tEN\", (String)\"niNE\", (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"\
    nani\", (String)\"NazeDa\", (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"\
    Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new\
    \ ArrayList<String>(Arrays.asList((String)\"t\", (String)\"eMptY\", (String)\"\
    nothing\", (String)\"zeR00\", (String)\"NuLl__\", (String)\"123NoooneB321\")))).equals((\"\
    __YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Ta\", (String)\"TAR\", (String)\"t234An\", (String)\"cosSo\")))).equals((\"K.TAR\"\
    )));\n    assert(StrongestExtension((\"__HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Tab\", (String)\"123\", (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"\
    HhAas\", (String)\"okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"\
    -_-\")))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (new ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"\
    NowW\", (String)\"Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n\
    \    assert(StrongestExtension((\"_\"), (new ArrayList<String>(Arrays.asList((String)\"\
    Bb\", (String)\"91245\")))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (new ArrayList<String>(Arrays.asList((String)\"671235\", (String)\"Bb\"\
    )))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4timzsid.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
