completions:
- '        return nums;'
- "        /*\n        ArrayList<Integer> ints = new ArrayList<>();\n        ArrayList<Integer>\
  \ ints2 = new ArrayList<>();\n        ArrayList<Integer> indices = new ArrayList<>();\n\
  \        String numsString = String.valueOf(nums);\n        int i = 0;\n       \
  \ int j = 0;\n        int k = 0;\n        int sum = 0;\n        while (i < numsString.length())\
  \ {\n            if (numsString.charAt(i) == '-') {\n                indices.add(i);\n\
  \                i++;\n            }\n            if (Character.isDigit(numsString.charAt(i)))\
  \ {\n                ints.add(Character.getNumericValue(numsString.charAt(i)));\n\
  \                i++;\n            }\n            if (numsString.charAt(i) == ',')\
  \ {\n                for (j = k; j < ints.size(); j++) {\n                    sum\
  \ += ints.get(j);\n                }\n                ints2.add(sum);\n        \
  \        sum = 0;\n                i++;\n                k = j;\n            }\n\
  \        }\n        return ints2;\n        */\n        return nums;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int num\
  \ : nums) {\n            ret.add(num);\n        }\n        Collections.sort(ret,\
  \ new Comparator<Integer>() {\n            public int compare(Integer a, Integer\
  \ b) {\n                int x = getPoints(a);\n                int y = getPoints(b);\n\
  \                if (x < y) return -1;\n                if (x > y) return 1;\n \
  \               return 0;\n            }\n        });\n        return ret;"
- "        ArrayList<Integer> sum = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            int total = 0;\n            int n =\
  \ nums.get(i);\n            while (n > 0) {\n                total += n % 10;\n\
  \                n /= 10;\n            }\n            sum.add(total);\n        }\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i + 1;\
  \ j < nums.size(); j++) {\n                if (sum.get(i) > sum.get(j)) {\n    \
  \                Collections.swap(nums, i, j);\n                    Collections.swap(sum,\
  \ i, j);\n                }\n            }\n        }\n        return nums;"
- "        // NOTE: DO NOT CHANGE ANY CODE IN THIS METHOD\n        // because we will\
  \ use it for testing\n        return new ArrayList<Integer>();"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (nums.size()\
  \ == 0) {\n            return result;\n        }\n        HashMap<Integer, ArrayList<Integer>>\
  \ hm = new HashMap<Integer, ArrayList<Integer>>();\n        for (int i = 0; i <\
  \ nums.size(); i++) {\n            int digitSum = sumDigits(nums.get(i));\n    \
  \        if (hm.containsKey(digitSum)) {\n                hm.get(digitSum).add(nums.get(i));\n\
  \            } else {\n                ArrayList<Integer> temp = new ArrayList<Integer>();\n\
  \                temp.add(nums.get(i));\n                hm.put(digitSum, temp);\n\
  \            }\n        }\n        ArrayList<Integer> keys = new ArrayList<Integer>(hm.keySet());\n\
  \        Collections.sort(keys);\n        for (int i = 0; i < keys.size(); i++)\
  \ {\n            ArrayList<Integer> templist = hm.get(keys.get(i));\n          \
  \  for (int j = 0; j < templist.size(); j++) {\n                result.add(templist.get(j));\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            result.add(i);\n        }\n      \
  \  Collections.sort(result, new Comparator<Integer>() {\n            public int\
  \ compare(Integer o1, Integer o2) {\n                int lhs = Math.abs(nums.get(o1));\n\
  \                int rhs = Math.abs(nums.get(o2));\n                return Integer.compare(sumOfDigits(lhs),\
  \ sumOfDigits(rhs));\n            }\n        });\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Integer[]\
  \ sumOfDigits = new Integer[nums.size()];\n        for (int i = 0; i < nums.size();\
  \ i++) {\n            sumOfDigits[i] = sumOfDigits(nums.get(i));\n        }\n  \
  \      Integer[] sortedSumOfDigits = insertionSort(sumOfDigits);\n        int currentIndex\
  \ = 0;\n        while (currentIndex < sortedSumOfDigits.length) {\n            for\
  \ (int i = 0; i < nums.size(); i++) {\n                if (sumOfDigits(nums.get(i))\
  \ == sortedSumOfDigits[currentIndex]) {\n                    result.add(nums.get(i));\n\
  \                    nums.set(i, null);\n                    currentIndex++;\n \
  \               }\n            }\n        }\n        return result;"
- '        return null;'
- "        // TODO: Write your code here\n        return null;"
- "        // Your code goes here\n        return null;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            if (i == 0) {\n                ans.add(nums.get(i));\n\
  \            } else {\n                int sum = 0;\n                String str\
  \ = Integer.toString(nums.get(i));\n                for (int j = 0; j < str.length();\
  \ j++) {\n                    sum += Integer.parseInt(str.substring(j, j + 1));\n\
  \                }\n                for (int j = 0; j < ans.size(); j++) {\n   \
  \                 int sum2 = 0;\n                    String str2 = Integer.toString(ans.get(j));\n\
  \                    for (int k = 0; k < str2.length(); k++) {\n               \
  \         sum2 += Integer.parseInt(str2.substring(k, k + 1));\n                \
  \    }\n                    if (sum <= sum2) {\n                        ans.add(j,\
  \ nums.get(i));\n                        break;\n                    }\n       \
  \             if (j == ans.size() - 1) {\n                        ans.add(nums.get(i));\n\
  \                        break;\n                    }\n                }\n    \
  \        }\n        }\n        return ans;"
- "        // your code goes here...\n        return null;"
- "        ArrayList<Integer> sortedNums = new ArrayList<Integer>();\n        while\
  \ (nums.size() > 0) {\n            int max = 0;\n            int index = 0;\n  \
  \          for (int i = 0; i < nums.size(); i++) {\n                int sum = 0;\n\
  \                int num = nums.get(i);\n                while (num != 0) {\n  \
  \                  sum += num % 10;\n                    num /= 10;\n          \
  \      }\n                if (sum > max) {\n                    max = sum;\n   \
  \                 index = i;\n                }\n            }\n            sortedNums.add(nums.get(index));\n\
  \            nums.remove(index);\n        }\n        return sortedNums;"
- "        ArrayList<Integer> answer = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
  \ Integer>> pairs = new ArrayList<Pair<Integer, Integer>>();\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n           \
  \ int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n\
  \                num /= 10;\n            }\n            pairs.add(new Pair<Integer,\
  \ Integer>(i, sum));\n        }\n        pairs.sort((a, b) -> {\n            if\
  \ (a.second.equals(b.second)) {\n                return a.first.compareTo(b.first);\n\
  \            }\n            return a.second.compareTo(b.second);\n        });\n\
  \        for (Pair<Integer, Integer> p : pairs) {\n            answer.add(nums.get(p.first));\n\
  \        }\n        return answer;"
- '        return null;'
- "        Map<Integer, ArrayList<Integer>> map = new HashMap<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n           \
  \ int sum = 0;\n            while (n != 0) {\n                sum += n % 10;\n \
  \               n /= 10;\n            }\n            if (!map.containsKey(sum))\
  \ {\n                map.put(sum, new ArrayList<>());\n            }\n         \
  \   map.get(sum).add(nums.get(i));\n        }\n        ArrayList<Integer> result\
  \ = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n      \
  \      int key = Collections.min(map.keySet());\n            result.add(map.get(key).get(0));\n\
  \            map.get(key).remove(0);\n            if (map.get(key).size() == 0)\
  \ {\n                map.remove(key);\n            }\n        }\n        return\
  \ result;"
- "        // YOUR CODE HERE\n        return nums;"
- "        if (nums.size() == 0) {\n            return nums;\n        }\n        ArrayList<Integer>\
  \ res = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            res.add(nums.get(i));\n        }\n        for (int i = 0; i < res.size();\
  \ i++) {\n            for (int j = i; j < res.size(); j++) {\n                if\
  \ (i == j) {\n                    continue;\n                }\n               \
  \ if (getSum(res.get(i)) > getSum(res.get(j))) {\n                    int t = res.get(i);\n\
  \                    res.set(i, res.get(j));\n                    res.set(j, t);\n\
  \                }\n            }\n        }\n        return res;"
- '        return new ArrayList<>();'
- "        // write your code here\n        return nums;"
- "        // Your code here\n        return nums;"
- "        ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            ArrayList<Integer> temp = new ArrayList<Integer>();\n\
  \            temp.add(nums.get(i));\n            output.add(get_digit_sum(temp));\n\
  \        }\n        Collections.sort(output);\n        return output;"
- "        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n      \
  \      int sum = 0;\n            while (n != 0) {\n                sum += n % 10;\n\
  \                n /= 10;\n            }\n            pairs.add(new Pair<>(sum,\
  \ i));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Integer,\
  \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> p1, Pair<Integer, Integer> p2) {\n                if (p1.getValue0()\
  \ != p2.getValue0()) {\n                    return p1.getValue0() - p2.getValue0();\n\
  \                }\n                return p1.getValue1() - p2.getValue1();\n  \
  \          }\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n\
  \        for (Pair<Integer, Integer> p : pairs) {\n            res.add(nums.get(p.getValue1()));\n\
  \        }\n        return res;"
- "        // TODO: Remove pass and write your implementation of orderByPoints\n \
  \       pass"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (nums.size()\
  \ > 0) {\n            HashMap<Integer, ArrayList<Integer>> hm = new HashMap<Integer,\
  \ ArrayList<Integer>>();\n            int max = 0;\n            for (int i = 0;\
  \ i < nums.size(); i++) {\n                int s = 0;\n                for (char\
  \ c : String.valueOf(nums.get(i)).toCharArray()) {\n                    s += Integer.parseInt(String.valueOf(c));\n\
  \                }\n                if (hm.containsKey(s)) {\n                 \
  \   hm.get(s).add(nums.get(i));\n                } else {\n                    ArrayList<Integer>\
  \ tmp = new ArrayList<Integer>();\n                    tmp.add(nums.get(i));\n \
  \                   hm.put(s, tmp);\n                }\n                if (s >\
  \ max) {\n                    max = s;\n                }\n            }\n     \
  \       while (max >= 0) {\n                if (hm.containsKey(max)) {\n       \
  \             result.addAll(hm.get(max));\n                }\n                max--;\n\
  \            }\n        }\n        return result;"
- "        // Fill this in.\n        ArrayList<Integer> new_nums = new ArrayList<Integer>();\n\
  \        int size = nums.size();\n        int[] sums = new int[size];\n        int\
  \ index = 0;\n        for (int num : nums) {\n            sums[index] = sumOfDigits(num);\n\
  \            index++;\n        }\n        int[] flag = new int[size];\n        int[]\
  \ new_sums = new int[size];\n        for (int i = 0; i < size; i++) {\n        \
  \    int min = Integer.MAX_VALUE;\n            int min_index = -1;\n           \
  \ for (int j = 0; j < size; j++) {\n                if (flag[j] == 0 && sums[j]\
  \ < min) {\n                    min = sums[j];\n                    min_index =\
  \ j;\n                }\n            }\n            flag[min_index] = 1;\n     \
  \       new_sums[i] = min;\n        }\n        for (int i = 0; i < size; i++) {\n\
  \            for (int j = 0; j < size; j++) {\n                if (new_sums[i] ==\
  \ sums[j]) {\n                    new_nums.add(nums.get(j));\n                 \
  \   break;\n                }\n            }\n        }\n        return new_nums;"
- '        return null;'
- "        ArrayList<Integer> points = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            Integer num = nums.get(i);\n            points.add(num % 10 + num\
  \ / 10);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n         \
  \   Integer min = Collections.min(points);\n            for (int j = 0; j < points.size();\
  \ j++) {\n                if (points.get(j) == min) {\n                    points.remove(j);\n\
  \                    result.add(nums.get(j));\n                    nums.remove(j);\n\
  \                    break;\n                }\n            }\n        }\n     \
  \   return result;"
- '        return new ArrayList<>();'
- "        if (nums.size() == 0) return nums;\n        ArrayList<Pair<Integer, Integer>>\
  \ pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n\
  \            int sum = 0;\n            int num = nums.get(i);\n            while\
  \ (num != 0) {\n                sum += num % 10;\n                num /= 10;\n \
  \           }\n            pairs.add(new Pair<>(sum, i));\n        }\n        Collections.sort(pairs,\
  \ (x, y) -> {\n            if (x.getFirst() < y.getFirst()) {\n                return\
  \ -1;\n            } else if (x.getFirst() > y.getFirst()) {\n                return\
  \ 1;\n            } else {\n                return x.getSecond() - y.getSecond();\n\
  \            }\n        });\n        ArrayList<Integer> ans = new ArrayList<>();\n\
  \        for (Pair<Integer, Integer> p : pairs) {\n            ans.add(nums.get(p.getSecond()));\n\
  \        }\n        return ans;"
- "      // YOUR CODE GOES HERE\n      return null;"
- '        // Your code here.'
- "        // your code here\n        return null;"
- "        // write your code here\n        return null;"
- '        return null;'
- "        ArrayList<Pair<Integer, Integer>> r = new ArrayList<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n         \
  \   int s = 0;\n            while (num != 0) {\n                s += num % 10;\n\
  \                num /= 10;\n            }\n            r.add(new Pair<>(s, i));\n\
  \        }\n        Collections.sort(r, (a, b) -> {\n            if (a.first !=\
  \ b.first) {\n                return a.first - b.first;\n            }\n       \
  \     return a.second - b.second;\n        });\n        ArrayList<Integer> rr =\
  \ new ArrayList<>();\n        for (Pair<Integer, Integer> p : r) {\n           \
  \ rr.add(nums.get(p.second));\n        }\n        return rr;"
- "        // Your solution here\n        return null;"
- "        ArrayList<Pair<Integer, Integer>> sum_idx = new ArrayList<>();\n      \
  \  for (int i = 0; i < nums.size(); i++) {\n            int total = 0;\n       \
  \     int n = nums.get(i);\n            if (n < 0) {\n                n = -n;\n\
  \            }\n            while (n > 0) {\n                total += n % 10;\n\
  \                n /= 10;\n            }\n            sum_idx.add(new Pair<>(total,\
  \ i));\n        }\n        Collections.sort(sum_idx, (p1, p2) -> {\n           \
  \ if (p1.getValue0() < p2.getValue0()) {\n                return -1;\n         \
  \   } else if (p1.getValue0() > p2.getValue0()) {\n                return 1;\n \
  \           } else {\n                return p1.getValue1() - p2.getValue1();\n\
  \            }\n        });\n        ArrayList<Integer> ret = new ArrayList<>();\n\
  \        for (Pair<Integer, Integer> pair : sum_idx) {\n            ret.add(nums.get(pair.getValue1()));\n\
  \        }\n        return ret;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        //\n      \
  \  // your code here\n        //\n        return ans;"
- "        Map<Integer, ArrayList<Integer>> map = new HashMap<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int sum = sumDigits(nums.get(i));\n\
  \            if (!map.containsKey(sum)) {\n                map.put(sum, new ArrayList<>());\n\
  \            }\n            map.get(sum).add(nums.get(i));\n        }\n        ArrayList<Integer>\
  \ res = new ArrayList<>();\n        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n\
  \        Collections.sort(keys);\n        for (int key : keys) {\n            res.addAll(map.get(key));\n\
  \        }\n        return res;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        Map<Integer,\
  \ ArrayList<Integer>> sum_to_nums = new HashMap<Integer, ArrayList<Integer>>();\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n   \
  \         int num = nums.get(i);\n            while (num != 0) {\n             \
  \   sum += num % 10;\n                num /= 10;\n            }\n            if\
  \ (!sum_to_nums.containsKey(sum)) {\n                sum_to_nums.put(sum, new ArrayList<Integer>());\n\
  \            }\n            sum_to_nums.get(sum).add(nums.get(i));\n        }\n\
  \        ArrayList<Integer> sums = new ArrayList<Integer>(sum_to_nums.keySet());\n\
  \        Collections.sort(sums);\n        for (int i = 0; i < sums.size(); i++)\
  \ {\n            for (int j = 0; j < sum_to_nums.get(sums.get(i)).size(); j++) {\n\
  \                ret.add(sum_to_nums.get(sums.get(i)).get(j));\n            }\n\
  \        }\n        return ret;"
- "        ArrayList<Integer> ret = new ArrayList<>();\n        Collections.sort(nums,\
  \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
  \ o1, Integer o2) {\n                return getPoints(o1).compareTo(getPoints(o2));\n\
  \            }\n        });\n        ret.addAll(nums);\n        return ret;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ nums2 = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            int sum = 0;\n            int len = String.valueOf(nums.get(i)).length();\n\
  \            for (int j = 0; j < len; j++) {\n                sum += Character.getNumericValue(String.valueOf(nums.get(i)).charAt(j));\n\
  \            }\n            nums2.add(sum);\n        }\n        for (int i = 0;\
  \ i < nums.size(); i++) {\n            for (int j = 0; j < nums.size(); j++) {\n\
  \                if (nums2.get(i) < nums2.get(j)) {\n                    int temp\
  \ = nums2.get(i);\n                    nums2.set(i, nums2.get(j));\n           \
  \         nums2.set(j, temp);\n                    temp = nums.get(i);\n       \
  \             nums.set(i, nums.get(j));\n                    nums.set(j, temp);\n\
  \                }\n            }\n        }\n        return nums;"
- "        Map<Integer, ArrayList<Integer>> map = new HashMap<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int sumOfDigits = sumOfDigits(nums.get(i));\n\
  \            if (!map.containsKey(sumOfDigits)) {\n                map.put(sumOfDigits,\
  \ new ArrayList<>());\n            }\n            map.get(sumOfDigits).add(nums.get(i));\n\
  \        }\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int\
  \ sum : map.keySet()) {\n            for (int num : map.get(sum)) {\n          \
  \      res.add(num);\n            }\n        }\n        return res;"
- "        // Your code goes here\n        for (int i = 0; i < nums.size(); i++) {\n\
  \            int index = i;\n            for (int j = i + 1; j < nums.size(); j++)\
  \ {\n                if (digitSum(nums.get(j)) < digitSum(nums.get(index))) {\n\
  \                    index = j;\n                }\n            }\n            int\
  \ smallerNumber = nums.get(index);\n            nums.set(index, nums.get(i));\n\
  \            nums.set(i, smallerNumber);\n        }\n        return nums;"
- "        // ... your code goes here ...\n        return nums;"
- "        // put your implementation here\n        int min = -1, max = 1;\n     \
  \   for (int i = 0; i < nums.size(); i++) {\n            min = Math.min(min, nums.get(i));\n\
  \            max = Math.max(max, nums.get(i));\n        }\n        ArrayList<Integer>\
  \ result = new ArrayList<>();\n        result.add(min);\n        ArrayList<Integer>\
  \ list = new ArrayList<>();\n        for (int i = min + 1; i < max; i++) {\n   \
  \         list.add(i);\n        }\n        while (result.size() < nums.size()) {\n\
  \            int a = result.get(result.size() - 1);\n            int idx = 0;\n\
  \            for (int i = 0; i < list.size(); i++) {\n                if (sum(list.get(i))\
  \ < sum(a)) {\n                    a = list.get(i);\n                    idx = i;\n\
  \                }\n            }\n            result.add(a);\n            list.remove(idx);\n\
  \        }\n        if (max != result.get(result.size() - 1))\n            result.add(max);\n\
  \        return result;"
- "      // TODO: implement this\n      return null;"
- '        return new ArrayList<Integer>();'
- "        // Your code here\n        return null;"
- "        // We don't need to sort the array if there are no numbers\n        if\
  \ (nums.size() == 0) {\n            return nums;\n        }\n        // Build up\
  \ a list of the sums of the digits\n        ArrayList<Pair<Integer, Integer>> sums\
  \ = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n      \
  \      sums.add(new Pair<>(i, sumDigits(nums.get(i))));\n        }\n        // Find\
  \ the smallest\n        int smallest = sums.get(0).getValue1();\n        for (int\
  \ i = 1; i < sums.size(); i++) {\n            if (sums.get(i).getValue1() < smallest)\
  \ {\n                smallest = sums.get(i).getValue1();\n            }\n      \
  \  }\n        // Remove all the pairs with the smallest sum\n        ArrayList<Pair<Integer,\
  \ Integer>> removed = new ArrayList<>();\n        for (int i = 0; i < sums.size();\
  \ i++) {\n            if (sums.get(i).getValue1() == smallest) {\n             \
  \   removed.add(sums.get(i));\n                sums.remove(i);\n               \
  \ i--;\n            }\n        }\n        // Sort the list of removed\n        Collections.sort(removed,\
  \ (a, b) -> {\n            if (a.getValue0() < b.getValue0()) {\n              \
  \  return -1;\n            } else if (a.getValue0() > b.getValue0()) {\n       \
  \         return 1;\n            } else {\n                return 0;\n         \
  \   }\n        });\n        // Recursively sort the remainder\n        ArrayList<Integer>\
  \ result = new ArrayList<>();\n        ArrayList<Integer> remainder = new ArrayList<>();\n\
  \        for (int i = 0; i < sums.size(); i++) {\n            remainder.add(nums.get(sums.get(i).getValue0()));\n\
  \        }\n        result.addAll(orderByPoints(remainder));\n        // Add the\
  \ removed pairs\n        for (int i = 0; i < removed.size(); i++) {\n          \
  \  result.add"
- "        if (nums.size() == 0) {\n            return nums;\n        }\n        ArrayList<Integer>\
  \ output = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n\
  \            output.add(i);\n        }\n        ArrayList<Integer> scores = new\
  \ ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            scores.add(i);\n\
  \        }\n        for (int i = 0; i < scores.size(); i++) {\n            scores.set(i,\
  \ score(nums.get(i)));\n        }\n        int i = 0;\n        while (i < scores.size())\
  \ {\n            int j = i + 1;\n            while (j < scores.size()) {\n     \
  \           if (scores.get(i) > scores.get(j)) {\n                    int temp =\
  \ output.get(i);\n                    output.set(i, output.get(j));\n          \
  \          output.set(j, temp);\n                    temp = scores.get(i);\n   \
  \                 scores.set(i, scores.get(j));\n                    scores.set(j,\
  \ temp);\n                }\n                j++;\n            }\n            i++;\n\
  \        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for\
  \ (int j = 0; j < output.size(); j++) {\n            result.add(nums.get(output.get(j)));\n\
  \        }\n        return result;"
- '        return new ArrayList<>();'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ negative = new ArrayList<Integer>();\n        ArrayList<Integer> positive = new\
  \ ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int num = nums.get(i);\n            if (num < 0) {\n                negative.add(num);\n\
  \            } else {\n                positive.add(num);\n            }\n     \
  \   }\n        negative.sort(new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer a, Integer b) {\n                int A =\
  \ Math.abs(a);\n                int B = Math.abs(b);\n                if (Integer.toString(A).length()\
  \ == Integer.toString(B).length()) {\n                    if (a < b) {\n       \
  \                 return -1;\n                    } else if (a > b) {\n        \
  \                return 1;\n                    } else {\n                     \
  \   return 0;\n                    }\n                } else {\n               \
  \     if (sumDigits(A) < sumDigits(B)) {\n                        return -1;\n \
  \                   } else if (sumDigits(A) > sumDigits(B)) {\n                \
  \        return 1;\n                    } else {\n                        return\
  \ 0;\n                    }\n                }\n            }\n        });\n   \
  \     positive.sort(new Comparator<Integer>() {\n            @Override\n       \
  \     public int compare(Integer a, Integer b) {\n                int A = Math.abs(a);\n\
  \                int B = Math.abs(b);\n                if (Integer.toString(A).length()\
  \ == Integer.toString(B).length()) {\n                    if (a < b) {\n       \
  \                 return -1;\n                    } else if (a > b) {\n        \
  \                return 1;\n                    } else {\n                     \
  \   return 0;\n                    }\n                } else {\n               \
  \     if (sumDigits(A) < sumDigits(B)) {\n                        return -1;\n \
  \                   } else if (sumDigits(A) > sumDigits(B)) {\n                \
  \        return 1;\n                    } else {\n                        return\
  \ 0;\n                    }\n                }\n            }\n        });\n   \
  \     for"
- "        ArrayList<Pair<Integer, Integer>> l = new ArrayList<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n           \
  \ int s = n >= 0 ? n : -n;\n            int sum = 0;\n            while (s > 0)\
  \ {\n                sum += s % 10;\n                s /= 10;\n            }\n \
  \           l.add(new Pair<>(sum, n));\n        }\n        Collections.sort(l, (a,\
  \ b) -> {\n            if (a.getValue0() != b.getValue0())\n                return\
  \ a.getValue0() - b.getValue0();\n            return a.getValue1() - b.getValue1();\n\
  \        });\n        ArrayList<Integer> res = new ArrayList<>();\n        for (Pair<Integer,\
  \ Integer> p : l)\n            res.add(p.getValue1());\n        return res;"
- "        ArrayList<Integer> sortedList = new ArrayList<>();\n        HashMap<Integer,\
  \ Pair<Integer, Integer>> sumsToIdxAndNum = new HashMap<>();\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n           \
  \ int sum = 0;\n            for (int j = 1; j <= num; j *= 10) {\n             \
  \   sum += num % 10;\n                num /= 10;\n            }\n            Pair<Integer,\
  \ Integer> idxAndNum = new Pair<>(i, nums.get(i));\n            sumsToIdxAndNum.put(sum,\
  \ idxAndNum);\n        }\n        ArrayList<Integer> sortedSums = new ArrayList<>();\n\
  \        for (Integer sum : sumsToIdxAndNum.keySet()) {\n            sortedSums.add(sum);\n\
  \        }\n        Collections.sort(sortedSums);\n        for (Integer sum : sortedSums)\
  \ {\n            Pair<Integer, Integer> idxAndNum = sumsToIdxAndNum.get(sum);\n\
  \            sortedList.add(idxAndNum.getValue1());\n        }\n        return sortedList;"
- '        return nums;'
- "        // nums: [-1, -11, 1, -12, 11]\n        // sums: [1, 2, 1, 3, 2]\n    \
  \    // pairs: [(1, -1), (2, -11), (1, 1), (3, -12), (2, 11)]\n        // pairs.sort():\
  \ [(1, -1), (1, 1), (2, -11), (2, 11), (3, -12)]\n        // pairs.map((a, b) ->\
  \ b): [-1, 1, -11, 11, -12]\n        // return pairs.map((a, b) -> b)\n        int[]\
  \ sums = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n\
  \            sums[i] = Arrays.stream(Integer.toString(nums.get(i)).split(\"\")).mapToInt(Integer::parseInt).sum();\n\
  \        }\n        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            pairs.add(new Pair<>(sums[i],\
  \ nums.get(i)));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Integer,\
  \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> a, Pair<Integer, Integer> b) {\n                if (a.getValue0().equals(b.getValue0()))\
  \ {\n                    return a.getValue1().compareTo(b.getValue1());\n      \
  \          }\n                return a.getValue0().compareTo(b.getValue0());\n \
  \           }\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n\
  \        for (Pair<Integer, Integer> p : pairs) {\n            res.add(p.getValue1());\n\
  \        }\n        return res;"
- '        return nums;'
- "        // your code here\n        return nums;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int[] digits\
  \ = new int[nums.size()];\n        //get digits of every number in nums\n      \
  \  for(int i = 0; i < nums.size(); i++){\n            int tmp = nums.get(i);\n \
  \           if(tmp < 0){\n                tmp = -tmp;\n            }\n         \
  \   while(tmp > 0){\n                digits[i] += tmp % 10;\n                tmp\
  \ /= 10;\n            }\n        }\n        //get a number's position in the original\
  \ array\n        ArrayList<Integer> index = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < nums.size(); i++){\n            index.add(i);\n        }\n        //now\
  \ sort the digits, and do the same with index\n        for(int i = 0; i < digits.length\
  \ - 1; i++){\n            for(int j = i + 1; j < digits.length; j++){\n        \
  \        if(digits[i] > digits[j]){\n                    int tmp = digits[i];\n\
  \                    digits[i] = digits[j];\n                    digits[j] = tmp;\n\
  \                    tmp = index.get(i);\n                    index.set(i, index.get(j));\n\
  \                    index.set(j, tmp);\n                }\n            }\n    \
  \    }\n        //now put the sorted numbers back to the array, which is the result\n\
  \        for(int i = 0; i < index.size(); i++){\n            res.add(nums.get(index.get(i)));\n\
  \        }\n        return res;"
- '        return nums;'
- "        // your code here\n        return null;"
- '      return new ArrayList<Integer>();'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ num : nums) {\n            if (result.size() == 0) {\n                result.add(num);\n\
  \            } else {\n                int i = 0;\n                while (i < result.size())\
  \ {\n                    if (sumOfDigits(num) < sumOfDigits(result.get(i))) {\n\
  \                        result.add(i, num);\n                        break;\n \
  \                   } else if (sumOfDigits(num) == sumOfDigits(result.get(i))) {\n\
  \                        if (nums.indexOf(num) < nums.indexOf(result.get(i))) {\n\
  \                            result.add(i, num);\n                            break;\n\
  \                        }\n                    }\n                    i++;\n  \
  \              }\n                if (i == result.size()) {\n                  \
  \  result.add(num);\n                }\n            }\n        }\n        return\
  \ result;"
- "        int min = 100;\n        int max = 0;\n        for (int num : nums) {\n\
  \            if (num > 0) {\n                int count = 0;\n                while\
  \ (num > 0) {\n                    count += num % 10;\n                    num /=\
  \ 10;\n                }\n                if (count > max) max = count;\n      \
  \          if (count < min) min = count;\n            } else {\n               \
  \ int count = 0;\n                while (num < 0) {\n                    count +=\
  \ Math.abs(num % 10);\n                    num /= 10;\n                }\n     \
  \           if (count > max) max = count;\n                if (count < min) min\
  \ = count;\n            }\n        }\n        ArrayList<ArrayList<Integer>> arr\
  \ = new ArrayList<ArrayList<Integer>>();\n        for (int i = 0; i < max - min\
  \ + 1; i++) {\n            arr.add(new ArrayList<Integer>());\n        }\n     \
  \   for (int num : nums) {\n            if (num > 0) {\n                int count\
  \ = 0;\n                while (num > 0) {\n                    count += num % 10;\n\
  \                    num /= 10;\n                }\n                arr.get(count\
  \ - min).add(num);\n            } else {\n                int count = 0;\n     \
  \           while (num < 0) {\n                    count += Math.abs(num % 10);\n\
  \                    num /= 10;\n                }\n                arr.get(count\
  \ - min).add(num);\n            }\n        }\n        ArrayList<Integer> ret = new\
  \ ArrayList<Integer>();\n        for (ArrayList<Integer> list : arr) {\n       \
  \     for (int num : list) {\n                ret.add(num);\n            }\n   \
  \     }\n        return ret;"
- '        return nums;'
- "        TreeMap<Integer, ArrayList<Integer>> sorted = new TreeMap<>();\n      \
  \  for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n\
  \            int sum = digitSum(num);\n            if (!sorted.containsKey(sum))\
  \ {\n                sorted.put(sum, new ArrayList<Integer>());\n            }\n\
  \            sorted.get(sum).add(num);\n        }\n        ArrayList<Integer> result\
  \ = new ArrayList<>();\n        for (int key : sorted.keySet()) {\n            for\
  \ (int num : sorted.get(key)) {\n                result.add(num);\n            }\n\
  \        }\n        return result;"
- "        // YOUR CODE GOES HERE\n        return nums;"
- "        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n         \
  \   int sum = sumDigits(num);\n            if (!map.containsKey(sum)) {\n      \
  \          map.put(sum, new ArrayList<>());\n            }\n            map.get(sum).add(num);\n\
  \        }\n        ArrayList<Integer> order = new ArrayList<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            for (int sum : map.keySet()) {\n \
  \               if (map.get(sum).size() > 0) {\n                    order.add(map.get(sum).get(0));\n\
  \                    map.get(sum).remove(0);\n                }\n            }\n\
  \        }\n        return order;"
- "        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer a, Integer b) {\n                Integer\
  \ sumA = sumDigits(a);\n                Integer sumB = sumDigits(b);\n         \
  \       if (sumA.equals(sumB)) {\n                    return 0;\n              \
  \  } else if (sumA < sumB) {\n                    return -1;\n                }\
  \ else {\n                    return 1;\n                }\n            }\n    \
  \    });\n        return nums;"
- "        HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();\n        for(int\
  \ i = 0; i < nums.size(); ++i) {\n            int sum = 0;\n            int num\
  \ = nums.get(i);\n            while(num != 0) {\n                sum += num % 10;\n\
  \                num /= 10;\n            }\n            if(!map.containsKey(sum))\
  \ {\n                map.put(sum,new ArrayList<>());\n            }\n          \
  \  map.get(sum).add(nums.get(i));\n        }\n        ArrayList<Integer> out = new\
  \ ArrayList<>();\n        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n\
  \        Collections.sort(keys);\n        for(int i = 0; i < keys.size(); ++i) {\n\
  \            ArrayList<Integer> val = map.get(keys.get(i));\n            for(int\
  \ j = 0; j < val.size(); ++j) {\n                out.add(val.get(j));\n        \
  \    }\n        }\n        return out;"
- "        // TODO: Implement it\n        Collections.sort(nums, new Comparator<Integer>()\
  \ {\n            @Override\n            public int compare(Integer o1, Integer o2)\
  \ {\n                int o1_sum = 0;\n                int o2_sum = 0;\n        \
  \        while (o1 > 0) {\n                    o1_sum += o1 % 10;\n            \
  \        o1 /= 10;\n                }\n                while (o2 > 0) {\n      \
  \              o2_sum += o2 % 10;\n                    o2 /= 10;\n             \
  \   }\n                return Integer.compare(o1_sum, o2_sum);\n            }\n\
  \        });\n        return nums;"
- '        // TODO: implement'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ origList = new ArrayList<Integer>(nums);\n        ArrayList<Integer> sums = new\
  \ ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length();\
  \ j++) {\n                sum += Character.getNumericValue(nums.get(i).toString().charAt(j));\n\
  \            }\n            sums.add(sum);\n        }\n        ArrayList<Integer>\
  \ sortedSums = new ArrayList<Integer>(sums);\n        Collections.sort(sortedSums);\n\
  \        for (int i = 0; i < sortedSums.size(); i++) {\n            int nextResult\
  \ = origList.get(sums.indexOf(sortedSums.get(i)));\n            result.add(nextResult);\n\
  \            sums.set(sums.indexOf(sortedSums.get(i)), -1);\n        }\n       \
  \ return result;"
- "      ArrayList<Integer> points = new ArrayList<Integer>();\n      ArrayList<Pair<Integer,\
  \ Integer>> mapping = new ArrayList<Pair<Integer, Integer>>();\n      for (int i\
  \ = 0; i < nums.size(); i++) {\n        int x = Math.abs(nums.get(i));\n       \
  \ int point = 0;\n        while (x > 0) {\n          point += x % 10;\n        \
  \  x /= 10;\n        }\n        points.add(point);\n        mapping.add(new Pair<Integer,\
  \ Integer>(point, i));\n      }\n      Collections.sort(mapping, new Comparator<Pair<Integer,\
  \ Integer>>() {\n        @Override\n        public int compare(Pair<Integer, Integer>\
  \ a, Pair<Integer, Integer> b) {\n          if (a.getValue0() != b.getValue0())\
  \ {\n            return a.getValue0() - b.getValue0();\n          }\n          return\
  \ a.getValue1() - b.getValue1();\n        }\n      });\n      ArrayList<Integer>\
  \ res = new ArrayList<Integer>();\n      for (int i = 0; i < mapping.size(); i++)\
  \ {\n        res.add(nums.get(mapping.get(i).getValue1()));\n      }\n      return\
  \ res;"
- '        return nums;'
- "        // Please implement this function\n        if (nums.size() == 0) return\
  \ nums;\n        if (nums.size() == 1) return nums;\n        ArrayList<Pair<Integer,\
  \ Integer>> numSum = new ArrayList<>();\n        for (int i = 0; i < nums.size();\
  \ i++) {\n            int sum = 0;\n            int num = nums.get(i);\n       \
  \     while (num != 0) {\n                sum += num % 10;\n                num\
  \ /= 10;\n            }\n            numSum.add(new Pair<>(sum, i));\n        }\n\
  \        int n = numSum.size();\n        for (int i = 0; i < n - 1; i++) {\n   \
  \         for (int j = 0; j < n - i - 1; j++) {\n                if (numSum.get(j).getValue0()\
  \ > numSum.get(j + 1).getValue0()) {\n                    Pair<Integer, Integer>\
  \ temp = numSum.get(j);\n                    numSum.set(j, numSum.get(j + 1));\n\
  \                    numSum.set(j + 1, temp);\n                }\n            }\n\
  \        }\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int\
  \ i = 0; i < n; i++) {\n            res.add(nums.get(numSum.get(i).getValue1()));\n\
  \        }\n        return res;"
- '        // Write your code here'
- "        Map<Integer, ArrayList<Integer>> pointsMap = new HashMap<>();\n       \
  \ for (int i = 0; i < nums.size(); i++) {\n            int sum = sumDigits(nums.get(i));\n\
  \            if (!pointsMap.containsKey(sum)) {\n                pointsMap.put(sum,\
  \ new ArrayList<>());\n            }\n            pointsMap.get(sum).add(nums.get(i));\n\
  \        }\n        ArrayList<Integer> pointsList = new ArrayList<>(pointsMap.keySet());\n\
  \        Collections.sort(pointsList);\n        ArrayList<Integer> result = new\
  \ ArrayList<>();\n        for (int point : pointsList) {\n            for (int item\
  \ : pointsMap.get(point)) {\n                result.add(item);\n            }\n\
  \        }\n        return result;"
- "        // IMPLEMENT ME\n        return null;"
- "        ArrayList<Integer> res = new ArrayList<>();\n        Map<Integer,List<Integer>>\
  \ map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n     \
  \       int sum = sumDigits(nums.get(i));\n            if(map.containsKey(sum))\
  \ {\n                map.get(sum).add(nums.get(i));\n            } else {\n    \
  \            List<Integer> arr = new ArrayList<>();\n                arr.add(nums.get(i));\n\
  \                map.put(sum,arr);\n            }\n        }\n        for(Integer\
  \ k : map.keySet()) {\n            for(Integer val : map.get(k)) {\n           \
  \     res.add(val);\n            }\n        }\n        return res;"
- "        // Your code here\n        return nums;"
- '        return null;'
- "        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ nums2 = new ArrayList<Integer>();\n        ArrayList<Integer> nums3 = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> nums4 = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < 0) {\n         \
  \       numbers.add(nums.get(i));\n            } else {\n                nums2.add(nums.get(i));\n\
  \            }\n        }\n        for (int j = 0; j < numbers.size(); j++) {\n\
  \            for (int k = 0; k < numbers.size() - 1; k++) {\n                if\
  \ (sum(numbers.get(k)) > sum(numbers.get(k + 1))) {\n                    int temp\
  \ = numbers.get(k);\n                    numbers.set(k, numbers.get(k + 1));\n \
  \                   numbers.set(k + 1, temp);\n                }\n            }\n\
  \        }\n        for (int j = 0; j < nums2.size(); j++) {\n            for (int\
  \ k = 0; k < nums2.size() - 1; k++) {\n                if (sum(nums2.get(k)) > sum(nums2.get(k\
  \ + 1))) {\n                    int temp = nums2.get(k);\n                    nums2.set(k,\
  \ nums2.get(k + 1));\n                    nums2.set(k + 1, temp);\n            \
  \    }\n            }\n        }\n        for (int l = 0; l < numbers.size(); l++)\
  \ {\n            nums3.add(Math.abs(numbers.get(l)));\n        }\n        for (int\
  \ m = nums3.size() - 1; m >= 0; m--) {\n            nums4.add(nums3.get(m) * -1);\n\
  \        }\n        nums4.addAll(nums2);\n        return nums4;"
- "        ArrayList<Integer> res = new ArrayList<>();\n        ArrayList<Integer>\
  \ cp = new ArrayList<>(nums);\n        HashMap<Integer, Integer> hash = new HashMap<>();\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n\
  \            int sum = 0;\n            while (num != 0) {\n                sum +=\
  \ num % 10;\n                num /= 10;\n            }\n            hash.put(sum,\
  \ i);\n        }\n        Object[] values = hash.keySet().toArray();\n        Arrays.sort(values);\n\
  \        for (int i = 0; i < values.length; i++) {\n            int idx = hash.get(values[i]);\n\
  \            res.add(cp.get(idx));\n        }\n        return res;"
- '        throw new RuntimeException("Not implemented");'
- "        ArrayList<Pair<Integer, Integer>> numSum = new ArrayList<>();\n       \
  \ ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < nums.size();\
  \ i++) {\n            int sum = 0;\n            for (char ch : (nums.get(i) + \"\
  \").toCharArray())\n                sum += ch - '0';\n            numSum.add(new\
  \ Pair<>(sum, i));\n        }\n        numSum.sort((Pair<Integer, Integer> a, Pair<Integer,\
  \ Integer> b) -> {\n            if (a.getValue0() == b.getValue0())\n          \
  \      return Integer.compare(a.getValue1(), b.getValue1());\n            return\
  \ Integer.compare(a.getValue0(), b.getValue0());\n        });\n        for (Pair<Integer,\
  \ Integer> p : numSum)\n            ans.add(nums.get(p.getValue1()));\n        return\
  \ ans;"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        while(nums.size()\
  \ > 0) {\n            int max = 0;\n            int index = 0;\n            for(int\
  \ i = 0; i < nums.size(); i++) {\n                int sum = 0;\n               \
  \ int n = nums.get(i);\n                while(n != 0) {\n                    sum\
  \ += n % 10;\n                    n /= 10;\n                }\n                if(sum\
  \ > max) {\n                    max = sum;\n                    index = i;\n   \
  \             }\n            }\n            sorted.add(nums.get(index));\n     \
  \       nums.remove(index);\n        }\n        return sorted;"
- '        return null;'
- '        return nums;'
- "        // TODO: Implement\n        return null;"
- "        // Your code here!\n        return null;"
- "        // write your code here\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> Points = new ArrayList<Integer>();\n        HashMap<Integer,\
  \ Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size();\
  \ i++) {\n            int num = nums.get(i);\n            if (num < 0) {\n     \
  \           num = num * -1;\n            }\n            int sum = sumDigits(num);\n\
  \            Points.add(sum);\n            map.put(sum, i);\n        }\n       \
  \ Collections.sort(Points);\n        for (int i = 0; i < Points.size(); i++) {\n\
  \            int sum = Points.get(i);\n            int pos = map.get(sum);\n   \
  \         answer.add(nums.get(pos));\n        }\n        return answer;"
- "        Map<Integer, Integer> map = new HashMap<>();\n        ArrayList<Integer>\
  \ ans = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n  \
  \          map.put(nums.get(i), sumDigits(nums.get(i)));\n        }\n        TreeMap<Integer,\
  \ Integer> m = new TreeMap<>(map);\n        for (Map.Entry<Integer, Integer> entry\
  \ : m.entrySet()) {\n            ans.add(entry.getKey());\n        }\n        return\
  \ ans;"
- "        // the arguments are given in the main() function below\n        // the\
  \ idea is to use hash map to store the sum\n        HashMap<Integer, ArrayList<Integer>>\
  \ mp = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int sum = 0;\n            int curr = nums.get(i);\n            while (curr\
  \ != 0) {\n                sum += curr % 10;\n                curr /= 10;\n    \
  \        }\n            if (!mp.containsKey(sum))\n                mp.put(sum, new\
  \ ArrayList<Integer>());\n            mp.get(sum).add(nums.get(i));\n        }\n\
  \        List<Integer> lists = new ArrayList<>(mp.keySet());\n        Collections.sort(lists);\n\
  \        ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 0; i\
  \ < lists.size(); i++) {\n            ArrayList<Integer> curr = mp.get(lists.get(i));\n\
  \            for (int j = 0; j < curr.size(); j++)\n                ans.add(curr.get(j));\n\
  \        }\n        return ans;"
- "        Map<Integer, Integer> sum = new HashMap<>();\n        List<Pair<Integer,\
  \ Integer>> indexes = new ArrayList<>();\n        for (int i = 0; i < nums.size();\
  \ i++) {\n            sum.put(i, sum(nums.get(i)));\n            indexes.add(new\
  \ Pair<>(sum.get(i), i));\n        }\n        Collections.sort(indexes, new Comparator<Pair<Integer,\
  \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> a, Pair<Integer, Integer> b) {\n                if (a.getValue0().equals(b.getValue0()))\
  \ {\n                    return a.getValue1().compareTo(b.getValue1());\n      \
  \          }\n                return a.getValue0().compareTo(b.getValue0());\n \
  \           }\n        });\n        ArrayList<Integer> result = new ArrayList<>();\n\
  \        for (Pair<Integer, Integer> pair : indexes) {\n            result.add(nums.get(pair.getValue1()));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
  \ Integer>> arr = new ArrayList<Pair<Integer, Integer>>();\n        int sum = 0;\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n\
  \            while (num != 0) {\n                sum += num % 10;\n            \
  \    num /= 10;\n            }\n            arr.add(new Pair<Integer, Integer>(sum,\
  \ i));\n            sum = 0;\n        }\n        ArrayList<Pair<Integer, Integer>>\
  \ sortedArr = new ArrayList<Pair<Integer, Integer>>(arr);\n        sortedArr.sort(Comparator.comparingInt(Pair::getValue0));\n\
  \        for (int i = 0; i < sortedArr.size(); i++) {\n            res.add(nums.get(sortedArr.get(i).getValue1()));\n\
  \        }\n        return res;"
- "        // replace the code below with your own solution.\n        return nums;"
- '        throw new RuntimeException("Not Implemented");'
- "        // return nums;\n        ArrayList<Integer> a = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int x = nums.get(i);\n\
  \            int num = 0;\n            while (x != 0) {\n                num +=\
  \ x % 10;\n                x /= 10;\n            }\n            int lo = 0;\n  \
  \          int hi = a.size();\n            while (lo < hi) {\n                int\
  \ mid = (lo + hi) / 2;\n                int y = a.get(mid);\n                int\
  \ sum = 0;\n                while (y != 0) {\n                    sum += y % 10;\n\
  \                    y /= 10;\n                }\n                if (sum < num)\
  \ {\n                    lo = mid + 1;\n                } else {\n             \
  \       hi = mid;\n                }\n            }\n            a.add(lo, nums.get(i));\n\
  \        }\n        return a;"
- "        // Write your solution below\n        // -----------------------------------------------------------------\n\
  \        int[] order = new int[nums.size()];\n        for (int i = 0; i < nums.size();\
  \ i++) {\n            order[i] = nums.get(i);\n        }\n        Arrays.sort(order);\n\
  \        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < order.length; i++) {\n            int count = 0;\n            for (int\
  \ j = 0; j < nums.size(); j++) {\n                if (order[i] == nums.get(j)) {\n\
  \                    result.add(nums.get(j));\n                    nums.set(j, -1);\n\
  \                    break;\n                }\n            }\n        }\n     \
  \   return result;"
- '        return nums;'
- "        // TODO: Implement your solution here\n        return null;"
- "        // your code goes here\n        return null;"
- "        // YOUR CODE HERE\n        return null;"
- "        // Write your code here\n        ArrayList<Triplet<Integer, Integer, Integer>>\
  \ triplist = new ArrayList<Triplet<Integer, Integer, Integer>>();\n        ArrayList<Integer>\
  \ res = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            int digSum = 0;\n            int temp = nums.get(i);\n        \
  \    while (temp != 0) {\n                digSum += temp % 10;\n               \
  \ temp /= 10;\n            }\n            triplist.add(new Triplet<Integer, Integer,\
  \ Integer>(digSum, nums.get(i), i));\n        }\n        Collections.sort(triplist,\
  \ new Comparator<Triplet<Integer, Integer, Integer>>() {\n            @Override\n\
  \            public int compare(Triplet<Integer, Integer, Integer> o1, Triplet<Integer,\
  \ Integer, Integer> o2) {\n                if (o1.getValue0() != o2.getValue0())\n\
  \                    return o1.getValue0() - o2.getValue0();\n                else\n\
  \                    return o1.getValue2() - o2.getValue2();\n            }\n  \
  \      });\n        for (int i = 0; i < triplist.size(); i++) {\n            res.add(triplist.get(i).getValue1());\n\
  \        }\n        return res;"
- "        // your code here ...\n        for (int i = 0; i < nums.size(); i++) {\n\
  \            for (int j = 0; j < nums.size() - 1; j++) {\n                if (getSum(nums.get(j))\
  \ > getSum(nums.get(j + 1))) {\n                    int temp = nums.get(j);\n  \
  \                  nums.set(j, nums.get(j + 1));\n                    nums.set(j\
  \ + 1, temp);\n                }\n            }\n        }\n        return nums;"
- "        // YOUR CODE HERE\n        ArrayList<Integer> copy = new ArrayList<Integer>(nums);\n\
  \        Collections.sort(copy, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer o1, Integer o2) {\n                return\
  \ Integer.compare(o1.toString().chars().map(c -> c-'0').sum(), o2.toString().chars().map(c\
  \ -> c-'0').sum());\n            }\n        });\n        return copy;"
- '        throw new IllegalArgumentException("Not implemented");'
- '      return null;'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ digits = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            result.add(nums.get(i));\n            String num = String.valueOf(nums.get(i));\n\
  \            int sum = 0;\n            for (int j = 0; j < num.length(); j++) {\n\
  \                sum += Integer.parseInt(String.valueOf(num.charAt(j)));\n     \
  \       }\n            digits.add(sum);\n        }\n        for (int i = 0; i <\
  \ result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++)\
  \ {\n                if (digits.get(i) > digits.get(j)) {\n                    int\
  \ temp = result.get(i);\n                    result.set(i, result.get(j));\n   \
  \                 result.set(j, temp);\n                    temp = digits.get(i);\n\
  \                    digits.set(i, digits.get(j));\n                    digits.set(j,\
  \ temp);\n                }\n            }\n        }\n        return result;"
- '        // write your code here'
- "        if (nums.size() <= 1) {\n            return nums;\n        }\n        List<Integer>\
  \ sums = new ArrayList<>();\n        for (int num : nums) {\n            sums.add(sumDigits(num));\n\
  \        }\n        List<Integer> sortedSums = new ArrayList<>(sums);\n        Collections.sort(sortedSums);\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int sortedIndex =\
  \ getIndex(sortedSums, sums.get(i));\n            nums.set(sortedIndex, nums.get(i));\n\
  \        }\n        return nums;"
- "        //return null;\n        int[] numsArr = new int[nums.size()];\n       \
  \ //System.out.println(nums.size());\n        int n = 0;\n        for (int num :\
  \ nums) {\n            numsArr[n] = num;\n            n++;\n        }\n        int[]\
  \ sorted = bubbleSort(numsArr);\n        ArrayList<Integer> sortedList = new ArrayList<Integer>();\n\
  \        for (int num : sorted) {\n            sortedList.add(num);\n        }\n\
  \        return sortedList;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // add code\
  \ here\n        Map<Integer,List<Integer>> map = new HashMap<Integer,List<Integer>>();\n\
  \        for(int i = 0; i < nums.size(); i++) {\n        \tint n = nums.get(i);\n\
  \        \tint sum = 0;\n        \twhile(n > 0) {\n        \t\tsum += n % 10;\n\
  \        \t\tn /= 10;\n        \t}\n        \tif(map.containsKey(sum)) {\n     \
  \   \t\tmap.get(sum).add(nums.get(i));\n        \t} else {\n        \t\tmap.put(sum,\
  \ new ArrayList<Integer>());\n        \t\tmap.get(sum).add(nums.get(i));\n     \
  \   \t}\n        }\n        for(Map.Entry<Integer,List<Integer>> entry : map.entrySet())\
  \ {\n        \tfor(int i = 0; i < entry.getValue().size(); i++) {\n        \t\t\
  result.add(entry.getValue().get(i));\n        \t}\n        }\n        return result;"
- '        return null;'
- "        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            int sum = sumDigits(nums.get(i));\n\
  \            ArrayList<Integer> temp = map.getOrDefault(sum, new ArrayList<>());\n\
  \            temp.add(nums.get(i));\n            map.put(sum, temp);\n        }\n\
  \        ArrayList<Integer> result = new ArrayList<>();\n        List<Integer> keys\
  \ = new ArrayList<>(map.keySet());\n        Collections.sort(keys);\n        for\
  \ (int i = 0; i < keys.size(); i++) {\n            int key = keys.get(i);\n    \
  \        ArrayList<Integer> temp = map.get(key);\n            Collections.sort(temp);\n\
  \            for (int j = 0; j < temp.size(); j++) {\n                result.add(temp.get(j));\n\
  \            }\n        }\n        return result;"
- "        // write your code here\n        throw new UnsupportedOperationException(\"\
  Not implemented\");"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Map<Integer,\
  \ Pair<Integer, Integer>> m = new HashMap<Integer, Pair<Integer, Integer>>();\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n   \
  \         int num = nums.get(i);\n            while (num != 0) {\n             \
  \   sum += num % 10;\n                num /= 10;\n            }\n            if\
  \ (!m.containsKey(sum)) {\n                m.put(sum, new Pair<Integer, Integer>(nums.get(i),\
  \ i));\n            } else {\n                if (m.get(sum).getValue1() > i) {\n\
  \                    m.put(sum, new Pair<Integer, Integer>(nums.get(i), i));\n \
  \               }\n            }\n        }\n        List<Integer> keys = new ArrayList<Integer>(m.keySet());\n\
  \        Collections.sort(keys);\n        for (int key : keys) {\n            Pair<Integer,\
  \ Integer> tmp = m.get(key);\n            res.add(tmp.getValue0());\n        }\n\
  \        return res;"
- "        ArrayList<Integer> points = new ArrayList<Integer>();\n        HashMap<Integer,\
  \ ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();\n      \
  \  for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n         \
  \   for (int x : Integer.toString(nums.get(i)).chars().toArray()) {\n          \
  \      sum += (x - '0');\n            }\n            if (!map.containsKey(sum))\
  \ {\n                map.put(sum, new ArrayList<Integer>());\n            }\n  \
  \          map.get(sum).add(nums.get(i));\n            if (!points.contains(sum))\
  \ {\n                points.add(sum);\n            }\n        }\n        Collections.sort(points);\n\
  \        ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < points.size(); i++) {\n            for (int j = 0; j < map.get(points.get(i)).size();\
  \ j++) {\n                output.add(map.get(points.get(i)).get(j));\n         \
  \   }\n        }\n        return output;"
- '        // Insert your code here'
- "        // Write your code here\n        return null;"
- "\t\t// write your solution here\n\t\treturn null;"
- "        // Your code here\n        return null;"
- "        TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>();\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int\
  \ n = nums.get(i);\n            while (n != 0) {\n                sum += n % 10;\n\
  \                n /= 10;\n            }\n            ArrayList<Integer> list =\
  \ map.getOrDefault(sum, new ArrayList<>());\n            list.add(nums.get(i));\n\
  \            map.put(sum, list);\n        }\n        ArrayList<Integer> ans = new\
  \ ArrayList<>();\n        for (Map.Entry<Integer, ArrayList<Integer>> entry : map.entrySet())\
  \ {\n            ArrayList<Integer> list = entry.getValue();\n            for (int\
  \ i = 0; i < list.size(); i++) {\n                ans.add(list.get(i));\n      \
  \      }\n        }\n        return ans;"
- "        // remove/modify this line to return correct output\n        return null;"
- "        List<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            pairs.add(new Pair<>(getSumOfDigits(nums.get(i)),\
  \ i));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Integer,\
  \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> p1, Pair<Integer, Integer> p2) {\n                if (p1.getValue0().equals(p2.getValue0()))\
  \ {\n                    return p1.getValue1().compareTo(p2.getValue1());\n    \
  \            }\n                return p1.getValue0().compareTo(p2.getValue0());\n\
  \            }\n        });\n        ArrayList<Integer> answer = new ArrayList<>();\n\
  \        for (Pair<Integer, Integer> pair : pairs) {\n            answer.add(nums.get(pair.getValue1()));\n\
  \        }\n        return answer;"
- '        return nums;'
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ nums1 = new ArrayList<Integer>();\n        ArrayList<Integer> index = new ArrayList<Integer>();\n\
  \        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n     \
  \   for (int i = 0; i < nums.size(); i++) {\n            int temp = 0;\n       \
  \     int n = nums.get(i);\n            while (n != 0) {\n                temp +=\
  \ n % 10;\n                n /= 10;\n            }\n            nums1.add(temp);\n\
  \            index.add(i);\n            hm.put(temp, i);\n        }\n        int[]\
  \ a = new int[nums1.size()];\n        for (int i = 0; i < nums1.size(); i++) {\n\
  \            a[i] = nums1.get(i);\n        }\n        int[] b = new int[index.size()];\n\
  \        for (int i = 0; i < index.size(); i++) {\n            b[i] = index.get(i);\n\
  \        }\n        MergeSort.mergeSort(a, b);\n        for (int i = 0; i < b.length;\
  \ i++) {\n            ans.add(nums.get(b[i]));\n        }\n        return ans;"
- '        return nums;'
- '        return new ArrayList<Integer>();'
- '        return null;'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
  \ Integer> numsByPoints = new HashMap<Integer, Integer>();\n        int i = 0;\n\
  \        for (Integer num : nums) {\n            numsByPoints.put(num, computeSumOfDigits(num));\n\
  \            i += 1;\n        }\n        Map<Integer, Integer> sortedNumsByPoints\
  \ = sortByValue(numsByPoints);\n        for (Integer num : sortedNumsByPoints.keySet())\
  \ {\n            result.add(num);\n        }\n        return result;"
- "        ArrayList<Integer> vals = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ orig = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>>\
  \ mp = new HashMap<Integer, ArrayList<Integer>>();\n        for (int i = 0; i <\
  \ nums.size(); i++) {\n            int t = nums.get(i);\n            int sum = 0;\n\
  \            while (t != 0) {\n                sum += t % 10;\n                t\
  \ /= 10;\n            }\n            if (!mp.containsKey(sum)) {\n             \
  \   mp.put(sum, new ArrayList<Integer>());\n            }\n            mp.get(sum).add(nums.get(i));\n\
  \            vals.add(sum);\n            orig.add(nums.get(i));\n        }\n   \
  \     vals = new ArrayList<Integer>(new HashSet<Integer>(vals));\n        Collections.sort(vals);\n\
  \        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < vals.size(); i++) {\n            ArrayList<Integer> t = mp.get(vals.get(i));\n\
  \            Collections.sort(t);\n            for (int j = 0; j < t.size(); j++)\
  \ {\n                ret.add(t.get(j));\n            }\n        }\n        return\
  \ ret;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Write\
  \ your code here.\n        return result;"
- "        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            pairs.add(new Pair<>(i, nums.get(i)));\n\
  \        }\n        pairs.sort((a, b) -> {\n            int aSum = Math.abs(a.b)\
  \ / 10 + Math.abs(a.b) % 10;\n            int bSum = Math.abs(b.b) / 10 + Math.abs(b.b)\
  \ % 10;\n            if (aSum != bSum) {\n                return aSum - bSum;\n\
  \            }\n            return a.a - b.a;\n        });\n        ArrayList<Integer>\
  \ result = new ArrayList<>();\n        for (Pair<Integer, Integer> pair : pairs)\
  \ {\n            result.add(pair.b);\n        }\n        return result;"
- "        // YOUR CODE HERE\n        ArrayList<Integer> output = new ArrayList<Integer>();\n\
  \        return output;"
- "        Map<Integer, ArrayList<Integer>> map = new HashMap<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int key = sumDigits(nums.get(i));\n\
  \            if (!map.containsKey(key)) {\n                map.put(key, new ArrayList<>());\n\
  \            }\n            map.get(key).add(nums.get(i));\n        }\n        ArrayList<Integer>\
  \ ans = new ArrayList<>();\n        for (int key : map.keySet()) {\n           \
  \ for (int x : map.get(key)) {\n                ans.add(x);\n            }\n   \
  \     }\n        return ans;"
- "        TreeMap<Integer, ArrayList<Integer>> sums = new TreeMap<>();\n        ArrayList<Integer>\
  \ result = new ArrayList<>();\n        // Iterate through nums and add to TreeMap\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int key = 0;\n   \
  \         int num = nums.get(i);\n            // Add to key if positive, subtract\
  \ if negative\n            if (num > 0) {\n                key += sumDigits(num);\n\
  \            } else {\n                key -= sumDigits(num);\n            }\n \
  \           // Check if key is in map, add to that list if so\n            if (sums.containsKey(key))\
  \ {\n                sums.get(key).add(num);\n            } else {\n           \
  \     ArrayList<Integer> new_list = new ArrayList<>();\n                new_list.add(num);\n\
  \                sums.put(key, new_list);\n            }\n        }\n        //\
  \ Add to the result list\n        for (Map.Entry<Integer, ArrayList<Integer>> pair\
  \ : sums.entrySet()) {\n            result.addAll(pair.getValue());\n        }\n\
  \        return result;"
- '        throw new UnsupportedOperationException("Please implement this function");'
- "        //\n        // Your code goes here\n        //\n        return null;"
- "        TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>();\n        for\
  \ (int num : nums) {\n            int sum = 0;\n            while (num != 0) {\n\
  \                sum += num % 10;\n                num /= 10;\n            }\n \
  \           ArrayList<Integer> arr = map.getOrDefault(sum, new ArrayList<>());\n\
  \            arr.add(num);\n            map.put(sum, arr);\n        }\n        ArrayList<Integer>\
  \ res = new ArrayList<>();\n        for (Map.Entry<Integer, ArrayList<Integer>>\
  \ entry : map.entrySet()) {\n            ArrayList<Integer> arr = entry.getValue();\n\
  \            for (int num : arr) res.add(num);\n        }\n        return res;"
- '        return new ArrayList<Integer>();'
- '        return null;'
- "\t\tArrayList<Pair<Integer, Integer>> temp = new ArrayList<Pair<Integer, Integer>>();\n\
  \t\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\ttemp.add(new Pair<Integer, Integer>(nums.get(i),\
  \ i));\n\t\t}\n\t\tArrayList<Integer> ret = new ArrayList<Integer>();\n\t\tfor (int\
  \ i = 0; i < nums.size(); i++) {\n\t\t\tret.add(0);\n\t\t}\n\t\ttemp.sort(new Comparator<Pair<Integer,\
  \ Integer>>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Pair<Integer, Integer>\
  \ a, Pair<Integer, Integer> b) {\n\t\t\t\tint sumA = 0;\n\t\t\t\tint sumB = 0;\n\
  \t\t\t\tint ai = a.getValue0();\n\t\t\t\tint bi = b.getValue0();\n\t\t\t\twhile\
  \ (ai != 0) {\n\t\t\t\t\tsumA += ai % 10;\n\t\t\t\t\tai /= 10;\n\t\t\t\t}\n\t\t\t\
  \twhile (bi != 0) {\n\t\t\t\t\tsumB += bi % 10;\n\t\t\t\t\tbi /= 10;\n\t\t\t\t}\n\
  \t\t\t\tif (sumA != sumB) {\n\t\t\t\t\treturn sumA - sumB;\n\t\t\t\t}\n\t\t\t\t\
  return a.getValue1() - b.getValue1();\n\t\t\t}\n\t\t});\n\t\tfor (int i = 0; i <\
  \ nums.size(); i++) {\n\t\t\tret.set(i, temp.get(i).getValue0());\n\t\t}\n\t\treturn\
  \ ret;"
- '        return new ArrayList<Integer>();'
- "        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer o1, Integer o2) {\n                int sum1\
  \ = 0;\n                int sum2 = 0;\n                while (o1 != 0) {\n     \
  \               sum1 += o1 % 10;\n                    o1 /= 10;\n              \
  \  }\n                while (o2 != 0) {\n                    sum2 += o2 % 10;\n\
  \                    o2 /= 10;\n                }\n                return sum1 ==\
  \ sum2 ? 0 : sum1 > sum2 ? 1 : -1;\n            }\n        });\n        return nums;"
- "        ArrayList<Pair<Integer, Integer>> numsAndSumOfDigits = new ArrayList<>();\n\
  \        nums.forEach(num -> numsAndSumOfDigits.add(new Pair<>(num, sumOfDigits(num))));\n\
  \        Collections.sort(numsAndSumOfDigits, (num1, num2) -> {\n            if\
  \ (num1.getValue1().equals(num2.getValue1()))\n                return num1.getValue0().compareTo(num2.getValue0());\n\
  \            return num1.getValue1().compareTo(num2.getValue1());\n        });\n\
  \        ArrayList<Integer> res = new ArrayList<>();\n        numsAndSumOfDigits.forEach(num\
  \ -> res.add(num.getValue0()));\n        return res;"
- '        return nums;'
- '        // write your code here'
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        ArrayList<Integer> re=new ArrayList<Integer>();\n        ArrayList<Tuple2<Integer,Integer>>\
  \ sum=new ArrayList<Tuple2<Integer,Integer>>();\n        for(int i=0;i<nums.size();i++){\n\
  \            Tuple2<Integer,Integer> temp=new Tuple2<Integer,Integer>(nums.get(i),i);\n\
  \            sum.add(temp);\n        }\n        //System.out.println(sum);\n   \
  \     Collections.sort(sum,new Comparator<Tuple2<Integer,Integer>>(){\n        \
  \    public int compare(Tuple2<Integer,Integer> a,Tuple2<Integer,Integer> b){\n\
  \                int a_sum=a.getValue0();\n                int b_sum=b.getValue0();\n\
  \                int i=0;\n                while(a_sum!=0){\n                  \
  \  a_sum/=10;\n                    i++;\n                }\n                while(b_sum!=0){\n\
  \                    b_sum/=10;\n                    i--;\n                }\n \
  \               return a.getValue1()-b.getValue1();\n            }\n        });\n\
  \        for(int i=0;i<sum.size();i++){\n            re.add(sum.get(i).getValue0());\n\
  \        }\n        return re;"
- "        /* \n         * Use a custom Comparator to sort a list of pairs of integers.\n\
  \         * For pairs with equal values, return the one with the smaller index.\n\
  \         */\n        class CustomComparator implements Comparator<Pair<Integer,\
  \ Integer>> {\n            @Override\n            public int compare(Pair<Integer,\
  \ Integer> p1, Pair<Integer, Integer> p2) {\n                int sum_p1 = p1.getValue0()\
  \ + p1.getValue1();\n                int sum_p2 = p2.getValue0() + p2.getValue1();\n\
  \                if (sum_p1 == sum_p2) {\n                    return p1.getValue0()\
  \ - p2.getValue0();\n                }\n                return sum_p1 - sum_p2;\n\
  \            }\n        }\n        /* \n         * Use a custom Comparator to sort\
  \ a list of pairs of integers.\n         * For pairs with equal values, return the\
  \ one with the larger index.\n         */\n        class CustomComparator2 implements\
  \ Comparator<Pair<Integer, Integer>> {\n            @Override\n            public\
  \ int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {\n        \
  \        int sum_p1 = p1.getValue0() + p1.getValue1();\n                int sum_p2\
  \ = p2.getValue0() + p2.getValue1();\n                if (sum_p1 == sum_p2) {\n\
  \                    return p2.getValue0() - p1.getValue0();\n                }\n\
  \                return sum_p1 - sum_p2;\n            }\n        }\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        ArrayList<Pair<Integer, Integer>>\
  \ helper = new ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i <\
  \ nums.size(); i++) {\n            int n = nums.get(i);\n            int abs_n =\
  \ Math.abs(n);\n            int sum = 0;\n            while (abs_n > 0) {\n    \
  \            sum += abs_n % 10;\n                abs_n /= 10;\n            }\n \
  \           helper.add"
- '        return null;'
- '        return new ArrayList<>();'
- "        // Your implementation here\n        return null;"
- "        // TODO: implement this function\n        // >>>> input: [1, 11, -1, -11,\
  \ -12]\n        // >>>> output: [-1, -11, 1, -12, 11]\n        ArrayList<Integer>\
  \ sum = new ArrayList<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> result1 = new ArrayList<Integer>();\n        int i =\
  \ 0;\n        int j = 0;\n        int sumDigit = 0;\n        int temp = 0;\n   \
  \     int x = 0;\n        int k = 0;\n        for (i = 0; i < nums.size(); i++)\
  \ {\n            int n = nums.get(i);\n            if (n < 0) {\n              \
  \  n = n * -1;\n            }\n            sumDigit = 0;\n            while (n >\
  \ 0) {\n                sumDigit = sumDigit + n % 10;\n                n = n / 10;\n\
  \            }\n            sum.add(sumDigit);\n        }\n        while (k < sum.size())\
  \ {\n            int indMin = sum.indexOf(Collections.min(sum));\n            result.add(nums.get(indMin));\n\
  \            sum.set(indMin, Integer.MAX_VALUE);\n            k++;\n        }\n\
  \        for (j = 0; j < result.size(); j++) {\n            result1.add(result.get(j));\n\
  \        }\n        return result1;"
- '        return new ArrayList<Integer>();'
- "        ArrayList<Integer> arr = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            Integer num = nums.get(i);\n       \
  \     Integer sum = num.toString().chars().map(Character::getNumericValue).sum();\n\
  \            arr.add(sum);\n        }\n        Map<Integer, Integer> map = new HashMap<Integer,\
  \ Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(arr.get(i),\
  \ nums.get(i));\n        }\n        Arrays.sort(arr.toArray());\n        ArrayList<Integer>\
  \ array = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            array.add(map.get(arr.get(i)));\n        }\n        return array;"
- "        ArrayList<Integer> nums_sorted = new ArrayList<>();\n        nums_sorted.addAll(nums);\n\
  \        Collections.sort(nums_sorted, new Comparator<Integer>() {\n           \
  \ @Override\n            public int compare(Integer num1, Integer num2) {\n    \
  \            return (sumDigits(num1) - sumDigits(num2));\n            }\n      \
  \  });\n        return nums_sorted;"
- "        // YOUR CODE HERE\n        return nums;"
- '        return new ArrayList<Integer>();'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int num\
  \ = nums.get(i);\n            while (num != 0) {\n                sum += num % 10;\n\
  \                num /= 10;\n            }\n            result.add(sum);\n     \
  \   }\n        ArrayList<Integer> result2 = new ArrayList<Integer>();\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            int min = Integer.MAX_VALUE;\n\
  \            int min_index = -1;\n            for (int j = 0; j < result.size();\
  \ j++) {\n                if (result.get(j) < min) {\n                    min =\
  \ result.get(j);\n                    min_index = j;\n                }\n      \
  \      }\n            result2.add(nums.get(min_index));\n            result.set(min_index,\
  \ Integer.MAX_VALUE);\n        }\n        return result2;"
- "        // Write your code here\n        return nums;"
- '        // Your code here

  '
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        // Write code\
  \ here\n        ArrayList<Pair<Integer, Integer>> sum2num = new ArrayList<Pair<Integer,\
  \ Integer>>();\n        for (int i = 0; i < nums.size(); i++) {\n            int\
  \ a = nums.get(i);\n            int s = 0;\n            while (a != 0) {\n     \
  \           s += a % 10;\n                a /= 10;\n            }\n            sum2num.add(new\
  \ Pair<Integer, Integer>(s, nums.get(i)));\n        }\n        Collections.sort(sum2num,\
  \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n          \
  \  public int compare(Pair<Integer, Integer> a, Pair<Integer, Integer> b) {\n  \
  \              if (a.getValue0() < b.getValue0()) return -1;\n                if\
  \ (a.getValue0() > b.getValue0()) return 1;\n                if (a.getValue1() <\
  \ b.getValue1()) return -1;\n                if (a.getValue1() > b.getValue1())\
  \ return 1;\n                return 0;\n            }\n        });\n        for\
  \ (int i = 0; i < sum2num.size(); i++)\n            ret.add(sum2num.get(i).getValue1());\n\
  \        return ret;"
- "        HashMap<Integer, ArrayList<Integer>> points = new HashMap<>();\n      \
  \  HashMap<Integer, Integer> sums = new HashMap<>();\n        for (int i = 0; i\
  \ < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum\
  \ = sumDigits(num);\n            if (!points.containsKey(sum)) points.put(sum, new\
  \ ArrayList<>());\n            points.get(sum).add(num);\n            sums.put(num,\
  \ sum);\n        }\n        Integer[] sortKeys = points.keySet().toArray(new Integer[0]);\n\
  \        Arrays.sort(sortKeys);\n        ArrayList<Integer> ordered = new ArrayList<>();\n\
  \        for (int i = 0; i < sortKeys.length; i++) {\n            for (int j = 0;\
  \ j < points.get(sortKeys[i]).size(); j++) {\n                ordered.add(points.get(sortKeys[i]).get(j));\n\
  \            }\n        }\n        return ordered;"
- "        int[] sumDigits=new int[nums.size()];\n        for(int i=0;i<nums.size();i++){\n\
  \            sumDigits[i]=getSumDigits(nums.get(i));\n        }\n        sort(sumDigits,nums);\n\
  \        return nums;"
- '        return nums;'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        return result;"
- "        // TODO: implement the function\n        return null;"
- "        ArrayList<Integer> ret = new ArrayList<>();\n        HashMap<Integer, Integer>\
  \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        int sum = 0;\n            int n = nums.get(i);\n            while (n !=\
  \ 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n\
  \            map.put(sum, nums.get(i));\n        }\n        TreeMap<Integer, Integer>\
  \ tm = new TreeMap<>(map);\n        ret.addAll(tm.values());\n        return ret;"
- '        return null;'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        return result;"
- '        // YOUR CODE HERE'
- "        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            String\
  \ s = String.valueOf(nums.get(i));\n            for (int j = 0; j < s.length();\
  \ j++) {\n                sum += Character.getNumericValue(s.charAt(j));\n     \
  \       }\n            pairs.add(new Pair<Integer, Integer>(sum, i));\n        }\n\
  \        pairs.sort(Comparator.comparing(Pair::getValue0));\n        ArrayList<Integer>\
  \ res = new ArrayList<>();\n        for (int i = 0; i < pairs.size(); i++) {\n \
  \           res.add(nums.get(pairs.get(i).getValue1()));\n        }\n        return\
  \ res;"
- "        ArrayList<Integer> arr = new ArrayList<Integer>();\n        Map<Integer,\
  \ ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();\n      \
  \  for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i);\n\
  \            while (sum != 0) {\n                int digit = sum % 10;\n       \
  \         sum = sum / 10;\n                sum += digit;\n            }\n      \
  \      if (map.containsKey(sum)) {\n                ArrayList<Integer> value = map.get(sum);\n\
  \                value.add(nums.get(i));\n                map.put(sum, value);\n\
  \            } else {\n                ArrayList<Integer> value = new ArrayList<Integer>();\n\
  \                value.add(nums.get(i));\n                map.put(sum, value);\n\
  \            }\n        }\n        for (int i = 1; i <= nums.size(); i++) {\n  \
  \          if (map.containsKey(i)) {\n                ArrayList<Integer> value =\
  \ map.get(i);\n                Collections.sort(value);\n                for (int\
  \ j = 0; j < value.size(); j++) {\n                    arr.add(value.get(j));\n\
  \                }\n            }\n        }\n        return arr;"
- '        throw new UnsupportedOperationException("Method orderByPoints not implemented.");'
- '        return nums;'
- "\t\t/*\n\t\t * ArrayList<Integer> ans = new ArrayList<Integer>();\n\t\t * ArrayList<Integer>\
  \ sums = new ArrayList<Integer>(); for (int i = 0; i <\n\t\t * nums.size(); i++)\
  \ { sums.add(sumOfDigits(nums.get(i))); } for (int i = 0; i\n\t\t * < nums.size();\
  \ i++) { int min = sums.get(0); int minIdx = 0; for (int j =\n\t\t * 0; j < sums.size();\
  \ j++) { if (sums.get(j) < min) { min = sums.get(j);\n\t\t * minIdx = j; } } ans.add(nums.get(minIdx));\
  \ sums.remove(minIdx);\n\t\t * nums.remove(minIdx); } return ans;\n\t\t */\n\t\t\
  /*\n\t\t * ArrayList<Integer> ans = new ArrayList<Integer>();\n\t\t * ArrayList<Pair<Integer,\
  \ Integer>> sums = new ArrayList<Pair<Integer,\n\t\t * Integer>>(); for (int i =\
  \ 0; i < nums.size(); i++) {\n\t\t * sums.add(new Pair<Integer, Integer>(sumOfDigits(nums.get(i)),\
  \ nums.get(i)));\n\t\t * } for (int i = 0; i < nums.size(); i++) { int min = sums.get(0).getValue0();\n\
  \t\t * int minIdx = 0; for (int j = 0; j < sums.size(); j++) { if\n\t\t * (sums.get(j).getValue0()\
  \ < min) { min = sums.get(j).getValue0(); minIdx = j;\n\t\t * } } ans.add(sums.get(minIdx).getValue1());\
  \ sums.remove(minIdx); } return\n\t\t * ans;\n\t\t */\n\t\t/*\n\t\t * ArrayList<Integer>\
  \ ans = new ArrayList<Integer>();\n\t\t * ArrayList<Pair<Integer, Integer>> sums\
  \ = new ArrayList<Pair<Integer,\n\t\t *"
- '        return nums;'
- "        // YOUR CODE HERE\n        return nums;"
- "        ArrayList<Integer> r = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ poi = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            int s = nums.get(i);\n            int points = 0;\n           \
  \ while (s != 0) {\n                points += s % 10;\n                s /= 10;\n\
  \            }\n            poi.add(points);\n        }\n        int[] poiA = new\
  \ int[poi.size()];\n        for (int i = 0; i < poi.size(); i++) {\n           \
  \ poiA[i] = poi.get(i);\n        }\n        Arrays.sort(poiA);\n        int[] idx\
  \ = new int[poi.size()];\n        for (int i = 0; i < poi.size(); i++) {\n     \
  \       idx[i] = poi.indexOf(poiA[i]);\n        }\n        for (int i = 0; i < idx.length;\
  \ i++) {\n            r.add(nums.get(idx[i]));\n        }\n        return r;"
- "        // Put your solution here\n        ArrayList<Integer> ordered = new ArrayList<Integer>();\n\
  \        ArrayList<Pair<Integer, Integer>> sums = new ArrayList<Pair<Integer, Integer>>();\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n   \
  \         int num = nums.get(i);\n            while (num != 0) {\n             \
  \   sum += num % 10;\n                num /= 10;\n            }\n            sums.add(new\
  \ Pair<Integer, Integer>(sum, i));\n        }\n        Collections.sort(sums, new\
  \ Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public\
  \ int compare(Pair<Integer, Integer> a, Pair<Integer, Integer> b) {\n          \
  \      return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n\
  \        for (int i = 0; i < sums.size(); i++) {\n            ordered.add(nums.get(sums.get(i).getValue1()));\n\
  \        }\n        return ordered;"
- '        return null;'
- "        ArrayList<Pair<Integer, Integer>> sums = new ArrayList<>();\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            Pair<Integer, Integer> p = new\
  \ Pair<>(sumDigits(nums.get(i)), i);\n            sums.add(p);\n        }\n    \
  \    Collections.sort(sums, new Comparator<Pair<Integer, Integer>>() {\n       \
  \     @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer,\
  \ Integer> o2) {\n                if (o1.getValue0() == o2.getValue0()) {\n    \
  \                return o1.getValue1() - o2.getValue1();\n                }\n  \
  \              return o1.getValue0() - o2.getValue0();\n            }\n        });\n\
  \        ArrayList<Integer> res = new ArrayList<>();\n        for (Pair<Integer,\
  \ Integer> p : sums) {\n            res.add(nums.get(p.getValue1()));\n        }\n\
  \        return res;"
- "      ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n      int sum;\n\
  \      for (int i = 0; i < nums.size(); i++) {\n        sum = 0;\n        int num\
  \ = nums.get(i);\n        while (num != 0) {\n          sum += num % 10;\n     \
  \     num /= 10;\n        }\n        pairs.add(new Pair<Integer, Integer>(sum, i));\n\
  \      }\n      Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>()\
  \ {\n        @Override\n        public int compare(Pair<Integer, Integer> pair1,\
  \ Pair<Integer, Integer> pair2) {\n          if (pair1.getValue0() == pair2.getValue0())\
  \ {\n            return pair1.getValue1() - pair2.getValue1();\n          }\n  \
  \        return pair1.getValue0() - pair2.getValue0();\n        }\n      });\n \
  \     ArrayList<Integer> ans = new ArrayList<>();\n      for (Pair<Integer, Integer>\
  \ pair : pairs) {\n        ans.add(nums.get(pair.getValue1()));\n      }\n     \
  \ return ans;"
- '        return new ArrayList<Integer>();'
- "        ArrayList<Integer> n = nums;\n        for (int i = 0; i < n.size(); i++)\
  \ {\n            for (int j = i + 1; j < n.size(); j++) {\n                if (toDigits(n.get(i))\
  \ > toDigits(n.get(j))) {\n                    int x = n.get(i);\n             \
  \       n.set(i, n.get(j));\n                    n.set(j, x);\n                }\n\
  \            }\n        }\n        return n;"
- "        ArrayList<Integer> ret = new ArrayList<>();\n        HashMap<Integer, Integer>\
  \ map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        int key = sumDigits(nums.get(i));\n            if (map.containsKey(key))\
  \ {\n                map.put(key, map.get(key) + 1);\n            } else {\n   \
  \             map.put(key, 1);\n            }\n        }\n        int[] keys = map.keySet().stream().mapToInt(Integer::intValue).toArray();\n\
  \        Arrays.sort(keys);\n        int[][] dp = new int[keys.length][2];\n   \
  \     for (int i = 0; i < keys.length; i++) {\n            dp[i][0] = keys[i];\n\
  \            dp[i][1] = map.get(keys[i]);\n        }\n        for (int i = 0; i\
  \ < nums.size(); i++) {\n            int target = sumDigits(nums.get(i));\n    \
  \        int pos = Arrays.binarySearch(keys, target);\n            if (pos < 0)\
  \ {\n                continue;\n            }\n            if (dp[pos][1] == 0)\
  \ {\n                continue;\n            }\n            dp[pos][1]--;\n     \
  \       ret.add(nums.get(i));\n        }\n        return ret;"
- "        // your code here\n        return null;"
- "        // Your code here\n        return null;"
- "        // Your code here\n        return nums;"
- "        Map<Integer, Set<Integer>> map = new HashMap<>();\n        for (int i =\
  \ 0; i < nums.size(); i++) {\n            int sum = nums.get(i) < 0 ? (-1 * nums.get(i))\
  \ : nums.get(i);\n            while (sum > 0) {\n                int digit = sum\
  \ % 10;\n                sum /= 10;\n                if (map.containsKey(digit))\
  \ {\n                    map.get(digit).add(i);\n                } else {\n    \
  \                Set<Integer> set = new HashSet<>();\n                    set.add(i);\n\
  \                    map.put(digit, set);\n                }\n            }\n  \
  \      }\n        ArrayList<Integer> res = new ArrayList<>(nums.size());\n     \
  \   for (int i = 0; i < nums.size(); i++) {\n            res.add(0);\n        }\n\
  \        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n        Collections.sort(keys);\n\
  \        int index = 0;\n        for (int key : keys) {\n            Set<Integer>\
  \ set = map.get(key);\n            for (int i : set) {\n                res.set(index,\
  \ nums.get(i));\n                index++;\n            }\n        }\n        return\
  \ res;"
- "        // write your code here\n        return null;"
- '        return new ArrayList<Integer>();'
- "        // Write your code here\n        return null;"
- "        // return nums;\n        if (nums.size() == 0) {\n            return nums;\n\
  \        }\n        // sort\n        for (int i = 0; i < nums.size(); i++) {\n \
  \           for (int j = 0; j < nums.size() - 1; j++) {\n                int sum1\
  \ = getSum(nums.get(j));\n                int sum2 = getSum(nums.get(j + 1));\n\
  \                if (sum1 > sum2) {\n                    int temp = nums.get(j);\n\
  \                    nums.set(j, nums.get(j + 1));\n                    nums.set(j\
  \ + 1, temp);\n                }\n            }\n        }\n        return nums;"
- "        // YOUR CODE GOES HERE\n        return nums;"
language: java
name: HumanEval_145_order_by_points
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function which sorts the given list of integers\n\
  \    // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) ==\
  \ []\n    public static ArrayList<Integer> orderByPoints(ArrayList<Integer> nums)\
  \ {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)11, (int)-1, (int)-11, (int)-12)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-11, (int)1, (int)-12, (int)11)))));\n\
  \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234, (int)423,\
  \ (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37, (int)3457,\
  \ (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
  \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
  \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
  \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
  \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
  \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
  \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
  \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
