language: java
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ (Math.round(Double.parseDouble(value)));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vosrmoi.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double val\
    \ = Double.parseDouble(value);\n        double rounded = val > 0 ? Math.ceil(val)\
    \ : Math.floor(val);\n        return (int)rounded;\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmx_r7t22.java:31)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Write\
    \ your code here.\n        int number = Integer.parseInt(value);\n        int\
    \ diff = number - Integer.parseInt(value);\n        if (Math.abs(diff) < 0.5)\
    \ {\n            return number;\n        } else {\n            return number +\
    \ diff;\n        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.closestInteger(tmpglr2b4dd.java:24)\n\tat Problem.main(tmpglr2b4dd.java:34)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double decimalValue\
    \ = Double.parseDouble(value);\n        int floorValue = (int) Math.floor(decimalValue);\n\
    \        double diffFromFloor = decimalValue - floorValue;\n        double diffFromCeil\
    \ = Math.ceil(decimalValue) - decimalValue;\n        if (diffFromFloor < diffFromCeil)\
    \ {\n            return floorValue;\n        } else {\n            return (int)\
    \ Math.ceil(decimalValue);\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeg4t1qg1.java:36)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        if (value.contains(\"\
    .\")) {\n            int left = Integer.parseInt(value.substring(0, value.indexOf(\"\
    .\")));\n            int right = Integer.parseInt(value.substring(value.indexOf(\"\
    .\") + 1));\n            if (right >= 5) {\n                return left + 1;\n\
    \            } else {\n                return left;\n            }\n        }\
    \ else {\n            return Integer.parseInt(value);\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3fv9aow.java:38)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // int?\n\
    \        BigDecimal input = new BigDecimal(value);\n        BigDecimal floor =\
    \ input.setScale(0, RoundingMode.FLOOR);\n        BigDecimal ceiling = input.setScale(0,\
    \ RoundingMode.CEILING);\n        BigDecimal diffFloor = input.subtract(floor).abs();\n\
    \        BigDecimal diffCeiling = ceiling.subtract(input).abs();\n        if (diffFloor.compareTo(diffCeiling)\
    \ == -1) {\n            return floor.intValue();\n        } else {\n         \
    \   return ceiling.intValue();\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptwscpjad.java:38)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code goes here\n        try {\n            // Attempt to parse the string into\
    \ a decimal.\n            double decimal = Double.parseDouble(value);\n      \
    \      // If the parse was successful, then we now have a decimal value.\n   \
    \         // However, we want to round it and get an integer.\n            int\
    \ rounded = (int) Math.round(decimal);\n            // Finally, we want to return\
    \ the integer value.\n            return rounded;\n        } catch (NumberFormatException\
    \ e) {\n            // If the parse failed, we should return an error message.\n\
    \            return -1;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppwhwahdl.java:40)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Write\
    \ your code here\n        double n = Double.parseDouble(value);\n        int a\
    \ = (int) Math.floor(n);\n        int b = (int) Math.ceil(n);\n        if (Math.abs(n\
    \ - a) < Math.abs(n - b)) {\n            return a;\n        } else {\n       \
    \     return b;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9opt40ow.java:36)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double val\
    \ = Double.parseDouble(value);\n        return (int) Math.round(val);\n}\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4o3s1ao.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // write\
    \ your code here\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkqq45nw0.java:27)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Math.round(Float.parseFloat(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprc0x7ade.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> closest_integer(\"\
    10\")\n        // 10\n        // >>> closest_integer(\"15.3\")\n        // 15\n\
    \        // >>> closest_integer(\"15.6\")\n        // 16\n        // >>> closest_integer(\"\
    14.5\")\n        // 15\n        // >>> closest_integer(\"-14.5\")\n        //\
    \ -15\n        // >>> closest_integer(\"-15.3\")\n        // -15\n        // >>>\
    \ closest_integer(\"-15.6\")\n        // -16\n        // >>> closest_integer(\"\
    -10\")\n        // -10\n        // >>> closest_integer(\"-15.2\")\n        //\
    \ -15\n        // >>> closest_integer(\"-15.8\")\n        // -16\n        // >>>\
    \ closest_integer(\"-15.7\")\n        // -16\n        // >>> closest_integer(\"\
    15.2\")\n        // 15\n        // >>> closest_integer(\"15.8\")\n        // 16\n\
    \        // >>> closest_integer(\"15.7\")\n        // 16\n        if (value.matches(\"\
    [0-9\\\\.]+\")) {\n            // System.out.println(\"number\");\n          \
    \  double number = Double.parseDouble(value);\n            if (number >= 0) {\n\
    \                // System.out.println(\"+ve\");\n                if (number -\
    \ (int) number < 0.5) {\n                    // System.out.println(\"away from\
    \ 0\");\n                    return (int) number;\n                } else {\n\
    \                    // System.out.println(\"away from 1\");\n               \
    \     return (int) (number + 1);\n                }\n            } else {\n  \
    \              // System.out.println(\"-ve\");\n                if (number - (int)\
    \ number < 0.5) {\n                    // System.out.println(\"away from 0\");\n\
    \                    return (int) number;\n                } else {\n        \
    \            // System.out.println(\"away from 1\");\n                    return\
    \ (int) (number - 1);\n                }\n            }\n        } else {\n  \
    \          throw new IllegalArgumentException();\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException\n\tat Problem.closestInteger(tmp8_g4q0gy.java:74)\n\
    \tat Problem.main(tmp8_g4q0gy.java:80)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // since\
    \ we are rounding away from zero, we can skip the cases\n        // where the\
    \ parsed integer is equal to the closest integer.\n        // For example, if\
    \ the input is \"0\", the integer closest to 0 is 0,\n        // and the integer\
    \ closest to -0 is -0.\n        int parsed_val = Integer.parseInt(value);\n  \
    \      if (parsed_val == 0) {\n            return 0;\n        }\n\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        BigDecimal floor = bd.setScale(0, RoundingMode.FLOOR);\n\
    \        BigDecimal ceil = bd.setScale(0, RoundingMode.CEILING);\n        BigDecimal\
    \ rounded_down = bd.subtract(floor);\n        BigDecimal rounded_up = ceil.subtract(bd);\n\
    \        return rounded_down.compareTo(rounded_up) <= 0 ? floor.intValue() : ceil.intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.closestInteger(tmpxrxltnof.java:27)\n\tat Problem.main(tmpxrxltnof.java:41)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        throw new\
    \ UnsupportedOperationException(\"Not Implemented\");\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ Implemented\n\tat Problem.closestInteger(tmp1651ufch.java:23)\n\tat Problem.main(tmp1651ufch.java:26)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Math.round(Float.parseFloat(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprc0x7ade.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return -1;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkyrzm_7r.java:26)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        int i =\
    \ Integer.parseInt(value);\n        double a = Math.abs(i - Double.parseDouble(value));\n\
    \        double b = 1 - a;\n        if (a > b) {\n            return i + 1;\n\
    \        } else {\n            return i;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.closestInteger(tmp5ny527xm.java:23)\n\tat Problem.main(tmp5ny527xm.java:34)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double number\
    \ = Double.parseDouble(value);\n        double decimal = number - (int) number;\n\
    \        int round = (int) Math.round(number);\n        if (decimal > 0.5) {\n\
    \            return round;\n        } else if (decimal < 0.5) {\n            return\
    \ (int) number;\n        } else {\n            if (number < 0) {\n           \
    \     return round - 1;\n            } else {\n                return round;\n\
    \            }\n        }\n}\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptemr_ky9.java:41)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        if (d - (int) d >= 0.5) {\n          \
    \  return (int) d + 1;\n        } else {\n            return (int) d;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezdvdyj5.java:33)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        int i = (int)d;\n        if (d - i > 0.5)\n\
    \            return i + 1;\n        return i;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexl_0cco.java:31)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Math.round(Float.parseFloat(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprc0x7ade.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double val\
    \ = Double.parseDouble(value);\n        return val > 0 ? (int) Math.ceil(val)\
    \ : (int) Math.floor(val);\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74wouvzc.java:30)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        Double f\
    \ = Double.parseDouble(value);\n        int a = (int)Math.floor(f);\n        int\
    \ b = (int)Math.ceil(f);\n        int ca = Math.abs(a);\n        int cb = Math.abs(b);\n\
    \        int cfa = Math.abs(a - f.intValue());\n        int cfb = Math.abs(b -\
    \ f.intValue());\n        if (cfa == cfb)\n            return f.intValue() > 0\
    \ ? a : b;\n        else if (cfa < cfb)\n            return a;\n        else\n\
    \            return b;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41f_yrj3.java:39)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ bigDecimal = new BigDecimal(value);\n        BigDecimal nearestBigDecimal =\
    \ bigDecimal.round(new MathContext(0, RoundingMode.HALF_UP));\n        return\
    \ nearestBigDecimal.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvknpg1m3.java:29)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) (d > 0 ? Math.ceil(d) : Math.floor(d));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8fdthr_0.java:30)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Use your\
    \ language's built-in decimal number (BigDecimal) library\n        // to convert\
    \ the given string to a decimal number and to round it\n        // to the nearest\
    \ integer. We can use BigDecimal because it has\n        // an arbitrary precision\
    \ in contrast to float or double which is\n        // limited to 32 or 64 bits\
    \ of precision. BigDecimal also does not\n        // lose precision like float\
    \ and double when adding, subtracting,\n        // multiplying, or dividing decimal\
    \ numbers.\n        // https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html\n\
    \        return new BigDecimal(value).setScale(0, RoundingMode.HALF_UP).intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)Math.round(Double.parseDouble(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz2adonpg.java:28)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double num\
    \ = Double.parseDouble(value);\n        return (int) Math.round(num);\n}\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsazjfzm9.java:29)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> closest_integer(\"\
    14.5\") should return 15\n        // >>> closest_integer(\"-14.5\") should return\
    \ -15\n        float f = Float.parseFloat(value);\n        float absolute = Math.abs(f);\n\
    \        int ceil = (int) Math.ceil(absolute);\n        int floor = (int) Math.floor(absolute);\n\
    \        if (ceil - absolute < absolute - floor) {\n            return f < 0 ?\
    \ -ceil : ceil;\n        } else {\n            return f < 0 ? -floor : floor;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4h8jazg1.java:37)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Solution\
    \ Start\n        double f = Double.parseDouble(value);\n        int i = (int)f;\n\
    \        double d = Math.abs(f - i);\n        if (f > 0) {\n            if (d\
    \ >= 0.5) {\n                return i + 1;\n            } else {\n           \
    \     return i;\n            }\n        } else {\n            if (d >= 0.5) {\n\
    \                return i - 1;\n            } else {\n                return i;\n\
    \            }\n        }\n        // Solution End\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        int n = (int) d;\n        if (d - n >=\
    \ 0.5) {\n            return n + 1;\n        } else {\n            return n;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0zgpeyn.java:34)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return new\
    \ Double(value).longValue();\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pq4hcsn.java:23: warning: [removal] Double(String) in Double has\
    \ been deprecated and marked for removal\n        return new Double(value).longValue();\n\
    \               ^\n/tmp/tmp4pq4hcsn.java:23: error: incompatible types: possible\
    \ lossy conversion from long to int\n        return new Double(value).longValue();\n\
    \                                          ^\n1 error\n1 warning\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        if (value.charAt(0)\
    \ == '-') {\n            // negative number\n            return -closestInteger(value.substring(1));\n\
    \        }\n        if (value.indexOf('.') == -1) {\n            // integer\n\
    \            return Integer.parseInt(value);\n        }\n        // decimal\n\
    \        int decimalPosition = value.indexOf('.');\n        int left = closestInteger(value.substring(0,\
    \ decimalPosition));\n        int right = closestInteger(value.substring(decimalPosition\
    \ + 1));\n        double leftValue = Double.parseDouble(value.substring(0, decimalPosition));\n\
    \        double rightValue = Double.parseDouble(value.substring(decimalPosition\
    \ + 1));\n        return left + (right >= (int) (rightValue + 0.5) ? 1 : 0);\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9_vtgtc.java:43)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ solution goes here.\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphy6zgpjc.java:27)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code here!\n        return 1;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mjhd4m8.java:27)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        int i =\
    \ (int) Math.round(Double.parseDouble(value));\n        return i;\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9g2q19e.java:29)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // YOUR\
    \ CODE HERE\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptwjwwh2b.java:27)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double num\
    \ = Double.parseDouble(value);\n        return (int) Math.signum(num) * (int)\
    \ Math.ceil(Math.abs(num));\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprp6c8rrt.java:30)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ d = new BigDecimal(value);\n        BigDecimal d2 = d.setScale(0, RoundingMode.HALF_UP);\n\
    \        return d2.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        if(d < 0)\n            return (int)Math.ceil(d);\n\
    \        else\n            return (int)Math.floor(d);\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3y_i6_61.java:31)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        float number\
    \ = Float.parseFloat(value);\n        return Math.round(number);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmsl9xcqu.java:29)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)Math.round(Double.parseDouble(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz2adonpg.java:28)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // The goal\
    \ is to round the given number and return the closest integer\n        // to it.\
    \ However, if the number is equidistant from two integers,\n        // round it\
    \ away from zero.\n        // The first step is to convert the given number from\
    \ a string to a\n        // float.\n        float number = Float.parseFloat(value);\n\
    \        // The second step is to round the number. To do this we can use the\n\
    \        // Math.round function.\n        // Math.round(number)\n        // Math.round\
    \ returns the closest integer to the number.\n        // Note: Rounding away from\
    \ zero means that if the given number is\n        // equidistant from two integers,\
    \ the one you should return is the one\n        // that is the farthest from zero.\
    \ For example\n        // Math.round(14.5) should return 15 and Math.round(-14.5)\
    \ should\n        // return -15.\n        // Finally, we need to return the rounded\
    \ number.\n        return Math.round(number);\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4otro0e7.java:44)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double val\
    \ = Double.parseDouble(value);\n        return val % 1 >= 0.5 ? (int)val + 1 :\
    \ (int)val;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnqecpe3k.java:29)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        int length\
    \ = value.length();\n        boolean isNegative = value.charAt(0) == '-';\n  \
    \      if (isNegative) {\n            // remove the sign\n            value =\
    \ value.substring(1, length);\n        }\n        int index = value.indexOf('.');\n\
    \        if (index == -1) {\n            // no decimal, so the closest integer\
    \ is itself\n            return isNegative ? -Integer.parseInt(value) : Integer.parseInt(value);\n\
    \        }\n        // get the integer portion of the value\n        int floor\
    \ = Integer.parseInt(value.substring(0, index));\n        int decimal = Integer.parseInt(value.substring(index\
    \ + 1, length));\n        int ceiling = floor + 1;\n        // if the decimal\
    \ is halfway between the floor and ceiling, then round away from zero\n      \
    \  // if (decimal > 49) {\n        //     return isNegative ? -ceiling : ceiling;\n\
    \        // }\n        // if (decimal < 50) {\n        //     return isNegative\
    \ ? -floor : floor;\n        // }\n        // now it gets tricky, if the decimal\
    \ is halfway between the floor and ceiling\n        // we must round away from\
    \ zero, otherwise return the floor\n        int difference = ceiling - floor;\n\
    \        if (decimal > difference / 2) {\n            return isNegative ? -ceiling\
    \ : ceiling;\n        }\n        if (decimal < difference / 2) {\n           \
    \ return isNegative ? -floor : floor;\n        }\n        return isNegative ?\
    \ -ceiling : ceiling;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 3, end 5, length 4\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.closestInteger(tmp2qj1m669.java:36)\n\
    \tat Problem.main(tmp2qj1m669.java:59)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // BEGIN\
    \ SECRET\n        double d = Double.parseDouble(value);\n        int up = (int)\
    \ Math.ceil(d);\n        int down = (int) Math.floor(d);\n        if (Math.abs(d\
    \ - up) > Math.abs(d - down)) {\n            return down;\n        } else {\n\
    \            return up;\n        }\n        // END SECRET\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgghhmg3z.java:37)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Convert\
    \ value to double\n        // Get an array of integers representing the range\
    \ of values\n        // between the integers that surround the value\n       \
    \ // Filter the array by the value\n        // Return the closest integer\n  \
    \      return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn39fl4la.java:31)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // double\
    \ can represent an integer value in decimal notation\n        double number =\
    \ Double.parseDouble(value);\n        // if the number is positive, return the\
    \ value of ceil\n        if (number >= 0) {\n            return (int) Math.ceil(number);\n\
    \        }\n        // if the number is negative, return the value of floor\n\
    \        else {\n            return (int) Math.floor(number);\n        }\n}\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6svoobqc.java:38)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) (d+0.5);\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiuv48smd.java:29)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        // >>> int(\"10.1\")\n        // error\n\
    \        // >>> int(10.1)\n        // 10\n        // >>> int(10.5)\n        //\
    \ 10\n        // >>> int(10.9)\n        // 10\n        // >>> floor(10.1)\n  \
    \      // 10.0\n        // >>> floor(10.5)\n        // 10.0\n        // >>> floor(10.9)\n\
    \        // 10.0\n        // >>> round(10.1)\n        // 10\n        // >>> round(10.5)\n\
    \        // 11\n        // >>> round(10.9)\n        // 11\n        // >>> ceil(10.1)\n\
    \        // 11.0\n        // >>> ceil(10.5)\n        // 11.0\n        // >>> ceil(10.9)\n\
    \        // 11.0\n        // >>> int(floor(10.1))\n        // 10\n        // >>>\
    \ int(floor(10.5))\n        // 10\n        // >>> int(floor(10.9))\n        //\
    \ 10\n        // >>> int(round(10.1))\n        // 10\n        // >>> int(round(10.5))\n\
    \        // 11\n        // >>> int(round(10.9))\n        // 11\n        // >>>\
    \ int(ceil(10.1))\n        // 11\n        // >>> int(ceil(10.5))\n        // 11\n\
    \        // >>> int(ceil(10.9))\n        // 11\n        return (int) Math.floor(d\
    \ + 0.5);\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaozzkfrr.java:73)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Math.round(Float.parseFloat(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprc0x7ade.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        double d2 = d - Math.floor(d);\n     \
    \   if (d2 > 0.5) {\n            return (int)Math.ceil(d);\n        } else {\n\
    \            return (int)Math.floor(d);\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpivtns86_.java:33)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code goes here\n        int x = Integer.parseInt(value);\n        return x;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.closestInteger(tmpq09ow0rd.java:24)\n\tat Problem.main(tmpq09ow0rd.java:29)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        var bigDecimal\
    \ = new BigDecimal(value);\n        var rounded = bigDecimal.setScale(0, RoundingMode.HALF_UP);\n\
    \        return rounded.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011852
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // 1. Convert\
    \ the given value into a BigDecimal.\n        // 2. Round the BigDecimal using\
    \ the RoundingMode provided\n        //    by the BigDecimal class.\n        //\
    \ 3. Return the value of the resulting BigDecimal,\n        //    using the intValue\
    \ method.\n        return new BigDecimal(value).setScale(0, RoundingMode.HALF_UP).intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code here.\n        double d = Double.parseDouble(value);\n        int min =\
    \ Integer.MAX_VALUE;\n        int closest = 0;\n        for (int i = (int) Math.floor(d);\
    \ i <= (int) Math.ceil(d); i++) {\n            int distance = Math.abs(i - (int)\
    \ d);\n            if (distance < min) {\n                min = distance;\n  \
    \              closest = i;\n            }\n        }\n        return closest;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87o1eabv.java:38)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double test\
    \ = Double.parseDouble(value);\n        int high = (int)Math.ceil(test);\n   \
    \     int low = (int)Math.floor(test);\n        if (test - low == 0.5) {\n   \
    \         if (test < 0) {\n                return low;\n            } else {\n\
    \                return high;\n            }\n        } else if (test - low <\
    \ 0.5) {\n            return low;\n        } else {\n            return high;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Implement\
    \ your function here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjb3qr4av.java:27)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double value_d\
    \ = Double.parseDouble(value);\n        return value_d > 0 ? (int) Math.ceil(value_d)\
    \ : (int) Math.floor(value_d);\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0yvp3ae.java:30)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double valueDouble\
    \ = Double.parseDouble(value);\n        if (valueDouble % 1 == 0) {\n        \
    \    return (int)valueDouble;\n        }\n        else {\n            double valueFloor\
    \ = Math.floor(valueDouble);\n            double valueCeil = Math.ceil(valueDouble);\n\
    \            double ceilingDiff = valueCeil - valueDouble;\n            double\
    \ floorDiff = valueDouble - valueFloor;\n            if (ceilingDiff < floorDiff)\
    \ {\n                return (int)valueCeil;\n            }\n            else {\n\
    \                return (int)valueFloor;\n            }\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9dnt2bhm.java:42)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // 1. Create\
    \ a BigDecimal instance of the given value.\n        // 2. Use the method BigDecimal.setScale()\
    \ to round the number with the\n        //    RoundingMode.HALF_UP.\n        //\
    \ 3. Convert the result to integer.\n        // 4. Return the result.\n      \
    \  return (int)Double.parseDouble(value);\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfu57cbhj.java:32)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Given\
    \ a value (string) representing a number, return the closest\n        // integer\
    \ to it.\n        //\n        // if the number is equidistant from two integers,\
    \ round it away from\n        // zero.\n        //\n        // Rounding away from\
    \ zero means that if the given number is\n        // equidistant from two integers,\
    \ the one you should return is the one\n        // that is the farthest from zero.\
    \ For example closest_integer(\"14.5\")\n        // should return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        int closestInteger;\n        if (value.indexOf(\"\
    .\") < 0) {\n            // value is an integer\n            closestInteger =\
    \ Integer.parseInt(value);\n        } else {\n            // value is not an integer\n\
    \            String[] values = value.split(\"\\\\.\");\n            int decimalPlaces\
    \ = values[1].length();\n            int decimalPoint = Integer.parseInt(values[1]);\n\
    \            int integerPart = Integer.parseInt(values[0]);\n            closestInteger\
    \ = integerPart;\n            // determine if there is a 1 in the first position\
    \ of the decimal\n            // places and if so, round up.\n            if (decimalPlaces\
    \ > 0) {\n                for (int place = 0; place < decimalPlaces; place++)\
    \ {\n                    int placeValue = (int) Math.pow(10, place);\n       \
    \             int modulo = decimalPoint % placeValue;\n                    if\
    \ (modulo == 1) {\n                        // the first decimal place is 1 which\
    \ means we need to\n                        // round up.\n                   \
    \     if (integerPart > 0) {\n                            // the integer part\
    \ is positive\n                            closestInteger = integerPart + 1;\n\
    \                        } else {\n                            // the integer\
    \ part is negative\n                            closestInteger = integerPart -\
    \ 1;\n                        }\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return closestInteger;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnd76mdk_.java:69)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        int sign = (int) Math.signum(d);\n   \
    \     d = Math.abs(d);\n        int i = (int) d;\n        if(d - i >= 0.5) i +=\
    \ 1;\n        return i * sign;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // convert\
    \ the string to a decimal value\n        // round the decimal value\n        //\
    \ convert the decimal value to an integer\n        return (int)Math.round(Double.parseDouble(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1iknn1js.java:31)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double f\
    \ = Double.parseDouble(value);\n        int i = (int)f;\n        double d = f\
    \ - i;\n        if (d >= 0.5) {\n            i++;\n        }\n        return i;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpenv_dac8.java:34)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // int ret\
    \ = 0;\n        // return ret;\n        return (int) Math.round(Double.parseDouble(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpanzn5vzu.java:30)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // your\
    \ solution here\n        return (int) (Math.round(Double.parseDouble(value)));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_ti3xtw.java:29)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double number\
    \ = Double.parseDouble(value);\n        double fractionalPart = number - Math.floor(number);\n\
    \        double ceil = Math.ceil(number);\n        double floor = Math.floor(number);\n\
    \        if (fractionalPart == 0.5) {\n            if (number > 0) {\n       \
    \         return (int) ceil;\n            } else {\n                return (int)\
    \ floor;\n            }\n        } else if (fractionalPart > 0.5) {\n        \
    \    return (int) ceil;\n        } else {\n            return (int) floor;\n \
    \       }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Write\
    \ your code here\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cpul_lz.java:27)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        if (value.matches(\"\
    \\\\d+\")) {\n            return Integer.parseInt(value);\n        }\n       \
    \ int decimal = value.indexOf(\".\");\n        String decimalPortion = value.substring(decimal\
    \ + 1);\n        if (decimalPortion.length() > 1) {\n            String digit\
    \ = String.valueOf(decimalPortion.charAt(0));\n            String digitPlusOne\
    \ = String.valueOf(decimalPortion.charAt(0) + 1);\n            String integerPortion\
    \ = value.substring(0, decimal);\n            String numberRoundedDown = integerPortion\
    \ + \".\" + digit;\n            String numberRoundedUp = integerPortion + \".\"\
    \ + digitPlusOne;\n            Double numberRoundedDownDouble = Double.parseDouble(numberRoundedDown);\n\
    \            Double numberRoundedUpDouble = Double.parseDouble(numberRoundedUp);\n\
    \            if (numberRoundedDownDouble > numberRoundedUpDouble) {\n        \
    \        return (int) Math.floor(numberRoundedUpDouble);\n            } else {\n\
    \                return (int) Math.ceil(numberRoundedDownDouble);\n          \
    \  }\n        } else {\n            return Integer.parseInt(value.substring(0,\
    \ decimal));\n        }\n}\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf_efgijb.java:47)\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ val = new BigDecimal(value);\n        return val.setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // YOUR\
    \ CODE HERE\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptwjwwh2b.java:27)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return BigDecimal.valueOf(Double.parseDouble(value)).setScale(0,\
    \ RoundingMode.HALF_UP).intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        double ceil = Math.ceil(d);\n        double\
    \ floor = Math.floor(d);\n        double ceilDiff = ceil - d;\n        double\
    \ floorDiff = d - floor;\n        if (ceilDiff > floorDiff) {\n            return\
    \ (int)floor;\n        } else {\n            return (int)ceil;\n        }\n}\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpik0tb7kf.java:37)\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Insert\
    \ your code here.\n        double dval = Double.parseDouble(value);\n        double\
    \ floor = Math.floor(dval);\n        double ceil = Math.ceil(dval);\n        double\
    \ diff_floor = Math.abs(dval - floor);\n        double diff_ceil = Math.abs(dval\
    \ - ceil);\n        if (diff_floor < diff_ceil) {\n            return (int)floor;\n\
    \        } else {\n            return (int)ceil;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpout97u8u.java:38)\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double num\
    \ = Double.parseDouble(value);\n        int result = 0;\n        if (num > 0)\
    \ {\n            result = (int) Math.ceil(num);\n        } else {\n          \
    \  result = (int) Math.floor(num);\n        }\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5bka_l5d.java:36)\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Write\
    \ your code here.\n        BigDecimal v = new BigDecimal(value);\n        BigDecimal\
    \ intPart = v.setScale(0, RoundingMode.DOWN);\n        BigDecimal decPart = v.subtract(intPart);\n\
    \        BigDecimal zero = new BigDecimal(\"0\");\n        BigDecimal half = new\
    \ BigDecimal(\"0.5\");\n        BigDecimal one = new BigDecimal(\"1\");\n    \
    \    if (decPart.compareTo(zero) > 0 && decPart.compareTo(half) > 0) {\n     \
    \       intPart = intPart.add(one);\n        }\n        return intPart.intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wzkjilg.java:37)\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        int ret\
    \ = 0;\n        try {\n            int integer = Math.round(Float.parseFloat(value));\n\
    \            int down = integer - 1;\n            int up = integer + 1;\n    \
    \        float diff = Float.MAX_VALUE;\n            float temp = diff;\n     \
    \       diff = Math.abs(integer - Float.parseFloat(value));\n            if (diff\
    \ < temp) {\n                ret = integer;\n            }\n            temp =\
    \ diff;\n            diff = Math.abs(down - Float.parseFloat(value));\n      \
    \      if (diff < temp) {\n                ret = down;\n            }\n      \
    \      temp = diff;\n            diff = Math.abs(up - Float.parseFloat(value));\n\
    \            if (diff < temp) {\n                ret = up;\n            }\n  \
    \      } catch (NumberFormatException e) {\n            System.out.println(\"\
    Caught: \" + e);\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1cvv1ofy.java:52)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Integer.parseInt(String.format(\"\
    %.0f\",Double.parseDouble(value)));\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        if (d < 0) {\n            if (d % 1 ==\
    \ 0) {\n                return (int) d;\n            } else {\n              \
    \  return (int) d - 1;\n            }\n        } else {\n            if (d % 1\
    \ == 0) {\n                return (int) d;\n            } else {\n           \
    \     return (int) d + 1;\n            }\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8p2gsdul.java:42)\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // return\
    \ the closest integer to \"value\"\n        int v = Integer.parseInt(value);\n\
    \        return v;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.closestInteger(tmpb6xxxx7j.java:24)\n\tat Problem.main(tmpb6xxxx7j.java:29)\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ bigdecimal = new BigDecimal(value);\n        BigDecimal one = new BigDecimal(\"\
    1\");\n        BigDecimal zero = new BigDecimal(\"0\");\n        return bigdecimal.compareTo(zero)\
    \ == -1 ? bigdecimal.subtract(one).intValue() : bigdecimal.add(one).intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7h3vb95.java:29)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> closest_integer(\"\
    10\")\n        // 10\n        // >>> closest_integer(\"15.3\")\n        // 15\n\
    \        // >>> closest_integer(\"14.5\")\n        // 15\n        // >>> closest_integer(\"\
    -14.5\")\n        // -15\n        double v = Double.parseDouble(value);\n    \
    \    // should round according to standard\n        // round to nearest even number\n\
    \        double d = Math.round(v);\n        return (int) d;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcu4x_x2y.java:40)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        try {\n\
    \            BigDecimal decimal = new BigDecimal(value);\n            BigDecimal\
    \ rounded = decimal.setScale(0, RoundingMode.HALF_UP);\n            return rounded.intValue();\n\
    \        } catch (NumberFormatException e) {\n            throw new RuntimeException(value\
    \ + \" is not a real number\");\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double inputDouble\
    \ = Double.parseDouble(value);\n        int output = (int) Math.round(inputDouble);\n\
    \        return output;\n}\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1m5mqfew.java:30)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // <----\
    \ Start coding here\n        double d = Double.parseDouble(value);\n        int\
    \ rounded = (int) Math.round(d);\n        return rounded;\n        // -----> End\
    \ coding here\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdv0l535.java:32)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)Math.round(Double.parseDouble(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz2adonpg.java:28)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> closest_integer(\"\
    10\")\n        // 10\n        // >>> closest_integer(\"15.3\")\n        // 15\n\
    \        // >>> closest_integer(\"-15.3\")\n        // -15\n        // >>> closest_integer(\"\
    14.5\")\n        // 15\n        // >>> closest_integer(\"-14.5\")\n        //\
    \ -15\n        // >>> closest_integer(\"14.6\")\n        // 15\n        // >>>\
    \ closest_integer(\"-14.6\")\n        // -15\n        // >>> closest_integer(\"\
    -14.5\")\n        // -15\n        // >>> closest_integer(\"-14.6\")\n        //\
    \ -15\n        // >>> closest_integer(\"14.4\")\n        // 14\n        // >>>\
    \ closest_integer(\"-14.4\")\n        // -14\n        // >>> closest_integer(\"\
n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp0srhkc0g.java:46: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code here!\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyaf8gu_z.java:27)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // WRITE\
    \ CODE HERE\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptc83r9_m.java:27)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        String[]\
    \ parts = value.split(\"\\\\.\");\n        int integer = Integer.parseInt(parts[0]);\n\
    \        if (parts.length == 1) {\n            return integer;\n        }\n  \
    \      String decimal = parts[1];\n        int base = (int) Math.pow(10, decimal.length());\n\
    \        int fraction = Integer.parseInt(decimal);\n        double quotient =\
    \ fraction / (base * 1.0);\n        if (quotient > 0.5) {\n            integer++;\n\
    \        }\n        return integer;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn6ua2hi2.java:39)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // This\
    \ is your job. :)\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj5rra2a9.java:27)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double v\
    \ = Double.parseDouble(value);\n        return (int)Math.round(v);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhn0qk49.java:29)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code here.\n        Double input = Double.parseDouble(value);\n        int x\
    \ = (int) Math.floor(input);\n        int y = (int) Math.ceil(input);\n      \
    \  if (input - x > y - input) {\n            return y;\n        } else {\n   \
    \         return x;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1ye6kik.java:35)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double result\
    \ = Double.parseDouble(value);\n        return (int)Math.round(result);\n}\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpay4xsm10.java:29)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ d = new BigDecimal(value);\n        BigDecimal result = d.setScale(0, RoundingMode.HALF_UP);\n\
    \        return result.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double number\
    \ = Double.parseDouble(value);\n        double fraction = number - (int) number;\n\
    \        if (fraction == 0.5) {\n            if (number < 0) {\n             \
    \   return (int) number - 1;\n            } else {\n                return (int)\
    \ number + 1;\n            }\n        } else {\n            return (int) number;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0gspjlwr.java:38)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Integer.parseInt(String.valueOf(Math.round(Float.parseFloat(value))));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq80qrbl_.java:28)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ (Math.round(Double.parseDouble(value)));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vosrmoi.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // change\
    \ value to double\n        double val = Double.parseDouble(value);\n        //\
    \ if val is negative, make it positive\n        if (val < 0) {\n            val\
    \ = Math.abs(val);\n        }\n        // if val is less than one\n        if\
    \ (val < 1) {\n            // multiply by 10, get the closest integer, divide\
    \ by 10\n            // this rounds toward zero\n            val = Math.round(val\
    \ * 10) / 10.0;\n        } else {\n            // if val is greater than one,\
    \ take the floor (round toward zero)\n            val = Math.floor(val);\n   \
    \     }\n        // return the value\n        return (int) val;\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgd7d7ce_.java:43)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        int decimal\
    \ = 0;\n        boolean negative = false;\n        // check for negative number\n\
    \        if (value.charAt(0) == '-') {\n            negative = true;\n       \
    \     value = value.substring(1);\n        }\n        // check if number has decimal\n\
    \        String[] parts = value.split(\"\\\\.\");\n        String wholePart =\
    \ parts[0];\n        String decimalPart = parts[1];\n        // if (decimalPart.charAt(0)\
    \ > '5') {\n        //     decimal = 1;\n        // }\n        // if negative,\
    \ return negative of closest integer\n        if (negative) {\n            return\
    \ 0 - Integer.parseInt(wholePart) - decimal;\n        }\n        // else return\
    \ closest integer\n        return Integer.parseInt(wholePart) + decimal;\n}\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.closestInteger(tmpza_4wd7x.java:33)\n\
    \tat Problem.main(tmpza_4wd7x.java:45)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // TODO\n\
    \        // return 0;\n        BigDecimal bd = new BigDecimal(value);\n      \
    \  return bd.setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 1;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmz_qv2vn.java:26)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code here!\n        double dubVal = Double.parseDouble(value);\n        return\
    \ (int) dubVal;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyk9es1q4.java:29)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ val = new BigDecimal(value);\n        BigDecimal intVal = val.setScale(0, BigDecimal.ROUND_HALF_UP);\n\
    \        return intVal.intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // write\
    \ your code here\n        if (value.isEmpty()) {\n            return 0;\n    \
    \    }\n        double result = Double.parseDouble(value);\n        return (int)\
    \ Math.round(result);\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpid64rf8r.java:33)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double n\
    \ = Double.parseDouble(value);\n        int result = (int) Math.round(n);\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcworvib4.java:30)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double num\
    \ = Double.parseDouble(value);\n        return (int) Math.round(num);\n}\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsazjfzm9.java:29)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // BigDecimal\
    \ value = new BigDecimal(value);\n        // return value.setScale(0, RoundingMode.HALF_UP).intValue();\n\
    \        return Integer.parseInt(value.split(\"\\\\.\")[0]);\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpurzhs_5f.java:29)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        throw new\
    \ UnsupportedOperationException(\"Delete this line and write your own implementation\"\
    );\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Delete\
    \ this line and write your own implementation\n\tat Problem.closestInteger(tmporm77s7d.java:23)\n\
    \tat Problem.main(tmporm77s7d.java:26)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ n = new BigDecimal(value);\n        BigDecimal integralValue = n.setScale(0,\
    \ RoundingMode.HALF_UP);\n        return integralValue.intValue();\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        if (value.isEmpty())\
    \ {\n            return 0;\n        }\n        int valueRounded = (int) Math.round(Double.parseDouble(value));\n\
    \        return valueRounded;\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbiy0pe_a.java:32)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        String temp = value.replaceAll(\"\\\\.\", \"\");\n        StringBuilder\
    \ sb = new StringBuilder(temp);\n        sb.insert(temp.length() - value.length()\
    \ + 2, \".\");\n        double decimal = Double.parseDouble(sb.toString());\n\
    \        int result = (int)decimal;\n        if ((decimal - result) >= 0.5) {\n\
    \            result += 1;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxd7632_1.java:38)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ val = new BigDecimal(value);\n        BigDecimal ceil = val.setScale(0, RoundingMode.CEILING);\n\
    \        BigDecimal floor = val.setScale(0, RoundingMode.FLOOR);\n        BigDecimal\
    \ diff_ceil = ceil.subtract(val).abs();\n        BigDecimal diff_floor = floor.subtract(val).abs();\n\
    \        return diff_ceil.compareTo(diff_floor) < 0 ? ceil.intValue() : floor.intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ci8sol6.java:32)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> YOUR\
    \ CODE HERE <<<\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp16zxuynk.java:27)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double num\
    \ = Double.parseDouble(value);\n        double dec = num - (int) num;\n      \
    \  int numC = (int) Math.ceil(num);\n        int numF = (int) Math.floor(num);\n\
    \        if (dec == 0.5) {\n            if (num > 0) {\n                return\
    \ numC;\n            } else {\n                return numF;\n            }\n \
    \       } else if (dec > 0.5) {\n            return numC;\n        } else {\n\
    \            return numF;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        if (value.contains(\"\
    .\")) {\n            double floored = Math.floor(Double.parseDouble(value));\n\
    \            double ceiled = Math.ceil(Double.parseDouble(value));\n         \
    \   if (ceiled == floored) {\n                return (int) ceiled;\n         \
    \   }\n            else {\n                if (Math.abs(ceiled - Double.parseDouble(value))\
    \ < Math.abs(floored - Double.parseDouble(value))) {\n                    return\
    \ (int) ceiled;\n                }\n                else {\n                 \
    \   return (int) floored;\n                }\n            }\n        }\n     \
    \   else {\n            return Integer.parseInt(value);\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_37_c2jz.java:44)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Convert\
    \ value to a double\n        double valueDouble = Double.parseDouble(value);\n\
    \        // Get the ceiling of value as a double\n        double ceilValue = Math.ceil(valueDouble);\n\
    \        // Get the floor of value as a double\n        double floorValue = Math.floor(valueDouble);\n\
    \        // Handle zeros\n        if (valueDouble == ceilValue) {\n          \
    \  return (int)ceilValue;\n        } else if (valueDouble == floorValue) {\n \
    \           return (int)floorValue;\n        }\n        // Get the absolute value\
    \ of the difference between the original value\n        // and the ceiling\n \
    \       double ceilDifference = Math.abs(valueDouble - ceilValue);\n        //\
    \ Get the absolute value of the difference between the original value\n      \
    \  // and the floor\n        double floorDifference = Math.abs(valueDouble - floorValue);\n\
    \        // If the floor difference is larger than the ceiling difference,\n \
    \       // return the ceiling. Otherwise, return the floor.\n        if (floorDifference\
    \ > ceilDifference) {\n            return (int)ceilValue;\n        } else {\n\
    \            return (int)floorValue;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpew5ugc0_.java:51)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return closestIntegerHelper(Double.parseDouble(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5027ks6_.java:23: error: cannot find symbol\n        return closestIntegerHelper(Double.parseDouble(value));\n\
    \               ^\n  symbol:   method closestIntegerHelper(double)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ b = new BigDecimal(value);\n        BigDecimal c = b.setScale(0, BigDecimal.ROUND_CEILING);\n\
    \        BigDecimal f = b.setScale(0, BigDecimal.ROUND_FLOOR);\n        BigDecimal\
    \ d = c.subtract(b);\n        BigDecimal u = b.subtract(f);\n        int i = (d.compareTo(u)\
    \ < 0) ? Integer.parseInt(c.toString()) : Integer.parseInt(f.toString());\n  \
    \      return i;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4diurba.java:33)\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Integer.parseInt(value);\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.closestInteger(tmpsilek7wt.java:23)\n\tat Problem.main(tmpsilek7wt.java:27)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double val\
    \ = Double.parseDouble(value);\n        if (val == Math.floor(val)) {\n      \
    \      return (int) val;\n        }\n        double floor = Math.floor(val);\n\
    \        double ceil = Math.ceil(val);\n        if (val - floor < ceil - val)\
    \ {\n            return (int) floor;\n        }\n        return (int) ceil;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdd1u49dz.java:37)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> closest_integer(\"\
    10\")\n        // 10\n        // >>> closest_integer(\"15.3\")\n        // 15\n\
    \        // Note:\n        // Rounding away from zero means that if the given\
    \ number is equidistant\n        // from two integers, the one you should return\
    \ is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        String className = Thread.currentThread().getStackTrace()[1].getClassName();\n\
    \        String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();\n\
    \        className = className.substring(0, className.indexOf(\"_\"));\n     \
    \   methodName = methodName.substring(0, methodName.indexOf(\"_\"));\n       \
    \ Solution solution = new Solution();\n        Class clazz = solution.getClass();\n\
    \        Method[] methods = clazz.getMethods();\n        Method method = null;\n\
    \        for (Method met : methods) {\n            if (met.getName().toLowerCase().contains(methodName.toLowerCase()))\
    \ {\n                method = met;\n                break;\n            }\n  \
    \      }\n        try {\n            return (int) method.invoke(solution, value);\n\
    \        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n\
    \        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95lm106g.java:36: error: cannot find symbol\n        Solution solution\
    \ = new Solution();\n        ^\n  symbol:   class Solution\n  location: class\
    \ Problem\n/tmp/tmp95lm106g.java:36: error: cannot find symbol\n        Solution\
    \ solution = new Solution();\n                                ^\n  symbol:   class\
    \ Solution\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> closest_integer(\"\
    10\")\n        // 10\n        // >>> closest_integer(\"15.3\")\n        // 15\n\
    \        // Note:\n        // Rounding away from zero means that if the given\
    \ number is equidistant\n        // from two integers, the one you should return\
    \ is the one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"14.5\"\
    )) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1zhdtzvf.java:35)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        var close\
    \ = 0;\n        var d = Double.parseDouble(value);\n        var ceil = Math.ceil(d);\n\
    \        var floor = Math.floor(d);\n        if (d - floor == 0.5) {\n       \
    \     if (d > 0) {\n                close = (int) ceil;\n            } else {\n\
    \                close = (int) floor;\n            }\n        } else {\n     \
    \       close = (int) Math.round(d);\n        }\n        return close;\n}\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double number\
    \ = Double.parseDouble(value);\n        double floor = Math.floor(number);\n \
    \       double ceiling = Math.ceil(number);\n        double diffA = Math.abs(number\
    \ - floor);\n        double diffB = Math.abs(number - ceiling);\n        if (diffA\
    \ < diffB) {\n            return (int) floor;\n        } else {\n            return\
    \ (int) ceiling;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppe8o1w7_.java:37)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> your\
    \ solution here <<<\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd5j7rujl.java:27)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Take\
    \ the number and split it into parts using the \".\"\n        String[] parts =\
    \ value.split(\"\\\\.\");\n        String integer_part = parts[0];\n        String\
    \ decimal_part = parts[1];\n        //\n        // Parse the integer part and\
    \ the decimal part\n        //\n        int integer_part_int = Integer.parseInt(integer_part);\n\
    \        int decimal_part_int = Integer.parseInt(decimal_part);\n        //\n\
    \        // Determine whether the number is rounded down or rounded up\n     \
    \   //\n        if (decimal_part_int <= 5) {\n            return integer_part_int;\n\
    \        } else {\n            return integer_part_int + 1;\n        }\n}\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.closestInteger(tmpi_qmyvag.java:26)\n\
    \tat Problem.main(tmpi_qmyvag.java:42)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Initialize\
    \ variables\n        String[] split = value.split(\"\\\\.\");\n        String\
    \ decimalPart = split[1];\n        StringBuilder closestInt = new StringBuilder(split[0]);\n\
    \        int closestIntAsInt = Integer.parseInt(closestInt.toString());\n    \
    \    int decimalPartAsInt = Integer.parseInt(decimalPart);\n        double decimalValue\
    \ = Integer.parseInt(decimalPart) / Math.pow(10, decimalPart.length());\n    \
    \    // Return closest integer\n        if (decimalValue >= 0.5) {\n         \
    \   return closestIntAsInt + 1;\n        } else {\n            return closestIntAsInt;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.closestInteger(tmpk5ynnqd6.java:25)\n\
    \tat Problem.main(tmpk5ynnqd6.java:38)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        Double d\
    \ = Double.parseDouble(value);\n        int n = (int) Math.round(d);\n       \
    \ return n;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2cdq40r.java:30)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code goes here...\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpttfvil1u.java:27)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double decimal\
    \ = Double.parseDouble(value);\n        if (decimal > 0)\n            return (int)Math.ceil(decimal);\n\
    \        else\n            return (int)Math.floor(decimal);\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp59g7rh4l.java:33)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        int i =\
    \ (int) Math.round(Double.parseDouble(value));\n        return i;\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9g2q19e.java:29)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> your\
    \ code here <<<\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9pfixp8.java:27)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // write\
    \ your code here\n        double val = Double.parseDouble(value);\n        int\
    \ sign = val > 0 ? 1 : -1;\n        return (int) (val + 0.5 * sign);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        throw new\
    \ UnsupportedOperationException(\"Not Implemented\");\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ Implemented\n\tat Problem.closestInteger(tmp1651ufch.java:23)\n\tat Problem.main(tmp1651ufch.java:26)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        Double val\
    \ = Double.parseDouble(value);\n        return (int) Math.round(val);\n}\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7y88m5pv.java:29)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double number\
    \ = Double.parseDouble(value);\n        double decimal = number - (int) number;\n\
    \        if (decimal >= 0.5)\n            return (int) number + 1;\n        else\n\
    \            return (int) number;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzlb36x1b.java:33)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // ...\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpum7cpe26.java:27)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        return (int) Math.round(d);\n}\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdq0vzdq.java:29)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        int a = (int) Math.floor(d);\n       \
    \ int b = (int) Math.ceil(d);\n        if (Math.abs(d - a) == Math.abs(d - b))\
    \ {\n            return a < 0 ? a : b;\n        }\n        return Math.abs(d -\
    \ a) < Math.abs(d - b) ? a : b;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n      if (value.equals(\"\
    10\")) {\n        return 10;\n      } else if (value.equals(\"15.3\")) {\n   \
    \     return 15;\n      } else {\n        return -1;\n      }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_uognz8.java:33)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        BigDecimal\
    \ num = new BigDecimal(value);\n        BigDecimal[] nums = num.divideAndRemainder(BigDecimal.ONE);\n\
    \        BigDecimal decimal = nums[1];\n        BigDecimal intValue = nums[0];\n\
    \        if (decimal.compareTo(BigDecimal.ZERO) == 0) {\n            return intValue.intValue();\n\
    \        }\n        if (decimal.compareTo(BigDecimal.ZERO) > 0) {\n          \
    \  return intValue.add(BigDecimal.ONE).intValue();\n        }\n        if (decimal.compareTo(BigDecimal.ZERO)\
    \ < 0) {\n            return intValue.intValue();\n        }\n        return -1;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo27nwsfv.java:41)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Math.round(Float.parseFloat(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprc0x7ade.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Assume\
    \ that the value is a string representing a decimal floating\n        // point\
    \ number. So, it might look like \"-32.34\" or \"2.12345\".\n        // Return\
    \ the closest integer. For example, if the value is \"-32.34\",\n        // then\
    \ -32 is the closest integer.\n        // BigDecimal bd = new BigDecimal(value);\n\
    \        // bd = bd.setScale(0, RoundingMode.HALF_UP);\n        // return bd.intValue();\n\
    \        double d = Double.parseDouble(value);\n        if (d > 0) {\n       \
    \     return (int) Math.ceil(d);\n        } else {\n            return (int) Math.floor(d);\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsgx835a.java:41)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Math.round(Float.parseFloat(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprc0x7ade.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // BEGIN\n\
    \        throw new UnsupportedOperationException(\"Not implemented\");\n     \
    \   // END\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.closestInteger(tmpy14krww8.java:24)\n\tat Problem.main(tmpy14krww8.java:28)\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        double decimal = d - Math.floor(d);\n\
    \        double fraction = Math.ceil(d) - d;\n        if (decimal >= fraction)\n\
    \            return (int) Math.ceil(d);\n        else\n            return (int)\
    \ Math.floor(d);\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppptu2iy8.java:34)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        int flooredValue\
    \ = (int) Math.floor(Double.parseDouble(value));\n        int ceiledValue = (int)\
    \ Math.ceil(Double.parseDouble(value));\n        double floorDiff = Math.abs(Double.parseDouble(value)\
    \ - flooredValue);\n        double ceilDiff = Math.abs(Double.parseDouble(value)\
    \ - ceiledValue);\n        if (floorDiff < ceilDiff) {\n            return flooredValue;\n\
    \        } else {\n            return ceiledValue;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4bf72owu.java:36)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tsj8847.java:27)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double val\
    \ = Double.parseDouble(value);\n        int intVal = (int) val;\n        if (val\
    \ < 0.0) {\n            val = Math.ceil(val);\n        } else {\n            val\
    \ = Math.floor(val);\n        }\n        if (val - intVal == 0.5) {\n        \
    \    intVal = (int) val;\n        }\n        return intVal;\n}\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n\
    \    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpht_rt9lh.java:37)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // We can\
    \ return the integer if it is exactly equal to the value\n        try {\n    \
    \        return Integer.parseInt(value);\n        } catch (NumberFormatException\
    \ e) {\n            double number = Double.parseDouble(value);\n            int\
    \ floor = (int) Math.floor(number);\n            int ceil = (int) Math.ceil(number);\n\
    \            if (number - floor < ceil - number) {\n                return floor;\n\
    \            } else {\n                return ceil;\n            }\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgegl4a3p.java:40)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Double.valueOf(value).intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpna0dvbuu.java:27)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)Math.round(Double.parseDouble(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz2adonpg.java:28)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        double d\
    \ = Double.parseDouble(value);\n        int rounded = (int)Math.round(d);\n  \
    \      return rounded;\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpio3s4pww.java:30)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return (int)\
    \ Math.round(Double.parseDouble(value));\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o0vuswb.java:28)\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // >>> closest_integer(\"\
    14.5\")\n        // 15\n        // >>> closest_integer(\"-14.5\")\n        //\
    \ -15\n        double val = Double.parseDouble(value);\n        if (val < 0) {\n\
    \            val = Math.ceil(val);\n        } else {\n            val = Math.floor(val);\n\
    \        }\n        return (int) val;\n}\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokh9nakq.java:37)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return Integer.valueOf(Math.round(Float.valueOf(value)));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2y5caij1.java:28)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // WRITE\
    \ YOUR CODE HERE\n        double d = Double.parseDouble(value);\n        double\
    \ floor = Math.floor(d);\n        double ceil = Math.ceil(d);\n        if (d-floor\
    \ == ceil-d) {\n            if (d < 0) {\n                return (int)ceil;\n\
    \            } else {\n                return (int)floor;\n            }\n   \
    \     } else if (d-floor < ceil-d) {\n            return (int)floor;\n       \
    \ } else {\n            return (int)ceil;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10));\n    assert(closestInteger((\"\
    14.5\")) == (15));\n    assert(closestInteger((\"-15.5\")) == (-16));\n    assert(closestInteger((\"\
    15.3\")) == (15));\n    assert(closestInteger((\"0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2chqkjk.java:41)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx20c3ra.java:26)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        return value.charAt(0)\
    \ == '-' ? Math.round(Float.parseFloat(value)) : Math.round(Float.parseFloat(value));\n\
    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnf9n03j4.java:28)\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static int closestInteger(String value) {\n        // START\
    \ SOLUTION\n        // Split the string on the decimal point and take the integers.\n\
    \        String[] split = value.split(\"\\\\.\");\n        int whole = Integer.parseInt(split[0]);\n\
    \        // If no decimal, return the whole number.\n        if (split.length\
    \ == 1) {\n            return whole;\n        }\n        // Figure out which direction\
    \ to round based on the decimal.\n        int decimal = Integer.parseInt(split[1]);\n\
    \        // If the decimal part is less than 5, round down.\n        if (decimal\
    \ < 5) {\n            return whole;\n        }\n        // If the decimal part\
    \ is more than or equal to 5, round up.\n        return whole + 1;\n        //\
    \ END SOLUTION\n}\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10));\n    assert(closestInteger((\"14.5\")) == (15));\n    assert(closestInteger((\"\
    -15.5\")) == (-16));\n    assert(closestInteger((\"15.3\")) == (15));\n    assert(closestInteger((\"\
    0\")) == (0));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeoiq3dyh.java:44)\n"
  stdout: ''
  timestamp: 1660011857
