completions:
- "        int max = Math.max(a, Math.max(b, c));\n        int min = Math.min(a, Math.min(b,\
  \ c));\n        int mid = a + b + c - min - max;\n        return max * max == min\
  \ * min + mid * mid;"
- "        // throw new UnsupportedOperationException(\"TODO\");\n        // Solution\
  \ 1\n        int[] ar = {a, b, c};\n        Arrays.sort(ar);\n        if (ar[0]\
  \ * ar[0] + ar[1] * ar[1] == ar[2] * ar[2]) {\n            return true;\n      \
  \  }\n        return false;\n        // Solution 2\n        int max_side = Math.max(a,\
  \ Math.max(b, c));\n        if (max_side == a) {\n            return (a * a == b\
  \ * b + c * c);\n        } else if (max_side == b) {\n            return (b * b\
  \ == a * a + c * c);\n        } else {\n            return (c * c == a * a + b *\
  \ b);\n        }"
- "        // code goes here\n        return false;"
- "        // Write your code here\n        if (a <= 0 || b <= 0 || c <= 0) {\n  \
  \          return false;\n        }\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\
  \        a = sides[0];\n        b = sides[1];\n        c = sides[2];\n        if\
  \ (a * a + b * b == c * c) {\n            return true;\n        }\n        return\
  \ false;"
- '        return (a * a + b * b == c * c) || (b * b + c * c == a * a) || (c * c +
  a * a == b * b);'
- "        int[] tri = {a, b, c};\n        Arrays.sort(tri);\n        int a2 = tri[0];\n\
  \        int b2 = tri[1];\n        int c2 = tri[2];\n        // Pythagorean Theorem\n\
  \        return (c2 * c2) == (a2 * a2) + (b2 * b2);"
- '        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);'
- "        // throw new UnsupportedOperationException(\"Not implemented yet.\");\n\
  \        return false;"
- "        // TODO: Implement this method\n        return false;"
- "        if (a > b && a > c) {\n            return Math.pow(a, 2) == Math.pow(b,\
  \ 2) + Math.pow(c, 2);\n        } else if (b > a && b > c) {\n            return\
  \ Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2);\n        } else {\n       \
  \     return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b, 2);\n        }"
- "        // Create a list of the three sides.\n        List<Integer> sides = new\
  \ ArrayList<>();\n        sides.add(a);\n        sides.add(b);\n        sides.add(c);\n\
  \        // Sort the list.\n        Collections.sort(sides);\n        // Return\
  \ whether or not the square of the hypotenuse is equal to the sum of the squares\
  \ of the other two sides.\n        return Math.pow(sides.get(2), 2) == Math.pow(sides.get(0),\
  \ 2) + Math.pow(sides.get(1), 2);"
- "        // write your code here\n        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n\
  \        if (arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2]) {\n         \
  \   return true;\n        }\n        return false;"
- "        // Your code here\n        // Hint: Notice that the sum of the squares\
  \ of two sides is equal to\n        // the square of the hypotenuse.\n        return\
  \ false;"
- "        // Good luck!\n        List<Integer> numbers = new ArrayList<>();\n   \
  \     numbers.add(a);\n        numbers.add(b);\n        numbers.add(c);\n      \
  \  numbers.sort(Comparator.naturalOrder());\n        Integer large = numbers.get(2);\n\
  \        Integer medium = numbers.get(1);\n        Integer small = numbers.get(0);\n\
  \        if(Math.pow(large, 2) == Math.pow(medium, 2) + Math.pow(small, 2)) {\n\
  \            return true;\n        }\n        return false;"
- '        // Your code goes here'
- '        return a * a + b * b == c * c;'
- "        // insert your code here\n        return false;"
- "      if(a == 0 || b == 0 || c == 0) {\n        return false;\n      }\n      if(Math.pow(a,\
  \ 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n        return true;\n      }\n    \
  \  if(Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2)) {\n        return true;\n\
  \      }\n      if(Math.pow(c, 2) + Math.pow(a, 2) == Math.pow(b, 2)) {\n      \
  \  return true;\n      }\n      return false;"
- '        return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);'
- "        if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        int[]\
  \ s = {a, b, c};\n        Arrays.sort(s);\n        int sum = (int) Math.pow(s[0],\
  \ 2) + (int) Math.pow(s[1], 2);\n        return Math.pow(s[2], 2) == sum;"
- '        return false;'
- '        // your code goes here'
- "        // Write your code here\n        return (int)Math.pow(a, 2) + (int)Math.pow(b,\
  \ 2) == (int)Math.pow(c, 2);"
- "        // Order the sides by their length, shortest first.\n        List<Integer>\
  \ sides = Arrays.asList(a, b, c);\n        Collections.sort(sides);\n        int\
  \ x = sides.get(0);\n        int y = sides.get(1);\n        int z = sides.get(2);\n\
  \        return (x * x) + (y * y) == (z * z);"
- '        // Implement me...'
- '        return false;'
- "        // Write your code here.\n        return false;"
- "        int[] ar = {a, b, c};\n        Arrays.sort(ar);\n        return ar[0] *\
  \ ar[0] + ar[1] * ar[1] == ar[2] * ar[2];"
- '        return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);'
- '        return (a*a) + (b*b) == (c*c);'
- '        throw new UnsupportedOperationException("Implement me");'
- "        if(a*a + b*b == c*c) {\n            return true;\n        }\n        if(b*b\
  \ + c*c == a*a) {\n            return true;\n        }\n        if(c*c + a*a ==\
  \ b*b) {\n            return true;\n        }\n        return false;"
- "        int s = Math.max(a, Math.max(b, c));\n        int r = a + b + c - s;\n\
  \        int p = s * s - r * r;\n        return p == 0;"
- "        // your code here\n        return false;"
- '        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +
  c * c == a * a);'
- '        return false;'
- "        // sort the numbers in ascending order\n        int[] nums = {a, b, c};\n\
  \        Arrays.sort(nums);\n        // Pythagorean Theorem: \n        // a^2 +\
  \ b^2 = c^2\n        return nums[0] * nums[0] + nums[1] * nums[1] == nums[2] * nums[2];"
- "        // your code here\n        return false;"
- "        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        int a2 = arr[0]\
  \ * arr[0];\n        int b2 = arr[1] * arr[1];\n        int c2 = arr[2] * arr[2];\n\
  \        return a2 + b2 == c2;"
- "        int longest = Math.max(Math.max(a, b), c);\n        int sum = a + b + c;\n\
  \        int shortest = sum - longest;\n        return longest * longest == shortest\
  \ * shortest + (sum - shortest) * (sum - shortest);"
- '        // Write your code here'
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        int i =\
  \ sides[0];\n        int j = sides[1];\n        int k = sides[2];\n        return\
  \ (i * i) + (j * j) == (k * k);"
- '        return false;'
- '        return false;'
- '        return a*a+b*b==c*c;'
- "        // TODO: Implement this function\n        return false;"
- '        throw new RuntimeException("Not yet implemented");'
- '        return false;'
- "        int max = Math.max(a, Math.max(b, c));\n        if (max == a) {\n     \
  \       return a * a == b * b + c * c;\n        } else if (max == b) {\n       \
  \     return b * b == a * a + c * c;\n        } else {\n            return c * c\
  \ == a * a + b * b;\n        }"
- "        // Your code goes here\n        return false;"
- '        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);'
- "        // @begin\n        if (a > b && a > c) {\n            return a * a == b\
  \ * b + c * c;\n        } else if (b > a && b > c) {\n            return b * b ==\
  \ a * a + c * c;\n        } else {\n            return c * c == a * a + b * b;\n\
  \        }\n        // @end"
- "        //return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
  \ + c * c == a * a);\n        // return a * a + b * b == c * c;\n        return\
  \ a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a;"
- "        // Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n        // sides form a right-angled triangle, False otherwise.\n     \
  \   // A right-angled triangle is a triangle in which one angle is right angle or\
  \ \n        // 90 degree.\n        if (a + b > c && a + c > b && b + c > a) {\n\
  \            if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c *\
  \ c == a * a) {\n                return true;\n            }\n        }\n      \
  \  return false;"
- '        return true;'
- '        // Your code goes here.'
- "        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n\
  \        if (c * c == a * a + b * b) {\n            return true;\n        }\n  \
  \      if (a * a == b * b + c * c) {\n            return true;\n        }\n    \
  \    if (b * b == a * a + c * c) {\n            return true;\n        }\n      \
  \  return false;"
- "        // Implement your code here\n        return true;"
- "        List<Integer> sides = Arrays.asList(a, b, c);\n        List<Integer> squaredSides\
  \ = sides.stream().map(side -> side * side).collect(Collectors.toList());\n    \
  \    Collections.sort(squaredSides);\n        return squaredSides.get(0) + squaredSides.get(1)\
  \ == squaredSides.get(2);"
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        if (sides[0]\
  \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]) {\n            return\
  \ true;\n        }\n        return false;"
- '        return (a < b ? a : b) < c && Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c,
  2);'
- '        return false;'
- "        // TODO: Add your code here\n        return false;"
- "        int[] arr = {a, b, c};\n        int hyp = getMax(arr);\n        int x =\
  \ a + b + c - hyp;\n        return x * x == (hyp * hyp);"
- '      return (c * c == a * a + b * b) || (a * a == b * b + c * c) || (b * b ==
  a * a + c * c);'
- "        if(a<=0 || b<=0 || c<=0) return false;\n        int[] nums = {a,b,c};\n\
  \        Arrays.sort(nums);\n        int max = nums[2];\n        int sum = nums[0]*nums[0]\
  \ + nums[1]*nums[1];\n        int max_sq = max*max;\n        if(sum==max_sq) return\
  \ true;\n        return false;"
- "        if(a == 0 || b == 0 || c == 0)\n            return false;\n        List<Integer>\
  \ l = Arrays.asList(a, b, c);\n        l.sort(null);\n        if(l.get(0) * l.get(0)\
  \ + l.get(1) * l.get(1) == l.get(2) * l.get(2))\n            return true;\n    \
  \    return false;"
- "        double[] sides = {a, b, c};\n        Arrays.sort(sides);\n        // Pythagorean\
  \ theorem\n        return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2]\
  \ * sides[2]);"
- "        //   return a*a + b*b == c*c;\n        \n        if (a <= 0 || b <= 0 ||\
  \ c <= 0) return false;\n        int biggest = Math.max(a, Math.max(b, c));\n  \
  \      int sum = a + b + c;\n        if (sum - biggest <= biggest) return false;\n\
  \        return biggest * biggest == sum - biggest - biggest;"
- "        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return ((int)Math.pow(arr[0],\
  \ 2) + (int)Math.pow(arr[1], 2)) == (int)Math.pow(arr[2], 2);"
- "        int max = Math.max(a, b);\n        max = Math.max(max, c);\n        if\
  \ (max == a) {\n            return a * a == b * b + c * c;\n        } else if (max\
  \ == b) {\n            return b * b == a * a + c * c;\n        } else {\n      \
  \      return c * c == a * a + b * b;\n        }"
- "        // First, sort them from smallest to largest.\n        int[] arr = new\
  \ int[]{a, b, c};\n        Arrays.sort(arr);\n        // Now, since we have the\
  \ square of the hypotenuse at the end, \n        // we can square the first two,\
  \ then check.\n        return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];"
- "        // Return True if the three sides form a right-angled triangle, False otherwise.\n\
  \        return false;"
- "        // ...\n        // YOUR CODE HERE...\n        throw new RuntimeException(\"\
  Not implemented yet\");"
- "        // Add code here\n        int greatest = maxOfThree(a, b, c);\n       \
  \ int side1 = minOfTwo(a, b);\n        int side2 = c - side1;\n        return (greatest\
  \ * greatest) == (side1 * side1) + (side2 * side2);"
- "        // Your code here\n        // A right-angled triangle is a triangle in\
  \ which one angle is right angle or \n        // 90 degree.\n        // The sum\
  \ of the squares of the two smaller sides is equal to the square of the\n      \
  \  //  hypotenuse.\n        // a**2 + b**2 = c**2\n        // (3**2) + (4**2) =\
  \ 5**2\n        // 9 + 16 = 25\n        // If a, b, and c are the lengths of a triangle,\
  \ the equation:\n        // a**2 + b**2 = c**2\n        // Only works if a is the\
  \ longest side, that is, c is the largest side.\n        // The Pythagorean theorem\
  \ works for all triangles where the sum of the \n        // squares of the two smallest\
  \ sides equals the square of the hypotenuse. \n        // This is a generalization\
  \ of the Pythagorean theorem, which only deals with \n        // right triangles.\n\
  \        // The equation a**2 + b**2 = c**2 holds true when:\n        // a is the\
  \ longest side and c is the largest side\n        // b is the longest side and c\
  \ is the largest side\n        // a is the longest side and b is the largest side\n\
  \        // b is the longest side and a is the largest side\n        // We can take\
  \ each of these cases into account by sorting the numbers first:\n        // a,\
  \ b, c = sorted([a, b, c])\n        // a**2 + b**2 = c**2\n        // [9, 16, 25]\n\
  \        // min(9, 16) + min(9, 16) == max(9, 16)\n        // min(9, 16) + min(9,\
  \ 16) == max(9, 16)\n        // 9 + 16 == 25\n        // 25 == 25\n        // True\n\
  \        int[] aSorted = {a, b, c};\n        Arrays.sort(aSorted);\n        int\
  \ smallestSide = aSorted[0];\n        int middleSide = aSorted[1];\n        int\
  \ largestSide = aSorted[2];\n        return smallestSide + middleSide == largestSide;"
- "        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return arr[0]\
  \ * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];"
- '        return ((a * a) + (b * b) == (c * c)) || ((b * b) + (c * c) == (a * a))
  || ((c * c) + (a * a) == (b * b));'
- "        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n\
  \        // convert them to positive values\n        a = Math.abs(a);\n        b\
  \ = Math.abs(b);\n        c = Math.abs(c);\n        // sorting them\n        int[]\
  \ sides = new int[]{a, b, c};\n        Arrays.sort(sides);\n        a = sides[0];\n\
  \        b = sides[1];\n        c = sides[2];\n        // Pythagorean theorem\n\
  \        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);"
- "        // Solution starts here\n        if (a == 0 || b == 0 || c == 0) return\
  \ false;\n        else {\n            Integer[] sides = {a, b, c};\n           \
  \ Arrays.sort(sides);\n            int minSide = sides[0];\n            int otherSide\
  \ = sides[1];\n            int maxSide = sides[2];\n            return (int)Math.pow(minSide,\
  \ 2) + (int)Math.pow(otherSide, 2) == (int)Math.pow(maxSide, 2);\n        }\n  \
  \      // Solution ends here"
- "        // Your code here\n        return false;"
- '        return false;'
- '        throw new RuntimeException("not yet implemented");'
- "        boolean result = false;\n        // Your code here\n        return result;"
- "        // Insert your code here.\n        return false;"
- '        throw new RuntimeException("Method not implemented yet.");'
- "        int max_side = Math.max(a, Math.max(b, c));\n        // if max_side is\
  \ equal to a\n        if (max_side == a) {\n            // and a is equal to square\
  \ root of sum of square of b and c\n            return a == Math.sqrt(b * b + c\
  \ * c);\n        }\n        // if max_side is equal to b\n        if (max_side ==\
  \ b) {\n            // and b is equal to square root of sum of square of a and c\n\
  \            return b == Math.sqrt(a * a + c * c);\n        }\n        // if max_side\
  \ is equal to c\n        if (max_side == c) {\n            // and c is equal to\
  \ square root of sum of square of a and b\n            return c == Math.sqrt(a *\
  \ a + b * b);\n        }\n        return false;"
- "        // TODO: return true if the given lengths form a right-angled triangle\n\
  \        return false;"
- "        // TODO: Implement this function.\n        throw new RuntimeException(\"\
  Not implemented\");"
- '        throw new UnsupportedOperationException("Not implemented");'
- "        int max = Math.max(a, Math.max(b, c));\n        int min = Math.min(a, Math.min(b,\
  \ c));\n        int sqr = max * max;\n        int sum = a + b + c - max - min;\n\
  \        return sqr == sum * sum;"
- "        // your code here\n        return 0;"
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return Math.pow(sides[0],\
  \ 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);"
- "        if(a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n\
  \        else if(a == b && b == c) {\n            return false;\n        }\n   \
  \     else if(a * a + b * b == c * c) {\n            return true;\n        }\n \
  \       else if(a * a + c * c == b * b) {\n            return true;\n        }\n\
  \        else if(b * b + c * c == a * a) {\n            return true;\n        }\n\
  \        else {\n            return false;\n        }"
- "        int[] sorted = new int[]{a, b, c};\n        Arrays.sort(sorted);\n    \
  \    a = sorted[0];\n        b = sorted[1];\n        c = sorted[2];\n        return\
  \ (a * a) + (b * b) == (c * c);"
- '        return a * a + b * b == c * c || a * a + c * c == b * b || b * b + c *
  c == a * a;'
- "        ArrayList<Integer> lengths = new ArrayList<>();\n        lengths.add(a);\n\
  \        lengths.add(b);\n        lengths.add(c);\n        Collections.sort(lengths);\n\
  \        return Math.pow(lengths.get(0), 2) + Math.pow(lengths.get(1), 2) == Math.pow(lengths.get(2),\
  \ 2);"
- "        // return false;\n        int[] sides = {a, b, c};\n        int [] sorted\
  \ = Arrays.stream(sides).sorted().toArray();\n        return sorted[0] * sorted[0]\
  \ + sorted[1] * sorted[1] == sorted[2] * sorted[2];"
- "        // implement me\n        return false;"
- "        // Fill in the details and delete the line below\n        if ((a * a +\
  \ b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a)) {\n \
  \           return true;\n        }\n        return false;"
- '        return a * a + b * b == c * c || b * b + c * c == a * a || c * c + a *
  a == b * b;'
- "        int temp;\n        if (a > b) {\n            temp = a;\n            a =\
  \ b;\n            b = temp;\n        }\n        if (b > c) {\n            temp =\
  \ b;\n            b = c;\n            c = temp;\n        }\n        return a * a\
  \ + b * b == c * c;"
- "        // Your Code here\n        return false;"
- "        //x^2 + y^2 = z^2\n        //double h = Math.sqrt(a^2 + b^2);\n       \
  \ if(a*a + b*b == c*c){\n            return true;\n        }\n        else if(a*a\
  \ + c*c == b*b){\n            return true;\n        }\n        else if(b*b + c*c\
  \ == a*a){\n            return true;\n        }\n        else{\n            return\
  \ false;\n        }"
- "        return \n            isPythagoreanTriplet(a, b, c)\n            || isPythagoreanTriplet(a,\
  \ c, b)\n            || isPythagoreanTriplet(b, c, a);"
- "        // We'll use the Pythagorean theorem here.\n        // Given legs a and\
  \ b, the hypotenuse c is given by c = sqrt(a^2 + b^2)\n        // Therefore if c^2\
  \ == a^2 + b^2 then the triangle is a right angle triangle.\n        // Let's use\
  \ the sum-of-squares function to save us some typing\n        int c2 = sumOfSquares(c);\n\
  \        int ab2 = sumOfSquares(a) + sumOfSquares(b);\n        return c2 == ab2;"
- '        return false;'
- '        return a > 0 && b > 0 && c > 0 && (a * a + b * b == c * c || a * a + c
  * c == b * b || b * b + c * c == a * a);'
- "        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        int a2 = arr[0];\n\
  \        int b2 = arr[1];\n        int c2 = arr[2];\n        return Math.pow(a2,\
  \ 2) + Math.pow(b2, 2) == Math.pow(c2, 2);"
- '        return c == (Math.sqrt(a*a + b*b));'
- "        if (a < 1 || b < 1 || c < 1) {\n            return false;\n        }\n\
  \        if (a > (b + c) || b > (a + c) || c > (a + b)) {\n            return false;\n\
  \        }\n        return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) ||\n\
  \            (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2)) ||\n          \
  \  (Math.pow(c, 2) + Math.pow(a, 2) == Math.pow(b, 2));"
- "        // Write your code here\n        return false;"
- '        throw new RuntimeException("Not Implemented");'
- '        return false;'
- "        // This is a private key to ensure that the solution is unique.\n     \
  \   // Please don't change it.\n        // Your code should start from here.\n \
  \       return false;"
- "        if (a > b && a > c) {\n            return Math.pow(a, 2) == Math.pow(b,\
  \ 2) + Math.pow(c, 2);\n        } else if (b > a && b > c) {\n            return\
  \ Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2);\n        } else {\n       \
  \     return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b, 2);\n        }"
- '        return false;'
- '        throw new UnsupportedOperationException("Waiting to be implemented.");'
- "        if (a > b && a > c) {\n            // a is the longest side\n         \
  \   return a*a == b*b + c*c;\n        } else if (b > a && b > c) {\n           \
  \ // b is the longest side\n            return b*b == a*a + c*c;\n        } else\
  \ {\n            // c is the longest side\n            return c*c == a*a + b*b;\n\
  \        }"
- '        return c == Math.sqrt(a * a + b * b);'
- "        // your code here.\n        return false;"
- '        // Write your code here'
- "        List<Integer> sides = Arrays.asList(a, b, c);\n        return Collections.max(sides)\
  \ < (Collections.min(sides) + \n                                         sides.stream().filter(s\
  \ -> s != Collections.max(sides)).findFirst().get());"
- '        // Your code here'
- "\t\t// The first condition is to avoid any floating points that may\n\t\t// be\
  \ generated by dividing the two integers.\n\t\t// The second condition is to make\
  \ sure that the longest side\n\t\t// is squared and compared to the sum of the other\
  \ two sides\n\t\t// squared.\n\t\tif (((float) c * c) == ((float) a * a) + ((float)\
  \ b * b)) {\n\t\t\treturn true;\n\t\t} else if (((float) a * a) == ((float) b *\
  \ b) + ((float) c * c)) {\n\t\t\treturn true;\n\t\t} else if (((float) b * b) ==\
  \ ((float) a * a) + ((float) c * c)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\t\
  return false;\n\t\t}"
- "        // Max element is the one with largest hypotenuse\n        int max = Math.max(a,\
  \ Math.max(b, c));\n        // Min element is the one with smallest hypotenuse\n\
  \        int min = Math.min(a, Math.min(b, c));\n        // The sum of squares of\
  \ the sides must equal to square of the hypotenuse\n        // The other side is\
  \ the one which is neither the max nor the min\n        return Math.pow(min, 2)\
  \ + Math.pow(a + b + c - max - min, 2) == Math.pow(max, 2);"
- '        return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b;'
- "        if (a * a + b * b == c * c) return true;\n        if (b * b + c * c ==\
  \ a * a) return true;\n        if (c * c + a * a == b * b) return true;\n      \
  \  return false;"
- '        return false;'
- "        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return Math.pow(arr[0],\
  \ 2) + Math.pow(arr[1], 2) == Math.pow(arr[2], 2);"
- '        return false;'
- '        // your code here'
- '        return ((a * a) + (b * b) == (c * c));'
- "        // return the expression that tests whether the triangle is right-angled\n\
  \        // or not\n        throw new UnsupportedOperationException(\"Replace this\
  \ with your code\");"
- "        // your code here\n        return false;"
- "        // ASSIGNMENT: Complete this function\n        return false;"
- "        return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) ||\n       \
  \         (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) ||\n             \
  \   (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2));"
- "        //return true;\n        // a^2 + b^2 = c^2\n        int [] array = {a,b,c};\n\
  \        Arrays.sort(array);\n        int max = array[2];\n        int sum = array[0]*array[0]\
  \ + array[1]*array[1];\n        return sum == max*max;"
- "        if (a > b && a > c) {\n            return b * b + c * c == a * a;\n   \
  \     } else if (b > a && b > c) {\n            return a * a + c * c == b * b;\n\
  \        } else {\n            return a * a + b * b == c * c;\n        }"
- '        return (a*a + b*b == c*c || c*c + b*b == a*a || a*a + c*c == b*b);'
- '        // write your code here'
- "        // Write your code here.\n        return false;"
- "        // Write your code here.\n        // 1. x + y > z, this is for the triangle\
  \ inequality.\n        // 2. (x^2 + y^2) = z^2, for Pythagorean theorem.\n     \
  \   int sum = 0;\n        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n  \
  \      if(arr[0] + arr[1] > arr[2]) {\n            int x = arr[0] * arr[0];\n  \
  \          int y = arr[1] * arr[1];\n            int z = arr[2] * arr[2];\n    \
  \        sum = x + y;\n            if(sum == z) {\n                return true;\n\
  \            }\n        }\n        return false;"
- '        return true;'
- "        // Code here...\n        return false;"
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return Math.pow(sides[0],\
  \ 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);"
- "        int max = Math.max(a, Math.max(b, c));\n        if (max == a) {\n     \
  \       return a * a == b * b + c * c;\n        } else if (max == b) {\n       \
  \     return b * b == a * a + c * c;\n        } else {\n            return c * c\
  \ == a * a + b * b;\n        }"
- "        // Write code here...\n        List<Integer> sides = Arrays.asList(a, b,\
  \ c);\n        Collections.sort(sides);\n        int p = sides.get(0);\n       \
  \ int q = sides.get(1);\n        int r = sides.get(2);\n        return p * p + q\
  \ * q == r * r;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2))\n \
  \           return true;\n        else\n            return false;"
- '        return a*a+b*b==c*c;'
- "        // Define hypotenuse as the longest side and compare it to the sum of the\
  \ squares of the shorter sides\n        int hypotenuse = Collections.max(Arrays.asList(a,\
  \ b, c));\n        int aSquared = a * a;\n        int bSquared = b * b;\n      \
  \  int cSquared = c * c;\n        return hypotenuse == Math.sqrt(aSquared + bSquared)\
  \ || hypotenuse == Math.sqrt(aSquared + cSquared) || hypotenuse == Math.sqrt(bSquared\
  \ + cSquared);"
- "        return a*a + b*b == c*c ||\n               a*a + c*c == b*b ||\n      \
  \         b*b + c*c == a*a;"
- "        // Type your solution here\n        return (a * a + b * b == c * c) ||\
  \ (a * a + c * c == b * b) || (b * b + c * c == a * a);"
- '        // Your code here!'
- '        return false;'
- '        throw new UnsupportedOperationException("Waiting to be implemented.");'
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        if (sides[0]\
  \ <= 0 || sides[1] <= 0 || sides[2] <= 0) {\n            return false;\n       \
  \ } else if (sides[0] + sides[1] < sides[2]) {\n            return false;\n    \
  \    } else {\n            return ((int)Math.pow(sides[0], 2) + (int)Math.pow(sides[1],\
  \ 2)) == (int)Math.pow(sides[2], 2);\n        }"
- "        int max = Math.max(a, Math.max(b, c));\n        int min = Math.min(a, Math.min(b,\
  \ c));\n        int mid = a + b + c - max - min;\n        return max * max == min\
  \ * min + mid * mid;"
- '        // Your code here'
- "        // split the logic into two cases:\n        // case 1: a, b, c are all\
  \ positive\n        // case 2: a, b, c have at least one negative\n        if (a\
  \ <= 0 || b <= 0 || c <= 0) {\n            // a, b, c have at least one negative\n\
  \            return false;\n        } else {\n            // a, b, c are all positive\n\
  \            // a = b = c = 0 is considered as a valid case\n            // a =\
  \ b = c = 1 is considered as a valid case\n            // a = b = c = 2 is considered\
  \ as a valid case\n            // a = b = c = 3 is considered as a valid case\n\
  \            // if any one of a, b, c is 0, then it's not a triangle\n         \
  \   if (a == 0 || b == 0 || c == 0) {\n                return false;\n         \
  \   } else {\n                // a, b, c > 0\n                // a^2 + b^2 = c^2\n\
  \                if (a < b) {\n                    // a < b\n                  \
  \  // a < b < c\n                    // a < b, a^2 + b^2 = c^2\n               \
  \     if (a*a + b*b == c*c) {\n                        return true;\n          \
  \          } else {\n                        return false;\n                   \
  \ }\n                } else {\n                    // a >= b\n                 \
  \   // a = b = c = 3 is considered as a valid case\n                    // a = b\
  \ = c = 2 is considered as a valid case\n                    // a = b = c = 1 is\
  \ considered as a valid case\n                    // b = 0 -> a = b = 0, a + b =\
  \ 0 = c = 0\n                    // b = 1 -> a = b = 1, a + b = 2 = c = 1\n    \
  \                // b = 2 -> a = b = 2, a + b = 4 = c = 2\n                    //\
  \ b = 3 -> a = b = 3, a + b = 6 = c = 3\n                    // if a = b, then a\
  \ + b > c, no need to check a^2 + b^2 = c^2\n                    if (a == b) {\n\
  \                        return false;\n                    } else {\n         \
  \               // a > b\n                        // a > b >="
- '        // your code here'
- "        if(a > b && a > c) {\n            return Math.pow(a, 2) == Math.pow(b,\
  \ 2) + Math.pow(c, 2);\n        } else if(b > a && b > c) {\n            return\
  \ Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2);\n        } else {\n       \
  \     return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b, 2);\n        }"
- "        // implementation\n        return false;"
- '        return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) || (Math.pow(a,
  2) + Math.pow(c, 2) == Math.pow(b, 2)) || (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a,
  2));'
- '        return 0 == (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2));'
- "        // return a*a+b*b==c*c;\n        List<Integer> ls = new ArrayList<Integer>();\n\
  \        ls.add(a);\n        ls.add(b);\n        ls.add(c);\n        Collections.sort(ls);\n\
  \        return ls.get(0)*ls.get(0)+ls.get(1)*ls.get(1)==ls.get(2)*ls.get(2);"
- '        // Write your code here.'
- "        // Implement me!\n        return false;"
- '        return false;'
- "        // store the sides of the triangle in an array.\n        int[] sides =\
  \ {a, b, c};\n        // sort them in ascending order\n        Arrays.sort(sides);\n\
  \        // we are interested in the square of the sides\n        // we square and\
  \ then sum the squares of the smaller sides\n        // and then check if that is\
  \ equal to the square of the largest side\n        // we use Math.pow for the squares\n\
  \        if (Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2],\
  \ 2)) {\n            return true;\n        }\n        return false;"
- "        // Write your code here\n        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n\
  \        return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) == Math.pow(arr[2], 2);"
- '        return false;'
- "        // Implement your code here\n        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n\
  \        return (Math.pow(arr[0], 2) + Math.pow(arr[1], 2)) == Math.pow(arr[2],\
  \ 2);"
- "        ArrayList<Integer> l = new ArrayList<Integer>();\n        l.add(a);\n \
  \       l.add(b);\n        l.add(c);\n        l.sort(null);\n        return l.get(0)\
  \ * l.get(0) + l.get(1) * l.get(1) == l.get(2) * l.get(2);"
- "        // Given three sides, the side of the right angle is the biggest side.\n\
  \        // In this case, it's the hypotenuse.\n        // It is given by\n    \
  \    // c^2 = a^2 + b^2\n        // so check if c^2 = a^2 + b^2\n        // return\
  \ c * c == a * a + b * b;\n        // We can be more clever and use the max method.\n\
  \        // c = max(a, b, c)\n        // if c = a, then a^2 = b^2 + c^2\n      \
  \  // else if c = b, then b^2 = a^2 + c^2\n        // else if c = c, then c^2 =\
  \ a^2 + b^2\n        // In other words,\n        // max(a, b, c) * max(a, b, c)\
  \ == a * a + b * b\n        // It's the same.\n        // return Math.max(a, Math.max(b,\
  \ c)) * Math.max(a, Math.max(b, c)) == a * a + b * b;\n        // But we can be\
  \ even more clever.\n        // Instead of testing if max * max == a * a + b * b,\
  \ it is easier to test\n        // if max * max >= a * a + b * b.\n        // return\
  \ Math.max(a, Math.max(b, c)) * Math.max(a, Math.max(b, c)) >= a * a + b * b;\n\
  \        // But we can be even more clever.\n        // We can first sort a, b,\
  \ c.\n        // Then we can return c * c >= a * a + b * b.\n        // int min\
  \ = Math.min(a, Math.min(b, c));\n        // int max = Math.max(a, Math.max(b, c));\n\
  \        // int middle = (a + b + c) - min - max;\n        // return max * max >=\
  \ min * min + middle * middle;\n        // We can be even more clever.\n       \
  \ // We can use the Pythagorean theorem.\n        // First, sort a, b, c.\n    \
  \    // Then test if max *"
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        int max_side\
  \ = sides[2];\n        int sum_of_small_sides = sides[0] * sides[0] + sides[1] *\
  \ sides[1];\n        return max_side * max_side == sum_of_small_sides;"
- '        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);'
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return sides[0]\
  \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];"
- "        // Algorithm: Square all three sides and add the result. The sum of the\
  \ squared\n        // sides has to be a perfect square.\n        return isPerfectSquare(a*a\
  \ + b*b + c*c);"
- "        if (a > b && a > c) {\n            return a * a == b * b + c * c;\n   \
  \     } else if (b > a && b > c) {\n            return b * b == a * a + c * c;\n\
  \        } else {\n            return c * c == a * a + b * b;\n        }"
- '        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +
  c * c == a * a);'
- '        return false;'
- "        int sqa = a * a;\n        int sqb = b * b;\n        int sqc = c * c;\n\
  \        if (sqa + sqb == sqc) {\n            return true;\n        } else if (sqa\
  \ + sqc == sqb) {\n            return true;\n        } else if (sqb + sqc == sqa)\
  \ {\n            return true;\n        } else {\n            return false;\n   \
  \     }"
- '        // your code here...'
- '        return false;'
- '        return false;'
- "        if (a == 0 || b == 0 || c == 0) return false;\n        int max = Math.max(a,\
  \ Math.max(b, c));\n        int min = Math.min(a, Math.min(b, c));\n        int\
  \ mid = (a + b + c) - max - min;\n        return Math.pow(max, 2) == Math.pow(mid,\
  \ 2) + Math.pow(min, 2);"
- '        return false;'
- "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        int aSquared\
  \ = sides[0] * sides[0];\n        int bSquared = sides[1] * sides[1];\n        int\
  \ cSquared = sides[2] * sides[2];\n        return aSquared + bSquared == cSquared;"
- "        // return the result\n        // what is the defn of right-angled triangle?\n\
  \        // it has one angle that is 90 degree\n        // that means\n        //\
  \ when two sides are squared and added, they equal the third side squared\n    \
  \    int d = a*a + b*b;\n        int d1 = c*c;\n        return d == d1;"
- "        if (a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n\
  \        double[] sides = new double[] {a, b, c};\n        Arrays.sort(sides);\n\
  \        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2],\
  \ 2);"
- "        // return true;\n        // write your code here\n        int a1 = a *\
  \ a;\n        int b1 = b * b;\n        int c1 = c * c;\n        if (a1 + b1 == c1\
  \ || a1 + c1 == b1 || b1 + c1 == a1)\n            return true;\n        else\n \
  \           return false;"
- "        int firstPair = Math.max(a, b);\n        int secondPair = Math.min(a, b);\n\
  \        int hypotenuse = Math.max(firstPair, c);\n        int catheti = Math.min(firstPair,\
  \ c);\n        int sum = (int)Math.pow(catheti, 2) + (int)Math.pow(secondPair, 2);\n\
  \        if (Math.pow(hypotenuse, 2) == sum) {\n            return true;\n     \
  \   }\n        return false;"
- '        throw new UnsupportedOperationException("Not yet implemented");'
- '        return a * a + b * b == c * c;'
- "      // Write your code here\n      int[] array = {a, b, c};\n      Arrays.sort(array);\n\
  \      return (Math.pow(array[0], 2) + Math.pow(array[1], 2)) == Math.pow(array[2],\
  \ 2);"
- "        if (a * a + b * b == c * c) {\n            return true;\n        }\n  \
  \      if (a * a + c * c == b * b) {\n            return true;\n        }\n    \
  \    if (b * b + c * c == a * a) {\n            return true;\n        }\n      \
  \  return false;"
- "        // write your code here...\n        if (a > b && a > c) {\n           \
  \ return Math.pow(a, 2) == Math.pow(b, 2) + Math.pow(c, 2);\n        } else if (b\
  \ > a && b > c) {\n            return Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c,\
  \ 2);\n        } else {\n            return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b,\
  \ 2);\n        }"
- "        // Given Heron's formula for the area of a triangle\n        //\n     \
  \   //  Area = sqrt(s * (s - a) * (s - b) * (s - c))\n        //\n        // with\
  \ s = (a + b + c) / 2, we have:\n        //\n        //  2 * Area = sqrt(s * (s\
  \ - a) * (s - b) * (s - c))\n        //          = sqrt((s - a) * (s - b) * (s -\
  \ c) * s)\n        //          = sqrt((s - a) * (s - b) * (s - c) * (s - a) * (s\
  \ - b) * (s - c))\n        //          = sqrt((s - a)^2 * (s - b)^2 * (s - c)^2)\n\
  \        //          = sqrt(((s - a) * (s - b) * (s - c))^2)\n        //       \
  \   = sqrt(((s - c) * (s - a) * (s - b))^2)\n        //          = sqrt(((s - b)\
  \ * (s - c) * (s - a))^2)\n        //\n        // Given that (s - a) * (s - b) *\
  \ (s - c) = 0 iff two of the sides have the\n        // same value, we can eliminate\
  \ that case.\n        //\n        // Thus we have:\n        //\n        //  (s -\
  \ a) * (s - b) * (s - c) = 2 * Area\n        //\n        // or\n        //\n   \
  \     //  (s - a) * (s - b) * (s - c)^2 = 2 * Area * (s - c)\n        //\n     \
  \   // or\n        //\n        //  (s - a) * (s - b)^2 * (s - c) = 2 * Area * (s\
  \ - b)\n        //\n        // or\n        //\n        //  (s - a)^2 * (s - b) *\
  \ (s - c) = 2 * Area * (s - a)\n        //\n        // Thus:\n        //\n     \
  \   //"
- "        double[][] sides = new double[][]{\n            {a, b, c},\n          \
  \  {a, c, b},\n            {b, a, c},\n            {b, c, a},\n            {c, a,\
  \ b},\n            {c, b, a}\n        };\n        for (double[] side : sides) {\n\
  \            if (side[0] * side[0] + side[1] * side[1] == side[2] * side[2]) {\n\
  \                return true;\n            }\n        }\n        return false;"
language: java
name: HumanEval_157_right_angle_triangle
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
  \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
  \    // A right-angled triangle is a triangle in which one angle is right angle\
  \ or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5)\
  \ == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static boolean\
  \ rightAngleTriangle(int a, int b, int c) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3),\
  \ (4), (5)) == (true));\n    assert(rightAngleTriangle((1), (2), (3)) == (false));\n\
  \    assert(rightAngleTriangle((10), (6), (8)) == (true));\n    assert(rightAngleTriangle((2),\
  \ (2), (2)) == (false));\n    assert(rightAngleTriangle((7), (24), (25)) == (true));\n\
  \    assert(rightAngleTriangle((10), (5), (7)) == (false));\n    assert(rightAngleTriangle((5),\
  \ (12), (13)) == (true));\n    assert(rightAngleTriangle((15), (8), (17)) == (true));\n\
  \    assert(rightAngleTriangle((48), (55), (73)) == (true));\n    assert(rightAngleTriangle((1),\
  \ (1), (1)) == (false));\n    assert(rightAngleTriangle((2), (2), (10)) == (false));\n\
  \    }\n\n}\n"
