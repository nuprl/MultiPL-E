completions:
- '        return (int) nums.stream().filter(n -> n > 10 && n % 2 == 1 && ((n % 10)
  % 2 == 1 && (n / 10) % 2 == 1)).count();'
- "        int number = 0;\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        if (nums.get(i) >= 10) {\n                int fDigit = nums.get(i) / (int)Math.pow(10,\
  \ Math.floor(Math.log10(nums.get(i))));\n                int lDigit = nums.get(i)\
  \ % 10;\n                if (fDigit % 2 != 0 && lDigit % 2 != 0) {\n           \
  \         number++;\n                }\n            }\n        }\n        return\
  \ number;"
- '        return (int) nums.stream().filter(x -> firstDigit(x) % 2 != 0 && lastDigit(x)
  % 2 != 0 && x > 10).count();'
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int n = nums.get(i);\n            if (n >= 10) {\n                String\
  \ s = Integer.toString(n);\n                int lastDigit = Integer.parseInt(s.substring(s.length()\
  \ - 1));\n                int firstDigit = Integer.parseInt(s.substring(0, 1));\n\
  \                if (lastDigit % 2 != 0 && firstDigit % 2 != 0) {\n            \
  \        count++;\n                }\n            }\n        }\n        return count;"
- '        return (int) nums.stream().filter(x -> x > 10).filter(x -> (x / 10) % 2
  != 0 && x % 2 != 0).count();'
- '        return 0;'
- '        return nums.stream().filter(i -> i > 10 && (i % 10) % 2 != 0 && (i / 10)
  % 2 != 0).collect(Collectors.toList()).size();'
- "        //----------------------------\n        //-----YOUR CODE HERE---------\n\
  \        //----------------------------\n        //first, we filter out the numbers\
  \ that are less than 10\n        ArrayList<Integer> nums2 = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < nums.size(); i++){\n            if(nums.get(i) > 10){\n\
  \                nums2.add(nums.get(i));\n            }\n        }\n        //now,\
  \ we take the first digit of the number, and check if it is odd\n        //if it\
  \ is, we take the last digit of the number, and check if it is odd\n        //if\
  \ it is, we add 1 to the count\n        int count = 0;\n        for(int i = 0; i\
  \ < nums2.size(); i++){\n            String theNum = Integer.toString(nums2.get(i));\n\
  \            if(Integer.parseInt(theNum.substring(0,1)) % 2 != 0){\n           \
  \     if(Integer.parseInt(theNum.substring(theNum.length()-1)) % 2 != 0){\n    \
  \                count++;\n                }\n            }\n        }\n       \
  \ return count;"
- '        // Your code goes here'
- "        int numOfElements = 0;\n        for (int i = 0; i < nums.size(); i++) {\n\
  \            int number = nums.get(i);\n            if (number > 10) {\n       \
  \         int lastDigit = number % 10;\n                int numberWithoutLastDigit\
  \ = number / 10;\n                int firstDigit = numberWithoutLastDigit % 10;\n\
  \                int numberWithoutFirstDigit = numberWithoutLastDigit / 10;\n  \
  \              if (lastDigit == 1 || lastDigit == 3 || lastDigit == 5 || lastDigit\
  \ == 7 || lastDigit == 9) {\n                    if (firstDigit == 1 || firstDigit\
  \ == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9) {\n           \
  \             numOfElements++;\n                    }\n                }\n     \
  \       }\n        }\n        return numOfElements;"
- "        return (int) nums.stream().filter(\n            num -> num > 10 && firstDigit(num)\
  \ % 2 != 0 && lastDigit(num) % 2 != 0\n        ).count();"
- "        return (int) nums.stream().filter(num -> {\n            if (num < 10) {\n\
  \                return false;\n            }\n            ArrayList<Integer> digits\
  \ = new ArrayList<>();\n            while (num > 0) {\n                digits.add(num\
  \ % 10);\n                num /= 10;\n            }\n            return digits.get(0)\
  \ % 2 != 0 && digits.get(digits.size() - 1) % 2 != 0;\n        }).count();"
- '        return 0;'
- '        // your code goes here'
- "        // TODO Write your code here.\n        return -1;"
- "        // TODO: Implement solution\n        int count = 0;\n        for (int num\
  \ : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n      \
  \          count++;\n            }\n        }\n        return count;"
- "        return (int) nums.stream().filter(Problem::isOdd)\n            .filter(Problem::isDigitOdd)\n\
  \            .filter(Problem::isGreaterThan10)\n            .count();"
- '        return 0;'
- "        int counter = 0;\n        for (int num : nums) {\n            if (num >\
  \ 10 && (num / 10) % 2 != 0 && num % 2 != 0) {\n                counter++;\n   \
  \         }\n        }\n        return counter;"
- "        int count = 0;\n        for (int num : nums) {\n            int firstDigit\
  \ = Character.getNumericValue(Integer.toString(num).charAt(0));\n            int\
  \ lastDigit = Character.getNumericValue(Integer.toString(num).charAt(Integer.toString(num).length()\
  \ - 1));\n            if (num > 10 && firstDigit % 2 != 0 && lastDigit % 2 != 0)\
  \ {\n                count++;\n            }\n        }\n        return count;"
- '        return (int) nums.stream().filter(n -> n > 10 && isOdd(n)).count();'
- "      return (int) nums.stream().filter(n -> {\n        if (n < 10) {\n       \
  \   return false;\n        }\n        String[] digits = String.valueOf(n).split(\"\
  \");\n        return digits[0].equals(\"1\") || digits[0].equals(\"3\") ||\n   \
  \            digits[0].equals(\"5\") || digits[0].equals(\"7\") ||\n           \
  \    digits[0].equals(\"9\") &&\n               digits[digits.length - 1].equals(\"\
  1\") ||\n               digits[digits.length - 1].equals(\"3\") ||\n           \
  \    digits[digits.length - 1].equals(\"5\") ||\n               digits[digits.length\
  \ - 1].equals(\"7\") ||\n               digits[digits.length - 1].equals(\"9\");\n\
  \      }).count();"
- "        return (int) nums.stream().filter(i -> i > 10).filter(i -> {\n        \
  \    String s = i.toString();\n            return (s.charAt(0) - '0') % 2 == 1 &&\
  \ (s.charAt(s.length() - 1) - '0') % 2 == 1;\n        }).count();"
- "        // your code here\n        return 0;"
- "        return (int) nums.stream().filter(x -> x > 10 &&\n                    \
  \                           (x % 10) % 2 != 0 &&\n                             \
  \                  (x / 10) % 2 != 0).count();"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                int first = nums.get(i) / 10;\n\
  \                int last = nums.get(i) % 10;\n                if (first % 2 !=\
  \ 0 && last % 2 != 0) {\n                    count++;\n                }\n     \
  \       }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                int first = (int) (nums.get(i)\
  \ / Math.pow(10, (int) Math.log10(nums.get(i))));\n                int last = nums.get(i)\
  \ % 10;\n                if (first % 2 != 0 && last % 2 != 0) {\n              \
  \      count++;\n                }\n            }\n        }\n        return count;"
- "        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n       \
  \     if (nums.get(i) > 10) {\n                String str = Integer.toString(nums.get(i));\n\
  \                if (str.charAt(0) % 2 != 0 && str.charAt(str.length() - 1) % 2\
  \ != 0) {\n                    sum++;\n                }\n            }\n      \
  \  }\n        return sum;"
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                if (nums.get(i) % 2 == 1) {\n \
  \                   if (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i)\
  \ % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9) {\n             \
  \           count++;\n                    }\n                }\n            }\n\
  \        }\n        return count;"
- '        return (int) nums.stream().filter(i -> Math.abs(i) % 2 == 1 && i % 10 %
  2 == 1 && i / 10 % 2 == 1).count();'
- "        int result = 0;\n        for (int n : nums) {\n            String s = String.valueOf(n);\n\
  \            if (s.length() > 1) {\n                int i = Integer.parseInt(String.valueOf(s.charAt(0)));\n\
  \                int j = Integer.parseInt(String.valueOf(s.charAt(s.length() - 1)));\n\
  \                if (n > 10 && (i % 2 == 1 && j % 2 == 1)) {\n                 \
  \   result++;\n                }\n            }\n        }\n        return result;"
- "        return (int) nums.stream().filter(n -> {\n            return n > 10 &&\
  \ (n / 10) % 2 != 0 && n % 2 != 0;\n        }).count();"
- '        return (int) nums.stream().filter(x -> x > 10 && hasOddFirstAndLastDigit(x)).count();'
- '        return (int) nums.stream().filter(Problem::isSpecial).count();'
- '        return 0;'
- "        return (int) nums.stream().filter(n -> n > 10)\n                      \
  \           .filter(n -> (n / 10) % 2 != 0)\n                                 .filter(n\
  \ -> n % 2 != 0)\n                                 .count();"
- '        return (int) nums.stream().filter(x -> x > 10).filter(x -> x % 2 == 1).filter(x
  -> (x % 10) % 2 == 1).count();'
- "        return (int) nums.stream().filter(number -> number > 10).filter(number\
  \ -> {\n            int numberCopy = number;\n            if (number < 0) numberCopy\
  \ = number * -1;\n            if (numberCopy % 10 % 2 == 0) return false;\n    \
  \        while (numberCopy > 10) numberCopy /= 10;\n            return numberCopy\
  \ % 2 == 1;\n        }).count();"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int n = nums.get(i);\n            if (n > 10 && n%2 != 0 && n%10%2 != 0)\
  \ {\n                int m = n;\n                while (m > 0) {\n             \
  \       m /= 10;\n                }\n                if (m%2 != 0) {\n         \
  \           count++;\n                }\n            }\n        }\n        return\
  \ count;"
- "        return nums.stream().filter(num -> num > 10)\n                        \
  \ .filter(num -> num % 2 == 1)\n                         .filter(num -> num > 9)\n\
  \                         .filter(num -> {\n                            int lastDigit\
  \ = num % 10;\n                            int firstDigit = 0;\n               \
  \             while (num != 0) {\n                                firstDigit = num\
  \ % 10;\n                                num /= 10;\n                          \
  \  }\n                            return firstDigit % 2 == 1;\n                \
  \         })\n                         .collect(Collectors.toList()).size();"
- "        int counter = 0;\n        for (int i = 0; i < nums.size(); i++) {\n   \
  \         int num = nums.get(i);\n            int firstDigit = num % 10;\n     \
  \       int lastDigit = num / (int) Math.pow(10, Math.floor(Math.log10(num)));\n\
  \            if (num > 10 && firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n    \
  \            counter++;\n            }\n        }\n        return counter;"
- "        int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        int n = nums.get(i);\n            if (10 < n && 0 != n % 2 && (n / 10)\
  \ % 2 != 0) {\n                result++;\n            }\n        }\n        return\
  \ result;"
- "        // TODO: Implement this\n        return 0;"
- '        return 0;'
- "        // implement the function\n        return 0;"
- '        return 0;'
- "        // TODO: Your implementation here\n        int count = 0;\n        for\
  \ (int num : nums) {\n            // Check if greater than 10\n            if (num\
  \ > 10) {\n                // Check if first digit is odd\n                int firstDigit\
  \ = num % 10;\n                if (firstDigit % 2 != 0) {\n                    //\
  \ Check if last digit is odd\n                    int lastDigit = (int) (num / Math.pow(10,\
  \ Math.floor(Math.log10(num))));\n                    if (lastDigit % 2 != 0) {\n\
  \                        count++;\n                    }\n                }\n  \
  \          }\n        }\n        return count;"
- "        return (int) nums.stream().filter(x -> {\n            String xStr = x.toString();\n\
  \            int firstDigit = Integer.parseInt(xStr.substring(0, 1));\n        \
  \    int lastDigit = Integer.parseInt(xStr.substring(xStr.length() - 1));\n    \
  \        return x > 10 && (firstDigit == 1 || firstDigit == 3 || firstDigit == 5\
  \ || firstDigit == 7 || firstDigit == 9) &&\n                    (lastDigit == 1\
  \ || lastDigit == 3 || lastDigit == 5 || lastDigit == 7 || lastDigit == 9);\n  \
  \      }).count();"
- '        return 0;'
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                String strNum = String.valueOf(nums.get(i));\n\
  \                if (strNum.length() > 1) {\n                    if (strNum.charAt(0)\
  \ % 2 != 0 && strNum.charAt(strNum.length() - 1) % 2 != 0) {\n                 \
  \       count++;\n                    }\n                }\n            }\n    \
  \    }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                String stringNum = nums.get(i).toString();\n\
  \                if (stringNum.charAt(0) % 2 != 0 && stringNum.charAt(stringNum.length()\
  \ - 1) % 2 != 0) {\n                    count++;\n                }\n          \
  \  }\n        }\n        return count;"
- "        int counter = 0;\n        int firstdigit = 0;\n        int lastdigit =\
  \ 0;\n        for (int num : nums) {\n            if (num > 10) {\n            \
  \    firstdigit = num / 10;\n                lastdigit = num % 10;\n           \
  \     if (firstdigit % 2 != 0 && lastdigit % 2 != 0) {\n                    counter++;\n\
  \                }\n            }\n        }\n        return counter;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && Math.abs(num) % 2 == 1) {\n                int i = num % 10;\n            \
  \    if (i % 2 == 1) {\n                    count++;\n                }\n      \
  \      }\n        }\n        return count;"
- '        return nums.stream().filter(x -> (x / 10) % 2 != 0 && x % 2 != 0).mapToInt(Integer::intValue).sum();'
- '        return (int) nums.stream().filter(num -> num % 2 != 0 && num > 10 && isNum(num)).count();'
- "      int result = 0;\n      for (int i = 0; i < nums.size(); i++) {\n        if\
  \ (nums.get(i) > 10) {\n          int firstDigit = nums.get(i) / 10;\n         \
  \ int lastDigit = nums.get(i) % 10;\n          if (firstDigit % 2 != 0 && lastDigit\
  \ % 2 != 0) {\n            result++;\n          }\n        }\n      }\n      return\
  \ result;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && num % 2 == 1 && (num / 10) % 2 == 1)\n                count++;\n        }\n\
  \        return count;"
- "        return (int) nums.stream().filter(num -> num > 10).filter(num ->\n    \
  \            Integer.toString(num).charAt(0) % 2 != 0 &&\n                Integer.toString(num).charAt(Integer.toString(num).length()\
  \ - 1) % 2 != 0\n        ).count();"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       String num = Integer.toString(nums.get(i));\n            if (nums.get(i)\
  \ > 10 && isOdd(num.charAt(0)) && isOdd(num.charAt(num.length() - 1))) {\n     \
  \           count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i : nums) {\n            if (i > 10 &&\
  \ (i / 10) % 2 != 0 && i % 2 != 0) {\n                count++;\n            }\n\
  \        }\n        return count;"
- '        return 0;'
- "        // implement specialFilter\n        int count = 0;\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n           \
  \ if (num > 10) {\n                String str = String.valueOf(num);\n         \
  \       String first = str.substring(0, 1);\n                String last = str.substring(str.length()\
  \ - 1);\n                if (Integer.parseInt(first) % 2 != 0 && Integer.parseInt(last)\
  \ % 2 != 0) {\n                    count++;\n                }\n            }\n\
  \        }\n        return count;"
- '        return nums.stream().filter(e -> e > 10 && e % 2 != 0 && e / 10 % 2 !=
  0).collect(Collectors.toList()).size();'
- "        // Write your code here\n        return 0;"
- "        // Type your solution here\n        return 0;"
- "        int count = 0;\n        int size = nums.size();\n        for (int i = 0;\
  \ i < size; i++) {\n            if (nums.get(i) > 10) {\n                if (nums.get(i)\
  \ % 2 != 0) {\n                    if (nums.get(i) / 10 % 2 != 0) {\n          \
  \              count++;\n                    }\n                }\n            }\n\
  \        }\n        return count;"
- '        return 0;'
- "    \t// code here\n    \treturn 0;"
- "        // Implement your code here\n        int count = 0;\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n          \
  \      String s = Integer.toString(nums.get(i));\n                if (s.charAt(0)\
  \ % 2 != 0 && s.charAt(s.length() - 1) % 2 != 0) {\n                    count++;\n\
  \                }\n            }\n        }\n        return count;"
- '        throw new UnsupportedOperationException("Please implement this function");'
- "        // your code here\n        return nums.stream().filter(i -> i > 10).filter(i\
  \ -> isFirstOdd(i) && isLastOdd(i)).toArray().length;"
- "        int numsGreaterThan10 = 0;\n        for (int num : nums) {\n          \
  \  if (num > 10) {\n                if (firstIsOdd(num) && lastIsOdd(num)) {\n \
  \                   numsGreaterThan10++;\n                }\n            }\n   \
  \     }\n        return numsGreaterThan10;"
- "        // TODO: implement\n        return 0;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       String[] split = String.valueOf(nums.get(i)).split(\"\");\n            if\
  \ (nums.get(i) > 10 && Integer.parseInt(split[0]) % 2 != 0 && Integer.parseInt(split[split.length\
  \ - 1]) % 2 != 0) {\n                count++;\n            }\n        }\n      \
  \  return count;"
- "        return nums.stream().filter(\n            x -> ((x > 10) && (x % 2 != 0)\
  \ && \n                (x % 10 != 0) && (x / 10 % 2 != 0))\n        ).toArray().length;"
- "        int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        if (10 < nums.get(i)) {\n                String numStr = nums.get(i).toString();\n\
  \                Integer firstDigit = Character.getNumericValue(numStr.charAt(0));\n\
  \                Integer lastDigit = Character.getNumericValue(numStr.charAt(numStr.length()\
  \ - 1));\n                if (0 == firstDigit % 2 && 0 == lastDigit % 2) {\n   \
  \                 result++;\n                }\n            }\n        }\n     \
  \   return result;"
- "        \n        int count = 0;\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            if (nums.get(i) > 10) {\n                String[] myArray = Integer.toString(nums.get(i)).split(\"\
  \");\n                if (Arrays.asList(myArray).contains(\"1\") || Arrays.asList(myArray).contains(\"\
  3\") || Arrays.asList(myArray).contains(\"5\") || Arrays.asList(myArray).contains(\"\
  7\") || Arrays.asList(myArray).contains(\"9\")) {\n                    count++;\n\
  \                }\n            }\n        }\n        return count;"
- "        // WRITE YOUR CODE HERE\n        return -1;"
- "        int c = 0;\n        for (int num : nums) {\n            if (num > 10 &&\
  \ isOdd(num % 10) && isOdd(num / 100)) {\n                c++;\n            }\n\
  \        }\n        return c;"
- "        // return the number of elements in the array that are greater than 10\
  \ and both \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \        return 1;"
- '        return (int) nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 ==
  1).count();'
- "        int count = 0;\n        for (int n : nums) {\n            if (n > 10 &&\
  \ isFirstAndLastDigitOdd(n)) {\n                count++;\n            }\n      \
  \  }\n        return count;"
- '        return (int) nums.stream().filter(p -> p > 10 && isOdd(getFirstDigit(p))
  && isOdd(getLastDigit(p))).count();'
- "        // Iterate over the array, filtering each element.\n        int count =\
  \ 0;\n        for (int num : nums) {\n            if (isSpecial(num)) {\n      \
  \          count++;\n            }\n        }\n        return count;"
- "        // your code here\n        return 0;"
- "        return (int) nums.stream().filter(i -> i > 10).filter(i -> {\n        \
  \    String number = i.toString();\n            return Character.getNumericValue(number.charAt(0))\
  \ % 2 != 0 && Character.getNumericValue(number.charAt(number.length() - 1)) % 2\
  \ != 0;\n        }).count();"
- '        // your code here...'
- "        // Write your code here\n        return 0;"
- "        return (int) nums.stream().filter(x -> x > 10).filter(x -> {\n        \
  \    int first = Integer.parseInt(String.valueOf(x).substring(0, 1));\n        \
  \    int last = Integer.parseInt(String.valueOf(x).substring(String.valueOf(x).length()\
  \ - 1));\n            return (first % 2 != 0 && last % 2 != 0);\n        }).count();"
- "        // use stream() and filter() to obtain only the numbers that satisfy the\
  \ \n        // given condition (odd first and last digits, and greater than 10)\n\
  \        // use collect() to obtain a List of the numbers that satisfy the \n  \
  \      // given condition, then use size() to obtain the size of the List.\n   \
  \     return nums.stream().filter(\n            e -> e > 10 && e % 2 == 1 && e /\
  \ 10 % 2 == 1\n        ).collect(Collectors.toList()).size();"
- "        // FIXME\n        return 0;"
- '        throw new UnsupportedOperationException("Waiting to be implemented.");'
- "        // Write your code here\n        return nums.stream().filter(x -> x > 10\
  \ && \n                Character.getNumericValue(Integer.toString(x).charAt(0))\
  \ % 2 != 0 \n                && Character.getNumericValue(Integer.toString(x).charAt(Integer.toString(x).length()\
  \ - 1)) % 2 != 0).collect(Collectors.toList()).size();"
- '        return (int) nums.stream().filter(x -> x > 10 && x.toString().charAt(0)
  % 2 != 0 && x.toString().charAt(x.toString().length() - 1) % 2 != 0).count();'
- '        return 0;'
- '        return 0;'
- '        return (int) nums.stream().filter( n -> n > 10 && n % 2 == 1 && (n / 10)
  % 2 == 1 && n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 ==
  9).count();'
- '        return (int) nums.stream().filter(n -> (n > 10) && (n % 2 != 0) && (n %
  10 != 0)).count();'
- "        return (int) nums.stream().filter(num -> {\n            return num > 10\
  \ && hasOddFirstAndLastDigits(num);\n        }).count();"
- "        // write your code here\n        return (int) nums.stream().filter(i ->\
  \ i > 10 && i % 2 != 0 && i % 10 != 0).count();"
- "        // YOUR CODE HERE\n        return 0;"
- "        return (int) nums.stream().filter(n -> n > 10).filter(n -> n % 2 == 1).filter(n\
  \ -> {\n            int m = n % 10;\n            while (n > 0) {\n             \
  \   n /= 10;\n            }\n            return n % 2 == 1;\n        }).count();"
- '        return (int) nums.stream().filter(Problem::is_odd).filter(Problem::is_greater_than_10).count();'
- '        return (int) nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 ==
  1).count();'
- '        return (int) nums.stream().filter(x -> x > 10).filter(x -> (x/10)%2!=0
  && x%2!=0).count();'
- "        return (int) nums.stream().filter(e -> {\n            String str = e.toString();\n\
  \            int x = Integer.parseInt(str.substring(0, 1));\n            int y =\
  \ Integer.parseInt(str.substring(str.length() - 1));\n            return e > 10\
  \ && (x % 2 == 1 || x % 2 == -1) && (y % 2 == 1 || y % 2 == -1);\n        }).count();"
- '        throw new RuntimeException("not yet implemented");'
- "        return (int) nums.stream().filter(x -> {\n            int first = Math.abs(x);\n\
  \            while (first > 10) first /= 10;\n            return first % 2 == 1\
  \ && x % 2 == 1 && x > 10;\n        }).count();"
- '        return 0;'
- '        return (int) nums.stream().filter(num -> num > 10 && getFirstDigit(num)
  % 2 != 0 && getLastDigit(num) % 2 != 0).count();'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int num = nums.get(i);\n            if (num > 10) {\n                String\
  \ strNum = Integer.toString(num);\n                String first = strNum.substring(0,\
  \ 1);\n                String last = strNum.substring(strNum.length() - 1);\n  \
  \              if ((Integer.parseInt(first) % 2 == 1) && (Integer.parseInt(last)\
  \ % 2 == 1)) {\n                    count++;\n                }\n            }\n\
  \        }\n        return count;"
- "        // write your code here\n        return -1;"
- '        return (int) nums.stream().filter(Problem::isGreaterThan10).filter(Problem::areBothOdd).count();'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n        \
  \        //checks if first digit is odd\n                if (((nums.get(i)/10)%2)\
  \ != 0) {\n                    //checks if last digit is odd\n                 \
  \   if ((nums.get(i)%2) != 0) {\n                        result.add(nums.get(i));\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ result.size();"
- "      int count = 0;\n      for (int num : nums) {\n        if (num > 10 && (num\
  \ / 10) % 2 != 0 && num % 2 != 0) {\n          count++;\n        }\n      }\n  \
  \    return count;"
- "        int i=0;\n        ArrayList<Integer> temp=new ArrayList<Integer>();\n \
  \       while(i<nums.size()){\n            if(Math.abs(nums.get(i))>10 &&\n    \
  \        (nums.get(i)%10+nums.get(i)/10%10)%2==1) temp.add(nums.get(i));\n     \
  \       i++;\n        }\n        return temp.size();"
- "        // YOUR CODE HERE\n        return 0;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                String x = Integer.toString(nums.get(i));\n\
  \                if (Character.getNumericValue(x.charAt(0)) % 2 != 0 && Character.getNumericValue(x.charAt(x.length()\
  \ - 1)) % 2 != 0) {\n                    count++;\n                }\n         \
  \   }\n        }\n        return count;"
- '        throw new UnsupportedOperationException("Waiting to be implemented.");'
- "        return (int) nums.stream().filter(num -> num > 10)\n            .filter(num\
  \ -> {\n                int num2 = Math.abs(num);\n                return (num2\
  \ % 10) % 2 == 1 && num2 / 10 % 2 == 1;\n            }).count();"
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                if (nums.get(i) / 10 % 2 != 0)\
  \ {\n                    if (nums.get(i) % 10 % 2 != 0) {\n                    \
  \    count++;\n                    }\n                }\n            }\n       \
  \ }\n        return count;"
- "        // code here\n        return 0;"
- "        int n = 0;\n        for (int x : nums) {\n            String s = x + \"\
  \";\n            int l = s.length();\n            if (x > 10 && isOdd(s.charAt(0))\
  \ && isOdd(s.charAt(l - 1))) {\n                n++;\n            }\n        }\n\
  \        return n;"
- "        int cnt = 0;\n        for (int i = 0; i < nums.size(); i++) {\n       \
  \     int n = nums.get(i);\n            if (n > 10 && (n % 2 == 1) && (n % 10 ==\
  \ 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)) {\n          \
  \      cnt++;\n            }\n        }\n        return cnt;"
- "        int count = 0;\n        for (int n : nums) {\n            if (n > 10 &&\
  \ n % 2 == 1 && (n % 10) % 2 == 1) {\n                count++;\n            }\n\
  \        }\n        return count;"
- '        // Your code here'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                if (nums.get(i) % 2 == 1) {\n \
  \                   count++;\n                }\n            }\n        }\n    \
  \    return count;"
- '        return 0;'
- '        return nums.stream().filter(n -> n > 10 && Math.abs(n) % 10 % 2 == 1).collect(Collectors.toList()).size();'
- "        int count = 0;\n        int firstDigit = 0;\n        int lastDigit = 0;\n\
  \        for (int num : nums) {\n            String numString = String.valueOf(num);\n\
  \            String firstDigitString = String.valueOf(numString.charAt(0));\n  \
  \          String lastDigitString = String.valueOf(numString.charAt(numString.length()\
  \ - 1));\n            try {\n                firstDigit = Integer.parseInt(firstDigitString);\n\
  \                lastDigit = Integer.parseInt(lastDigitString);\n            } catch\
  \ (NumberFormatException e) {\n                continue;\n            }\n      \
  \      if (num > 10 && firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n          \
  \      count++;\n            }\n        }\n        return count;"
- "        int output = 0;\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        int num = nums.get(i);\n            if (num > 10) {\n                String\
  \ str = String.valueOf(num);\n                if (str.length() > 1) {\n        \
  \            int first = Integer.parseInt(str.substring(0, 1));\n              \
  \      int last = Integer.parseInt(str.substring(str.length() - 1));\n         \
  \           if (first % 2 != 0 && last % 2 != 0) {\n                        output++;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ output;"
- '        return (int) nums.stream().filter(x -> isValid(x)).count();'
- "        int answer = 0;\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        int num = nums.get(i);\n            if (num > 10) {\n                int\
  \ first = num % 10;\n                int last = num / 10;\n                if (first\
  \ % 2 != 0 && last % 2 != 0) {\n                    answer++;\n                }\n\
  \            }\n        }\n        return answer;"
- "        int count = 0;\n        if (nums == null) {\n            return 0;\n  \
  \      }\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i)\
  \ > 10) {\n                int last = nums.get(i) % 10;\n                int first\
  \ = nums.get(i);\n                while (first >= 10) {\n                    first\
  \ = first / 10;\n                }\n                if (last % 2 != 0 && first %\
  \ 2 != 0) {\n                    count++;\n                }\n            }\n  \
  \      }\n        return count;"
- '        return (int) nums.stream().filter(x -> x > 10).filter(x -> (x % 10 + x
  / 10) % 2 == 1).count();'
- '        return 0;'
- "        int numberOfOdd = 0;\n        for (int i = 0; i < nums.size(); i++) {\n\
  \            int firstDigit = (int) (nums.get(i) / Math.pow(10, (int) (Math.log10(nums.get(i)))));\n\
  \            int lastDigit = nums.get(i) % 10;\n            if (nums.get(i) > 10\
  \ && firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                numberOfOdd++;\n\
  \            }\n        }\n        return numberOfOdd;"
- "        return (int) nums.stream().filter(x -> (x > 10 &&\n                   \
  \                             (x.toString().charAt(0) - '0') % 2 != 0 &&\n     \
  \                                           (x.toString().charAt(x.toString().length()\
  \ - 1) - '0') % 2 != 0))\n                                                .count();"
- "        return (int) nums.stream().filter(x -> x > 10)\n                      \
  \      .filter(x -> {\n                                String s = x.toString();\n\
  \                                return s.charAt(0) % 2 != 0 && s.charAt(s.length()\
  \ - 1) % 2 != 0;\n                            }).count();"
- "        return (int) nums.stream().filter(num -> {\n            if (num < 10) return\
  \ false;\n            String s = String.valueOf(num);\n            int length =\
  \ s.length();\n            char f = s.charAt(0);\n            char l = s.charAt(length\
  \ - 1);\n            return (f == '1' || f == '3' || f == '5' || f == '7' || f ==\
  \ '9')\n                    && (l == '1' || l == '3' || l == '5' || l == '7' ||\
  \ l == '9');\n        }).count();"
- "        // TODO: replace this with your implementation\n        return nums.stream().filter(x\
  \ -> x > 10 && isFirstAndLastDigitOdd(x)).collect(Collectors.toList()).size();"
- '        return (int) nums.stream().filter(i -> i > 10).filter(i -> isFirstAndLastDigitOdd(i)).count();'
- "        return (int) nums.stream().filter(n -> {\n            String s = String.valueOf(n);\n\
  \            return (n > 10 && Character.getNumericValue(s.charAt(0)) % 2 != 0 &&\n\
  \            Character.getNumericValue(s.charAt(s.length() - 1)) % 2 != 0);\n  \
  \      }).count();"
- '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 % 2 ==
  1).collect(Collectors.toList()).size();'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                int x = nums.get(i);\n        \
  \        int first = x;\n                int last = x % 10;\n                while\
  \ (x > 0) {\n                    first = x % 10;\n                    x /= 10;\n\
  \                }\n                if (first % 2 != 0 && last % 2 != 0) {\n   \
  \                 count++;\n                }\n            }\n        }\n      \
  \  return count;"
- "        int cnt = 0;\n        for (int i = 0; i < nums.size(); i++) {\n       \
  \     int num = nums.get(i);\n            if (num > 10) {\n                int first\
  \ = num / 10;\n                int last = num % 10;\n                if (first %\
  \ 2 != 0 && last % 2 != 0) {\n                    cnt++;\n                }\n  \
  \          }\n        }\n        return cnt;"
- "        // TODO: Implement this function\n        return 0;"
- '        // Write your code here.'
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && isOdd(firstDigit(num)) && isOdd(lastDigit(num))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- '        return 0;'
- "        int num = 0;\n        for (int i : nums) {\n            if (i >= 10 &&\
  \ i % 2 == 1 && i / 10 % 2 == 1) {\n                num++;\n            }\n    \
  \    }\n        return num;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       String number = String.valueOf(nums.get(i));\n            if (nums.get(i)\
  \ > 10 && number.length() > 1) {\n                int firstNumber = Integer.parseInt(String.valueOf(number.charAt(0)));\n\
  \                int lastNumber = Integer.parseInt(String.valueOf(number.charAt(number.length()\
  \ - 1)));\n                if (firstNumber % 2 != 0 && lastNumber % 2 != 0) {\n\
  \                    count++;\n                }\n            }\n        }\n   \
  \     return count;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && (num % 10) % 2 != 0 && num / 10 % 2 != 0) {\n                count++;\n   \
  \         }\n        }\n        return count;"
- "        return nums.stream().filter(num -> num > 10)\n                .filter(num\
  \ -> num > 10 && firstOdd(num) && lastOdd(num))\n                .collect(Collectors.toList()).size();"
- '        return (int) nums.stream().filter(num -> num > 10).filter(num -> isFirstAndLastDigitOdd(num)).count();'
- "        // Enter code here.\n        return 0;"
- "        return (int) nums.stream().filter(i -> {\n            return i > 10 \n\
  \                && i % 2 != 0 \n                && i % 10 % 2 != 0 \n         \
  \       && (i - i % 10) / 10 % 2 != 0;\n        }).count();"
- "        int len = nums.size();\n        int count = 0;\n        for (int i = 0;\
  \ i < len; i++) {\n            if (checkConditions(nums.get(i))) {\n           \
  \     count++;\n            }\n        }\n        return count;"
- "        // Your Code Here\n        return 0;"
- "        // IMPLEMENT\n        return -1;"
- '        return (int) nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 ==
  1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9).count();'
- "        if (nums == null)\n            return 0;\n        int result = 0;\n   \
  \     for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10)\
  \ {\n                String str = String.valueOf(nums.get(i));\n               \
  \ if (str.length() == 1) {\n                    if (str.charAt(0) % 2 != 0)\n  \
  \                      result++;\n                } else {\n                   \
  \ if (str.charAt(0) % 2 != 0 && str.charAt(str.length() - 1) % 2 != 0)\n       \
  \                 result++;\n                }\n            }\n        }\n     \
  \   return result;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int curr = nums.get(i);\n            if (curr > 10) {\n                String\
  \ str = Integer.toString(curr);\n                int first = Character.getNumericValue(str.charAt(0));\n\
  \                int last = Character.getNumericValue(str.charAt(str.length() -\
  \ 1));\n                if (first % 2 != 0 && last % 2 != 0) {\n               \
  \     count++;\n                }\n            }\n        }\n        return count;"
- '        '
- "        // WRITE YOUR CODE HERE\n        int count = 0;\n        for (int n : nums)\
  \ {\n            if (n > 10 && n % 2 == 1 && n / 10 % 2 == 1) {\n              \
  \  count++;\n            }\n        }\n        return count;"
- "        int cnt = 0;\n        for (int x : nums) {\n            if (x < 0) {\n\
  \                x = -x;\n            }\n            if (x > 10) {\n           \
  \     if (x % 2 == 1) {\n                    cnt++;\n                }\n       \
  \     }\n        }\n        return cnt;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       String number = String.valueOf(nums.get(i));\n            int firstDigit\
  \ = Integer.parseInt(String.valueOf(number.charAt(0)));\n            int lastDigit\
  \ = Integer.parseInt(String.valueOf(number.charAt(number.length() - 1)));\n    \
  \        if (nums.get(i) > 10 && (firstDigit % 2 != 0 && lastDigit % 2 != 0)) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        int result = 0;\n        for (int n : nums) {\n            // YOUR CODE\
  \ HERE\n        }\n        return result;"
- "        int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        if (nums.get(i) > 10) {\n                if (isOdd(nums.get(i))) {\n  \
  \                  result++;\n                }\n            }\n        }\n    \
  \    return result;"
- "        int count = 0;\n        for (int number : nums) {\n            if (greaterThan10(number)\
  \ && firstDigitIsOdd(number) && lastDigitIsOdd(number))\n                count++;\n\
  \        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                if (nums.get(i) % 2 == 1) {\n \
  \                   if (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i)\
  \ % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9) {\n             \
  \           count++;\n                    }\n                }\n            }\n\
  \        }\n        return count;"
- "        int counter = 0;\n        for (int i = 0; i < nums.size(); i++) {\n   \
  \         if (nums.get(i) > 10) {\n                if (isOdd(nums.get(i)) &&\n \
  \                   isOdd(nums.get(i) / 10)) {\n                    counter++;\n\
  \                }\n            }\n        }\n        return counter;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int num = nums.get(i);\n            if (num > 10) {\n                if\
  \ (num % 2 == 1) {\n                    int d = 0;\n                    while (num\
  \ > 10) {\n                        num /= 10;\n                        d++;\n  \
  \                  }\n                    if (num % 2 == 1) {\n                \
  \        count++;\n                    }\n                }\n            }\n   \
  \     }\n        return count;"
- "        long count = nums.stream()\n                .filter(e -> (e > 10 && (e\
  \ % 10 % 2 != 0) && e / 10 % 2 != 0))\n                .count();\n        return\
  \ (int) count;"
- "        int count = 0;\n        for (int n : nums) {\n            if (n > 10 &&\
  \ n % 2 == 1 && n % 10 == 1) {\n                count++;\n            }\n      \
  \  }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                if (nums.get(i) / 10 % 2 != 0 &&\
  \ nums.get(i) % 10 % 2 != 0) {\n                    count++;\n                }\n\
  \            }\n        }\n        return count;"
- '        return 0;'
- "        return (int) nums.stream().filter(number -> number > 10 && \n         \
  \   isFirstAndLastDigitOdd(number)).count();"
- "        int counter = 0;\n        for (int i = 0; i < nums.size(); i++) {\n   \
  \         if (nums.get(i) > 10) {\n                String num = Integer.toString(nums.get(i));\n\
  \                if (num.length() == 1) {\n                    if (Integer.parseInt(num)\
  \ % 2 != 0) {\n                        counter++;\n                    }\n     \
  \           } else {\n                    if (Integer.parseInt(num.substring(0,\
  \ 1)) % 2 != 0) {\n                        if (Integer.parseInt(num.substring(num.length()\
  \ - 1)) % 2 != 0) {\n                            counter++;\n                  \
  \      }\n                    }\n                }\n            }\n        }\n \
  \       return counter;"
- "        int result = 0;\n        for (int num : nums) {\n            if (num >\
  \ 10 && num > 0) {\n                if (num % 10 % 2 != 0 && num / 10 == 0) {\n\
  \                    result++;\n                }\n            }\n        }\n  \
  \      return result;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && hasFirstAndLastOddDigits(num)) {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        if (nums.get(i) > 10) {\n                // needs to be bigger than 10\n\
  \                int num = nums.get(i);\n                if (num % 2 == 1) {\n \
  \                   // needs to have odd first digit\n                    int lastDigit\
  \ = num % 10;\n                    if (lastDigit % 2 == 1) {\n                 \
  \       // needs to have odd last digit\n                        result++;\n   \
  \                 }\n                }\n            }\n        }\n        return\
  \ result;"
- "        // TODO: implement this function\n        int count = 0;\n        for (int\
  \ number : nums) {\n            if (number > 10) {\n                String num =\
  \ String.valueOf(number);\n                int length = num.length();\n        \
  \        char first = num.charAt(0);\n                char last = num.charAt(length\
  \ - 1);\n                int firstNum = Character.getNumericValue(first);\n    \
  \            int lastNum = Character.getNumericValue(last);\n                if\
  \ (firstNum % 2 != 0 && lastNum % 2 != 0) {\n                    count++;\n    \
  \            }\n            }\n        }\n        return count;"
- "        int result = 0;\n        for (int num : nums) {\n            if (num >\
  \ 10 && num % 2 == 1 && num / 10 % 2 == 1) {\n                result++;\n      \
  \      }\n        }\n        return result;"
- '        return (int) nums.stream().filter(num -> num > 10 && (num % 10) % 2 !=
  0 && (num / 10) % 2 != 0).count();'
- '        return (int) nums.stream().filter(n -> n > 10 && firstDigit(n) % 2 != 0
  && lastDigit(n) % 2 != 0).count();'
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int num = nums.get(i);\n            if (Math.abs(num) > 10) {\n        \
  \        int first = num % 10;\n                int last = num / 10;\n         \
  \       if (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n \
  \               }\n            }\n        }\n        return count;"
- '        // Implement the function'
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       String number = String.valueOf(nums.get(i));\n            int firstDigit\
  \ = Integer.parseInt(String.valueOf(number.charAt(0)));\n            int lastDigit\
  \ = Integer.parseInt(String.valueOf(number.charAt(number.length() - 1)));\n    \
  \        if (nums.get(i) > 10 && isOdd(firstDigit) && isOdd(lastDigit)) {\n    \
  \            count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        // your code goes here...\n        return count;"
- '        return (int) nums.stream().filter(n -> (n > 10) && (n % 2 != 0) && ((n
  % 10) % 2 != 0) && ((n / 10) % 2 != 0)).count();'
- '        return 0;'
- '        // Your code here.'
- '        return 0;'
- "        // Type your code here\n        return (int) nums.stream().filter(x ->\
  \ x > 10 &&\n                x % 2 == 1 && x / 10 % 2 == 1).count();"
language: java
name: HumanEval_146_specialFilter
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes an array of numbers as input\
  \ and returns \n    // the number of elements in the array that are greater than\
  \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
  \ -2, -3, 45, 21, 109]) => 2\n    public static int specialFilter(ArrayList<Integer>\
  \ nums) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList((int)5, (int)-2, (int)1, (int)-5)))) == (0));\n\
  \    assert(specialFilter((new ArrayList<Integer>(Arrays.asList((int)15, (int)-73,\
  \ (int)14, (int)-15)))) == (1));\n    assert(specialFilter((new ArrayList<Integer>(Arrays.asList((int)33,\
  \ (int)-2, (int)-3, (int)45, (int)21, (int)109)))) == (2));\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList((int)43, (int)-12, (int)93, (int)125, (int)121,\
  \ (int)109)))) == (4));\n    assert(specialFilter((new ArrayList<Integer>(Arrays.asList((int)71,\
  \ (int)-2, (int)-33, (int)75, (int)21, (int)19)))) == (3));\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList((int)1)))) == (0));\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList()))) == (0));\n    }\n\n}\n"
