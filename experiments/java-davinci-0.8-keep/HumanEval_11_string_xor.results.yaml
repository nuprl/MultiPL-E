language: java
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuffer sb = new StringBuffer();\n        int len\
    \ = Math.max(a.length(), b.length());\n        for (int i = 0; i < len; i++) {\n\
    \            int A = i < a.length() ? a.charAt(i) - '0' : 0;\n            int\
    \ B = i < b.length() ? b.charAt(i) - '0' : 0;\n            int C = A ^ B;\n  \
    \          sb.append(C);\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int[] a1 = new int[a.length()];\n        int[] b1 =\
    \ new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n     \
    \       a1[i] = Character.getNumericValue(a.charAt(i));\n        }\n        for\
    \ (int i = 0; i < b.length(); i++) {\n            b1[i] = Character.getNumericValue(b.charAt(i));\n\
    \        }\n        int[] c = new int[a.length()];\n        for (int i = 0; i\
    \ < a.length(); i++) {\n            c[i] = a1[i] ^ b1[i];\n        }\n       \
    \ String r = \"\";\n        for (int i = 0; i < a.length(); i++) {\n         \
    \   r += c[i];\n        }\n        return r;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Hint: Use a.charAt(i) to access the ith char of a,\n\
    \        // and '0' and '1' are just integers 0 and 1.\n        // Note that you\
    \ can use ^ to xor 2 integers, i.e., 2^3 = 1.\n        StringBuilder result =\
    \ new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n     \
    \       if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n\
    \            } else {\n                result.append('1');\n            }\n  \
    \      }\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\"; \n        for (int i = 0; i <\
    \ a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n        \
    \        result += \"0\";\n            } else {\n                result += \"\
    1\";\n            }\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return new BigInteger(a, 2).xor(new BigInteger(b, 2)).toString(2);\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxr3zurj.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        BigInteger x = new BigInteger(a, 2);\n        BigInteger\
    \ y = new BigInteger(b, 2);\n        BigInteger xor = x.xor(y);\n        return\
    \ xor.toString(2);\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj6yfrw_k.java:20)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        throw new UnsupportedOperationException(\"Problem solution\
    \ not yet implemented\");\n}\n    public static void main(String[] args) {\n \
    \   assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"\
    1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem\
    \ solution not yet implemented\n\tat Problem.stringXor(tmptcl000lu.java:14)\n\t\
    at Problem.main(tmptcl000lu.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] a_array = a.toCharArray();\n        char[] b_array\
    \ = b.toCharArray();\n        char[] out = new char[a_array.length];\n       \
    \ for (int i = 0; i < a_array.length; i++) {\n            if (a_array[i] == b_array[i])\
    \ {\n                out[i] = '0';\n            } else {\n                out[i]\
    \ = '1';\n            }\n        }\n        return new String(out);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result\
    \ += \"0\";\n            } else {\n                result += \"1\";\n        \
    \    }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int A = Integer.parseInt(a, 2);\n        int B = Integer.parseInt(b,\
    \ 2);\n        int X = A ^ B;\n        return Integer.toBinaryString(X);\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpky78hnz2.java:20)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // TODO:\n        // write code to perform binary XOR\
    \ on strings a and b and return the result\n        // as a string\n        String\
    \ sum = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            char\
    \ aC = a.charAt(i);\n            char bC = b.charAt(i);\n            if (aC ==\
    \ bC) {\n                sum += \"0\";\n            } else {\n               \
    \ sum += \"1\";\n            }\n        }\n        return sum;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                sb.append('0');\n            } else {\n                sb.append('1');\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // your code here\n        byte[] aBytes = a.getBytes();\n\
    \        byte[] bBytes = b.getBytes();\n        byte[] xorBytes = new byte[aBytes.length];\n\
    \        for (int i = 0; i < aBytes.length; i++) {\n            xorBytes[i] =\
    \ (byte) (aBytes[i] ^ bBytes[i]);\n        }\n        return new String(xorBytes);\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwabyr9nr.java:24)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) throw new IllegalArgumentException(\"\
    Input strings should have equal length.\");\n        int[] b1 = new int[a.length()];\n\
    \        int[] b2 = new int[a.length()];\n        for (int i = 0; i < a.length();\
    \ i++) {\n            b1[i] = Integer.parseInt(a.substring(i, i + 1));\n     \
    \       b2[i] = Integer.parseInt(b.substring(i, i + 1));\n        }\n        int[]\
    \ xor = new int[a.length()];\n        for (int i = 0; i < a.length(); i++) {\n\
    \            xor[i] = b1[i] ^ b2[i];\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n         \
    \   sb.append(xor[i]);\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String rv = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                rv +=\
    \ \"0\";\n            } else {\n                rv += \"1\";\n            }\n\
    \        }\n        return rv;\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int len = a.length();\n        if (len != b.length())\n\
    \            throw new IllegalArgumentException(\"Inputs are not of equal length\"\
    );\n        char[] x = new char[len];\n        for (int i = 0; i < len; i++) {\n\
    \            x[i] = a.charAt(i) == b.charAt(i) ? '0' : '1';\n        }\n     \
    \   return new String(x);\n}\n    public static void main(String[] args) {\n \
    \   assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"\
    1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                result.append('0');\n            } else {\n             \
    \   result.append('1');\n            }\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // your code goes here\n\n        // First convert the\
    \ strings to binary\n        char[] a_as_bin = a.toCharArray();\n        char[]\
    \ b_as_bin = b.toCharArray();\n\n        // Create a string with maximum length\
    \ of the array\n        StringBuilder result = new StringBuilder();\n\n      \
    \  // XOR the arrays and create a new one, keep in mind that\n        // the XOR\
    \ sign is ^\n        for (int i = 0; i < a_as_bin.length; i++) {\n           \
    \ result.append(a_as_bin[i] ^ b_as_bin[i]);\n        }\n\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) ^ b.charAt(i));\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Replace the line below with your code.\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmp6bzkew9o.java:18)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        throw new RuntimeException(\"Not implemented\");\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.stringXor(tmpytt7epp0.java:14)\n\tat Problem.main(tmpytt7epp0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n\
    \            char charB = b.charAt(i);\n            boolean boolA = (charA ==\
    \ '1');\n            boolean boolB = (charB == '1');\n            if (boolA ^\
    \ boolB) {\n                sb.append('1');\n            } else {\n          \
    \      sb.append('0');\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int length = Math.max(a.length(), b.length());\n   \
    \     int[] A = new int[length];\n        int[] B = new int[length];\n       \
    \ for (int i = 0; i < length; i++) {\n            if (i < a.length()) {\n    \
    \            A[i] = Character.getNumericValue(a.charAt(i));\n            }\n \
    \           if (i < b.length()) {\n                B[i] = Character.getNumericValue(b.charAt(i));\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i < length; i++) {\n            sb.append(A[i] ^ B[i]);\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result\
    \ += \"0\";\n            } else {\n                result += \"1\";\n        \
    \    }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        //Fill out\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpmo1v33oc.java:18)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() > b.length()) {\n            b = String.format(\"\
    %0\" + a.length() + \"d\", Integer.parseInt(b));\n        } else if (a.length()\
    \ < b.length()) {\n            a = String.format(\"%0\" + b.length() + \"d\",\
    \ Integer.parseInt(a));\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code here.\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpxahnrgpo.java:18)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        byte[] byteA = hexStringToByteArray(a);\n        byte[]\
    \ byteB = hexStringToByteArray(b);\n        byte[] byteC = xor(byteA, byteB);\n\
    \        return byteArrayToHexString(byteC);\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzu5l44i.java:14: error: cannot find symbol\n        byte[] byteA\
    \ = hexStringToByteArray(a);\n                       ^\n  symbol:   method hexStringToByteArray(String)\n\
    \  location: class Problem\n/tmp/tmpjzu5l44i.java:15: error: cannot find symbol\n\
    \        byte[] byteB = hexStringToByteArray(b);\n                       ^\n \
    \ symbol:   method hexStringToByteArray(String)\n  location: class Problem\n/tmp/tmpjzu5l44i.java:16:\
    \ error: cannot find symbol\n        byte[] byteC = xor(byteA, byteB);\n     \
    \                  ^\n  symbol:   method xor(byte[],byte[])\n  location: class\
    \ Problem\n/tmp/tmpjzu5l44i.java:17: error: cannot find symbol\n        return\
    \ byteArrayToHexString(byteC);\n               ^\n  symbol:   method byteArrayToHexString(byte[])\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() == 0) return b;\n        if (b.length()\
    \ == 0) return a;\n        char[] chars = new char[a.length()];\n        for (int\
    \ i = 0; i < chars.length; i++) {\n            chars[i] = a.charAt(i) == b.charAt(i)\
    \ ? '0' : '1';\n        }\n        return new String(chars);\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // >>> int('1', 2)\n        // 1\n        // >>> int('110',\
    \ 2)\n        // 6\n        // >>> bin(0b110 ^ 0b010)\n        // '0b100'\n  \
    \      return bin(int(a, 2) ^ int(b, 2));\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2l6kw4zj.java:20: error: '.class' expected\n        return bin(int(a,\
    \ 2) ^ int(b, 2));\n                      ^\n/tmp/tmp2l6kw4zj.java:20: error:\
    \ not a statement\n        return bin(int(a, 2) ^ int(b, 2));\n              \
    \         ^\n/tmp/tmp2l6kw4zj.java:20: error: ';' expected\n        return bin(int(a,\
    \ 2) ^ int(b, 2));\n                        ^\n/tmp/tmp2l6kw4zj.java:20: error:\
    \ not a statement\n        return bin(int(a, 2) ^ int(b, 2));\n              \
    \                 ^\n/tmp/tmp2l6kw4zj.java:20: error: ';' expected\n        return\
    \ bin(int(a, 2) ^ int(b, 2));\n                                  ^\n/tmp/tmp2l6kw4zj.java:20:\
    \ error: not a statement\n        return bin(int(a, 2) ^ int(b, 2));\n       \
    \                            ^\n/tmp/tmp2l6kw4zj.java:20: error: ';' expected\n\
    \        return bin(int(a, 2) ^ int(b, 2));\n                                \
    \    ^\n7 errors\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // >>> string_xor('111', '100')\n        // '011'\n\
    \        return null;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpmf540wmm.java:19)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] ret = new char[a.length()];\n        for (int\
    \ i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n\
    \                ret[i] = '0';\n            } else {\n                ret[i] =\
    \ '1';\n            }\n        }\n        return new String(ret);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // >>> int('0b110', 2)\n        // 6\n        // >>>\
    \ int('0b010', 2)\n        // 2\n        // >>> 6 ^ 2\n        // 4\n        //\
    \ >>> '{0:b}'.format(4)\n        // '100'\n        return Integer.toBinaryString(Integer.parseInt(a,\
    \ 2) ^ Integer.parseInt(b, 2));\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpieipf1ol.java:25)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                sb.append('0');\n            } else {\n                sb.append('1');\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        throw new UnsupportedOperationException(\"Not implemented\
    \ yet\");\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented yet\n\tat Problem.stringXor(tmpa9mqpeaf.java:14)\n\tat Problem.main(tmpa9mqpeaf.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Cast a and b to byte[] so that we can XOR them.\n\
    \        byte[] byte_a = a.getBytes();\n        byte[] byte_b = b.getBytes();\n\
    \        byte[] out = new byte[byte_a.length];\n        for (int i = 0; i < byte_a.length;\
    \ i++) {\n            out[i] = (byte) (byte_a[i] ^ byte_b[i]);\n        }\n  \
    \      return new String(out);\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wj7ikc0.java:24)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Note: StringBuilder is used to efficiently build\
    \ strings.\n        StringBuilder output = new StringBuilder();\n        int length\
    \ = Math.max(a.length(), b.length());\n        // Pad shorter string with zeros.\n\
    \        a = String.format(\"%0\" + length + \"d\", Integer.parseInt(a));\n  \
    \      b = String.format(\"%0\" + length + \"d\", Integer.parseInt(b));\n    \
    \    for (int i = 0; i < length; i++) {\n            // Perform XOR for current\
    \ digit.\n            if (a.charAt(i) == b.charAt(i)) {\n                output.append('0');\n\
    \            } else {\n                output.append('1');\n            }\n  \
    \      }\n        return output.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] a_chars = a.toCharArray();\n        char[] b_chars\
    \ = b.toCharArray();\n        int len = Math.max(a_chars.length, b_chars.length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ len; i++) {\n            char a_char = (i < a_chars.length) ? a_chars[i] : '0';\n\
    \            char b_char = (i < b_chars.length) ? b_chars[i] : '0';\n        \
    \    sb.append(a_char ^ b_char);\n        }\n        return sb.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            result += a.charAt(i) == b.charAt(i) ? \"0\" : \"1\";\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        byte[] ba = DatatypeConverter.parseHexBinary(a);\n \
    \       byte[] bb = DatatypeConverter.parseHexBinary(b);\n        byte[] result\
    \ = new byte[ba.length];\n        for (int i = 0; i < ba.length; i++) {\n    \
    \        result[i] = (byte) (ba[i] ^ bb[i]);\n        }\n        return new String(DatatypeConverter.printHexBinary(result));\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppom2ijo8.java:14: error: cannot find symbol\n        byte[] ba\
    \ = DatatypeConverter.parseHexBinary(a);\n                    ^\n  symbol:   variable\
    \ DatatypeConverter\n  location: class Problem\n/tmp/tmppom2ijo8.java:15: error:\
    \ cannot find symbol\n        byte[] bb = DatatypeConverter.parseHexBinary(b);\n\
    \                    ^\n  symbol:   variable DatatypeConverter\n  location: class\
    \ Problem\n/tmp/tmppom2ijo8.java:20: error: cannot find symbol\n        return\
    \ new String(DatatypeConverter.printHexBinary(result));\n                    \
    \      ^\n  symbol:   variable DatatypeConverter\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char [] ar = a.toCharArray();\n        char [] br =\
    \ b.toCharArray();\n        char [] cr = new char[ar.length];\n        for (int\
    \ i = 0; i < ar.length; i++) {\n            if (ar[i] == br[i]) {\n          \
    \      cr[i] = '0';\n            } else {\n                cr[i] = '1';\n    \
    \        }\n        }\n        return new String(cr);\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // kodirajte vas odgovor ovdje\n        int n = Math.max(a.length(),\
    \ b.length());\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < n; i++) {\n            sb.append(a.charAt(i) ^ b.charAt(i));\n  \
    \      }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // TODO: implement me!\n        return \"\";\n}\n  \
    \  public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqe3_1vd1.java:18)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] a_chars = a.toCharArray();\n        char[] b_chars\
    \ = b.toCharArray();\n        char[] res = new char[a_chars.length];\n       \
    \ for (int i = 0; i < a_chars.length; i++) {\n            res[i] = (a_chars[i]\
    \ == b_chars[i]) ? '0' : '1';\n        }\n        return new String(res);\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                result.append('0');\n            } else {\n             \
    \   result.append('1');\n            }\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Fill in your code here.\n        return null;\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpptrmw6nx.java:18)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n      String result = \"\";\n      for (int i = 0; i < a.length();\
    \ i++) {\n        result += a.charAt(i) ^ b.charAt(i);\n      }\n      return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code here\n        char[] res = new char[a.length()];\n\
    \        for (int i = 0; i < a.length(); i++) {\n            res[i] = a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1';\n        }\n        return new String(res);\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String output = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i))\n                output\
    \ += \"0\";\n            else\n                output += \"1\";\n        }\n \
    \       return output;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int length = a.length();\n        char[] xor = new char[length];\n\
    \        for (int i = 0; i < length; i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                xor[i] = '0';\n            } else {\n                xor[i]\
    \ = '1';\n            }\n        }\n        return new String(xor);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int length = Math.max(a.length(), b.length());\n   \
    \     StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < length;\
    \ i++) {\n            char chara = a.charAt(a.length() - 1 - i);\n           \
    \ char charb = b.charAt(b.length() - 1 - i);\n            buffer.append(Character.getNumericValue(chara)\
    \ ^ Character.getNumericValue(charb));\n        }\n        return buffer.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  StringBuilder strA = new StringBuilder(a);\n        StringBuilder strB = new\
    \ StringBuilder(b);\n        // Ensure that the strings are equal in length\n\
    \        if (strA.length() > strB.length()) {\n            for (int i = 0; i <\
    \ strA.length() - strB.length(); i++) {\n                strB.insert(0, \"0\"\
    );\n            }\n        } else if (strB.length() > strA.length()) {\n     \
    \       for (int i = 0; i < strB.length() - strA.length(); i++) {\n          \
    \      strA.insert(0, \"0\");\n            }\n        }\n        // Perform XOR\
    \ on two strings and append the result to the result string\n        for (int\
    \ i = 0; i < strA.length(); i++) {\n            result.append(strA.charAt(i) ==\
    \ strB.charAt(i) ? \"0\" : \"1\");\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() == 0) return b;\n        if (b.length()\
    \ == 0) return a;\n        return xor(a.charAt(0), b.charAt(0)) + stringXor(a.substring(1),\
    \ b.substring(1));\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3idg_yza.java:16: error: cannot find symbol\n        return xor(a.charAt(0),\
    \ b.charAt(0)) + stringXor(a.substring(1), b.substring(1));\n               ^\n\
    \  symbol:   method xor(char,char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // YOUR CODE HERE\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphofbczhq.java:15: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) {\n            System.out.println(\"\
    Wrong input!\");\n            return \"\";\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n   \
    \         if (a.charAt(i) == b.charAt(i)) {\n                sb.append('0');\n\
    \            } else {\n                sb.append('1');\n            }\n      \
    \  }\n        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // >>> string_xor('010', '110')\n        // '100'\n\
    \        BigInteger aBin = new BigInteger(a, 2);\n        BigInteger bBin = new\
    \ BigInteger(b, 2);\n        BigInteger cBin = aBin.xor(bBin);\n        String\
    \ c = String.format(\"%1$\" + b.length() + \"s\", cBin.toString(2)).replace('\
    \ ', '0');\n        return c;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code goes here\n        return null;\n}\n  \
    \  public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpp40rfd79.java:18)\n"
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder res = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                res.append('0');\n            } else {\n                res.append('1');\n\
    \            }\n        }\n        return res.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // TODO: write your code here...\n        if (a.length()\
    \ != b.length()) {\n            return \"\";\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n\
    \            if (a.charAt(i) == b.charAt(i)) {\n                sb.append(\"0\"\
    );\n            } else {\n                sb.append(\"1\");\n            }\n \
    \       }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int ax = Integer.parseInt(a.substring(i,\
    \ i + 1));\n            int bx = Integer.parseInt(b.substring(i, i + 1));\n  \
    \          int c = (ax == bx) ? 0 : 1;\n            sb.append(Integer.toString(c));\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i))\n                result\
    \ += \"0\";\n            else\n                result += \"1\";\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        throw new RuntimeException(\"Not implemented.\");\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented.\n\
    \tat Problem.stringXor(tmpxscma04h.java:14)\n\tat Problem.main(tmpxscma04h.java:17)\n"
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return Integer.toBinaryString(Integer.parseInt(a, 2)\
    \ ^ Integer.parseInt(b, 2));\n}\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vqi9b8v.java:17)\n"
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i)\
    \ ? '0' : '1');\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            // Get one character at\
    \ index i from both a and b.\n            char ac = a.charAt(i);\n           \
    \ char bc = b.charAt(i);\n            // XOR the characters\n            char\
    \ xor = (ac == bc) ? '0' : '1';\n            // Append the XOR char to result.\n\
    \            result.append(xor);\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Implement your solution here.\n        int min =\
    \ Math.min(a.length(), b.length());\n        String result = \"\";\n        for\
    \ (int i = 0; i < min; i++) {\n            char aChar = a.charAt(i);\n       \
    \     char bChar = b.charAt(i);\n            result += (aChar == bChar) ? \"0\"\
    \ : \"1\";\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n\tthrow new UnsupportedOperationException(\"Please implement\
    \ stringXor function\");\n}\n    public static void main(String[] args) {\n  \
    \  assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"\
    1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement stringXor function\n\tat Problem.stringXor(tmp3llbqakd.java:14)\n\t\
    at Problem.main(tmp3llbqakd.java:17)\n"
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder res = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            res.append(a.charAt(i) ^ b.charAt(i));\n\
    \        }\n        return res.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Format strings to be equal length\n        while\
    \ (a.length() < b.length()) {\n            a = \"0\" + a;\n        }\n       \
    \ while (b.length() < a.length()) {\n            b = \"0\" + b;\n        }\n \
    \       // XOR each letter in string\n        String c = \"\";\n        for (int\
    \ i = 0; i < a.length(); i++) {\n            c += (a.charAt(i) == b.charAt(i))\
    \ ? \"0\" : \"1\";\n        }\n        return c;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String ans = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                ans +=\
    \ \"0\";\n            } else {\n                ans += \"1\";\n            }\n\
    \        }\n        return ans;\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // ...\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp7ilsx7ve.java:15: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpj8ktdnrh.java:18)\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // TODO: implement stringXor()\n        return \"\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo956s2jd.java:18)\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) {\n            throw new\
    \ IllegalArgumentException(\"Strings must be of equal length.\");\n        }\n\
    \        String xorString = \"\";\n        for (int i = 0; i < a.length(); i++)\
    \ {\n            xorString += a.charAt(i) == b.charAt(i) ? \"0\" : \"1\";\n  \
    \      }\n        return xorString;\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return a;\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpegbjs_3y.java:17)\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String output = \"\";\n        char[] ac = a.toCharArray();\n\
    \        char[] bc = b.toCharArray();\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (ac[i] == bc[i]) {\n                output += \"0\";\n\
    \            } else {\n                output += \"1\";\n            }\n     \
    \   }\n        return output;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        BigInteger a_bigint = new BigInteger(a, 2);\n      \
    \  BigInteger b_bigint = new BigInteger(b, 2);\n        BigInteger xor_bigint\
    \ = a_bigint.xor(b_bigint);\n        return xor_bigint.toString(2);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq_f9sov3.java:20)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n      String ans = \"\";\n      for (int i = 0; i < a.length();\
    \ i++) {\n        ans += (a.charAt(i) == b.charAt(i)) ? \"0\" : \"1\";\n     \
    \ }\n      return ans;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char aChar = a.charAt(i);\n\
    \            char bChar = b.charAt(i);\n            sb.append(aChar == bChar ?\
    \ '0' : '1');\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i)\
    \ ? \"0\" : \"1\");\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder ret = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                ret.append('0');\n            } else {\n                ret.append('1');\n\
    \            }\n        }\n        return ret.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // a XOR b = (a AND b') OR (a' AND b)\n        // a\
    \ AND b' = 0 OR a'\n        // a' AND b = 0 OR b'\n        // 0 OR a' OR b' =\
    \ a' XOR b'\n        return complement(a).equals(b) ? \"0\" : complement(b).equals(a)\
    \ ? \"1\" : \"There was an error.\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntwdwqes.java:18: error: cannot find symbol\n        return complement(a).equals(b)\
    \ ? \"0\" : complement(b).equals(a) ? \"1\" : \"There was an error.\";\n     \
    \          ^\n  symbol:   method complement(String)\n  location: class Problem\n\
    /tmp/tmpntwdwqes.java:18: error: cannot find symbol\n        return complement(a).equals(b)\
    \ ? \"0\" : complement(b).equals(a) ? \"1\" : \"There was an error.\";\n     \
    \                                          ^\n  symbol:   method complement(String)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        byte[] aArray = a.getBytes();\n        byte[] bArray\
    \ = b.getBytes();\n        int output = 0;\n        for (int i = 0; i < aArray.length;\
    \ i++) {\n            output += ((aArray[i] ^ bArray[i]) * (int) Math.pow(10,\
    \ (aArray.length - i - 1)));\n        }\n        return Integer.toString(output);\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu4ah1cki.java:23)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int len = Math.max(a.length(), b.length());\n      \
    \  String s = \"\";\n        for (int i = 0; i < len; i++) {\n            if (a.charAt(i)\
    \ == b.charAt(i)) {\n                s += \"0\";\n            } else {\n     \
    \           s += \"1\";\n            }\n        }\n        return s;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int n = a.length();\n        if (n != b.length()) throw\
    \ new IllegalArgumentException(\"Input string lengths must be equal\");\n    \
    \    String c = \"\";\n        for (int i = 0; i < n; i++) {\n            if (a.charAt(i)\
    \ == b.charAt(i)) {\n                c += \"0\";\n            } else {\n     \
    \           c += \"1\";\n            }\n        }\n        return c;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code here.\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnuiji53n.java:15: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int n = a.length();\n        String result = \"\";\n\
    \        for (int i = 0; i < n; i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] aArray = a.toCharArray();\n        char[] bArray\
    \ = b.toCharArray();\n        char[] result = new char[aArray.length];\n     \
    \   for (int i = 0; i < aArray.length; i++) {\n            result[i] = aArray[i]\
    \ == bArray[i] ? '0' : '1';\n        }\n        return new String(result);\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int length = a.length();\n        if (length != b.length())\
    \ {\n            throw new IllegalArgumentException(\"Strings are not the same\
    \ length\");\n        }\n        char[] output = new char[length];\n        for\
    \ (int i = 0; i < length; i++) {\n            char ai = a.charAt(i);\n       \
    \     char bi = b.charAt(i);\n            if (ai == bi) {\n                output[i]\
    \ = '0';\n            } else {\n                output[i] = '1';\n           \
    \ }\n        }\n        return new String(output);\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder string = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            int index = a.charAt(i)\
    \ - '0';\n            int index2 = b.charAt(i) - '0';\n            int total =\
    \ index ^ index2;\n            string.append(total);\n        }\n        return\
    \ string.toString();\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // >>> stringXor(\"110\", \"100\")\n        // 10\n\
    \        int a1 = Integer.parseInt(a, 2);\n        int b1 = Integer.parseInt(b,\
    \ 2);\n        int result = a1 ^ b1;\n        return Integer.toBinaryString(result);\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpbf7tze.java:22)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return Arrays.stream(new long[]{Long.parseLong(a, 2),\
    \ Long.parseLong(b, 2)})\n                .reduce((a1, b1) -> a1 ^ b1)\n     \
    \           .map(Long::toBinaryString)\n                .map(s -> {\n        \
    \            StringBuilder sb = new StringBuilder();\n                    for\
    \ (int i = 0; i < s.length(); i++) {\n                        if (i == 0 && s.charAt(i)\
    \ == '-')\n                            sb.append('-');\n                     \
    \   else if (s.charAt(i) == '0')\n                            sb.append('0');\n\
    \                        else if (s.charAt(i) == '1')\n                      \
    \      sb.append('1');\n                    }\n                    return sb.toString();\n\
    \                })\n                .orElse(\"0\");\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0p7zxejq.java:16: error: cannot find symbol\n                .map(Long::toBinaryString)\n\
    \                ^\n  symbol:   method map(Long::toBi[...]tring)\n  location:\
    \ class OptionalLong\n1 error\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        byte[] bytes1 = a.getBytes();\n        byte[] bytes2\
    \ = b.getBytes();\n        byte[] result = new byte[Math.max(bytes1.length, bytes2.length)];\n\
    \        for (int i = 0; i < result.length; i++) {\n            result[i] = (byte)\
    \ (((int) bytes1[i % bytes1.length] ^ (int) bytes2[i % bytes2.length]));\n   \
    \     }\n        return new String(result);\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbctrfusx.java:23)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                sb.append('0');\n            } else {\n                sb.append('1');\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int n = a.length();\n        int m = b.length();\n \
    \       if (n != m) {\n            throw new RuntimeException(\"Invalid inputs\"\
    );\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < n; i++) {\n            int c = a.charAt(i) ^ b.charAt(i);\n     \
    \       sb.append(c);\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        //a = \"abcd\"\n        //b = \"xyz\"\n        String\
    \ ans = \"\";\n        int len_a = a.length();\n        int len_b = b.length();\n\
    \        if (len_a < len_b) {\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < len_b - len_a; i++) {\n                sb.append(\"\
    0\");\n            }\n            sb.append(a);\n            a = sb.toString();\n\
    \        } else if (len_b < len_a) {\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 0; i < len_a - len_b; i++) {\n                sb.append(\"\
    0\");\n            }\n            sb.append(b);\n            b = sb.toString();\n\
    \        }\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i)\
    \ == b.charAt(i)) {\n                ans += \"0\";\n            } else {\n   \
    \             ans += \"1\";\n            }\n        }\n        return ans;\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        throw new UnsupportedOperationException(\"Not implemented\
    \ yet.\");\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented yet.\n\tat Problem.stringXor(tmpokuvpr4i.java:14)\n\tat Problem.main(tmpokuvpr4i.java:17)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length())\n            throw new\
    \ IllegalArgumentException(\"invalid length\");\n        // TODO: Implement\n\
    \        char[] a1 = a.toCharArray();\n        char[] b1 = b.toCharArray();\n\
    \        StringBuilder ret = new StringBuilder();\n        for (int i = 0; i <\
    \ a1.length; i++) {\n            if (a1[i] == b1[i]) {\n                ret.append(\"\
    0\");\n            } else {\n                ret.append(\"1\");\n            }\n\
    \        }\n        return ret.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Check for invalid inputs\n        if (a == null ||\
    \ b == null) return null;\n        if (a.length() != b.length()) return null;\n\
    \        char[] chars = new char[a.length()];\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            chars[i] = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n \
    \       }\n        return String.valueOf(chars);\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String res = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                res +=\
    \ \"0\";\n            } else {\n                res += \"1\";\n            }\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        BigInteger c = new BigInteger(a, 2);\n        BigInteger\
    \ d = new BigInteger(b, 2);\n        BigInteger e = c.xor(d);\n        return\
    \ e.toString(2);\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsnmfm8qq.java:20)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // <<< (your solution goes here)\n        BigInteger\
    \ x = new BigInteger(a, 2);\n        BigInteger y = new BigInteger(b, 2);\n  \
    \      BigInteger z = x.xor(y);\n        return z.toString(2);\n        // >>>\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcuckmq24.java:22)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                result.append('0');\n            } else {\n             \
    \   result.append('1');\n            }\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Insert code here!\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjmngtv8z.java:18)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] a_char = a.toCharArray();\n        char[] b_char\
    \ = b.toCharArray();\n        int n = a_char.length;\n        char[] res = new\
    \ char[n];\n        for (int i = 0; i < n; i++) {\n            if (a_char[i] ==\
    \ b_char[i]) {\n                res[i] = '0';\n            } else {\n        \
    \        res[i] = '1';\n            }\n        }\n        return new String(res);\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder res = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\n\
    \                res.append('0');\n            else\n                res.append('1');\n\
    \        }\n        return res.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Implement this placeholder.\n        return \"\"\
    ;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2z9xy_7p.java:18)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n\tStringBuilder sb = new StringBuilder();\n\tfor (int i = 0;\
    \ i < a.length(); i++) {\n\t    sb.append(a.charAt(i) == b.charAt(i) ? '0' : '1');\n\
    \t}\n\treturn sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int min_len = a.length() < b.length() ? a.length() :\
    \ b.length();\n        StringBuilder res = new StringBuilder();\n        for (int\
    \ i = 0; i < min_len; i++) {\n            res.append(a.charAt(i) == b.charAt(i)\
    \ ? '0' : '1');\n        }\n        return res.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i)\
    \ ? '0' : '1');\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // your code here.\n        return a;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0c8f709k.java:18)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Note: string a and b will have the same length.\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.length(); i++) {\n            sb.append(a.charAt(i) ^ b.charAt(i));\n    \
    \    }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int c = 0;\n        int[] res = new int[a.length()];\n\
    \        for (int i = a.length() - 1; i >= 0; i--) {\n            if (a.charAt(i)\
    \ == '1' && b.charAt(i) == '1') {\n                res[i] = c;\n             \
    \   c = 1;\n            } else if (a.charAt(i) == '1' || b.charAt(i) == '1') {\n\
    \                res[i] = c ^ 1;\n            } else {\n                res[i]\
    \ = c;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < res.length; i++) {\n            sb.append(res[i]);\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolrkw4xt.java:33)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] res = new char[a.length()];\n        for (int\
    \ i = 0; i < a.length(); i++) {\n            res[i] = a.charAt(i) == b.charAt(i)\
    \ ? '0' : '1';\n        }\n        return new String(res);\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) {\n            throw new\
    \ IllegalArgumentException(\"Strings must be of same length\");\n        }\n \
    \       String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n\
    \            result += (a.charAt(i) == b.charAt(i)) ? \"0\" : \"1\";\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return a.replace(\"0\", \"2\").replace(\"1\", \"0\"\
    ).replace(\"2\", \"1\")\n                .replace(\"0\", \"2\").replace(\"1\"\
    , \"0\").replace(\"2\", \"1\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32ndvp68.java:18)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // TODO\n        return \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmyapk9v_.java:18)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code here\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt179hyn9.java:18)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n\t// TODO: Implement this function\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n   \
    \         if (a.charAt(i) == b.charAt(i)) {\n                sb.append('0');\n\
    \            } else {\n                sb.append('1');\n            }\n      \
    \  }\n        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        assert a.length() == b.length();\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++)\
    \ {\n            result.append(a.charAt(i) == b.charAt(i) ? '0' : '1');\n    \
    \    }\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i)\
    \ ? \"0\" : \"1\");\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i)\
    \ ? \"0\" : \"1\");\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int len = Math.max(a.length(), b.length());\n      \
    \  StringBuilder r = new StringBuilder();\n        for (int i = 0; i < len; i++)\
    \ {\n            int x = i < a.length() ? (a.charAt(i) - '0') : 0;\n         \
    \   int y = i < b.length() ? (b.charAt(i) - '0') : 0;\n            r.append(x\
    \ ^ y);\n        }\n        return r.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) throw new IllegalArgumentException(\"\
    Strings must be of same length.\");\n        String[] aa = a.split(\"\");\n  \
    \      String[] bb = b.split(\"\");\n        String result = \"\";\n        for\
    \ (int i = 0; i < aa.length; i++) {\n            String aa_i = aa[i];\n      \
    \      String bb_i = bb[i];\n            if (aa_i.equals(bb_i)) {\n          \
    \      result += \"0\";\n            } else {\n                result += \"1\"\
    ;\n            }\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] c = new char[a.length()];\n        for (int i\
    \ = 0; i < a.length(); i++) {\n            c[i] = a.charAt(i) == b.charAt(i) ?\
    \ '0' : '1';\n        }\n        return new String(c);\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code here.\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\";\n        int i = 0;\n        while\
    \ (i < a.length()) {\n            if (a.charAt(i) == b.charAt(i)) {\n        \
    \        result += \"0\";\n            } else {\n                result += \"\
    1\";\n            }\n            i++;\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                sb.append('0');\n            } else {\n                sb.append('1');\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int n = a.length();\n        int m = b.length();\n \
    \       if (n != m) {\n            return \"\";\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n         \
    \   char c1 = a.charAt(i);\n            char c2 = b.charAt(i);\n            if\
    \ (c1 == c2) {\n                sb.append('0');\n            } else {\n      \
    \          sb.append('1');\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result\
    \ += \"0\";\n            } else {\n                result += \"1\";\n        \
    \    }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) {\n            throw new\
    \ IllegalArgumentException();\n        }\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i)\
    \ == b.charAt(i) ? \"0\" : \"1\");\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int[] aa = new int[a.length()];\n        int[] bb =\
    \ new int[b.length()];\n        for (int i = 0; i < a.length(); i++)\n       \
    \     aa[i] = a.charAt(i) - '0';\n        for (int i = 0; i < b.length(); i++)\n\
    \            bb[i] = b.charAt(i) - '0';\n        return Arrays.toString(stringXor(aa,\
    \ bb));\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp536lwdkr.java:20: error: incompatible types: int[] cannot be converted\
    \ to String\n        return Arrays.toString(stringXor(aa, bb));\n            \
    \                             ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i)\
    \ ? '0' : '1');\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Fill in your code here\n        return \"\";\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22zp3ody.java:18)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) {\n            throw new\
    \ IllegalArgumentException(\"Strings are not the same length\");\n        }\n\
    \        StringBuilder result = new StringBuilder();\n        for (int i = 0;\
    \ i < a.length(); i++) {\n            result.append(a.charAt(i) ^ b.charAt(i));\n\
    \        }\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return IntStream.range(0, a.length())\n            .mapToObj(i\
    \ -> {\n                return a.charAt(i) == b.charAt(i) ? \"0\" : \"1\";\n \
    \           })\n            .collect(Collectors.joining());\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpvecn7fii.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int n = a.length();\n        int m = b.length();\n \
    \       if (n < m) return stringXor(b, a);\n\n        String ans = \"\";\n   \
    \     for (int i = 0; i < n; i++) {\n            int a_i = a.charAt(i) - '0';\n\
    \            int b_i = 0;\n            if (i < m) b_i = b.charAt(i) - '0';\n \
    \           ans += (a_i ^ b_i);\n        }\n        return ans;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i)\
    \ ^ b.charAt(i));\n        }\n        return result.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code goes here.\n        char[] cA = a.toCharArray();\n\
    \        char[] cB = b.toCharArray();\n        char[] cC = new char[cA.length];\n\
    \        for (int i = 0; i < cA.length; i++) {\n            cC[i] = (cA[i] ==\
    \ cB[i]) ? '0' : '1';\n        }\n        return new String(cC);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int n = a.length();\n        String result = \"\";\n\
    \        for (int i = 0; i < n; i++) {\n            if (a.charAt(i) == b.charAt(i))\n\
    \                result += \"0\";\n            else\n                result +=\
    \ \"1\";\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Use bitwise XOR on each bit, taking a long integer\n\
    \        long x = new BigInteger(a, 2).longValue();\n        long y = new BigInteger(b,\
    \ 2).longValue();\n        long result = x ^ y;\n        return Long.toBinaryString(result);\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpog5q46t3.java:21)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) {\n            throw new\
    \ IllegalArgumentException(\"Strings must be of equal length\");\n        }\n\
    \        String res = \"\";\n        for (int i = 0; i < a.length(); i++) {\n\
    \            char ax = a.charAt(i);\n            char bx = b.charAt(i);\n    \
    \        res += (ax == bx) ? \"0\" : \"1\";\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuffer sb = new StringBuffer();\n        int n\
    \ = a.length();\n        if (n != b.length()) {\n            return null;\n  \
    \      }\n        for (int i = 0; i < n; i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Java strings are immutable so we have to first convert\
    \ them to\n        // character arrays.\n        char[] aArray = a.toCharArray();\n\
    \        char[] bArray = b.toCharArray();\n        // Assume input strings are\
    \ of same length.\n        char[] out = new char[aArray.length];\n        for\
    \ (int i = 0; i < aArray.length; i++) {\n            // XOR each digit. If both\
    \ digits are 1 or both digits are 0,\n            // XOR evaluates to 0. If one\
    \ digit is 0 and the other is 1,\n            // XOR evaluates to 1.\n       \
    \     out[i] = (char)(((int)aArray[i] ^ (int)bArray[i]) + 48);\n        }\n  \
    \      return new String(out);\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // >>> int('111', 2)\n        // 7\n        // >>> bin(7)\n\
    \        // '0b111'\n        return Integer.toBinaryString(Integer.parseInt(a,\
    \ 2) ^ Integer.parseInt(b, 2));\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppirdzrr7.java:21)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Fill in the missing code\n        String r=\"\";\n\
    \        for(int i=0;i<a.length();i++){\n            int ai=a.charAt(i)-'0';\n\
    \            int bi=b.charAt(i)-'0';\n            if(ai^bi==1)\n             \
    \   r+=\"1\";\n            else\n                r+=\"0\";\n        }\n      \
    \  return r;\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp878m3sub.java:19: error: bad operand types for binary operator\
    \ '^'\n            if(ai^bi==1)\n                 ^\n  first type:  int\n  second\
    \ type: boolean\n1 error\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // use Java's charAt and char to work with binary data\n\
    \        // and perform string concatenation\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpies9zkp0.java:19)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length())\n            throw new\
    \ IllegalArgumentException(\"Inputs must be of equal length.\");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n\
    \            char c = a.charAt(i);\n            char d = b.charAt(i);\n      \
    \      if (c == d)\n                sb.append('0');\n            else\n      \
    \          sb.append('1');\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] res = new char[a.length()];\n        for (int\
    \ i = 0; i < a.length(); i++) {\n            res[i] = (a.charAt(i) == b.charAt(i))\
    \ ? '0' : '1';\n        }\n        return new String(res);\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder a1 = new StringBuilder(a);\n        StringBuilder\
    \ b1 = new StringBuilder(b);\n        while (a1.length() > b1.length()) {\n  \
    \          b1.insert(0, '0');\n        }\n        while (b1.length() > a1.length())\
    \ {\n            a1.insert(0, '0');\n        }\n        StringBuilder res = new\
    \ StringBuilder();\n        for (int i = 0; i < a1.length(); i++) {\n        \
    \    res.append(a1.charAt(i) == b1.charAt(i) ? '0' : '1');\n        }\n      \
    \  return res.toString();\n}\n    public static void main(String[] args) {\n \
    \   assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"\
    1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // XOR-ing two same characters results in 0.\n     \
    \   // XOR-ing two different characters results in 1.\n        // Thus, we can\
    \ XOR two characters and add them to result.\n        String res = \"\";\n   \
    \     for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i))\
    \ {\n                res += \"0\";\n            } else {\n                res\
    \ += \"1\";\n            }\n        }\n        return res;\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length()) {\n            throw new\
    \ IllegalArgumentException(\"Strings must be of same length\");\n        }\n \
    \       char[] chars = new char[a.length()];\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            chars[i] = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n \
    \       }\n        return String.valueOf(chars);\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            char aChar = a.charAt(i);\n\
    \            char bChar = b.charAt(i);\n            if (aChar == bChar) {\n  \
    \              result.append(\"0\");\n            } else {\n                result.append(\"\
    1\");\n            }\n        }\n        return result.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Write your code here\n        int n = a.length();\n\
    \        StringBuilder ans = new StringBuilder();\n        for(int i = 0; i <\
    \ n; i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                ans.append('0');\n\
    \            } else {\n                ans.append('1');\n            }\n     \
    \   }\n        return ans.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Your code goes here.\n        return null;\n}\n \
    \   public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmp8rcam_2m.java:18)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            result += String.valueOf(a.charAt(i) ^ b.charAt(i));\n \
    \       }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return Arrays.stream(a.split(\"\"))\n            .map(s\
    \ -> (Integer.parseInt(s) ^ Integer.parseInt(b.split(\"\")[b.split(\"\").length\
    \ - 1 - a.split(\"\").length + 1 + Arrays.asList(a.split(\"\")).indexOf(s)]))\
    \ == 1 ? \"1\" : \"0\")\n            .collect(Collectors.joining());\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1k5jqe0.java:19)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        if (a.length() != b.length())\n            throw new\
    \ IllegalArgumentException(\"String lengths are not equal.\");\n        // >>>\
    \ binary_xor(0b10, 0b11)\n        // 0b01\n        // >>> bin(binary_xor(0b10,\
    \ 0b11))\n        // '0b1'\n        // >>> bin(binary_xor(0b10, 0b11))[2:]\n \
    \       // '1'\n        return Integer.toBinaryString(Integer.parseInt(a, 2) ^\
    \ Integer.parseInt(b, 2));\n}\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhyitpqw.java:25)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int len = a.length();\n        if (b.length() != len)\n\
    \            throw new RuntimeException(\"Input strings must be of equal length.\"\
    );\n        StringBuilder out = new StringBuilder();\n        for (int i = 0;\
    \ i < len; i++) {\n            if (a.charAt(i) == b.charAt(i))\n             \
    \   out.append('0');\n            else\n                out.append('1');\n   \
    \     }\n        return out.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n\tchar[] a_chars = a.toCharArray();\n\tchar[] b_chars = b.toCharArray();\n\
    \tint a_length = a_chars.length;\n\tint b_length = b_chars.length;\n\tchar[] result\
    \ = new char[Math.max(a_length, b_length)];\n\tfor (int i = 0; i < result.length;\
    \ i++) {\n\t    if (i >= a_length)\n\t\tresult[i] = b_chars[i];\n\t    else if\
    \ (i >= b_length)\n\t\tresult[i] = a_chars[i];\n\t    else\n\t\tresult[i] = (a_chars[i]\
    \ == b_chars[i]) ? '0' : '1';\n\t}\n\treturn new String(result);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Implement your solution here.\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringXor(String,\
    \ String)\" is null\n\tat Problem.main(tmpk2yhfuyk.java:18)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        String r = \"\";\n        for (int i = 0; i < a.length();\
    \ i++) {\n            r += a.charAt(i) == b.charAt(i) ? \"0\" : \"1\";\n     \
    \   }\n        return r;\n}\n    public static void main(String[] args) {\n  \
    \  assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"\
    1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n      byte[] bytea = a.getBytes();\n      byte[] byteb = b.getBytes();\n\
    \      byte[] bytec = new byte[bytea.length];\n      for (int i = 0; i < bytea.length;\
    \ i++) {\n        bytec[i] = (byte) (bytea[i] ^ byteb[i]);\n      }\n      return\
    \ new String(bytec);\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5t0n9lj.java:23)\n"
  stdout: ''
  timestamp: 1660010709
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar\
    \ = b.toCharArray();\n        if (aChar.length != bChar.length) {\n          \
    \  throw new IllegalArgumentException(\"Inputs must be the same length\");\n \
    \       }\n        char[] result = new char[aChar.length];\n        for (int i\
    \ = 0; i < aChar.length; i++) {\n            result[i] = (aChar[i] == bChar[i])\
    \ ? '0' : '1';\n        }\n        return new String(result);\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        BigInteger aB = new BigInteger(a, 2);\n        BigInteger\
    \ bB = new BigInteger(b, 2);\n        BigInteger xor = aB.xor(bB);\n        return\
    \ xor.toString(2);\n}\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzu1jyfx.java:20)\n"
  stdout: ''
  timestamp: 1660010709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ql2b4u0.java:17)\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        // Write code here.\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpgrx0w0yx.java:15: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        int la = a.length();\n        int lb = b.length();\n\
    \        if (la > lb) {\n            b = (\"0\".repeat(la - lb)) + b;\n      \
    \  } else if (lb > la) {\n            a = (\"0\".repeat(lb - la)) + a;\n     \
    \   }\n        int n = a.length();\n        String result = \"\";\n        for\
    \ (int i = 0; i < n; i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
