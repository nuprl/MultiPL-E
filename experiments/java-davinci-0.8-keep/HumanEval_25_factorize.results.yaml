language: java
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       int v = 2;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        while (n >= v) {\n            if (n % v == 0) {\n                result.add(v);\n\
    \                n /= v;\n            } else {\n                v += 1;\n    \
    \        }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int c\
    \ = 2;\n        while (n>1) {\n            while (n%c==0) {\n                factors.add(c);\n\
    \                n = n/c;\n            }\n            c++;\n        }\n      \
    \  return factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int curr = 2;\n \
    \       while (n != 1) {\n            if (n % curr == 0) {\n                res.add(curr);\n\
    \                n /= curr;\n            } else {\n                curr++;\n \
    \           }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        // Write\
    \ your code here.\n        int i=2;\n        while(n>1){\n            if(n%i==0){\n\
    \                factors.add(i);\n                n=n/i;\n            }\n    \
    \        else\n                i++;\n        }\n        return factors;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> f = new ArrayList<Integer>();\n        while (n % 2\
    \ == 0) {\n            f.add(2);\n            n /= 2;\n        }\n        for\
    \ (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                f.add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 2)\n            f.add(n);\n        return f;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       if (n != 1) {\n            factors.add(n);\n        }\n        return\
    \ factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int n1\
    \ = n;\n        while (n1 % 2 == 0) {\n            factors.add(2);\n         \
    \   n1 /= 2;\n        }\n        int f = 3;\n        while (f * f <= n1) {\n \
    \           if (n1 % f == 0) {\n                factors.add(f);\n            \
    \    n1 /= f;\n            } else {\n                f += 2;\n            }\n\
    \        }\n        if (n1 > 1) {\n            factors.add(n1);\n        }\n \
    \       return factors;\n}\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n\
    \ == 1) {\n            factors.add(1);\n            return factors;\n        }\n\
    \        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n      \
    \          factors.add(i);\n                for (int j = 2; j <= n / i; j++) {\n\
    \                    factors.add(i);\n                }\n                return\
    \ factors;\n            }\n        }\n        return factors;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3rb0xv53.java:36)\n"
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int number\
    \ = n;\n        int divisor = 2;\n        while (number > 1) {\n            while\
    \ (number % divisor == 0) {\n                result.add(divisor);\n          \
    \      number /= divisor;\n            }\n            divisor += 1;\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int curr\
    \ = n;\n        for (int i = 2; i <= n; i++) {\n            if (curr % i == 0)\
    \ {\n                factors.add(i);\n                curr /= i;\n           \
    \     i = 1;\n            }\n        }\n        return factors;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int i\
    \ = 2;\n        int rest = n;\n        while (rest > 1) {\n            if (rest\
    \ % i == 0) {\n                factors.add(i);\n                rest /= i;\n \
    \           } else {\n                i++;\n            }\n        }\n       \
    \ return factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int cur = 2;\n  \
    \      while (n != 1) {\n            if (n % cur == 0) {\n                res.add(cur);\n\
    \                n /= cur;\n            } else {\n                cur++;\n   \
    \         }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int index\
    \ = 0;\n        while (n != 1) {\n            int factor = prime(index);\n   \
    \         if (n % factor == 0) {\n                result.add(factor);\n      \
    \          n /= factor;\n            } else {\n                index++;\n    \
    \        }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi33xhplq.java:22: error: cannot find symbol\n            int factor\
    \ = prime(index);\n                         ^\n  symbol:   method prime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int i =\
    \ 2;\n        while (n > 1) {\n            while (n % i == 0) {\n            \
    \    result.add(i);\n                n /= i;\n            }\n            i++;\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        // TODO: your code\
    \ goes here\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2yzdd7u.java:24)\n"
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        // Insert\
    \ your code here.\n        int input = n;\n        int temp = 2;\n        while(n\
    \ != 1){\n            if(n % temp == 0){\n                result.add(temp);\n\
    \                n = n / temp;\n            }else{\n                temp += 1;\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  factors.add(i);\n                n /= i;\n            }\n        }\n      \
    \  if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // Assume that n > 0\n        ArrayList<Integer> primeFactors = new ArrayList<Integer>();\n\
    \        int p = 2;\n        while (n != 1) {\n            while (n % p == 0)\
    \ {\n                primeFactors.add(p);\n                n /= p;\n         \
    \   }\n            p++;\n        }\n        return primeFactors;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int temp = n;\n \
    \       int stop = (int)Math.sqrt(n);\n        for (int i = 2; i <= stop; i++)\
    \ {\n            while (temp % i == 0) {\n                res.add(i);\n      \
    \          temp /= i;\n            }\n        }\n        if (temp != 1) res.add(temp);\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> answer = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                answer.add(i);\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return answer;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factorization = new ArrayList<Integer>();\n       \
    \ for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n            \
    \    factorization.add(i);\n                n /= i;\n                i--;\n  \
    \          }\n        }\n        return factorization;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        while\
    \ (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n\
    \        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n %\
    \ i == 0) {\n                factors.add(i);\n                n /= i;\n      \
    \      }\n        }\n        if (n > 2) {\n            factors.add(n);\n     \
    \   }\n        return factors;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       assert n > 0;\n        ArrayList<Integer> ans = new ArrayList<>();\n \
    \       for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n   \
    \             ans.add(i);\n                n /= i;\n            }\n        }\n\
    \        return ans;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        if (n <\
    \ 1) return result;\n        for (int i = 2; i * i <= n; i++) {\n            while\
    \ (n % i == 0) {\n                result.add(i);\n                n /= i;\n  \
    \          }\n        }\n        if (n > 1) result.add(n);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ret;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> f = new ArrayList<Integer>();\n        while (n % 2\
    \ == 0) {\n            f.add(2);\n            n /= 2;\n        }\n        int\
    \ i = 3;\n        while (i <= Math.sqrt(n)) {\n            while (n % i == 0)\
    \ {\n                f.add(i);\n                n /= i;\n            }\n     \
    \       i += 2;\n        }\n        if (n > 2) {\n            f.add(n);\n    \
    \    }\n        return f;\n}\n    public static void main(String[] args) {\n \
    \   assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n\
    \ == 1) {\n            factors.add(1);\n            return factors;\n        }\n\
    \        //Assume n is even.\n        while (n % 2 == 0) {\n            factors.add(2);\n\
    \            n /= 2;\n        }\n        // n must be odd at this point.  So we\
    \ can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            // While i divides n, print i and divide n\n        \
    \    while (n % i == 0) {\n                factors.add(i);\n                n\
    \ /= i;\n            }\n        }\n        // This condition is to handle the\
    \ case when n is a prime number greater than 2\n        if (n > 2)\n         \
    \   factors.add(n);\n        return factors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        // >>>\
    \ your code here <<<\n        int num = n;\n        for (int i = 2; i <= num;\
    \ i++) {\n            if (num % i == 0) {\n                factors.add(i);\n \
    \               num /= i;\n                i--;\n            }\n        }\n  \
    \      return factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factorization = new ArrayList<Integer>();\n       \
    \ if (n == 1) {\n            factorization.add(1);\n            return factorization;\n\
    \        }\n        int i = 2;\n        while (n != 1) {\n            while (n\
    \ % i == 0) {\n                factorization.add(i);\n                n /= i;\n\
    \            }\n            i++;\n        }\n        return factorization;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // Put your solution here\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmpkit8kqic.java:23)\n"
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        while (n %\
    \ 2 == 0) {\n            ret.add(2);\n            n /= 2;\n        }\n       \
    \ for (int i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n  \
    \              ret.add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 2) {\n            ret.add(n);\n        }\n        return ret;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       if (n == 1) {\n            return new ArrayList<>();\n        }\n    \
    \    int primeFactor = 0;\n        while (n % 2 == 0) {\n            primeFactor\
    \ = 2;\n            n /= 2;\n        }\n        if (n == 1) {\n            return\
    \ new ArrayList<>(Arrays.asList(primeFactor));\n        }\n        int sqrt =\
    \ (int) Math.sqrt(n);\n        for (int k = 3; k <= sqrt; k += 2) {\n        \
    \    while (n % k == 0) {\n                primeFactor = k;\n                n\
    \ /= k;\n            }\n        }\n        if (n == 1) {\n            return new\
    \ ArrayList<>(Arrays.asList(primeFactor));\n        }\n        return new ArrayList<>(Arrays.asList(primeFactor,\
    \ n));\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo914wcpz.java:44)\n"
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        while (n % 2 == 0)\
    \ {\n            res.add(2);\n            n /= 2;\n        }\n        int m =\
    \ (int) Math.sqrt(n);\n        for (int i = 3; i <= m; i += 2) {\n           \
    \ while (n % i == 0) {\n                res.add(i);\n                n /= i;\n\
    \            }\n        }\n        if (n > 1) res.add(n);\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        // WRITE\
    \ YOUR CODE HERE\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdxsm6mi8.java:24)\n"
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> a = new ArrayList<Integer>();\n        int r = (int)\
    \ Math.sqrt(n);\n        for (int i = 2; i <= r; i++) {\n            while (n\
    \ % i == 0) {\n                a.add(i);\n                n /= i;\n          \
    \  }\n        }\n        if (n > 1) {\n            a.add(n);\n        }\n    \
    \    return a;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        while (n % 2 == 0)\
    \ {\n            res.add(2);\n            n /= 2;\n        }\n        for (int\
    \ i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n           \
    \     res.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n > 2) {\n            res.add(n);\n        }\n        return res;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int result\
    \ = n;\n        while (result > 1) {\n            int new_result = result;\n \
    \           for (int i = 2; i < result; i++) {\n                if (result % i\
    \ == 0) {\n                    new_result = result / i;\n                    factors.add(i);\n\
    \                    break;\n                }\n            }\n            if\
    \ (new_result == result) {\n                factors.add(result);\n           \
    \     break;\n            }\n            result = new_result;\n        }\n   \
    \     return factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ret;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        while (n % 2 == 0)\
    \ {\n            res.add(2);\n            n /= 2;\n        }\n        for (int\
    \ i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n           \
    \     res.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n > 2) res.add(n);\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // your code here\n}\n    public static void main(String[] args) {\n \
    \   assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpjc8se4q9.java:20: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ans = new ArrayList<>();\n        //Start your code\
    \ from here\n        for(int i=2;i<=n;i++){\n          if(n%i==0){\n         \
    \   ans.add(i);\n            n=n/i;\n            i--;\n          }\n        }\n\
    \        return ans;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // Enter your code here\n        int x = 2;\n        ArrayList<Integer>\
    \ factors = new ArrayList<Integer>();\n        while (n > 1) {\n            while\
    \ (n % x == 0) {\n                factors.add(x);\n                n /= x;\n \
    \           }\n            x += 1;\n        }\n        return factors;\n}\n  \
    \  public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  factors.add(i);\n                n /= i;\n            }\n        }\n      \
    \  if (n > 1)\n            factors.add(n);\n        return factors;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ res.add(factor);\n                n /= factor;\n            } else {\n     \
    \           factor++;\n            }\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        // code\
    \ here\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5uju3pz0.java:24)\n"
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factor = new ArrayList<Integer>();\n        for (int\
    \ divisor = 2; n > 1; divisor++) {\n            while (n % divisor == 0) {\n \
    \               factor.add(divisor);\n                n /= divisor;\n        \
    \    }\n        }\n        return factor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        // fill\
    \ in code here\n        return factors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgi5dlbdi.java:24)\n"
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor += 1;\n        }\n        return factors;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int i =\
    \ 2;\n        while (n >= i * i) {\n            if (n % i == 0) {\n          \
    \      result.add(i);\n                n /= i;\n            } else {\n       \
    \         i++;\n            }\n        }\n        result.add(n);\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // Use the integer factorization algorithm by trial division (i.e. try\
    \ dividing by smallest prime)\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n\
    \        while (n > 1) {\n            for (int i = 2; i <= n; i++) {\n       \
    \         if (isPrime(i) && n % i == 0) {\n                    factors.add(i);\n\
    \                    n /= i;\n                    break;\n                }\n\
    \            }\n        }\n        return factors;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp__nig17z.java:23: error: cannot find symbol\n                if\
    \ (isPrime(i) && n % i == 0) {\n                    ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor += 1;\n        }\n        return factors;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n\
    \                results.add(i);\n                i--;\n            }\n      \
    \  }\n        return results;\n}\n    public static void main(String[] args) {\n\
    \    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i\
    \ * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // ToDo: Write your code here\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmpprhy689s.java:23)\n"
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int divisor\
    \ = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n    \
    \            result.add(divisor);\n                n /= divisor;\n           \
    \ }\n            divisor++;\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int x\
    \ = n;\n        for (int i = 2; i <= x; i++) {\n            while (x % i == 0)\
    \ {\n                factors.add(i);\n                x /= i;\n            }\n\
    \        }\n        return factors;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int lastFactor =\
    \ 2;\n        while (n > 1) {\n            if (n % lastFactor == 0) {\n      \
    \          res.add(lastFactor);\n                n /= lastFactor;\n          \
    \  } else {\n                lastFactor += 1;\n            }\n        }\n    \
    \    return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // This solution is soooooo slow, you can do better!\n        ArrayList<Integer>\
    \ factors = new ArrayList<Integer>();\n        if (n <= 1) {\n            return\
    \ factors;\n        }\n        int prime = 2;\n        while (prime <= n) {\n\
    \            if (n % prime == 0) {\n                factors.add(prime);\n    \
    \            n /= prime;\n            } else {\n                prime++;\n   \
    \         }\n        }\n        return factors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int p = 2; p\
    \ * p <= n; p++) {\n            while (n % p == 0) {\n                res.add(p);\n\
    \                n /= p;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i*i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) res.add(n);\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  result.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n > 1) {\n            result.add(n);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // your code\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmp2urjq5je.java:23)\n"
  stdout: ''
  timestamp: 1660011337
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i =\
    \ 2; i <= n; i++) {\n            if (isPrime(i)) {\n                while (n %\
    \ i == 0) {\n                    r.add(i);\n                    n /= i;\n    \
    \            }\n            }\n        }\n        return r;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgnr5jodo.java:21: error: cannot find symbol\n            if (isPrime(i))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                ans.add(i);\n \
    \               n /= i;\n                i--;\n            }\n        }\n    \
    \    return ans;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factorization = new ArrayList<Integer>();\n       \
    \ int[] numArr = new int[n];\n        for (int i = 2; i <= n; i++) {\n       \
    \     if (numArr[i - 1] == 0) {\n                for (int j = i; j <= n; j +=\
    \ i) {\n                    numArr[j - 1] = i;\n                }\n          \
    \  }\n        }\n        int[] count = new int[n];\n        for (int i = 2; i\
    \ <= n; i++) {\n            int fac = numArr[i - 1];\n            if (fac == 0)\
    \ {\n                factorization.add(i);\n            } else {\n           \
    \     int cnt = count[i - 1];\n                while (i % fac == 0) {\n      \
    \              i /= fac;\n                    cnt++;\n                }\n    \
    \            count[i - 1] = cnt;\n                while (cnt-- > 0) {\n      \
    \              factorization.add(fac);\n                }\n            }\n   \
    \     }\n        return factorization;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        int i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return ret;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011338
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int p\
    \ = 2;\n        while (n > 1) {\n            if (n % p == 0) {\n             \
    \   factors.add(p);\n                n /= p;\n            } else {\n         \
    \       p++;\n            }\n        }\n        return factors;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> f = new ArrayList<Integer>();\n        if (n == 1)\
    \ {\n            f.add(1);\n            return f;\n        }\n        int factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           f.add(factor);\n                n /= factor;\n            }\n    \
    \        factor += 1;\n        }\n        return f;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // ---------------------- BEGIN SOLUTION -----------------------\n   \
    \     ArrayList<Integer> result = new ArrayList<>();\n        if (n == 1) {\n\
    \            result.add(1);\n            return result;\n        }\n        int\
    \ last_prime = 0;\n        while (n != 1) {\n            int divisor = 2;\n  \
    \          if (last_prime != 0) divisor = last_prime;\n            for (; divisor\
    \ <= n; divisor++) {\n                if (n % divisor == 0) {\n              \
    \      n /= divisor;\n                    result.add(divisor);\n             \
    \       last_prime = divisor;\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n        // -----------------------\
    \ END SOLUTION ------------------------\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011338
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int curr = 2;\n \
    \       while (n > 1) {\n            if (n % curr == 0) {\n                res.add(curr);\n\
    \                n /= curr;\n            } else {\n                curr++;\n \
    \           }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011338
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int i =\
    \ 2;\n        while (n > 1) {\n            if (n % i == 0) {\n               \
    \ result.add(i);\n                n /= i;\n            } else {\n            \
    \    i++;\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       int d = 2;\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d = d + 1;\n            if\
    \ (d * d > n) {\n                if (n > 1) {\n                    factors.add(n);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // NOTE:\n        // Given integer n will be non-negative, non-zero number\n\
    \        // Your algorithm should run in O(nlog(n)) time complexity\n        //\n\
    \        // NOTE:\n        // There are no tests for this problem so do not worry\
    \ about testing\n        // You are free to use any text editor and programming\
    \ language to solve this problem\n        // You can add any helper functions,\
    \ but they should be declared and implemented within this file\n        ArrayList<Integer>\
    \ factors = new ArrayList<Integer>();\n        int count = 0;\n        for (int\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                count\
    \ = 0;\n                while (n % i == 0) {\n                    count++;\n \
    \                   n /= i;\n                }\n                for (int j = 0;\
    \ j < count; j++) {\n                    factors.add(i);\n                }\n\
    \            }\n        }\n        return factors;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       if (n == 1) return new ArrayList<>();\n        if (n == 2) return new\
    \ ArrayList<>(Arrays.asList(2));\n        int c = 2;\n        ArrayList<Integer>\
    \ r = new ArrayList<>();\n        while (n != 1) {\n            if (n % c == 0)\
    \ {\n                r.add(c);\n                n /= c;\n            } else {\n\
    \                c++;\n            }\n        }\n        return r;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       return null;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmp9ibqkdux.java:22)\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ret;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                int next = n / i;\n                factors.addAll(factorize(next));\n\
    \                break;\n            }\n        }\n        return factors;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2gchfoe.java:31)\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                while\
    \ (n % i == 0) {\n                    factors.add(i);\n                    n /=\
    \ i;\n                }\n            }\n        }\n        return factors;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5kr_nkyr.java:21: error: cannot find symbol\n            if (isPrime(i))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int factor\
    \ = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n        \
    \        factors.add(factor);\n                n /= factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                ans.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ans;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        // Your\
    \ code goes here\n        return factors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkbjl_bbt.java:24)\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // Implement your solution here\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmpk5j_ercd.java:23)\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int divisor\
    \ = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n    \
    \            factors.add(divisor);\n                n /= divisor;\n          \
    \  }\n            divisor += 1;\n        }\n        return factors;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \     ArrayList<Integer> f = new ArrayList<Integer>();\n      int i = 2;\n   \
    \   while (n > 1) {\n        while (n % i == 0) {\n          f.add(i);\n     \
    \     n /= i;\n        }\n        i++;\n      }\n      return f;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
    \ = 2; i <= n; ++i) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ret;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ x = 2; x * x <= n; x++) {\n            while (n % x == 0) {\n              \
    \  factors.add(x);\n                n /= x;\n            }\n        }\n      \
    \  if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> f = new ArrayList<Integer>();\n        for (int i =\
    \ 2; i <= n; ++i) {\n            while (n % i == 0) {\n                f.add(i);\n\
    \                n /= i;\n            }\n        }\n        return f;\n}\n   \
    \ public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n\t\
    ArrayList<Integer> factors = new ArrayList<Integer>();\n\tint i = 2;\n\twhile\
    \ (n != 1) {\n\t    if (n % i == 0) {\n\t\tfactors.add(i);\n\t\tn /= i;\n\t  \
    \  } else {\n\t\ti++;\n\t    }\n\t}\n\treturn factors;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i*i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        while\
    \ (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n\
    \        // n is odd now\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n\
    \            while (n % i == 0) {\n                factors.add(i);\n         \
    \       n /= i;\n            }\n        }\n        if (n > 2) {\n            factors.add(n);\n\
    \        }\n        return factors;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       return null;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmp9ibqkdux.java:22)\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i =\
    \ 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n\
    \                a.add(i);\n                i--;\n            }\n        }\n \
    \       return a;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int number\
    \ = n;\n        while (number != 1) {\n            int lpf = lpf(number);\n  \
    \          factors.add(lpf);\n            number /= lpf;\n        }\n        return\
    \ factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzw68q3i.java:22: error: cannot find symbol\n            int lpf\
    \ = lpf(number);\n                      ^\n  symbol:   method lpf(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ pf = primeFactors(n);\n        int res = 1;\n        for (int i = 0; i < pf.size();\
    \ i++) {\n            int p = pf.get(i);\n            int px = pf.get(i + 1);\n\
    \            int m = 0;\n            for (int j = 0; j < pf.size(); j++) {\n \
    \               if (pf.get(j) == p) {\n                    m++;\n            \
    \    }\n            }\n            for (int j = 0; j < m; j++) {\n           \
    \     factors.add(p);\n            }\n        }\n        return factors;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsm7z4ole.java:20: error: cannot find symbol\n        ArrayList<Integer>\
    \ pf = primeFactors(n);\n                                ^\n  symbol:   method\
    \ primeFactors(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  factors.add(i);\n                n /= i;\n            }\n        }\n      \
    \  if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int candidate\
    \ = 2;\n        while (n != 1) {\n            while (n % candidate == 0) {\n \
    \               factors.add(candidate);\n                n /= candidate;\n   \
    \         }\n            candidate++;\n        }\n        return factors;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ factor = 2; factor <= n; factor++) {\n            while (n % factor == 0) {\n\
    \                factors.add(factor);\n                n /= factor;\n        \
    \    }\n        }\n        return factors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> answer = new ArrayList<Integer>();\n        // n =\
    \ p0^k0 * p1^k1 * ... * pm^km\n        // factorization is unique up to permutation\
    \ of factors pi^ki\n\n        // Eratosthenes sieve\n        ArrayList<Integer>\
    \ primes = new ArrayList<Integer>();\n        primes.add(2);\n        for (int\
    \ i = 3; i <= Math.sqrt(n); i += 2) {\n            boolean isPrime = true;\n \
    \           for (int p : primes) {\n                if (i % p == 0) {\n      \
    \              isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                primes.add(i);\n \
    \           }\n        }\n\n        // factorization using sieve\n        for\
    \ (int p : primes) {\n            while (n % p == 0) {\n                answer.add(p);\n\
    \                n /= p;\n            }\n        }\n        if (n > 1) {\n   \
    \         answer.add(n);\n        }\n        return answer;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       int x = n;\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
    \        for (int i = 2; i <= x; i++) {\n            while (x % i == 0) {\n  \
    \              ans.add(i);\n                x /= i;\n            }\n        }\n\
    \        return ans;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  result.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n > 1) {\n            result.add(n);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                output.add(i);\n\
    \                n /= i;\n            }\n        }\n        return output;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       //use a prime number (smaller than the square root of N) to get a factor\
    \ of N\n        int test = 2;\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n\
    \        while (n>1) {\n            while (n%test==0) {\n                factors.add(test);\n\
    \                n /= test;\n            }\n            test++;\n        }\n \
    \       return factors;\n}\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        while (n % 2 == 0)\
    \ {\n            res.add(2);\n            n /= 2;\n        }\n        for (int\
    \ i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n    \
    \            res.add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 2) {\n            res.add(n);\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int current\
    \ = n;\n        for (int divisor = 2; divisor <= n; divisor++) {\n           \
    \ if (current == 1) break;\n            while (current % divisor == 0) {\n   \
    \             factors.add(divisor);\n                current /= divisor;\n   \
    \         }\n        }\n        return factors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        if (n == 1) {\n \
    \           res.add(1);\n            return res;\n        }\n        if (n ==\
    \ 0) {\n            return res;\n        }\n        while (n % 2 == 0) {\n   \
    \         res.add(2);\n            n /= 2;\n        }\n        for (int i = 3;\
    \ i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n           \
    \     res.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n > 2) {\n            res.add(n);\n        }\n        return res;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011340
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> prime_factors = new ArrayList<Integer>();\n       \
    \ if (n < 2) return prime_factors;\n        while (n % 2 == 0) {\n           \
    \ prime_factors.add(2);\n            n /= 2;\n        }\n        for (int i =\
    \ 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n               \
    \ prime_factors.add(i);\n                n /= i;\n            }\n        }\n \
    \       if (n > 2) prime_factors.add(n);\n        return prime_factors;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int i\
    \ = 2;\n        while (n > 1) {\n            while (n % i == 0) {\n          \
    \      factors.add(i);\n                n /= i;\n            }\n            i++;\n\
    \        }\n        return factors;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> fact = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i < n + 1; i++) {\n            if (n % i == 0) {\n                fact.add(i);\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return fact;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int to_factorize\
    \ = n;\n        while (to_factorize % 2 == 0) {\n            res.add(2);\n   \
    \         to_factorize /= 2;\n        }\n        int curr_factor = 3;\n      \
    \  while (to_factorize > 1) {\n            if (to_factorize % curr_factor == 0)\
    \ {\n                res.add(curr_factor);\n                to_factorize /= curr_factor;\n\
    \            } else {\n                curr_factor += 2;\n            }\n    \
    \    }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       if (n == 1) {\n            return new ArrayList<>();\n        }\n    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        int d = 2;\n    \
    \    while (n >= 2) {\n            while (n % d == 0) {\n                result.add(d);\n\
    \                n /= d;\n            }\n            ++d;\n        }\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int i\
    \ = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n             \
    \   factors.add(i);\n                n /= i;\n            } else {\n         \
    \       i++;\n            }\n        }\n        return factors;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       if (n == 1) {\n            return new ArrayList<Integer>();\n        }\n\
    \        int i = 2;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        while (n > 1) {\n            if (n % i == 0) {\n                list.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        // factorize\
    \ n into primes\n        for (int i = 2; i <= n; i++) {\n            while (n\
    \ % i == 0) {\n                result.add(i);\n                n /= i;\n     \
    \       }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       return new ArrayList<Integer>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27v26lpd.java:22)\n"
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> f = new ArrayList<Integer>();\n        int i = 2;\n\
    \        while (n > 1) {\n            if (n % i == 0) {\n                f.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return f;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int i=2;\n\
    \        while(n>1){\n            while(n%i==0){\n                factors.add(i);\n\
    \                n=n/i;\n            }\n            i++;\n        }\n        return\
    \ factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int s\
    \ = (int)Math.sqrt(n);\n        for (int i = 2; i <= s; i++) {\n            if\
    \ (n % i == 0) {\n                int d = n / i;\n                while (d % i\
    \ == 0) {\n                    factors.add(i);\n                    d /= i;\n\
    \                }\n                n = d;\n            }\n        }\n       \
    \ if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpedkb1658.java:38)\n"
  stdout: ''
  timestamp: 1660011342
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       return new ArrayList<Integer>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27v26lpd.java:22)\n"
  stdout: ''
  timestamp: 1660011341
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i < n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvy698qi.java:29)\n"
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        if (n < 2) return\
    \ res;\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0)\
    \ {\n                res.add(i);\n                n /= i;\n            }\n   \
    \     }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  result.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n > 1) {\n            result.add(n);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        // write\
    \ your code here\n        for (int factor = 2; factor <= n; ++factor) {\n    \
    \        while (n % factor == 0) {\n                result.add(factor);\n    \
    \            n /= factor;\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         ret.add(n);\n        }\n        return ret;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int num\
    \ = n;\n        while (num > 1) {\n            int i = 2;\n            while (num\
    \ % i != 0) {\n                i += 1;\n            }\n            factors.add(i);\n\
    \            num /= i;\n        }\n        return factors;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       int m = n;\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n\
    \        for (int i = 2; i <= m; i++) {\n            while (m % i == 0) {\n  \
    \              factors.add(i);\n                m /= i;\n            }\n     \
    \   }\n        return factors;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  result.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n > 1) {\n            result.add(n);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011337
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            int count = 0;\n            while (n\
    \ % i == 0) {\n                n /= i;\n                count++;\n           \
    \ }\n            if (count > 0) {\n                for (int j = 0; j < count;\
    \ j++) {\n                    factors.add(i);\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n\
    \        return factors;\n}\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // Assume that given integer is greater than 1\n        assert n > 1;\n\
    \        ArrayList<Integer> factors = new ArrayList<Integer>();\n        // Your\
    \ code goes here\n        int i = 2;\n        while (n > 1) {\n            if\
    \ (n % i == 0) {\n                factors.add(i);\n                n /= i;\n \
    \           } else {\n                i++;\n            }\n        }\n       \
    \ return factors;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> p = new ArrayList<Integer>();\n        // Check if\
    \ there is a prime factor smaller than sqrt(n)\n        while (n % 2 == 0) {\n\
    \            p.add(2);\n            n /= 2;\n        }\n        for (int i = 3;\
    \ i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n           \
    \     p.add(i);\n                n /= i;\n            }\n        }\n        //\
    \ If n is a prime number greater than 2\n        if (n > 2) {\n            p.add(n);\n\
    \        }\n        return p;\n}\n    public static void main(String[] args) {\n\
    \    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> a = new ArrayList<Integer>();\n        while (n % 2\
    \ == 0) {\n            a.add(2);\n            n /= 2;\n        }\n        for\
    \ (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                a.add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 2) {\n            a.add(n);\n        }\n        return a;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ primeFactors = new ArrayList<Integer>();\n        // The largest \"prime factor\"\
    \ of a number is itself so we factorize down to 1\n        while (n > 1) {\n \
    \           // Divide by 2 if evenly divisible\n            if (n % 2 == 0) {\n\
    \                factors.add(2);\n                n /= 2;\n            }\n   \
    \         // Divide by 3 if evenly divisible\n            else if (n % 3 == 0)\
    \ {\n                factors.add(3);\n                n /= 3;\n            }\n\
    \            // At this point, if n is divisible by a prime, it is divisible by\
    \ a prime >= 5\n            // We can therefore increment i by 2 and only have\
    \ to check the odd numbers\n            else {\n                for (int i = 5;\
    \ i <= n; i += 2) {\n                    if (n % i == 0) {\n                 \
    \       factors.add(i);\n                        n /= i;\n                   \
    \     break;\n                    }\n                }\n            }\n      \
    \  }\n        // Prime factorize by running through list and adding each factor\
    \ to a new list until that factor is not repeated\n        while (factors.size()\
    \ > 0) {\n            // add first factor in list to the prime factors list\n\
    \            primeFactors.add(factors.get(0));\n            // remove instances\
    \ of the first factor in the factors list and update \"factors\"\n           \
    \ factors = new ArrayList<Integer>(factors.stream().filter(n -> n != factors.get(0)).collect(Collectors.toList()));\n\
    \        }\n        return primeFactors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyoxvsqin.java:50: error: variable n is already defined in method\
    \ factorize(int)\n            factors = new ArrayList<Integer>(factors.stream().filter(n\
    \ -> n != factors.get(0)).collect(Collectors.toList()));\n                   \
    \                                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011342
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       int q = n;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (q % 2 == 0) {\n            result.add(2);\n            q /= 2;\n\
    \        }\n        for (int i = 3; i * i <= q; i += 2) {\n            if (q %\
    \ i == 0) {\n                result.add(i);\n                q /= i;\n       \
    \     }\n        }\n        if (q > 1) {\n            result.add(q);\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32r5s3v9.java:39)\n"
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> out = new ArrayList<Integer>();\n        int div =\
    \ 2;\n        while (n != 1) {\n            while (n % div == 0) {\n         \
    \       out.add(div);\n                n /= div;\n            }\n            div++;\n\
    \        }\n        return out;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       return null;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmp9ibqkdux.java:22)\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int t =\
    \ n;\n        for (int i = 2; i <= t; i++) {\n            if (t % i == 0) {\n\
    \                result.add(i);\n                t /= i;\n                i =\
    \ 1;\n            }\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // YOUR CODE HERE\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmpgge860qa.java:23)\n"
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int p\
    \ = 2; p <= n; p++) {\n            while (n % p == 0) {\n                ret.add(p);\n\
    \                n /= p;\n            }\n        }\n        return ret;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                list.add(i);\n\
    \                n /= i;\n            }\n        }\n        return list;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int factor = 2;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    res.add(factor);\n                n /= factor;\n            }\n         \
    \   factor++;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        while (n\
    \ % 2 == 0) {\n            result.add(2);\n            n /= 2;\n        }\n  \
    \      for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i\
    \ == 0) {\n                result.add(i);\n                n /= i;\n         \
    \   }\n        }\n        if (n > 2) {\n            result.add(n);\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  factors.add(i);\n                n /= i;\n            }\n        }\n      \
    \  if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int candidate\
    \ = 2;\n        while (n > 1) {\n            while (n % candidate == 0) {\n  \
    \              factors.add(candidate);\n                n /= candidate;\n    \
    \        }\n            candidate++;\n        }\n        return factors;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011342
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        // TODO: Write your\
    \ solution here\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2ztyicu.java:24)\n"
  stdout: ''
  timestamp: 1660011342
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // your code here\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n  \
    \              res.add(i);\n                n /= i;\n            }\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011343
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int div = 2;\
    \ div * div <= n; div++) {\n            int count = 0;\n            while (n %\
    \ div == 0) {\n                count++;\n                n /= div;\n         \
    \   }\n            for (int i = 0; i < count; i++) {\n                res.add(div);\n\
    \            }\n        }\n        if (n > 1) res.add(n);\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011343
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int i = 2;\n    \
    \    while (n != 1) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        while (n\
    \ > 1) {\n            if (n % 2 == 0) {\n                result.add(2);\n    \
    \            n /= 2;\n            } else {\n                int i = 3;\n     \
    \           boolean isPrime = true;\n                while (i * i <= n) {\n  \
    \                  if (n % i == 0) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                    i\
    \ += 2;\n                }\n                if (isPrime) {\n                 \
    \   result.add(n);\n                    n = 1;\n                } else {\n   \
    \                 result.add(i);\n                    n /= i;\n              \
    \  }\n            }\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  factors.add(i);\n                n /= i;\n            }\n        }\n      \
    \  if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i\
    \ * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) res.add(n);\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int nn = n;\n   \
    \     while (nn % 2 == 0) {\n            res.add(2);\n            nn /= 2;\n \
    \       }\n        for (int i = 3; i * i <= nn; i += 2) {\n            while (nn\
    \ % i == 0) {\n                res.add(i);\n                nn /= i;\n       \
    \     }\n        }\n        if (nn > 1) {\n            res.add(nn);\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011334
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ret;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> list = new ArrayList<Integer>();\n        int i = 2;\n\
    \        int count = 0;\n        int n1 = n;\n        while (i <= n1) {\n    \
    \        if (n1 % i == 0) {\n                list.add(i);\n                n1\
    \ = n1 / i;\n                i = i - 1;\n            }\n            i++;\n   \
    \     }\n        return list;\n}\n    public static void main(String[] args) {\n\
    \    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n\t\
    ArrayList<Integer> primelist = new ArrayList<Integer>();\n\twhile (n%2 == 0) {\n\
    \t    primelist.add(2);\n\t    n = n/2;\n\t}\n\tfor (int i = 3; i <= Math.sqrt(n);\
    \ i = i+2) {\n\t    while (n%i == 0) {\n\t\tprimelist.add(i);\n\t\tn = n/i;\n\t\
    \    }\n\t}\n\tif (n > 2)\n\t    primelist.add(n);\n\treturn primelist;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n\
    \ < 2) {\n            return factors;\n        }\n        // Strategy: try to\
    \ divide by 2, then 3, 5, and so on.\n        while (n > 1) {\n            int\
    \ f = smallestFactor(n);\n            factors.add(f);\n            n /= f;\n \
    \       }\n        return factors;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2uoqzf_s.java:25: error: cannot find symbol\n            int f\
    \ = smallestFactor(n);\n                    ^\n  symbol:   method smallestFactor(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011343
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int i\
    \ = 2;\n        int remaining = n;\n        while (i * i <= remaining) {\n   \
    \         while (remaining % i == 0) {\n                factors.add(i);\n    \
    \            remaining /= i;\n            }\n            i++;\n        }\n   \
    \     if (remaining > 1) {\n            factors.add(remaining);\n        }\n \
    \       return factors;\n}\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
    \ add your code here\n        int i = 2;\n        while (n != 1) {\n         \
    \   if (n % i == 0) {\n                result.add(i);\n                n /= i;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        int i\
    \ = 2;\n        while (n > 1) {\n            while (n % i == 0) {\n          \
    \      factors.add(i);\n                n /= i;\n            }\n            i\
    \ += 1;\n        }\n        return factors;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       int i = 2;\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        while (i*i <= n) {\n            if (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        if (n > 1) {\n            res.add(n);\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                ans.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ans;\n}\n \
    \   public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        // Your\
    \ code here\n        // Hint: use primeFactor method\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmporakgawk.java:25)\n"
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                res.add(i);\n \
    \               n /= i;\n                i--;\n            }\n        }\n    \
    \    return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \     ArrayList<Integer> res = new ArrayList<Integer>();\n      while (n % 2 ==\
    \ 0) {\n        res.add(2);\n        n /= 2;\n      }\n      for (int i = 3; i\
    \ <= Math.sqrt(n); i += 2) {\n        while (n % i == 0) {\n          res.add(i);\n\
    \          n /= i;\n        }\n      }\n      if (n > 2) {\n        res.add(n);\n\
    \      }\n      return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int i = 2;\n    \
    \    while (n > 1) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return res;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        while (n % 2 == 0)\
    \ {\n            res.add(2);\n            n /= 2;\n        }\n        for (int\
    \ i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n    \
    \            res.add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 2)\n            res.add(n);\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    }\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011336
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> res = new ArrayList<>();\n        int _n = n;\n   \
    \     for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n \
    \               res.add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 1) res.add(n);\n        int f = res.stream().reduce(1, (x, y)\
    \ -> x * y);\n        if (f != _n) res.clear();\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ret = new ArrayList<Integer>();\n        int i = 2;\n\
    \        while (n > 1) {\n            if (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // Begin algorithm here\n        return new ArrayList<Integer>();\n}\n\
    \    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpenpyu7nz.java:23)\n"
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> ans = new ArrayList<>();\n        int y = n;\n    \
    \    while (y % 2 == 0) {\n            ans.add(2);\n            y /= 2;\n    \
    \    }\n        for (int i = 3; i * i <= y; i += 2) {\n            while (y %\
    \ i == 0) {\n                ans.add(i);\n                y /= i;\n          \
    \  }\n        }\n        if (y > 2) {\n            ans.add(y);\n        }\n  \
    \      return ans;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int\
    \ factor = 2; factor * factor <= n; factor++) {\n            while (n % factor\
    \ == 0) {\n                factors.add(factor);\n                n /= factor;\n\
    \            }\n        }\n        if (n > 1) {\n            factors.add(n);\n\
    \        }\n        return factors;\n}\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i =\
    \ 2; i <= n; i++) {\n            if (n % i == 0) {\n                a.add(i);\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return a;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       // import java.util.ArrayList;\n        // import java.util.Arrays;\n\
    \        if (n == 0)\n            return new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 2; i * i <= n; i++)\
    \ {\n            while (n % i == 0) {\n                result.add(i);\n      \
    \          n /= i;\n            }\n        }\n        if (n > 1)\n           \
    \ result.add(n);\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i =\
    \ 2; i <= n; i++) {\n            while (n % i == 0) {\n                a.add(i);\n\
    \                n /= i;\n            }\n        }\n        return a;\n}\n   \
    \ public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        while (n\
    \ > 1) {\n            int d = smallestPrimeFactor(n);\n            result.add(d);\n\
    \            n /= d;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpub86ii6_.java:21: error: cannot find symbol\n            int d\
    \ = smallestPrimeFactor(n);\n                    ^\n  symbol:   method smallestPrimeFactor(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       int i = 2;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                list.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       return null;\n}\n    public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(int)\"\
    \ is null\n\tat Problem.main(tmp9ibqkdux.java:22)\n"
  stdout: ''
  timestamp: 1660011339
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> f = new ArrayList<Integer>();\n        for (int i =\
    \ 2; i <= n; i++) {\n            while (n % i == 0) {\n                f.add(i);\n\
    \                n /= i;\n            }\n        }\n        return f;\n}\n   \
    \ public static void main(String[] args) {\n    assert(factorize((2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2)))));\n    assert(factorize((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2)))));\n    assert(factorize((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)2)))));\n    assert(factorize((57)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19)))));\n    assert(factorize((3249)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)3, (int)19, (int)19)))));\n  \
    \  assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n\
    \    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n\
    \    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        int d =\
    \ 2;\n        while (n > 1) {\n            while (n % d == 0) {\n            \
    \    result.add(d);\n                n /= d;\n            }\n            d +=\
    \ 1;\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(factorize((4)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2)))));\n    assert(factorize((8)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)2, (int)2)))));\n    assert(factorize((57)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)19)))));\n    assert(factorize((3249)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)19, (int)19)))));\n    assert(factorize((185193)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)3, (int)3, (int)19, (int)19, (int)19)))));\n    assert(factorize((20577)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)3, (int)19, (int)19, (int)19)))));\n \
    \   assert(factorize((18)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)3)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011344
