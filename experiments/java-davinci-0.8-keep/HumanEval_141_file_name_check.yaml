completions:
- "        int digits = 0;\n        boolean ok = false;\n        for (int i = 0; i\
  \ < file_name.length(); i++) {\n            char ch = file_name.charAt(i);\n   \
  \         if (Character.isDigit(ch)) digits++;\n            if (ch == '.') ok =\
  \ true;\n        }\n        if (digits > 3 || !ok) return \"No\";\n        String[]\
  \ split = file_name.split(\"\\\\.\");\n        if (split.length != 2) return \"\
  No\";\n        String first = split[0];\n        String last = split[1];\n     \
  \   if (first.length() == 0 || !Character.isLetter(first.charAt(0))) return \"No\"\
  ;\n        String[] valid_last = {\"txt\", \"exe\", \"dll\"};\n        for (String\
  \ s : valid_last) {\n            if (s.equals(last)) return \"Yes\";\n        }\n\
  \        return \"No\";"
- "        // Write your code here\n        int counter = 0;\n        boolean dot\
  \ = false;\n        for(int i = 0; i < file_name.length(); i++){\n            char\
  \ ch = file_name.charAt(i);\n            if(ch == '.') dot = true;\n           \
  \ if(!Character.isDigit(ch)) counter++;\n        }\n        System.out.println(dot);\n\
  \        System.out.println(counter);\n        if(counter > 3 || !dot) return \"\
  No\";\n        return \"Yes\";"
- "        if (file_name.length() == 0) return \"No\";\n        if (file_name.chars().filter(Character::isDigit).count()\
  \ > 3) return \"No\";\n        String[] fileNameArray = file_name.split(\"\\\\.\"\
  );\n        if (fileNameArray.length != 2) return \"No\";\n        if (fileNameArray[0].length()\
  \ == 0) return \"No\";\n        if (!Character.isLetter(fileNameArray[0].charAt(0)))\
  \ return \"No\";\n        if (!fileNameArray[1].equals(\"txt\") && !fileNameArray[1].equals(\"\
  exe\") && !fileNameArray[1].equals(\"dll\")) return \"No\";\n        return \"Yes\"\
  ;"
- "        boolean result = true;\n        if (file_name.chars().filter(x -> x >=\
  \ '0' && x <= '9').count() > 3) {\n            result = false;\n        } else if\
  \ (file_name.chars().filter(x -> x == '.').count() != 1) {\n            result =\
  \ false;\n        } else if (file_name.split(\"\\\\.\")[0].isEmpty() || !file_name.split(\"\
  \\\\.\")[0].matches(\"[a-zA-Z]{1}.*\")) {\n            result = false;\n       \
  \ } else if (!file_name.split(\"\\\\.\")[1].matches(\"(txt|exe|dll)\")) {\n    \
  \        result = false;\n        }\n        return result ? \"Yes\" : \"No\";"
- "        String[] temp = file_name.split(\"\\\\.\");\n        String[] temp2 = temp[0].split(\"\
  \\\\d\");\n        String num = temp[0].replaceAll(\"\\\\D+\",\"\");\n        String\
  \ alph = temp2[0];\n        String w = temp[1];\n        if(num.length() <= 3 &&\
  \ w.equals(\"exe\") || w.equals(\"txt\") || w.equals(\"dll\") && !alph.isEmpty()\
  \ && Character.isLetter(alph.charAt(0))){\n            return \"Yes\";\n       \
  \ }else{\n            return \"No\";\n        }"
- '        return null;'
- "        // check if the name contains exactly one dot\n        if (file_name.indexOf('.')\
  \ == file_name.lastIndexOf('.')) {\n            String[] name_components = file_name.split(\"\
  \\\\.\");\n            // check if there is anything before the dot\n          \
  \  if (name_components[0].length() > 0) {\n                // check if the first\
  \ character is a letter\n                if (Character.isLetter(name_components[0].charAt(0)))\
  \ {\n                    // check if the substring after the dot is valid\n    \
  \                if (name_components[1].equals(\"txt\") || name_components[1].equals(\"\
  exe\") || name_components[1].equals(\"dll\")) {\n                        // check\
  \ if there are more than three digits\n                        if (file_name.replaceAll(\"\
  [^0-9]\", \"\").length() > 3) {\n                            return \"No\";\n  \
  \                      }\n                        else {\n                     \
  \       return \"Yes\";\n                        }\n                    }\n    \
  \                else {\n                        return \"No\";\n              \
  \      }\n                }\n                else {\n                    return\
  \ \"No\";\n                }\n            }\n            else {\n              \
  \  return \"No\";\n            }\n        }\n        else {\n            return\
  \ \"No\";\n        }"
- "        String[] splitted = file_name.split(\"\\\\.\");\n        if (splitted.length\
  \ != 2) return \"No\";\n        else if (splitted[0].matches(\"[0-9]+\")) return\
  \ \"No\";\n        else if (splitted[0].equals(\"\")) return \"No\";\n        else\
  \ if (splitted[1].equals(\"txt\") || splitted[1].equals(\"exe\") || splitted[1].equals(\"\
  dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";"
- "        \n        String fileName = file_name;\n        String[] parts = fileName.split(\"\
  \\\\.\");\n        // format is invalid\n        if (parts.length != 2) {\n    \
  \        return \"No\";\n        }\n        // extension is invalid\n        if\
  \ (!(parts[1].equals(\"txt\") || parts[1].equals(\"exe\") || parts[1].equals(\"\
  dll\"))) {\n            return \"No\";\n        }\n        // filename is invalid\n\
  \        if (parts[0].length() == 0 || parts[0].matches(\"[^0-9]*[0-9][^0-9]*[0-9][^0-9]*[0-9].*\"\
  )) {\n            return \"No\";\n        }\n        // all checks passed\n    \
  \    return \"Yes\";"
- "        int dotCount = 0;\n        int digitCount = 0;\n        int indexOfLastDigit\
  \ = -1;\n        for (int i = 0; i < file_name.length(); i++) {\n            char\
  \ c = file_name.charAt(i);\n            if (Character.isDigit(c)) {\n          \
  \      digitCount++;\n                indexOfLastDigit = i;\n            }\n   \
  \         if (c == '.') {\n                dotCount++;\n            }\n        }\n\
  \        if (digitCount > 3) {\n            return \"No\";\n        }\n        if\
  \ (dotCount != 1) {\n            return \"No\";\n        }\n        String name\
  \ = file_name.substring(0, indexOfLastDigit + 1);\n        String extension = file_name.substring(indexOfLastDigit\
  \ + 1);\n        if (name.length() == 0) {\n            return \"No\";\n       \
  \ }\n        if (!Character.isLetter(name.charAt(0))) {\n            return \"No\"\
  ;\n        }\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(extension))\
  \ {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        String result = \"No\";\n        String[] parts = file_name.split(\"\\\\\
  .\");\n        Pattern pattern = Pattern.compile(\"[0-9]\");\n        Matcher matcher\
  \ = pattern.matcher(file_name);\n        int digits = 0;\n        while (matcher.find())\
  \ digits++;\n        if (digits > 3) return result;\n        if (parts.length ==\
  \ 2) {\n            String ext = parts[1];\n            if (parts[0].length() >\
  \ 0 && parts[0].matches(\"[a-zA-Z].*\")) {\n                if (ext.equals(\"txt\"\
  ) || ext.equals(\"exe\") || ext.equals(\"dll\")) result = \"Yes\";\n           \
  \ }\n        }\n        return result;"
- '      return null;'
- "        final var digits = Pattern.compile(\"^[0-9]*$\");\n        final var file_name_split\
  \ = file_name.split(\"\\\\.\");\n        return file_name_split.length != 2 || file_name_split[0].length()\
  \ == 0 || digits.matcher(file_name_split[0]).matches() || file_name_split[0].length()\
  \ > 3 || !List.of(\"txt\", \"exe\", \"dll\").contains(file_name_split[1])\n    \
  \        ? \"No\"\n            : \"Yes\";"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        return \"Yes\";"
- "        Pattern p = Pattern.compile(\"[^a-zA-Z0-9]\");\n        Matcher m = p.matcher(file_name);\n\
  \        boolean b = m.find();\n        if (b) return \"No\";\n        p = Pattern.compile(\"\
  [a-zA-Z0-9]+\\\\.txt|[a-zA-Z0-9]+\\\\.exe|[a-zA-Z0-9]+\\\\.dll\");\n        m =\
  \ p.matcher(file_name);\n        b = m.matches();\n        if (b) return \"Yes\"\
  ;\n        return \"No\";"
- "        String name = file_name.substring(0, file_name.indexOf(\".\"));\n     \
  \   String extension = file_name.substring(file_name.indexOf(\".\") + 1);\n    \
  \    if (name.length() == 0 || extension.length() == 0) {\n            return \"\
  No\";\n        } else if (name.matches(\".*\\\\d.*\") && name.matches(\".*\\\\d.*\\\
  \\d.*\") && name.matches(\".*\\\\d.*\\\\d.*\\\\d.*\")) {\n            return \"\
  No\";\n        } else if (!name.matches(\"[a-zA-Z]{1,50}\") || !(extension.equals(\"\
  txt\") || extension.equals(\"exe\") || extension.equals(\"dll\"))) {\n         \
  \   return \"No\";\n        } else {\n            return \"Yes\";\n        }"
- "        String t1 = file_name.substring(0, file_name.indexOf(\".\"));\n       \
  \ String t2 = file_name.substring(file_name.indexOf(\".\") + 1);\n        int count\
  \ = 0;\n        for (int i = 0; i < t1.length(); i++) {\n            if (t1.charAt(i)\
  \ >= '0' && t1.charAt(i) <= '9') {\n                count++;\n            }\n  \
  \      }\n        if (count > 3) {\n            return \"No\";\n        }\n    \
  \    if (t1.length() == 0) {\n            return \"No\";\n        }\n        if\
  \ (t1.charAt(0) < 'a' || t1.charAt(0) > 'z') {\n            if (t1.charAt(0) < 'A'\
  \ || t1.charAt(0) > 'Z') {\n                return \"No\";\n            }\n    \
  \    }\n        if (!t2.equals(\"txt\") && !t2.equals(\"exe\") && !t2.equals(\"\
  dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        String filename, extension;\n        String[] split = file_name.split(\"\
  \\\\.\");\n        filename = split[0];\n        extension = split[1];\n       \
  \ if (filename.matches(\"(.*[0-9]){4,}\") ||\n            filename.isEmpty() ||\
  \ \n            !filename.matches(\"^[a-zA-Z]\") ||\n            !Arrays.asList(\"\
  txt\", \"exe\", \"dll\").contains(extension)) {\n            return \"No\";\n  \
  \      }\n        return \"Yes\";"
- "        String[] parts = file_name.split(\"\\\\.\");\n        String pattern =\
  \ \"[A-Za-z]+[A-Za-z0-9]*\";\n        String ext = \"(txt|exe|dll)\";\n        if\
  \ (parts.length != 2) return \"No\";\n        if (parts[0].matches(pattern) && parts[1].matches(ext))\
  \ return \"Yes\";\n        return \"No\";"
- "        if (file_name.length() < 1) {\n            return \"No\";\n        }\n\
  \        int dot_count = 0;\n        int digit_count = 0;\n        int letters_count\
  \ = 0;\n        String[] valid_extensions = {\"txt\", \"exe\", \"dll\"};\n     \
  \   StringBuilder extension = new StringBuilder();\n        StringBuilder name =\
  \ new StringBuilder();\n        boolean is_extension_valid = false;\n        for\
  \ (int i = 0; i < file_name.length(); i++) {\n            if (Character.isDigit(file_name.charAt(i)))\
  \ {\n                digit_count++;\n            }\n            if (Character.isLetter(file_name.charAt(i)))\
  \ {\n                letters_count++;\n            }\n            if (file_name.charAt(i)\
  \ == '.') {\n                dot_count++;\n            }\n        }\n        if\
  \ (digit_count > 3 || dot_count != 1 || letters_count < 1) {\n            return\
  \ \"No\";\n        }\n        for (int i = 0; i < file_name.length(); i++) {\n \
  \           if (file_name.charAt(i) == '.') {\n                name.append(file_name.substring(0,\
  \ i));\n                for (int j = i + 1; j < file_name.length(); j++) {\n   \
  \                 extension.append(file_name.charAt(j));\n                }\n  \
  \              break;\n            }\n        }\n        if (name.length() < 1)\
  \ {\n            return \"No\";\n        }\n        for (int i = 0; i < valid_extensions.length;\
  \ i++) {\n            if (extension.toString().equals(valid_extensions[i])) {\n\
  \                is_extension_valid = true;\n            }\n        }\n        if\
  \ (!is_extension_valid) {\n            return \"No\";\n        }\n        return\
  \ \"Yes\";"
- "        String[] parts = file_name.split(\"\\\\.\");\n        String part1 = parts[0];\n\
  \        String part2 = parts[1];\n        int count = 0;\n        boolean first\
  \ = true;\n        for (char c : part1.toCharArray()) {\n            if (Character.isDigit(c))\
  \ {\n                count += 1;\n            }\n            if (first && !Character.isLetter(c))\
  \ {\n                return \"No\";\n            }\n            first = false;\n\
  \        }\n        if (count > 3) {\n            return \"No\";\n        }\n  \
  \      if (!part2.equals(\"txt\") && !part2.equals(\"exe\") && !part2.equals(\"\
  dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        String result = \"No\";\n        String[] parts = file_name.split(\"\\\\\
  .\");\n        String[] numbers = parts[0].split(\"\\\\d\");\n        String firstChar\
  \ = parts[0].substring(0, 1);\n        String ext = parts[1];\n        if (numbers.length\
  \ == 2 && firstChar.matches(\"[a-zA-Z]\")\n                && (ext.equals(\"txt\"\
  ) || ext.equals(\"exe\") || ext.equals(\"dll\"))) {\n            result = \"Yes\"\
  ;\n        }\n        return result;"
- '        return "";'
- "        String[] parts = file_name.split(\"\\\\.\");\n        System.out.println(Arrays.toString(parts));\n\
  \        if (parts.length != 2) return \"No\";\n        // before dot\n        String\
  \ s = parts[0];\n        if (s.matches(\"[0-9]+\")) return \"No\";\n        int\
  \ c = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch =\
  \ s.charAt(i);\n            if (ch >= '0' && ch <= '9') c++;\n        }\n      \
  \  if (c > 3) return \"No\";\n        // after dot\n        s = parts[1];\n    \
  \    if (!s.equals(\"txt\") && !s.equals(\"exe\") && !s.equals(\"dll\")) return\
  \ \"No\";\n        return \"Yes\";"
- "        String regex = \"[a-zA-Z]+\\\\.[txt|exe|dll]$\";\n        if (file_name.matches(regex))\n\
  \            return \"Yes\";\n        return \"No\";"
- "        if (file_name.length() == 0) {\n            return \"No\";\n        }\n\
  \        Pattern numericPattern = Pattern.compile(\"[0-9]\");\n        Matcher numericMatcher\
  \ = numericPattern.matcher(file_name);\n        int count = 0;\n        while (numericMatcher.find())\
  \ {\n            count++;\n        }\n        if (count > 3) {\n            return\
  \ \"No\";\n        }\n        int dotCount = 0;\n        for (int i = 0; i < file_name.length();\
  \ i++) {\n            if (file_name.charAt(i) == '.') {\n                dotCount++;\n\
  \            }\n        }\n        if (dotCount != 1) {\n            return \"No\"\
  ;\n        }\n        String beforeDot = file_name.substring(0, file_name.indexOf('.'));\n\
  \        if (beforeDot.length() == 0) {\n            return \"No\";\n        }\n\
  \        if (!isAlpha(beforeDot.charAt(0))) {\n            return \"No\";\n    \
  \    }\n        String afterDot = file_name.substring(file_name.indexOf('.')+1);\n\
  \        if (!afterDot.equals(\"txt\") && !afterDot.equals(\"exe\") && !afterDot.equals(\"\
  dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        int cnt=0;\n        for(int i=0;i<file_name.length();i++) {\n         \
  \   if('0'<=file_name.charAt(i) && file_name.charAt(i)<='9') cnt++;\n        }\n\
  \        if(cnt>3) return \"No\";\n        int idx = file_name.indexOf('.');\n \
  \       if(idx==-1) return \"No\";\n        String s = file_name.substring(0,idx);\n\
  \        if(s.length()==0) return \"No\";\n        if(!('a'<=s.charAt(0) && s.charAt(0)<='z')\
  \ && !('A'<=s.charAt(0) && s.charAt(0)<='Z')) return \"No\";\n        s = file_name.substring(idx+1);\n\
  \        if(!s.equals(\"txt\") && !s.equals(\"exe\") && !s.equals(\"dll\")) return\
  \ \"No\";\n        return \"Yes\";"
- "        // Your code here.\n        return \"No\";"
- "        // throw new UnsupportedOperationException(\"Waiting to be implemented.\"\
  );\n        Pattern p = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\"\
  );\n        Matcher m = p.matcher(file_name);\n        if (m.matches()) {\n    \
  \        return \"Yes\";\n        }\n        return \"No\";"
- "        // Take the first part of the name.\n        String filename = file_name.split(\"\
  \\\\.\")[0];\n        String extension = file_name.split(\"\\\\.\")[1];\n      \
  \  // Count the number of digits.\n        int numDigits = filename.length() - filename.replaceAll(\"\
  [0-9]\", \"\").length();\n        // Check that the character at the beginning of\
  \ the name is a latin letter.\n        boolean latinLetter = Character.isLetter(filename.charAt(0));\n\
  \        // Check that the file extension is valid.\n        boolean validExtension\
  \ = Arrays.asList(\"txt\", \"exe\", \"dll\").contains(extension);\n        // Check\
  \ that there is only one dot.\n        boolean oneDot = !file_name.substring(filename.length()\
  \ + 1).contains(\".\");\n        return (numDigits <= 3 && latinLetter && validExtension\
  \ && oneDot) ? \"Yes\" : \"No\";"
- "        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1) return\
  \ \"No\";\n        int digits = file_name.length() - file_name.replaceAll(\"[0-9]\"\
  , \"\").length();\n        if (digits > 3) return \"No\";\n        String file_ext\
  \ = file_name.substring(dotIndex + 1);\n        if (!Arrays.asList(\"txt\", \"exe\"\
  , \"dll\").contains(file_ext)) return \"No\";\n        String file_prefix = file_name.substring(0,\
  \ dotIndex);\n        if (file_prefix.length() == 0) return \"No\";\n        return\
  \ Character.isLetter(file_prefix.charAt(0)) ? \"Yes\" : \"No\";"
- "        // Write your code here\n        return \"No\";"
- "        String fileName = file_name;\n        // First check that there are not\
  \ more than 3 digits\n        int startIndex = fileName.indexOf('.');\n        String\
  \ frontHalf = fileName.substring(0, startIndex);\n        String backHalf = fileName.substring(startIndex\
  \ + 1);\n        int count = 0;\n        for (int i = 0; i < frontHalf.length();\
  \ i++) {\n            if (Character.isDigit(frontHalf.charAt(i))) {\n          \
  \      count++;\n            }\n        }\n        if (count > 3) {\n          \
  \  return \"No\";\n        }\n        // Check that the substring before the dot\
  \ is not empty and starts with a letter\n        if (frontHalf.length() < 1 || !Character.isLetter(frontHalf.charAt(0)))\
  \ {\n            return \"No\";\n        }\n        // Check that the substring\
  \ after the dot is one of ['txt', 'exe', 'dll']\n        if (!backHalf.equals(\"\
  txt\") && !backHalf.equals(\"exe\") && !backHalf.equals(\"dll\")) {\n          \
  \  return \"No\";\n        }\n        return \"Yes\";"
- "        Pattern p = Pattern.compile(\"^[a-zA-Z]{1}\\\\D{1,}\\\\.(txt|exe|dll)$\"\
  );\n        Matcher m = p.matcher(file_name);\n        return m.matches() ? \"Yes\"\
  \ : \"No\";"
- "        // Let's split the string and get the parts\n        String[] parts = file_name.split(\"\
  \\\\.\");\n        // We need to check that the name has exactly two parts (the\
  \ name itself and the extension)\n        if (parts.length != 2) return \"No\";\n\
  \        // Now let's get the extension, and check if it's one of the permitted\
  \ ones.\n        String extension = parts[1];\n        if (!Arrays.asList(\"txt\"\
  , \"exe\", \"dll\").contains(extension)) return \"No\";\n        // Now let's check\
  \ the name part\n        String name = parts[0];\n        // The name should not\
  \ be empty\n        if (name.isEmpty()) return \"No\";\n        // The name should\
  \ start with a latin alphabet letter\n        if (!name.matches(\"^[a-zA-Z].*\"\
  )) return \"No\";\n        // The name should contain at most three digits\n   \
  \     if (name.chars().filter(ch -> Character.isDigit(ch)).count() > 3) return \"\
  No\";\n        // If all the checks above passed, then we return 'Yes'\n       \
  \ return \"Yes\";"
- "        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1) {\n\
  \            return \"No\";\n        }\n        else {\n            String ext =\
  \ file_name.substring(dotIndex + 1);\n            if (!(ext.equals(\"txt\") || ext.equals(\"\
  exe\") || ext.equals(\"dll\"))) {\n                return \"No\";\n            }\n\
  \            else {\n                for (int i = 0; i < file_name.length(); i++)\
  \ {\n                    if (i != dotIndex && Character.isDigit(file_name.charAt(i)))\
  \ {\n                        return \"No\";\n                    }\n           \
  \     }\n                if (Character.isDigit(file_name.charAt(0))) {\n       \
  \             return \"No\";\n                }\n                return \"Yes\"\
  ;\n            }\n        }"
- "        // if (file_name.indexOf(\".\") < 0) {\n        //     return \"No\";\n\
  \        // }\n        // Pattern p = Pattern.compile(\"[^a-zA-Z0-9.]\");\n    \
  \    // Matcher m = p.matcher(file_name);\n        // boolean b = m.find();\n  \
  \      // if (b) {\n        //     return \"No\";\n        // }\n        // int\
  \ firstDot = file_name.indexOf(\".\");\n        // String name = file_name.substring(0,\
  \ firstDot);\n        // String extension = file_name.substring(firstDot+1);\n \
  \       // if (!name.matches(\"[a-zA-Z]+\") || !extension.matches(\"txt|exe|dll\"\
  )) {\n        //     return \"No\";\n        // }\n        return \"No\";"
- "        Pattern p = Pattern.compile(\"([a-zA-Z]([a-zA-Z0-9]*[a-zA-Z]+[a-zA-Z0-9]*))\\\
  \\.(txt|exe|dll)\");\n        Matcher m = p.matcher(file_name);\n        return\
  \ m.matches() ? \"Yes\" : \"No\";"
- '        return null;'
- "        // Write your code here\n        int dot = file_name.indexOf('.');\n  \
  \      if (dot == -1) {\n            return \"No\";\n        }\n\n        String\
  \ pre = file_name.substring(0, dot);\n        if (pre.length() == 0) {\n       \
  \     return \"No\";\n        }\n        if (!Character.isLetter(pre.charAt(0)))\
  \ {\n            return \"No\";\n        }\n\n        if (file_name.substring(dot\
  \ + 1).matches(\"[0-9]*\")) {\n            return \"No\";\n        }\n\n       \
  \ String post = file_name.substring(dot + 1);\n        if (!post.equals(\"txt\"\
  ) && !post.equals(\"exe\") && !post.equals(\"dll\")) {\n            return \"No\"\
  ;\n        }\n\n        return \"Yes\";"
- "        // Write your code here.\n        return \"\";"
- "        String reg = \"^[a-zA-Z]\\\\w{0,3}\\\\.\\\\w{3}$\";\n        String[] parts\
  \ = file_name.split(\"\\\\.\");\n        return (parts.length == 2) && parts[1].matches(\"\
  txt|exe|dll\") ?\n                (file_name.matches(reg) ? \"Yes\" : \"No\") :\
  \ \"No\";"
- "        // your code goes here\n        if(file_name.length() == 0)\n         \
  \   return \"No\";\n        boolean valid = true;\n        String[] parts = file_name.split(\"\
  \\\\.\");\n        String prefix = parts[0];\n        String suffix = parts[1];\n\
  \        int count = 0;\n        for(int i = 0; i < prefix.length(); i++) {\n  \
  \          if(Character.isDigit(prefix.charAt(i)))\n                count++;\n \
  \       }\n        if(count > 3)\n            valid = false;\n        if(!Character.isLetter(prefix.charAt(0)))\n\
  \            valid = false;\n        if(!suffix.equals(\"txt\") && !suffix.equals(\"\
  exe\") && !suffix.equals(\"dll\"))\n            valid = false;\n        if(valid)\n\
  \            return \"Yes\";\n        return \"No\";"
- '        return "No";'
- "        // TODO: implement this function\n        String answer = \"\";\n     \
  \   String[] file_parts = file_name.split(\"\\\\.\");\n        if (file_parts.length\
  \ == 2) {\n            if (file_parts[0].length() > 0) {\n                if (file_parts[0].substring(0,\
  \ 1).matches(\"[a-zA-Z]\")) {\n                    if (file_parts[1].equals(\"txt\"\
  ) || file_parts[1].equals(\"exe\") || file_parts[1].equals(\"dll\")) {\n       \
  \                 if (file_parts[0].replaceAll(\"[^0-9]\", \"\").length() <= 3)\
  \ {\n                            answer = \"Yes\";\n                        }\n\
  \                    }\n                }\n            }\n        }\n        if\
  \ (answer.equals(\"\")) {\n            answer = \"No\";\n        }\n        return\
  \ answer;"
- "        // create a scanner to scan through the file name\n        Scanner scan\
  \ = new Scanner(file_name);\n        // get the first substring of the file name\n\
  \        String firstPart = scan.next();\n        // get the second substring of\
  \ the file name\n        String secondPart = scan.next();\n        // initialize\
  \ a count of digits\n        int count = 0;\n        // check the first part of\
  \ the file name\n        for (int i = 0; i < firstPart.length(); i++) {\n      \
  \      // get the character at that index\n            char c = firstPart.charAt(i);\n\
  \            // if the character is a digit\n            if (Character.isDigit(c))\
  \ {\n                // increase the digit count\n                count++;\n   \
  \         }\n        }\n        // if the digit count is greater than three\n  \
  \      if (count > 3) {\n            // return 'No'\n            return \"No\";\n\
  \        }\n        // if the first part does not start with a latin alphapet character\n\
  \        if (!Character.isLetter(firstPart.charAt(0))) {\n            // return\
  \ 'No'\n            return \"No\";\n        }\n        // if the second part is\
  \ not one of the three supported types\n        if (!secondPart.equals(\"txt\")\
  \ && !secondPart.equals(\"exe\") && !secondPart.equals(\"dll\")) {\n           \
  \ // return 'No'\n            return \"No\";\n        }\n        // return 'Yes'\n\
  \        return \"Yes\";"
- "        String[] arr = file_name.split(\"\\\\.\");\n        int count = 0;\n  \
  \      if (arr.length != 2) {\n            return \"No\";\n        }\n        for\
  \ (int i = 0; i < arr[0].length(); i++) {\n            if (Character.isDigit(arr[0].charAt(i)))\
  \ {\n                count++;\n            }\n        }\n        if (count > 3)\
  \ {\n            return \"No\";\n        }\n        if (arr[1].equals(\"txt\") ||\
  \ arr[1].equals(\"exe\") || arr[1].equals(\"dll\")) {\n            return \"Yes\"\
  ;\n        }\n        return \"No\";"
- "        // your code here\n        int counter = 0;\n        boolean fileName =\
  \ true;\n        boolean extension = true;\n        String extensionCheck = \"\"\
  ;\n        String fileNameCheck = \"\";\n        String [] arr = file_name.split(\"\
  \\\\.\");\n        String [] arr2 = arr[0].split(\"\");\n        String [] extensionArr\
  \ = {\"txt\", \"exe\", \"dll\"};\n        for(int i = 0; i < arr[0].length(); i++){\n\
  \            if(arr2[i].equals(\".\")){\n                fileName = false;\n   \
  \         }\n            if(arr2[i].matches(\"[0-9]\")){\n                counter++;\n\
  \            }\n            if(!arr2[i].matches(\"[a-zA-Z0-9]\")){\n           \
  \     fileName = false;\n            }\n        }\n        for(int i = 0; i < extensionArr.length;\
  \ i++){\n            if(arr[1].equals(extensionArr[i])){\n                extension\
  \ = true;\n            }\n        }\n        if(counter <= 3 && fileName == true\
  \ && extension == true){\n            return \"Yes\";\n        }\n        return\
  \ \"No\";"
- "        final String[] VALID_EXTS = {\"txt\", \"exe\", \"dll\"};\n        final\
  \ String EXT_DELIM = \".\";\n        Pattern r = Pattern.compile(\"\\\\d+\");\n\
  \        int delim_pos = file_name.indexOf(EXT_DELIM);\n        if (delim_pos ==\
  \ -1) {\n            return \"No\";\n        }\n        String name = file_name.substring(0,\
  \ delim_pos);\n        String ext = file_name.substring(delim_pos + 1);\n      \
  \  if (Character.isLetter(name.charAt(0)) == false) {\n            return \"No\"\
  ;\n        }\n        Matcher m = r.matcher(name);\n        int count = 0;\n   \
  \     while (m.find()) {\n            count++;\n        }\n        if (count > 3)\
  \ {\n            return \"No\";\n        }\n        for (String valid_ext : VALID_EXTS)\
  \ {\n            if (ext.equals(valid_ext)) {\n                return \"Yes\";\n\
  \            }\n        }\n        return \"No\";"
- '        // write your code here'
- "        // Write your code here\n        return \"\";"
- "        // your code\n        if(!file_name.matches(\"([a-zA-Z0-9]{1,}\\\\.[a-zA-Z0-9]{1,})\"\
  )){\n            return \"No\";\n        }\n        if(file_name.matches(\"(.*[a-zA-Z]{1,}.*\\\
  \\.[a-zA-Z]{3,})\")){\n            return \"Yes\";\n        }\n        return \"\
  No\";"
- "        // TODO: Write your code here\n        return null;"
- "        if (file_name.length() < 5) return \"No\";\n        int count = 0;\n  \
  \      int dot = -1;\n        for (int i = 0; i < file_name.length(); i++) {\n \
  \           if (file_name.charAt(i) == '.') {\n                dot = i;\n      \
  \          break;\n            }\n            if (file_name.charAt(i) >= '0' &&\
  \ file_name.charAt(i) <= '9') {\n                count++;\n            }\n     \
  \   }\n        if (count > 3) return \"No\";\n        if (dot == -1) return \"No\"\
  ;\n        if (dot == 0) return \"No\";\n        if (file_name.charAt(dot - 1) <\
  \ 'a' || file_name.charAt(dot - 1) > 'z') {\n            if (file_name.charAt(dot\
  \ - 1) < 'A' || file_name.charAt(dot - 1) > 'Z') {\n                return \"No\"\
  ;\n            }\n        }\n        if (file_name.charAt(dot + 1) != 't') return\
  \ \"No\";\n        if (file_name.charAt(dot + 2) != 'x') return \"No\";\n      \
  \  if (file_name.charAt(dot + 3) != 't') return \"No\";\n        if (file_name.charAt(dot\
  \ + 4) != '.') return \"No\";\n        if (file_name.charAt(dot + 5) != 'd') return\
  \ \"No\";\n        if (file_name.charAt(dot + 6) != 'l') return \"No\";\n      \
  \  if (file_name.charAt(dot + 7) != 'l') return \"No\";\n        return \"Yes\";"
- '        return "";'
- "        boolean hasDot = false;\n        String ext = null;\n        String before\
  \ = null;\n        int numberCount = 0;\n        char[] chars = file_name.toCharArray();\n\
  \        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '.')\
  \ {\n                hasDot = true;\n                before = file_name.substring(0,\
  \ i);\n                ext = file_name.substring(i + 1);\n            }\n      \
  \      if (Character.isDigit(chars[i])) {\n                numberCount++;\n    \
  \        }\n        }\n        if (numberCount > 3) {\n            return \"No\"\
  ;\n        }\n        if (!hasDot) {\n            return \"No\";\n        }\n  \
  \      if (before.length() == 0) {\n            return \"No\";\n        }\n    \
  \    if (!Character.isLetter(before.charAt(0))) {\n            return \"No\";\n\
  \        }\n        if (!ext.equals(\"txt\") && !ext.equals(\"exe\") && !ext.equals(\"\
  dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        String[] names = file_name.split(\"\\\\.\");\n        String type = names[1];\n\
  \        String[] parts = names[0].split(\"\");\n        char[] digits = {'0', '1',\
  \ '2', '3', '4', '5', '6', '7', '8', '9'};\n        int count = 0;\n        for\
  \ (int i = 0; i < parts.length; i++) {\n            for (int j = 0; j < digits.length;\
  \ j++) {\n                if (parts[i].equals(digits[j])) {\n                  \
  \  count++;\n                }\n            }\n        }\n        if (count > 3)\
  \ {\n            return \"No\";\n        }\n        if (!type.equals(\"txt\") &&\
  \ !type.equals(\"exe\") && !type.equals(\"dll\")) {\n            return \"No\";\n\
  \        }\n        if (Character.isLowerCase(names[0].charAt(0)) || Character.isUpperCase(names[0].charAt(0)))\
  \ {\n            return \"Yes\";\n        }\n        return \"No\";"
- '        return "";'
- '        return null;'
- "        if(file_name.contains(\"\\\\\") || file_name.contains(\"/\"))\n       \
  \     return \"No\";\n        String[] split = file_name.split(\"\\\\.\");\n   \
  \     if(split.length != 2)\n            return \"No\";\n        if(!split[0].matches(\"\
  [a-zA-Z]+[a-zA-Z0-9]*\"))\n            return \"No\";\n        if(split[1].length()\
  \ < 3)\n            return \"No\";\n        if(split[1].matches(\"[0-9]+\"))\n \
  \           return \"No\";\n        if(!(split[1].equals(\"txt\") || split[1].equals(\"\
  exe\") || split[1].equals(\"dll\")))\n            return \"No\";\n        return\
  \ \"Yes\";"
- "        if(file_name.length() == 0) return \"No\";\n        int count = 0;\n  \
  \      for(int i = 0; i < file_name.length(); i++)\n            if(file_name.charAt(i)\
  \ >= '0' && file_name.charAt(i) <= '9')\n                count++;\n        if(count\
  \ > 3) return \"No\";\n        int dot = file_name.indexOf('.');\n        if(dot\
  \ == -1) return \"No\";\n        String left = file_name.substring(0, dot);\n  \
  \      String right = file_name.substring(dot+1);\n        if(left.length() == 0)\
  \ return \"No\";\n        if(left.charAt(0) < 'a' || left.charAt(0) > 'z')\n   \
  \         if(left.charAt(0) < 'A' || left.charAt(0) > 'Z')\n                return\
  \ \"No\";\n        if(!right.equals(\"txt\") && !right.equals(\"exe\") && !right.equals(\"\
  dll\"))\n            return \"No\";\n        return \"Yes\";"
- "        if(file_name.length() < 5) return \"No\";\n        // System.out.println(file_name.substring(0,\
  \ 4));\n        // System.out.println(file_name.substring(0, 4).matches(\"[a-zA-Z][a-zA-Z0-9]*\"\
  ));\n        if(!file_name.substring(0, 4).matches(\"[a-zA-Z][a-zA-Z0-9]*\") ||\
  \ file_name.substring(file_name.length() - 4, file_name.length()).matches(\"[0-9][0-9][0-9][a-zA-Z]\"\
  )) return \"No\";\n        return \"Yes\";"
- "        String regex = \"^([a-zA-Z]\\\\d*)(\\\\.txt|\\\\.exe|\\\\.dll)$\";\n  \
  \      return Pattern.matches(regex, file_name) ? \"Yes\" : \"No\";"
- "        // Your code here\n        String result = \"No\";\n        String regex\
  \ = \"[a-zA-Z]{1}\\\\d{0,3}(\\\\.txt|\\\\.exe|\\\\.dll)\";\n        if (file_name.matches(regex))\
  \ {\n            result = \"Yes\";\n        }\n        return result;"
- "        int num_digits = 0;\n        int num_dots = 0;\n        int valid_substring_count\
  \ = 0;\n        int i = 0;\n        while (i < file_name.length()) {\n         \
  \   char c = file_name.charAt(i);\n            if (c >= '0' && c <= '9') {\n   \
  \             num_digits++;\n            } else if (c == '.') {\n              \
  \  num_dots++;\n            } else if (c >= 'a' && c <= 'z' || c >= 'A' && c <=\
  \ 'Z') {\n                valid_substring_count++;\n            }\n            i++;\n\
  \        }\n        if (num_digits > 3 || num_dots != 1 || valid_substring_count\
  \ != 1) {\n            return \"No\";\n        }\n        int dot_index = file_name.indexOf('.');\n\
  \        String before_dot = file_name.substring(0, dot_index);\n        String\
  \ after_dot = file_name.substring(dot_index + 1);\n        if (before_dot.length()\
  \ == 0 || (after_dot.equals(\"txt\") || after_dot.equals(\"exe\") || after_dot.equals(\"\
  dll\"))) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        String[] parts = file_name.split(\"\\\\.\");\n        String[] letters\
  \ = parts[0].split(\"[0-9]\");\n        String fileType = parts[1];\n        int\
  \ digits = parts[0].length() - letters.length;\n        boolean result = false;\n\
  \        if (letters.length > 0 && letters[0].length() > 0 && digits <= 3 && \n\
  \            (fileType.equals(\"txt\") || fileType.equals(\"exe\") || fileType.equals(\"\
  dll\"))) {\n            result = true;\n        }\n        return result ? \"Yes\"\
  \ : \"No\";"
- "        // create a regex that represents the conditions from the problem\n   \
  \     String regex = \"^[a-zA-Z]{1}[^0-9]*[0-9]{0,3}\\\\.(txt|exe|dll)$\";\n   \
  \     // regex is hard. I had to refer to online regex testers.\n        // regex101.com\n\
  \        // regexr.com\n        // regex.com\n        // This is a good explaination\
  \ of the regex.\n        // https://stackoverflow.com/questions/57117135/how-to-validate-file-name-according-to-some-rules-in-python\n\
  \        // and this is the regex that I derived.\n        // https://regex101.com/r/yAY6qY/1/\n\
  \        if (file_name.matches(regex)) {\n            return \"Yes\";\n        }\
  \ else {\n            return \"No\";\n        }"
- "        //String regex = \"^[a-zA-Z]\\\\w{0,3}\\\\.(exe|txt|dll)$\";\n        String\
  \ regex = \"^[a-zA-Z]\\\\w{0,3}\\\\.(exe|txt|dll)$\";\n        if (file_name.matches(regex))\n\
  \            return \"Yes\";\n        return \"No\";"
- "        int numOfDots = 0;\n        int numOfDigits = 0;\n        String subStringBeforeDot\
  \ = \"\";\n        String subStringAfterDot = \"\";\n        String extension =\
  \ \"\";\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n     \
  \   if (file_name.length() > 0) {\n            for (int i = 0; i < file_name.length();\
  \ i++) {\n                char character = file_name.charAt(i);\n              \
  \  if (character == '.') {\n                    numOfDots++;\n                 \
  \   if (numOfDots > 1) {\n                        return \"No\";\n             \
  \       }\n                    for (int j = i + 1; j < file_name.length(); j++)\
  \ {\n                        subStringAfterDot += file_name.charAt(j);\n       \
  \             }\n                } else if (character >= '0' && character <= '9')\
  \ {\n                    numOfDigits++;\n                    if (numOfDigits > 3)\
  \ {\n                        return \"No\";\n                    }\n           \
  \     } else if (i == 0 && !(character >= 'a' && character <= 'z') && !(character\
  \ >= 'A' && character <= 'Z')) {\n                    return \"No\";\n         \
  \       } else {\n                    subStringBeforeDot += character;\n       \
  \         }\n            }\n            if (numOfDots == 1 && subStringBeforeDot.length()\
  \ > 0) {\n                extension = subStringAfterDot;\n                for (int\
  \ i = 0; i < validExtensions.length; i++) {\n                    if (extension.equals(validExtensions[i]))\
  \ {\n                        return \"Yes\";\n                    }\n          \
  \      }\n            }\n        }\n        return \"No\";"
- "        // write your code here...\n        return \"\";"
- "        // YOUR CODE GOES HERE\n        return null;"
- "        int countDot = 0;\n        int countDigit = 0;\n        String[] file =\
  \ file_name.split(\"\");\n        String first = \"\";\n        String second =\
  \ \"\";\n        String[] files = file_name.split(\"\\\\.\");\n        // System.out.println(files[0]);\n\
  \        // System.out.println(files[1]);\n        for (int i = 0; i < file.length;\
  \ i++) {\n            if (Character.isDigit(file[i].charAt(0))) {\n            \
  \    countDigit++;\n            }\n            if (file[i].equals(\".\")) {\n  \
  \              countDot++;\n            }\n        }\n        if (countDot == 1\
  \ && countDigit <= 3 && files[0].length() != 0 && files[1].equals(\"txt\") || files[1].equals(\"\
  exe\") || files[1].equals(\"dll\")) {\n            first = file[0];\n          \
  \  for (int i = 0; i < first.length(); i++) {\n                if (Character.isDigit(first.charAt(i)))\
  \ {\n                    return \"No\";\n                }\n            }\n    \
  \        return \"Yes\";\n        }\n        return \"No\";"
- '        return null;'
- "        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length\
  \ != 2) return \"No\";\n        if (parts[0].matches(\"^.*[^A-Za-z].*$\")) return\
  \ \"No\";\n        if (parts[0].matches(\"^.*[0-9].*$\")) return \"No\";\n     \
  \   if (parts[0].matches(\"^.*[0-9]{4,}.*$\")) return \"No\";\n        if (!Arrays.asList(new\
  \ String[] {\"txt\", \"exe\", \"dll\"}).contains(parts[1])) return \"No\";\n   \
  \     return \"Yes\";"
- "        // your code here\n        int len = file_name.length();\n        int count\
  \ = 0;\n        boolean valid = true;\n        boolean dotfound = false;\n     \
  \   boolean checkedname = false;\n        boolean checkedext = false;\n        boolean\
  \ is_valid_name = false;\n        boolean is_valid_ext = false;\n        String\
  \ name = \"\";\n        String ext = \"\";\n        int i;\n        for (i = 0;\
  \ i < len; i++) {\n            char c = file_name.charAt(i);\n            if (c\
  \ == '.') {\n                dotfound = true;\n                continue;\n     \
  \       }\n            if (!dotfound) {\n                name += c;\n          \
  \  } else {\n                ext += c;\n            }\n        }\n        if (count\
  \ > 3) {\n            return \"No\";\n        }\n        is_valid_name = validname(name);\n\
  \        is_valid_ext = validext(ext);\n        if (is_valid_name && is_valid_ext)\
  \ {\n            return \"Yes\";\n        } else {\n            return \"No\";\n\
  \        }"
- "        int digitCount = 0;\n        int dotCount = 0;\n        int length = file_name.length();\n\
  \        char firstChar = file_name.charAt(0);\n        if (!((firstChar >= 'a'\
  \ && firstChar <= 'z') || (firstChar >= 'A' && firstChar <= 'Z')))\n           \
  \ return \"No\";\n        if (length < 3)\n            return \"No\";\n        if\
  \ (file_name.charAt(length - 1) == '.')\n            return \"No\";\n        for\
  \ (int i = 0; i < length; i++) {\n            char c = file_name.charAt(i);\n  \
  \          if (c >= '0' && c <= '9')\n                digitCount++;\n          \
  \  if (c == '.')\n                dotCount++;\n        }\n        if (digitCount\
  \ > 3 || dotCount != 1)\n            return \"No\";\n        if (file_name.indexOf('.')\
  \ == length - 1)\n            return \"No\";\n        String suffix = file_name.substring(file_name.indexOf('.')\
  \ + 1);\n        if (suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"\
  dll\"))\n            return \"Yes\";\n        return \"No\";"
- "        // Write your code here\n        return \"\";"
- "        // BEGIN: DO NOT TOUCH\n        final String[] allowed_extensions = {\"\
  txt\", \"exe\", \"dll\"};\n        // END: DO NOT TOUCH\n        // Implement your\
  \ solution here.\n        int count = 0;\n        for (int i = 0; i < file_name.length();\
  \ i++) {\n            if (Character.isDigit(file_name.charAt(i))) {\n          \
  \      count += 1;\n            }\n        }\n        if (count > 3) {\n       \
  \     return \"No\";\n        }\n        String[] result = file_name.split(\"\\\\\
  .\");\n        if (result.length != 2) {\n            return \"No\";\n        }\n\
  \        if (result[0].equals(\"\")) {\n            return \"No\";\n        }\n\
  \        if (!Character.isLetter(result[0].charAt(0))) {\n            return \"\
  No\";\n        }\n        if (!Arrays.asList(allowed_extensions).contains(result[1]))\
  \ {\n            return \"No\";\n        }\n        return \"Yes\";"
- '        return "";'
- "        if (file_name.length() > 3) {\n            return \"No\";\n        }\n\
  \        if (file_name.contains(\".\") && file_name.indexOf(\".\") == file_name.lastIndexOf(\"\
  .\")) {\n            String[] split = file_name.split(\"\\\\.\");\n            if\
  \ (Arrays.asList(split).contains(\"\")) {\n                return \"No\";\n    \
  \        }\n            if (split[0].length() > 3) {\n                return \"\
  No\";\n            }\n            if (split[0].matches(\"[a-zA-Z]+\")) {\n     \
  \           if (Arrays.asList(new String[]{\"txt\", \"exe\", \"dll\"}).contains(split[1]))\
  \ {\n                    return \"Yes\";\n                }\n            }\n   \
  \     }\n        return \"No\";"
- "        if(file_name.matches(\"[a-zA-Z]+\\\\d{0,3}\\\\.(txt|exe|dll)\"))\n    \
  \        return \"Yes\";\n        return \"No\";"
- "        if(file_name.matches(\"^([a-zA-Z]\\\\w{0,2}\\\\.txt|[a-zA-Z]\\\\w{0,2}\\\
  \\.exe|[a-zA-Z]\\\\w{0,2}\\\\.dll)$\")){\n            return \"Yes\";\n        }\n\
  \        return \"No\";"
- "        String retval = \"Yes\";\n        String[] splitted = file_name.split(\"\
  \\\\.\");\n        String firstpart = splitted[0];\n        String secondpart =\
  \ splitted[1];\n        if (firstpart.length() == 0 || !firstpart.matches(\"[a-zA-Z][a-zA-Z0-9]*\"\
  )) {\n            retval = \"No\";\n        }\n        if (!secondpart.matches(\"\
  (txt|exe|dll)\")) {\n            retval = \"No\";\n        }\n        if (file_name.matches(\"\
  .*\\\\d{4,}.*\")) {\n            retval = \"No\";\n        }\n        return retval;"
- "        String res = \"No\";\n        String[] tmp = file_name.split(\"\\\\.\"\
  );\n        String fname = tmp[0];\n        String extension = tmp[1];\n       \
  \ int digits = 0;\n        for (int i = 0; i < fname.length(); i++) {\n        \
  \    char c = fname.charAt(i);\n            if (Character.isDigit(c)) {\n      \
  \          digits++;\n            }\n        }\n        if (digits <= 3 && extension.matches(\"\
  txt|exe|dll\")) {\n            res = \"Yes\";\n        }\n        return res;"
- "        // put your code here\n        return \"No\";"
- "        // Your code here\n        return null;"
- "        // write your code here\n        if (file_name.length() > 10) {\n     \
  \       return \"No\";\n        }\n        if (file_name.matches(\".*[0-9].*[0-9].*[0-9].*\"\
  )) {\n            return \"No\";\n        }\n        if (file_name.matches(\".*\\\
  \\..*\\\\..*\")) {\n            return \"No\";\n        }\n        if (!file_name.matches(\"\
  .*\\\\..*\")) {\n            return \"No\";\n        }\n        if (!file_name.matches(\"\
  [a-zA-Z].*\\\\..*\")) {\n            return \"No\";\n        }\n        if (!file_name.matches(\"\
  .*\\\\.txt\") && !file_name.matches(\".*\\\\.exe\") && !file_name.matches(\".*\\\
  \\.dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        // Your code here\n        return \"\";"
- "        String[] arr = file_name.split(\"[.]\");\n        if (arr.length != 2)\
  \ {\n            return \"No\";\n        }\n        int nums = 0;\n        for (int\
  \ i = 0; i < arr[0].length(); i++) {\n            if (Character.isDigit(arr[0].charAt(i)))\
  \ {\n                nums++;\n            }\n        }\n        if (nums > 3) {\n\
  \            return \"No\";\n        }\n        if (!Character.isAlphabetic(arr[0].charAt(0)))\
  \ {\n            return \"No\";\n        }\n        if (!arr[1].equals(\"txt\")\
  \ && !arr[1].equals(\"exe\") && !arr[1].equals(\"dll\")) {\n            return \"\
  No\";\n        }\n        return \"Yes\";"
- '        '
- '        return null;'
- "        if (file_name.matches(\"([a-zA-Z]+)([0-9]{0,3})([.][txt|exe|dll])\")) {\n\
  \            return \"Yes\";\n        }\n        return \"No\";"
- "        String[] file_parts = file_name.split(\"\\\\.\");\n        String file_name_without_extension\
  \ = file_parts[0];\n        String file_extension = file_parts[1];\n        boolean\
  \ is_valid = false;\n        if (file_parts.length != 2) {\n            return \"\
  No\";\n        }\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(file_extension))\
  \ {\n            return \"No\";\n        }\n        if (file_name_without_extension.length()\
  \ == 0) {\n            return \"No\";\n        }\n        char[] digits = {'0',\
  \ '1', '2', '3', '4', '5', '6', '7', '8', '9'};\n        int counter = 0;\n    \
  \    for (int i = 0; i < file_name_without_extension.length(); i++) {\n        \
  \    if (Arrays.asList(digits).contains(file_name_without_extension.charAt(i)))\
  \ {\n                counter += 1;\n            }\n        }\n        if (counter\
  \ > 3) {\n            return \"No\";\n        }\n        char first_char = file_name_without_extension.charAt(0);\n\
  \        char[] alphapet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
  \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',\
  \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
  \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n        if (!Arrays.asList(alphapet).contains(first_char))\
  \ {\n            return \"No\";\n        }\n        return \"Yes\";"
- '        return "";'
- '        return null;'
- "        // Throw an exception if the argument is null or empty string\n       \
  \ if (file_name == null || file_name.length() == 0) {\n            throw new IllegalArgumentException(\"\
  The file name cannot be empty\");\n        }\n        // Compile a regular expression\
  \ which matches a digit, and replace all the digits\n        // with an empty string.\n\
  \        Pattern pattern = Pattern.compile(\"\\\\d\");\n        String digitsRemoved\
  \ = pattern.matcher(file_name).replaceAll(\"\");\n        // Count how many digits\
  \ are left in the file name. If more than three digits\n        // exist, return\
  \ 'No'\n        if (file_name.length() - digitsRemoved.length() > 3) {\n       \
  \     return \"No\";\n        }\n        // Find the index of the first occurrence\
  \ of the dot '.'\n        int indexOfDot = digitsRemoved.indexOf('.');\n       \
  \ // Remove the substring before the dot\n        String substringBeforeDot = digitsRemoved.substring(0,\
  \ indexOfDot);\n        // Remove the substring after the dot\n        String substringAfterDot\
  \ = digitsRemoved.substring(indexOfDot + 1);\n        // Create an array of valid\
  \ file extensions\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"\
  };\n        // Create a list of valid file extensions\n        List<String> validExtensionsList\
  \ = Arrays.asList(validExtensions);\n        // If the substring before the dot\
  \ is empty, or if the substring before the dot\n        // does not start with a\
  \ latin alphapet letter, or if the substring after the dot\n        // is not in\
  \ the valid extensions list, return 'No'\n        if (substringBeforeDot.length()\
  \ == 0 || !substringBeforeDot.matches(\"[a-zA-Z].*\") ||\n            !validExtensionsList.contains(substringAfterDot))\
  \ {\n            return \"No\";\n        }\n        // If the substring after the\
  \ dot contains more than three characters, return 'No'\n        if (substringAfterDot.length()\
  \ > 3) {\n            return \"No\";\n        }\n        // If the substring before\
  \ the dot has length of one, and the character is a number,"
- "        // We are using regular expressions to solve this problem.\n        //\
  \ The regular expression has four parts, separated by $.\n        // The first part\
  \ is '^[a-zA-Z]', which means that the string should start with a latin alphabet.\n\
  \        // The second part is '\\\\d{0,3}', which means that the string should\
  \ not have more than 3 digits.\n        // The third part is '\\\\.', which means\
  \ that there should be exactly one dot.\n        // The last part is '(txt|exe|dll)$',\
  \ which means that the string should end with either 'txt', 'exe', or 'dll'.\n \
  \       String regex = \"^[a-zA-Z]\\\\d{0,3}\\\\.(txt|exe|dll)$\";\n        Pattern\
  \ p = Pattern.compile(regex);\n        Matcher m = p.matcher(file_name);\n     \
  \   return m.matches() ? \"Yes\" : \"No\";"
- "        // Your code goes here\n        if(file_name.matches(\"[a-zA-Z]+\\\\d{1,3}\\\
  \\.(txt|exe|dll)\")){\n            return \"Yes\";\n        }\n        return \"\
  No\";"
- '        return Pattern.matches("^[a-zA-Z][0-9]{0,3}\\.(exe|txt|dll)$", file_name)
  ? "Yes" : "No";'
- "      if(file_name.length() <= 0) return \"No\";\n      if(file_name.length() ==\
  \ 1) return \"No\";\n      if(file_name.length() > 256) return \"No\";\n      char[]\
  \ chars = file_name.toCharArray();\n      int i = 0;\n      boolean startWithLetter\
  \ = false;\n      boolean containDot = false;\n      int maxDigitsCount = 0;\n \
  \     int digitsCount = 0;\n      for(char c : chars) {\n        // System.out.println(c);\n\
  \        if(i == 0) {\n          if(c >= 'A' && c <= 'Z') {\n            startWithLetter\
  \ = true;\n          } else if(c >= 'a' && c <= 'z') {\n            startWithLetter\
  \ = true;\n          } else {\n            return \"No\";\n          }\n       \
  \ } else {\n          if(c >= 'A' && c <= 'Z') {\n            if(digitsCount > 0)\
  \ {\n              maxDigitsCount = Math.max(maxDigitsCount, digitsCount);\n   \
  \           digitsCount = 0;\n            }\n          } else if(c >= 'a' && c <=\
  \ 'z') {\n            if(digitsCount > 0) {\n              maxDigitsCount = Math.max(maxDigitsCount,\
  \ digitsCount);\n              digitsCount = 0;\n            }\n          } else\
  \ if(c >= '0' && c <= '9') {\n            digitsCount += 1;\n          } else if(c\
  \ == '.') {\n            if(containDot) {\n              return \"No\";\n      \
  \      } else {\n              containDot = true;\n              maxDigitsCount\
  \ = Math.max(maxDigitsCount, digitsCount);\n              digitsCount = 0;\n   \
  \         }\n          } else {\n            return \"No\";\n          }\n     \
  \   }\n        i += 1;\n      }\n      if(containDot == false) return \"No\";\n\
  \      if(maxDigitsCount > 3) return \"No\";\n      String[] items = file_name.split(\"\
  \\\\.\");\n      String ext = items[items.length - 1];\n      if(ext.length() ==\
  \ 0) return"
- "        // your code here\n        return null;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        // Write your code here\n        // To print results to the\
  \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
  Hello world!\");\n        String[] exts = {\"txt\", \"exe\", \"dll\"};\n       \
  \ Set<String> allowedExtensions = new HashSet<String>(Arrays.asList(exts));\n  \
  \      String[] parts = file_name.split(\"\\\\.\");\n        String extension =\
  \ parts[1];\n        String name = parts[0];\n        String regex = \"[a-zA-Z0-9]*[a-zA-Z]+[a-zA-Z0-9]*\"\
  ;\n        Pattern p = Pattern.compile(regex);\n        Matcher m = p.matcher(name);\n\
  \        boolean matchName = m.matches();\n        int digitCount = 0;\n       \
  \ char[] chars = name.toCharArray();\n        for (char c : chars) {\n         \
  \   if (Character.isDigit(c)) {\n                digitCount++;\n            }\n\
  \        }\n        if (!matchName || allowedExtensions.contains(extension) == false\
  \ || digitCount > 3) {\n            return \"No\";\n        }\n        return \"\
  Yes\";"
- "        \n        String extension = file_name.substring(file_name.lastIndexOf(\"\
  .\") + 1);\n        String filename = file_name.substring(0, file_name.lastIndexOf(\"\
  .\"));\n        String[] extensions = {\"txt\", \"exe\", \"dll\"};\n        String\
  \ regex = \"^[a-zA-Z][a-zA-Z0-9]*\";\n        String digit_regex = \"[0-9]\";\n\
  \        int count = 0;\n        for (int i = 0; i < file_name.length(); i++) {\n\
  \            if (String.valueOf(file_name.charAt(i)).matches(digit_regex)) {\n \
  \               count++;\n            }\n        }\n        boolean valid_file_name\
  \ = file_name.contains(\".\") && count <= 3 && file_name.indexOf(\".\") != 0 &&\
  \ filename.matches(regex);\n        boolean valid_extension = Arrays.asList(extensions).contains(extension);\n\
  \        return valid_file_name && valid_extension ? \"Yes\" : \"No\";"
- "        // your code\n        return \"\";"
- "        // Your code here\n        return \"\";"
- "        // No more than three digits\n        int count = 0;\n        for (int\
  \ i = 0; i < file_name.length(); i++) {\n            if (Character.isDigit(file_name.charAt(i)))\
  \ count++;\n        }\n        if (count > 3) return \"No\";\n        // Exactly\
  \ one dot\n        int dots = 0;\n        for (int i = 0; i < file_name.length();\
  \ i++) {\n            if (file_name.charAt(i) == '.') dots++;\n        }\n     \
  \   if (dots != 1) return \"No\";\n        // Starts with a latin alphapet letter\n\
  \        if (!Character.isLetter(file_name.charAt(0))) return \"No\";\n        //\
  \ Ends with txt, exe, or dll\n        String[] extensions = new String[]{\"txt\"\
  , \"exe\", \"dll\"};\n        boolean isValidExtension = false;\n        for (String\
  \ extension : extensions) {\n            if (file_name.substring(file_name.length()\
  \ - extension.length()).equals(extension)) {\n                isValidExtension =\
  \ true;\n                break;\n            }\n        }\n        if (!isValidExtension)\
  \ return \"No\";\n        return \"Yes\";"
- "        // Write your code here\n        return null;"
- "        String[] parts = file_name.split(\"\\\\.\");\n        String substring_before_dot\
  \ = parts[0];\n        String substring_after_dot = parts[1];\n        if (substring_before_dot.matches(\"\
  ^[a-zA-Z].*$\") && \n                substring_before_dot.matches(\"^(?!.*\\\\d.*\\\
  \\d.*\\\\d.*$)[a-zA-Z].*$\") &&\n                Arrays.asList(\"txt\", \"exe\"\
  , \"dll\").contains(substring_after_dot)) {\n            return \"Yes\";\n     \
  \   }\n        return \"No\";"
- '        throw new UnsupportedOperationException("Not implemented");'
- "        if (file_name.length() < 4) return \"No\";\n        if (file_name.charAt(0)\
  \ < 'A' || (file_name.charAt(0) > 'Z' && file_name.charAt(0) < 'a') || file_name.charAt(0)\
  \ > 'z') return \"No\";\n        int dot = file_name.indexOf('.');\n        if (dot\
  \ < 1 || dot >= file_name.length() - 3) return \"No\";\n        int count = 0;\n\
  \        for (int i = 0; i < file_name.length(); i++) if (file_name.charAt(i) >=\
  \ '0' && file_name.charAt(i) <= '9') count++;\n        if (count > 3) return \"\
  No\";\n        if (file_name.substring(dot + 1).equals(\"txt\") || file_name.substring(dot\
  \ + 1).equals(\"exe\") || file_name.substring(dot + 1).equals(\"dll\")) return \"\
  Yes\";\n        return \"No\";"
- "        String regex = \"^[a-zA-Z][a-zA-Z0-9]{0,10}\\\\.(txt|exe|dll)$\";\n   \
  \     if (file_name.matches(regex)) {\n            return \"Yes\";\n        }\n\
  \        return \"No\";"
- "        // Your code here\n        if (countDigits(file_name) > 3) {\n        \
  \    return \"No\";\n        }\n        if (countDots(file_name) != 1) {\n     \
  \       return \"No\";\n        }\n        // Split the string on dots.\n      \
  \  String[] s = file_name.split(\"\\\\.\");\n        if (isAlphaOrSpace(s[0].charAt(0))\
  \ == false) {\n            return \"No\";\n        }\n        if (s[1].equals(\"\
  txt\") || s[1].equals(\"exe\") || s[1].equals(\"dll\")) {\n            return \"\
  Yes\";\n        }\n        return \"No\";"
- "        String valid = \"Yes\";\n        // Check if there are more than 3 digits\
  \ in the file's name.\n        int numDigits = 0;\n        for (int i = 0; i < file_name.length();\
  \ i++) {\n            char c = file_name.charAt(i);\n            if (c >= '0' &&\
  \ c <= '9') {\n                numDigits++;\n            }\n        }\n        if\
  \ (numDigits > 3) {\n            return \"No\";\n        }\n        // Check if\
  \ there is exactly one dot ('.') in the file's name.\n        int numDots = 0;\n\
  \        for (int i = 0; i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n\
  \            if (c == '.') {\n                numDots++;\n            }\n      \
  \  }\n        if (numDots != 1) {\n            return \"No\";\n        }\n     \
  \   // Check if the substring before the dot starts with a letter from the latin\
  \ alphapet.\n        String[] nameParts = file_name.split(\"\\\\.\");\n        String\
  \ beforeDot = nameParts[0];\n        char firstChar = beforeDot.charAt(0);\n   \
  \     if (!((firstChar >= 'a' && firstChar <= 'z') || (firstChar >= 'A' && firstChar\
  \ <= 'Z'))) {\n            return \"No\";\n        }\n        // Check if the substring\
  \ after the dot is one of the valid extensions.\n        String afterDot = nameParts[1];\n\
  \        Set<String> validExtensions = new HashSet<String>(Arrays.asList(\"txt\"\
  , \"exe\", \"dll\"));\n        if (!validExtensions.contains(afterDot)) {\n    \
  \        return \"No\";\n        }\n        return valid;"
- "        // create a pattern to match lowercase letters\n        Pattern p = Pattern.compile(\"\
  [a-z]+\");\n        // create a pattern to match digits\n        Pattern d = Pattern.compile(\"\
  [0-9]+\");\n        // create a matcher object.\n        Matcher m = p.matcher(file_name);\n\
  \        // check if string is alphabetic\n        if(m.find()) {\n            //\
  \ substring before the dot\n            String pre_dot = file_name.substring(0,\
  \ file_name.indexOf(\".\"));\n            // substring after the dot\n         \
  \   String after_dot = file_name.substring(file_name.indexOf(\".\") + 1);\n    \
  \        // check if the string has more than one dot\n            if(!file_name.contains(\"\
  ..\")) {\n                // check if the substring before the dot is not empty\n\
  \                if(!pre_dot.isEmpty()) {\n                    // check if substring\
  \ before the dot has more than three digits\n                    if(pre_dot.matches(\"\
  [0-9]{3,}\")) {\n                        return \"No\";\n                    }\n\
  \                    // check if the substring after the dot is one of the following:\n\
  \                    // ['txt', 'exe', 'dll']\n                    if(after_dot.equals(\"\
  txt\") || after_dot.equals(\"exe\") || after_dot.equals(\"dll\")) {\n          \
  \              return \"Yes\";\n                    }\n                }\n     \
  \       }\n        }\n        return \"No\";"
- "        // Your code here\n        String [] split = file_name.split(\"\\\\.\"\
  );\n        String stringDigits = \"^\\\\d+$\";\n        String stringLetter = \"\
  ^[a-zA-Z]+$\";\n        String extension = split[1];\n        if(!(extension.equals(\"\
  txt\") || extension.equals(\"exe\") || extension.equals(\"dll\")) || split.length\
  \ != 2)\n        {\n            return \"No\";\n        }\n        else\n      \
  \  {\n            return \"Yes\";\n        }"
- "        String result = \"No\";\n        String[] splitFileName = file_name.split(\"\
  \\\\.\");\n        int count = 0;\n        for (int i = 0; i < file_name.length();\
  \ i++) {\n            if (Character.isDigit(file_name.charAt(i))) {\n          \
  \      count++;\n            }\n        }\n        if (splitFileName.length == 2\
  \ && splitFileName[0].length() != 0 && count < 4 && \n            Character.isLetter(splitFileName[0].charAt(0))\
  \ &&\n            (splitFileName[1].equals(\"txt\") || splitFileName[1].equals(\"\
  exe\") || splitFileName[1].equals(\"dll\"))) {\n            result = \"Yes\";\n\
  \        }\n        return result;"
- "        int numCount = 0;\n        int dotCount = 0;\n        int endCount = 0;\n\
  \        for (int i = 0; i < file_name.length(); i++) {\n            if (Character.isDigit(file_name.charAt(i)))\
  \ {\n                numCount++;\n            }\n            if (file_name.charAt(i)\
  \ == '.') {\n                dotCount++;\n            }\n            if (i != 0\
  \ && file_name.charAt(i - 1) == '.') {\n                endCount = i;\n        \
  \    }\n        }\n        if (numCount > 3 || dotCount != 1 || !Character.isLetter(file_name.charAt(0))\
  \ || !(file_name.substring(endCount, file_name.length()).equals(\"txt\") || file_name.substring(endCount,\
  \ file_name.length()).equals(\"exe\") || file_name.substring(endCount, file_name.length()).equals(\"\
  dll\"))) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        // Write your code here\n        return \"\";"
- "        String[] splited = file_name.split(\"\\\\.\");\n        String first =\
  \ splited[0];\n        String last = splited[1];\n        int numDigits = 0;\n \
  \       for (int i = 0; i < first.length(); i++) {\n            if (Character.isDigit(first.charAt(i)))\
  \ {\n                numDigits++;\n            }\n        }\n        if (numDigits\
  \ > 3) {\n            return \"No\";\n        }\n        if (first.length() == 0)\
  \ {\n            return \"No\";\n        }\n        if (!(Character.isLetter(first.charAt(0))))\
  \ {\n            return \"No\";\n        }\n        if (!(last.equals(\"txt\") ||\
  \ last.equals(\"exe\") || last.equals(\"dll\"))) {\n            return \"No\";\n\
  \        }\n        return \"Yes\";"
- "        String[] parts = file_name.split(\"\\\\.\");\n        String ext = parts[1];\n\
  \        String[] listExt = {\"txt\", \"exe\", \"dll\"};\n        String pattern\
  \ = \"[a-zA-Z]+\";\n        String patternNums = \"[0-9]{1,3}\";\n        if (Arrays.asList(listExt).contains(ext)\
  \ && file_name.contains(\".\") && file_name.split(\"\\\\.\").length == 2 && file_name.split(\"\
  \\\\.\")[0].matches(pattern) && !file_name.split(\"\\\\.\")[0].matches(patternNums))\
  \ {\n            return \"Yes\";\n        }\n        return \"No\";"
- "        Pattern pattern = Pattern.compile(\"(\\\\d{1,3})?([a-z]\\\\w*)(\\\\.txt|\\\
  \\.exe|\\\\.dll)\");\n        Matcher matcher = pattern.matcher(file_name);\n  \
  \      if (matcher.matches()) {\n            return \"Yes\";\n        }\n      \
  \  return \"No\";"
- "        boolean is_valid = true;\n        String[] file_name_split = file_name.split(\"\
  \\\\.\");\n        String file_name_without_extension = file_name_split[0];\n  \
  \      String file_name_extension = file_name_split[1];\n        int number_of_digits\
  \ = file_name_without_extension.length() - file_name_without_extension.replaceAll(\"\
  [0-9]\", \"\").length();\n        is_valid = number_of_digits <= 3 && file_name_split.length\
  \ == 2 && file_name_without_extension.charAt(0) != ' ' && Character.isLetter(file_name_without_extension.charAt(0))\
  \ && (file_name_extension.equals(\"txt\") || file_name_extension.equals(\"exe\"\
  ) || file_name_extension.equals(\"dll\"));\n        return is_valid ? \"Yes\" :\
  \ \"No\";"
- "        // your code goes here\n        // iterate through each character of file_name\n\
  \        // if digit_counter > 3 then return 'No'\n        // if char is . then\n\
  \        // increment ._counter\n        // if ._counter > 1 then return 'No'\n\
  \        // if digits_counter > 3 or ._counter > 1 then return 'No'\n        //\
  \ if char == '.' then increment dot_counter\n        // if dot_counter > 1 then\
  \ return 'No'\n        // if char is in range('a', 'z') or in range('A', 'Z') then\n\
  \        // increment letter_counter\n        // if letter_counter > 1 then return\
  \ 'No'\n        // if char is in range('0', '9') then increment digits_counter\n\
  \        // if digits_counter > 3 then return 'No'\n        // if ._counter > 1\
  \ then return 'No'\n        // if char == '.' then increment dot_counter\n     \
  \   // if dot_counter > 1 then return 'No'\n        // check that the extension\
  \ is either 'txt', 'exe', or 'dll'\n        // if not then return 'No'\n       \
  \ // if pass all these conditions then return 'Yes'\n        int digits_counter\
  \ = 0;\n        int dot_counter = 0;\n        int letter_counter = 0;\n        for\
  \ (int i = 0; i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n\
  \            if (c == '.') {\n                dot_counter++;\n                if\
  \ (dot_counter > 1) {\n                    return \"No\";\n                }\n \
  \           } else if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n       \
  \         letter_counter++;\n                if (letter_counter > 1) {\n       \
  \             return \"No\";\n                }\n            } else if (c >= '0'\
  \ && c <= '9') {\n                digits_counter++;\n                if (digits_counter\
  \ > 3) {\n                    return \"No\";\n                }\n            }\n\
  \        }\n        if (dot_counter != 1) {\n            return \"No\";\n      \
  \  }\n        String extension = file_name.substring(file_name.indexOf"
- "        final int MAX_DIGITS = 3;\n        final int MAX_EXT_LENGTH = 3;\n    \
  \    // Check digits count\n        if (file_name.matches(\".*\\\\d{\" + (MAX_DIGITS\
  \ + 1) + \",}.*\"))\n            return \"No\";\n        // Check first letter\n\
  \        final char first_letter = file_name.charAt(0);\n        if (!((first_letter\
  \ >= 'a' && first_letter <= 'z') || (first_letter >= 'A' && first_letter <= 'Z')))\n\
  \            return \"No\";\n        // Check extension\n        final String[]\
  \ parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2)\n        \
  \    return \"No\";\n        if (parts[1].length() != MAX_EXT_LENGTH)\n        \
  \    return \"No\";\n        if (!(parts[1].equals(\"txt\") || parts[1].equals(\"\
  exe\") || parts[1].equals(\"dll\")))\n            return \"No\";\n        return\
  \ \"Yes\";"
- "        // Write your code here\n        String[] strs = file_name.split(\"\\\\\
  .\");\n        if (strs.length != 2) {\n            return \"No\";\n        }\n\
  \        String sub0 = strs[0];\n        String sub1 = strs[1];\n        if (sub0.length()\
  \ == 0 || sub1.length() == 0) {\n            return \"No\";\n        }\n       \
  \ if (!Character.isLetter(sub0.charAt(0))) {\n            return \"No\";\n     \
  \   }\n        int count = 0;\n        for (int i = 0; i < sub0.length(); i++) {\n\
  \            if (Character.isDigit(sub0.charAt(i))) {\n                count++;\n\
  \            }\n        }\n        if (count > 3) {\n            return \"No\";\n\
  \        }\n        if (!sub1.equals(\"txt\") && !sub1.equals(\"exe\") && !sub1.equals(\"\
  dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        // Write your code here:\n        String[] parts = file_name.split(\"\\\
  \\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\
  \        String first = parts[0];\n        String second = parts[1];\n        //\
  \ Check if there is more than 3 digits\n        if (first.matches(\".*\\\\d{4,}.*\"\
  )) {\n            return \"No\";\n        }\n        // Check if first part starts\
  \ with a letter\n        if (!first.matches(\"[a-zA-Z].*\")) {\n            return\
  \ \"No\";\n        }\n        // Check if second part is one of the valid endings\n\
  \        if (!(second.equals(\"txt\") || second.equals(\"exe\") || second.equals(\"\
  dll\"))) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        // find the index of the dot\n        int indexOfDot = file_name.indexOf('.');\n\
  \        if (indexOfDot == -1) return \"No\";\n        // find the index of the\
  \ first digit\n        int indexOfFirstDigit = file_name.indexOf('0');\n       \
  \ if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('1');\n   \
  \     if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('2');\n\
  \        if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('3');\n\
  \        if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('4');\n\
  \        if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('5');\n\
  \        if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('6');\n\
  \        if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('7');\n\
  \        if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('8');\n\
  \        if (indexOfFirstDigit == -1) indexOfFirstDigit = file_name.indexOf('9');\n\
  \        // find the index of the second digit\n        int indexOfSecondDigit =\
  \ file_name.indexOf('0', indexOfFirstDigit + 1);\n        if (indexOfSecondDigit\
  \ == -1) indexOfSecondDigit = file_name.indexOf('1', indexOfFirstDigit + 1);\n \
  \       if (indexOfSecondDigit == -1) indexOfSecondDigit = file_name.indexOf('2',\
  \ indexOfFirstDigit + 1);\n        if (indexOfSecondDigit == -1) indexOfSecondDigit\
  \ = file_name.indexOf('3', indexOfFirstDigit + 1);\n        if (indexOfSecondDigit\
  \ == -1) indexOfSecondDigit = file_name.indexOf('4', indexOfFirstDigit + 1);\n \
  \       if (indexOfSecondDigit =="
- '        return "";'
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        return null;"
- "        String name = file_name.substring(0, file_name.indexOf(\".\"));\n     \
  \   String ext = file_name.substring(file_name.indexOf(\".\") + 1);\n        return\
  \ !Pattern.matches(\"[a-zA-Z]*\", name) || !Pattern.matches(\"\\\\d*\", name) ||\
  \ name.length() > 3 || !Arrays.asList(\"txt\", \"exe\", \"dll\").contains(ext) ?\
  \ \"No\" : \"Yes\";"
- '        return Pattern.matches("^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$",
  file_name) ? "Yes" : "No";'
- '        return "";'
- "        // Write your code here\n        if (file_name.length() == 0) {\n     \
  \       return \"No\";\n        }\n        if (file_name.length() - file_name.replaceAll(\"\
  \\\\d\", \"\").length() > 3) {\n            return \"No\";\n        }\n        String[]\
  \ splitted = file_name.split(\"\\\\.\");\n        if (splitted.length != 2) {\n\
  \            return \"No\";\n        }\n        if (splitted[0].length() == 0) {\n\
  \            return \"No\";\n        }\n        if (!Character.isLetter(splitted[0].charAt(0)))\
  \ {\n            return \"No\";\n        }\n        if (!splitted[1].equals(\"txt\"\
  ) && !splitted[1].equals(\"exe\") && !splitted[1].equals(\"dll\")) {\n         \
  \   return \"No\";\n        }\n        return \"Yes\";"
- "        boolean is_valid = true;\n        int digit_count = 0;\n        int dot_count\
  \ = 0;\n        boolean has_valid_substr = false;\n        String[] valid_substrs\
  \ = new String[] {\"txt\", \"exe\", \"dll\"};\n        String[] substrings = file_name.split(\"\
  \\\\.\");\n        String substr_before_dot = substrings[0];\n        String substr_after_dot\
  \ = substrings[1];\n        for (char c : substr_before_dot.toCharArray()) {\n \
  \           if (Character.isDigit(c)) {\n                digit_count++;\n      \
  \      }\n        }\n        for (char c : file_name.toCharArray()) {\n        \
  \    if (c == '.') {\n                dot_count++;\n            }\n        }\n \
  \       for (String substr : valid_substrs) {\n            if (substr_after_dot.equals(substr))\
  \ {\n                has_valid_substr = true;\n            }\n        }\n      \
  \  if (digit_count > 3 || dot_count != 1 || substr_before_dot.isEmpty() || \n  \
  \          !Character.isLetter(substr_before_dot.charAt(0)) || !has_valid_substr)\
  \ {\n            is_valid = false;\n        }\n        return is_valid ? \"Yes\"\
  \ : \"No\";"
- "        if (file_name.length() <= 3) {\n            return \"No\";\n        }\n\
  \        int count = 0;\n        boolean is_dot = false;\n        for (int i = 0;\
  \ i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n  \
  \          if (Character.isDigit(c)) {\n                count++;\n            }\n\
  \            if (c == '.') {\n                is_dot = true;\n            }\n  \
  \      }\n        if (count > 3 || !is_dot) {\n            return \"No\";\n    \
  \    }\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length\
  \ != 2) {\n            return \"No\";\n        }\n        if (parts[0].length()\
  \ == 0 || !Character.isLetter(parts[0].charAt(0))) {\n            return \"No\"\
  ;\n        }\n        String substr = parts[1];\n        if (substr.equals(\"txt\"\
  ) || substr.equals(\"exe\") || substr.equals(\"dll\")) {\n            return \"\
  Yes\";\n        }\n        return \"No\";"
- "        String[] s = file_name.split(\"\\\\.\");\n        String[] parts = file_name.split(\"\
  \\\\d\");\n        String[] filetype = {\"txt\", \"exe\", \"dll\"};\n        if(parts.length\
  \ > 3 || s.length != 2 || s[0].length() < 1 || \n            !Arrays.asList(filetype).contains(s[1]))\
  \ {\n            return \"No\";\n        } else {\n            return \"Yes\";\n\
  \        }"
- "        int digits = 0;\n        int dot = 0;\n        String[] valid_extensions\
  \ = {\"txt\", \"exe\", \"dll\"};\n        String name = \"\";\n        String extension\
  \ = \"\";\n        for (int i = 0; i < file_name.length(); i++) {\n            if\
  \ (file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9') {\n               \
  \ digits++;\n            }\n            if (file_name.charAt(i) == '.') {\n    \
  \            dot++;\n                name = file_name.substring(0, i);\n       \
  \         extension = file_name.substring(i + 1);\n            }\n        }\n  \
  \      if (digits > 3 || dot != 1 || name.length() == 0 || !Character.isLetter(name.charAt(0)))\
  \ {\n            return \"No\";\n        }\n        for (String i : valid_extensions)\
  \ {\n            if (i.equals(extension)) {\n                return \"Yes\";\n \
  \           }\n        }\n        return \"No\";"
- "        // Write your code here\n        return \"\";"
- "        // TODO: Implement me\n        return null;"
- '        return "No";'
- "        // your code here\n        return null;"
- '        return null;'
- "        // TODO: write your code here\n        return \"\";"
- "        // # Write your code here\n        return \"\";"
- "        int d = 0;\n        int dot = 0;\n        for (int i = 0; i < file_name.length();\
  \ i++) {\n            if (file_name.charAt(i) == '.') {\n                dot = i;\n\
  \            }\n            if ('0' <= file_name.charAt(i) && file_name.charAt(i)\
  \ <= '9') {\n                d++;\n            }\n        }\n        String part1\
  \ = file_name.substring(0, dot);\n        String part2 = file_name.substring(dot\
  \ + 1);\n        System.out.println(part1);\n        System.out.println(part2);\n\
  \        System.out.println(d);\n        if ('a' <= part1.charAt(0) && part1.charAt(0)\
  \ <= 'z' || 'A' <= part1.charAt(0) && part1.charAt(0) <= 'Z') {\n            if\
  \ (d <= 3) {\n                if (part2.equals(\"txt\") || part2.equals(\"exe\"\
  ) || part2.equals(\"dll\")) {\n                    return \"Yes\";\n           \
  \     }\n            }\n        }\n        return \"No\";"
- "        String[] s = file_name.split(\"\\\\.\");\n        String[] a = s[0].split(\"\
  [0-9]\");\n        String[] b = s[1].split(\"[0-9]\");\n        if (s.length ==\
  \ 2 && a.length > 0 && a[0].length() > 0 && (s[1].equals(\"txt\") || s[1].equals(\"\
  exe\") || s[1].equals(\"dll\")) && (s[0].length() - a.length) <= 3 && b.length >\
  \ 0) {\n            return \"Yes\";\n        }\n        return \"No\";"
- "        // ToDo: Write your implementation\n        return \"\";"
- "        // write your code here\n        if (file_name.chars().filter(c -> c >=\
  \ '0' && c <= '9').count() > 3)\n            return \"No\";\n        String[] parts\
  \ = file_name.split(\"\\\\.\");\n        if (parts.length != 2)\n            return\
  \ \"No\";\n        if (parts[0].chars().filter(c -> c >= '0' && c <= '9').count()\
  \ > 0)\n            return \"No\";\n        String[] endings = {\"txt\", \"exe\"\
  , \"dll\"};\n        return Arrays.stream(endings).filter(parts[1]::equals).findFirst().orElse(\"\
  No\");"
- '        return "";'
- "        int n = file_name.length();\n        if(n<4) return \"No\";\n        char\
  \ last_char = file_name.charAt(n-1);\n        char prev_char = file_name.charAt(n-2);\n\
  \        String last_3_chars = new StringBuilder().append(prev_char).append(last_char).toString();\n\
  \        if(!(last_3_chars.equals(\"xt\") || last_3_chars.equals(\"xe\") || last_3_chars.equals(\"\
  ll\"))){\n            return \"No\";\n        }\n        int digits_cnt = 0;\n \
  \       for(int i=0;i<n;i++){\n            char c = file_name.charAt(i);\n     \
  \       if(c>='0' && c<='9'){\n                digits_cnt++;\n            }\n  \
  \      }\n        if(digits_cnt>3) return \"No\";\n        char first_char = file_name.charAt(0);\n\
  \        if(!((first_char>='a' && first_char<='z') || (first_char>='A' && first_char<='Z'))){\n\
  \            return \"No\";\n        }\n        return \"Yes\";"
- '        return Pattern.matches("[a-zA-Z]+[0-9]{0,3}.[txt|exe|dll]", file_name)
  ? "Yes" : "No";'
- "        String[] parts = file_name.split(\"\\\\.\");\n        String[] first =\
  \ parts[0].split(\"\\\\d+\");\n        String second = parts[1];\n        int len\
  \ = parts[0].length() - first[0].length();\n        if(len > 3 || first[0].length()\
  \ == 0 || first[0].matches(\"[0-9]\") || !second.matches(\"txt|exe|dll\")) {\n \
  \           return \"No\";\n        }\n        return \"Yes\";"
- "        final Pattern pattern = Pattern.compile(\"[^0-9]*[0-9]{0,3}[^0-9]*\\\\\
  .\\\\w{3}\");\n        final Matcher matcher = pattern.matcher(file_name);\n   \
  \     return matcher.matches() ? \"Yes\" : \"No\";"
- "        // if first substring doesn't start with letter\n        if (!Character.isLetter(file_name.charAt(0)))\
  \ {\n            return \"No\";\n        }\n        int number_of_dots = 0;\n  \
  \      for (int i = 0; i < file_name.length(); i++) {\n            // if there is\
  \ more than 1 dot\n            if (file_name.charAt(i) == '.') {\n             \
  \   number_of_dots++;\n            }\n            // if there is more than 3 digits\n\
  \            if (Character.isDigit(file_name.charAt(i))) {\n                return\
  \ \"No\";\n            }\n        }\n        if (number_of_dots > 1) {\n       \
  \     return \"No\";\n        }\n        String[] file_extensions = {\"txt\", \"\
  exe\", \"dll\"};\n        String[] file_name_array = file_name.split(\"\\\\.\");\n\
  \        for (String extension : file_extensions) {\n            if (file_name_array[1].equals(extension))\
  \ {\n                return \"Yes\";\n            }\n        }\n        return \"\
  No\";"
- "        // Write your code here\n        return \"\";"
- "        String[] tokens = file_name.split(\"\\\\.\");\n        if (tokens.length\
  \ != 2) {\n            return \"No\";\n        }\n        if (!String.valueOf(tokens[0].charAt(0)).matches(\"\
  [a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (tokens[0].replaceAll(\"\
  [^0-9]\", \"\").length() > 3) {\n            return \"No\";\n        }\n       \
  \ if (!tokens[1].matches(\"(txt|exe|dll)\")) {\n            return \"No\";\n   \
  \     }\n        return \"Yes\";"
- "        // Your code here\n        return \"\";"
- "        // your code here...\n        return \"Yes\";"
- '        return null;'
- "        int num_of_digits = 0;\n        for (int i = 0; i < file_name.length();\
  \ i++) {\n            if ('0' <= file_name.charAt(i) && file_name.charAt(i) <= '9')\
  \ {\n                num_of_digits++;\n            }\n        }\n        if (num_of_digits\
  \ > 3) {\n            return \"No\";\n        }\n        int dot_index = file_name.indexOf('.');\n\
  \        if (dot_index < 0) {\n            return \"No\";\n        }\n        if\
  \ (dot_index == 0) {\n            return \"No\";\n        }\n        char before_dot_first_letter\
  \ = file_name.charAt(0);\n        if (before_dot_first_letter < 'A' || 'Z' < before_dot_first_letter\
  \ && before_dot_first_letter < 'a' || 'z' < before_dot_first_letter) {\n       \
  \     return \"No\";\n        }\n        String after_dot = file_name.substring(dot_index\
  \ + 1);\n        if (!(after_dot.equals(\"txt\") || after_dot.equals(\"exe\") ||\
  \ after_dot.equals(\"dll\"))) {\n            return \"No\";\n        }\n       \
  \ return \"Yes\";"
- "        int digits = file_name.replaceAll(\"[^0-9]\", \"\").length();\n       \
  \ if (digits > 3) {\n            return \"No\";\n        }\n        int dots = file_name.replaceAll(\"\
  [^.]\", \"\").length();\n        if (dots != 1) {\n            return \"No\";\n\
  \        }\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length\
  \ != 2) {\n            return \"No\";\n        }\n        char first = parts[0].charAt(0);\n\
  \        if (first < 'a' || first > 'z' && first < 'A' || first > 'Z') {\n     \
  \       return \"No\";\n        }\n        if (!parts[1].equals(\"txt\") && !parts[1].equals(\"\
  exe\") && !parts[1].equals(\"dll\")) {\n            return \"No\";\n        }\n\
  \        return \"Yes\";"
- "        if(file_name.length() == 0) {\n            return \"No\";\n        }\n\
  \        String[] parts = file_name.split(\"\\\\.\");\n        if(parts.length !=\
  \ 2) {\n            return \"No\";\n        }\n        String prefix = parts[0];\n\
  \        String suffix = parts[1];\n        if(prefix.length() == 0) {\n       \
  \     return \"No\";\n        }\n        if(!(suffix.equals(\"txt\") || suffix.equals(\"\
  exe\") || suffix.equals(\"dll\"))) {\n            return \"No\";\n        }\n  \
  \      String pattern = \"^[a-zA-Z]+[\\\\w\\\\d]*$\";\n        if(!prefix.matches(pattern))\
  \ {\n            return \"No\";\n        }\n        if(prefix.matches(\"\\\\d+\"\
  )) {\n            return \"No\";\n        }\n        int count = 0;\n        for(int\
  \ i = 0; i < prefix.length(); i++) {\n            if(Character.isDigit(prefix.charAt(i)))\
  \ {\n                count++;\n            }\n        }\n        if(count > 3) {\n\
  \            return \"No\";\n        }\n        return \"Yes\";"
- "        // Write your code here\n        return \"\";"
- "        Pattern pattern = Pattern.compile(\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txed]{1,4}$\"\
  );\n        Matcher matcher = pattern.matcher(file_name);\n        if (matcher.find())\
  \ {\n            return \"Yes\";\n        }\n        return \"No\";"
- "        // Write code here\n        if (file_name.matches(\"[a-zA-Z]+([0-9]{1,3})*\\\
  \\.[a-zA-Z]+\")) {\n            String[] arr = file_name.split(\"\\\\.\");\n   \
  \         if (arr[1].equals(\"txt\") || arr[1].equals(\"exe\") || arr[1].equals(\"\
  dll\")) {\n                return \"Yes\";\n            }\n        }\n        return\
  \ \"No\";"
- "        String[] parts = file_name.split(\"\\\\.\");\n        String beforeDot\
  \ = parts[0];\n        String afterDot = parts[1];\n        if (file_name.replaceAll(\"\
  [^0-9]\", \"\").length() > 3) return \"No\";\n        if (beforeDot.length() ==\
  \ 0) return \"No\";\n        if (!beforeDot.substring(0, 1).matches(\"[a-zA-Z]\"\
  )) return \"No\";\n        if (!afterDot.matches(\"(txt|exe|dll)\")) return \"No\"\
  ;\n        return \"Yes\";"
- "        String arr[] = file_name.split(\"\\\\.\");\n        int cnt=0;\n      \
  \  for(int i=0;i<arr[0].length();i++)\n            if(arr[0].charAt(i)>='0' && arr[0].charAt(i)<='9')\
  \ cnt++;\n        if(cnt>3) return \"No\";\n        if(!arr[0].matches(\"[a-zA-Z]+\"\
  )) return \"No\";\n        if(!arr[1].equals(\"txt\") && !arr[1].equals(\"exe\"\
  ) && !arr[1].equals(\"dll\")) return \"No\";\n        return \"Yes\";"
- '        return "No";'
- '        return "";'
- '        return null;'
- "        String[] f = file_name.split(\"\\\\.\");\n        String file = f[0];\n\
  \        String extension = f[1];\n        int counter = 0;\n        for (char ch\
  \ : file.toCharArray()) {\n            if (Character.isDigit(ch)) counter++;\n \
  \       }\n        if (counter > 3) return \"No\";\n        if (Character.isDigit(file.charAt(0)))\
  \ return \"No\";\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(extension))\
  \ return \"No\";\n        return \"Yes\";"
- "        //Regex to check for only three numbers\n        if(!file_name.matches(\"\
  [a-zA-Z]*[0-9]{0,3}\\\\.[a-zA-Z]{3}\")){\n            return \"No\";\n        }\n\
  \        //Regex to check for only one dot\n        if(!file_name.matches(\"[a-zA-Z]*[0-9]{0,3}\\\
  \\.[a-zA-Z]{3}\")){\n            return \"No\";\n        }\n        //Regex to check\
  \ that before the dot it doesn't start with a number\n        if(!file_name.matches(\"\
  [a-zA-Z]*[0-9]{0,3}\\\\.[a-zA-Z]{3}\")){\n            return \"No\";\n        }\n\
  \        //Regex to check that the extenstion is valid\n        if(!file_name.matches(\"\
  [a-zA-Z]*[0-9]{0,3}\\\\.[a-zA-Z]{3}\")){\n            return \"No\";\n        }\n\
  \        return \"Yes\";"
- "      int dotIndex = file_name.indexOf('.');\n      if (dotIndex == -1) return\
  \ \"No\";\n      String[] parts = file_name.split(\"\\\\.\");\n      // Check number\
  \ of digits\n      int digitCount = parts[0].chars().filter(Character::isDigit).count();\n\
  \      if (digitCount > 3) return \"No\";\n      // Check for valid extension\n\
  \      if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) return\
  \ \"No\";\n      // Check if name is empty or not.\n      if (parts[0].isEmpty())\
  \ return \"No\";\n      // Check if it starts with a letter\n      return Character.isLetter(parts[0].charAt(0))\
  \ ? \"Yes\" : \"No\";"
- "        String result = \"No\";\n        String tmp = file_name.replaceAll(\"[a-zA-Z.]\"\
  , \"\");\n        if (tmp.length()<=3) {\n            if (file_name.indexOf(\".\"\
  )>0) {\n                if (file_name.indexOf(\".\")==file_name.lastIndexOf(\".\"\
  )) {\n                    if (file_name.indexOf(\".\")!=file_name.length()-1) {\n\
  \                        if ((file_name.length()-file_name.indexOf(\".\"))>4) {\n\
  \                            if (file_name.substring(file_name.indexOf(\".\")+1).matches(\"\
  txt|exe|dll\"))\n                                result = \"Yes\";\n           \
  \             }\n                    }\n                }\n            }\n     \
  \   }\n        return result;"
- "        int count = 0;\n        int index = 0;\n        boolean first = true;\n\
  \        for (int i = 0; i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n\
  \            if (Character.isDigit(c)) {\n                count++;\n           \
  \ }\n            if (c == '.') {\n                index = i;\n            }\n  \
  \          if (first && !Character.isLetter(c)) {\n                return \"No\"\
  ;\n            }\n            first = false;\n        }\n        if (count > 3)\
  \ {\n            return \"No\";\n        }\n        String extension = file_name.substring(index);\n\
  \        if (!extension.equals(\".txt\") && !extension.equals(\".exe\") && !extension.equals(\"\
  .dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";"
- "        // Write your code here.\n        // Hint: use regex.\n        return null;"
- "        if(file_name.matches(\"[a-zA-Z]+\\\\.txt\") || file_name.matches(\"[a-zA-Z]+\\\
  \\.exe\") || file_name.matches(\"[a-zA-Z]+\\\\.dll\"))\n            return \"Yes\"\
  ;\n        return \"No\";"
- "        // Write code here\n        return \"\";"
- "        if (file_name.length() < 5) {\n            return \"No\";\n        }\n\n\
  \        if (file_name.split(\"\\\\.\").length != 2) {\n            return \"No\"\
  ;\n        }\n\n        String[] parts = file_name.split(\"\\\\.\");\n        if\
  \ (parts[0].length() < 1) {\n            return \"No\";\n        }\n\n        if\
  \ (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n    \
  \    }\n\n        if (parts[1].length() < 3) {\n            return \"No\";\n   \
  \     }\n\n        if (!parts[1].equals(\"txt\") && !parts[1].equals(\"exe\") &&\
  \ !parts[1].equals(\"dll\")) {\n            return \"No\";\n        }\n\n      \
  \  if (parts[0].replaceAll(\"[^0-9]\", \"\").length() > 3) {\n            return\
  \ \"No\";\n        }\n\n        return \"Yes\";"
- "        if (file_name.length() < 5) { return \"No\"; }\n        int i = 0;\n  \
  \      int counter = 0;\n        while (i < file_name.length() && file_name.charAt(i)\
  \ != '.') {\n            if (file_name.charAt(i) >= '0' && file_name.charAt(i) <=\
  \ '9') { counter++; }\n            i++;\n        }\n        if (counter > 3) { return\
  \ \"No\"; }\n        if (i == file_name.length()) { return \"No\"; }\n        if\
  \ (i == 0) { return \"No\"; }\n        if (file_name.charAt(i) != '.') { return\
  \ \"No\"; }\n        String extension = file_name.substring(i + 1);\n        if\
  \ (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"\
  dll\")) { return \"No\"; }\n        return \"Yes\";"
- "        if(!file_name.matches(\"[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]{3}\")) {\n  \
  \          return \"No\";\n        }\n        int digit_count = file_name.length()\
  \ - file_name.replaceAll(\"[0-9]\", \"\").length();\n        if(digit_count > 3)\
  \ {\n            return \"No\";\n        }\n        return \"Yes\";"
- '        return file_name.matches("^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$")
  ? "Yes" : "No";'
- '        return "Yes";'
- "        // Your code here\n        return null;"
- "        String s=\"\";\n        String[] ar=file_name.split(\"[.]\");\n       \
  \ if(ar.length>2 || ar.length<=0)\n            return \"No\";\n        if(ar[0].length()==0)\n\
  \            return \"No\";\n        if(ar[0].length()>3){\n            for(int\
  \ i=0;i<ar[0].length();i++){\n                if(ar[0].charAt(i)>=48 && ar[0].charAt(i)<=57)\n\
  \                    s+=ar[0].charAt(i);\n            }\n            if(s.length()>3)\n\
  \                return \"No\";\n        }\n        if(ar[0].charAt(0)>=48 && ar[0].charAt(0)<=57)\n\
  \            return \"No\";\n        if(ar[1].equals(\"txt\") || ar[1].equals(\"\
  exe\") || ar[1].equals(\"dll\"))\n            return \"Yes\";\n        return \"\
  No\";"
- "        // Your code here\n        char[] arr = file_name.toCharArray();\n    \
  \    boolean condition1 = false;\n        boolean condition2 = false;\n        boolean\
  \ condition3 = false;\n        boolean condition4 = false;\n        boolean condition5\
  \ = false;\n        boolean condition6 = false;\n        for(int i = 0; i < arr.length;\
  \ i++) {\n            if(!(arr[i] == '0' || arr[i] == '1' || arr[i] == '2' || arr[i]\
  \ == '3' || arr[i] == '4' || arr[i] == '5' || arr[i] == '6' || arr[i] == '7' ||\
  \ arr[i] == '8' || arr[i] == '9')) {\n                condition1 = true;\n     \
  \       }\n            if(arr[i] == '.') {\n                condition2 = true;\n\
  \            }\n            if(i == 0 && (arr[i] == 'a' || arr[i] == 'b' || arr[i]\
  \ == 'c' || arr[i] == 'd' || arr[i] == 'e' || arr[i] == 'f' || arr[i] == 'g' ||\
  \ arr[i] == 'h' || arr[i] == 'i' || arr[i] == 'j' || arr[i] == 'k' || arr[i] ==\
  \ 'l' || arr[i] == 'm' || arr[i] == 'n' || arr[i] == 'o' || arr[i] == 'p' || arr[i]\
  \ == 'q' || arr[i] == 'r' || arr[i] == 's' || arr[i] == 't' || arr[i] == 'u' ||\
  \ arr[i] == 'v' || arr[i] == 'w' || arr[i] == 'x' || arr[i] == 'y' || arr[i] ==\
  \ 'z' || arr[i] == 'A' || arr[i] == 'B' || arr[i] == 'C' || arr[i] == 'D' || arr[i]\
  \ == 'E' || arr[i] == 'F'"
- "        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length\
  \ != 2) {\n            return \"No\";\n        }\n        String[] extensions =\
  \ {\"txt\", \"exe\", \"dll\"};\n        String fileName = parts[0];\n        String\
  \ extension = parts[1];\n        if (Stream.of(extensions).anyMatch(x -> x.equals(extension))\n\
  \                && fileName.matches(\"[a-zA-Z]+\\\\d{0,3}\")\n                &&\
  \ !fileName.contains(\"\\\\.\")) {\n            return \"Yes\";\n        }\n   \
  \     return \"No\";"
- "        String[] parts = file_name.split(\"\\\\.\");\n        int dots = 0;\n \
  \       if (parts.length != 2) return \"No\";\n        Pattern before = Pattern.compile(\"\
  [a-zA-Z]\");\n        if (!before.matcher(parts[0]).find()) return \"No\";\n   \
  \     Pattern after = Pattern.compile(\"^(txt|exe|dll)$\");\n        if (!after.matcher(parts[1]).find())\
  \ return \"No\";\n        return \"Yes\";"
- "        // Write your code here!\n        String[] substring = file_name.split(\"\
  \\\\.\");\n        String str = \"\";\n        if(substring.length == 2) {\n   \
  \         String str2 = substring[0];\n            String str3 = substring[1];\n\
  \            str = file_name_checker(str2, str3);\n        }\n        return str;"
- "        if (file_name.length() == 0) {\n            return \"No\";\n        }\n\
  \        if (file_name.length() < 4) {\n            return \"No\";\n        }\n\
  \        if (file_name.length() > 20) {\n            return \"No\";\n        }\n\
  \        int digits = 0;\n        int letter = 0;\n        int dot = 0;\n      \
  \  boolean start = false;\n        boolean valid_extension = false;\n        for\
  \ (int i = 0; i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n\
  \            if (c == '.') {\n                dot++;\n                start = false;\n\
  \                if (letter == 0) {\n                    return \"No\";\n      \
  \          }\n                if (i > file_name.length() - 4) {\n              \
  \      return \"No\";\n                }\n                String suffix = file_name.substring(i\
  \ + 1, i + 4);\n                if (suffix.equals(\"txt\") || suffix.equals(\"exe\"\
  ) || suffix.equals(\"dll\")) {\n                    valid_extension = true;\n  \
  \              }\n            } else if (c >= '0' && c <= '9') {\n             \
  \   digits++;\n                if (digits > 3) {\n                    return \"\
  No\";\n                }\n            } else if (c >= 'a' && c <= 'z') {\n     \
  \           letter++;\n                start = true;\n            } else if (c >=\
  \ 'A' && c <= 'Z') {\n                letter++;\n                start = true;\n\
  \            } else {\n                return \"No\";\n            }\n        }\n\
  \        if (dot != 1) {\n            return \"No\";\n        }\n        if (!start)\
  \ {\n            return \"No\";\n        }\n        if (!valid_extension) {\n  \
  \          return \"No\";\n        }\n        return \"Yes\";"
- '        // your code goes here'
- "        String regex = \"[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}\";\n        return\
  \ Pattern.matches(regex, file_name) ? \"Yes\" : \"No\";"
- '        return "";'
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        \n        // var file_name_substr = file_name.substring(1);\n\
  \        // var result = file_name_substr.matches(\".*\\\\d.*\");\n        // return\
  \ result;\n        \n        if(file_name.matches(\".*\\\\d{4,}.*\")) {\n      \
  \      return \"No\";\n        }\n        else if (file_name.matches(\".*\\\\.{2,}.*\"\
  )) {\n            return \"No\";\n        }\n        else if (file_name.substring(0,\
  \ file_name.indexOf(\".\")).matches(\".*\\\\d.*\")) {\n            return \"No\"\
  ;\n        }\n        else if (!(file_name.substring(file_name.indexOf(\".\") +\
  \ 1).equals(\"txt\") || \n                   file_name.substring(file_name.indexOf(\"\
  .\") + 1).equals(\"exe\") || \n                   file_name.substring(file_name.indexOf(\"\
  .\") + 1).equals(\"dll\"))) {\n            return \"No\";\n        }\n        else\
  \ if (file_name.substring(0, file_name.indexOf(\".\")).equals(\"\")) {\n       \
  \     return \"No\";\n        }\n        else {\n            return \"Yes\";\n \
  \       }"
- "        // your code goes here\n        if (file_name.contains(\"..\")) return\
  \ \"No\";\n        if (file_name.contains(\"...\")) return \"No\";\n        if (file_name.contains(\"\
  ....\")) return \"No\";\n        if (file_name.contains(\".....\")) return \"No\"\
  ;\n        if (file_name.contains(\".....\")) return \"No\";\n        if (file_name.contains(\"\
  ......\")) return \"No\";\n        if (file_name.contains(\".......\")) return \"\
  No\";\n        if (file_name.contains(\"........\")) return \"No\";\n        if\
  \ (file_name.contains(\".........\")) return \"No\";\n        if (file_name.contains(\"\
  ..........\")) return \"No\";\n        if (file_name.contains(\"...........\"))\
  \ return \"No\";\n        if (file_name.contains(\"............\")) return \"No\"\
  ;\n        if (file_name.contains(\".............\")) return \"No\";\n        if\
  \ (file_name.contains(\"..............\")) return \"No\";\n        if (file_name.contains(\"\
  ...............\")) return \"No\";\n        if (file_name.contains(\"..................\"\
  )) return \"No\";\n        if (file_name.contains(\"...................\")) return\
  \ \"No\";\n        if (file_name.contains(\"....................\")) return \"No\"\
  ;\n        if (file_name.contains(\".....................\")) return \"No\";\n \
  \       if (file_name.contains(\"......................\")) return \"No\";\n   \
  \     if (file_name.contains(\".......................\")) return \"No\";\n    \
  \    if (file_name.contains(\"........................\")) return \"No\";\n    \
  \    if (file_name.contains(\".........................\")) return \"No\";\n   \
  \     if (file_name.contains(\"..........................\")) return \"No\";\n \
  \       if (file_name.contains(\"...........................\")) return \"No\";\n\
  \        if (file_name.contains(\"............................\")) return \"No\"\
  ;\n        if (file_name.contains(\".............................\")) return \"\
  No\";\n        if (file_name.contains(\"..............................\")) return\
  \ \"No\";\n        if"
- "        if (file_name.length() < 5) return \"No\";\n        if (file_name.charAt(0)\
  \ < 'a' || file_name.charAt(0) > 'z') {\n            if (file_name.charAt(0) < 'A'\
  \ || file_name.charAt(0) > 'Z') {\n                return \"No\";\n            }\n\
  \        }\n        int i = 1;\n        int count = 0;\n        while (i < file_name.length()\
  \ && file_name.charAt(i) != '.') {\n            if (file_name.charAt(i) >= '0' &&\
  \ file_name.charAt(i) <= '9') {\n                count++;\n            }\n     \
  \       i++;\n        }\n        if (count > 3) return \"No\";\n        if (file_name.charAt(i)\
  \ != '.') return \"No\";\n        String txt = file_name.substring(i + 1);\n   \
  \     if (txt.equals(\"txt\") || txt.equals(\"exe\") || txt.equals(\"dll\")) {\n\
  \            return \"Yes\";\n        }\n        return \"No\";"
- "        String[] split = file_name.split(\"\\\\.\");\n        if (split.length\
  \ != 2) return \"No\";\n        String[] parts = file_name.split(\"[^a-zA-Z]\");\n\
  \        if (parts.length != 2) return \"No\";\n        if (split[1].equals(\"txt\"\
  ) || split[1].equals(\"exe\") || split[1].equals(\"dll\")) {\n            return\
  \ \"Yes\";\n        }\n        return \"No\";"
- "        String[] split_file_name = file_name.split(\"\\\\.\");\n        String\
  \ file_type = split_file_name[1];\n        if (split_file_name.length == 2) {\n\
  \            String name = split_file_name[0];\n            String name_regex =\
  \ \"[a-zA-Z]{1}[\\\\w]*\";\n            String file_type_regex = \"txt|exe|dll\"\
  ;\n            if (name.matches(name_regex) && file_type.matches(file_type_regex))\
  \ {\n                if (Long.toString(name.chars().filter(Character::isDigit).count()).equals(\"\
  3\")) {\n                    return \"Yes\";\n                }\n            }\n\
  \        }\n        return \"No\";"
- "        String first = \"^[a-zA-Z][^\\\\.]{1,}\";\n        String second = \"\\\
  \\.[a-zA-Z]{3}$\";\n        String third = \"^[^0-9]{1,}\";\n        String[] parts\
  \ = file_name.split(\"\\\\.\");\n        String[] firstPart = parts[0].split(\"\"\
  );\n        String[] thirdPart = parts[1].split(\"\");\n        System.out.println(parts[0]);\n\
  \        System.out.println(parts[1]);\n        int count = 0;\n        for (int\
  \ i = 0; i < firstPart.length; i++) {\n            System.out.println(firstPart[i]);\n\
  \            if (firstPart[i].matches(\"[0-9]\")) {\n                count++;\n\
  \            }\n        }\n        System.out.println(count);\n        if (count\
  \ > 3) {\n            return \"No\";\n        }\n        else if (!parts[0].matches(first))\
  \ {\n            return \"No\";\n        }\n        else if (!parts[1].matches(second))\
  \ {\n            return \"No\";\n        }\n        else if (!parts[0].matches(third))\
  \ {\n            return \"No\";\n        }\n        else {\n            return \"\
  Yes\";\n        }"
- '        return "";'
language: java
name: HumanEval_141_file_name_check
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"\
  1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
  \    public static String fileNameCheck(String file_name) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
