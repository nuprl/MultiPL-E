completions:
- "        // \"l\" is a list, i.e. an array of integers.\n        // You may use\
  \ built-in function \"Collections.max()\".\n        // Please check out the documentation:\
  \ https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html\n       \
  \ // ...\n        return Collections.max(l);"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- '        return l.stream().max(Integer::compare).get();'
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        // INSERT YOUR CODE HERE\n        int max = l.get(0);\n        for (int\
  \ i = 1; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n    \
  \    }\n        return max;"
- "\t\treturn 0;"
- "        int max = Integer.MIN_VALUE;\n        for (int x : l) {\n            if\
  \ (x > max) {\n                max = x;\n            }\n        }\n        return\
  \ max;"
- '        return Collections.max(l);'
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            if (l.get(i) > max)\n                max = l.get(i);\n        }\n\
  \        return max;"
- "        int max = 0;\n        for (int element : l) {\n            if (element\
  \ > max) {\n                max = element;\n            }\n        }\n        return\
  \ max;"
- "        int maxValue = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
  \            if (l.get(i) > maxValue) {\n                maxValue = l.get(i);\n\
  \            }\n        }\n        return maxValue;"
- '        return 1;'
- '        return l.stream().max(Integer::compare).get();'
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        int max = l.get(0);\n        for (int i : l) {\n            if (i > max)\
  \ {\n                max = i;\n            }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int x : l) {\n            if\
  \ (x > max) {\n                max = x;\n            }\n        }\n        return\
  \ max;"
- '        return 0;'
- "        //YOUR CODE GOES HERE\n        int max=-9999;\n        for(int i=0;i<l.size();i++)\n\
  \        {\n            if(l.get(i)>max)\n            {\n                max=l.get(i);\n\
  \            }\n        }\n        return max;"
- "        // Write your code here\n        int max = l.get(0);\n        for (int\
  \ i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n             \
  \   max = l.get(i);\n            }\n        }\n        return max;"
- "        int m = l.get(0);\n        for (int i : l) {\n            if (i > m) {\n\
  \                m = i;\n            }\n        }\n        return m;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            if (l.get(i) > max)\n                max = l.get(i);\n        }\n\
  \        return max;"
- '        return Collections.max(l);'
- "\t\treturn Collections.max(l);"
- '        return Collections.max(l);'
- '        return l.stream().reduce(Integer.MIN_VALUE, Math::max);'
- "        // write your code here\n        int max = 0;\n        for (int i = 0;\
  \ i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max =\
  \ l.get(i);\n            }\n        }\n        return max;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        if (l.size() == 0)\n            return 0;\n        int max = l.get(0);\n\
  \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\n\
  \                max = l.get(i);\n        }\n        return max;"
- "        int max = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  if (l.get(i) > max) {\n                max = l.get(i);\n            }\n     \
  \   }\n        return max;"
- "        int m = Integer.MIN_VALUE;\n        for (int x : l) {\n            if (x\
  \ > m) {\n                m = x;\n            }\n        }\n        return m;"
- '        return l.stream().max(Integer::compare).get();'
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         int value = l.get(i);\n            if (value > max) {\n              \
  \  max = value;\n            }\n        }\n        return max;"
- "\treturn Collections.max(l);"
- "        // TODO: complete this method\n        return 0;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        // WRITE DOWN YOUR CODE HERE\n        int max = -10000;\n        for (int\
  \ i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n             \
  \   max = l.get(i);\n            }\n        }\n        return max;"
- "        int m = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if\
  \ (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n  \
  \      return m;"
- '        return Collections.max(l);'
- "        int m = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            m = Math.max(m, l.get(i));\n        }\n        return m;"
- "        int max = Integer.MIN_VALUE;\n        for (int x : l) {\n            if\
  \ (x > max) {\n                max = x;\n            }\n        }\n        return\
  \ max;"
- "        // Your code here\n        if (l.size()==0) return 0;\n        int max=0;\n\
  \        for (int i=0;i<l.size();i++){\n            if (l.get(i)>max) max=l.get(i);\n\
  \        }\n        return max;"
- '        return l.stream().max(Integer::compare).get();'
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            if (l.get(i) > max) {\n                max = l.get(i);\n      \
  \      }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            max = Math.max(max, l.get(i));\n        }\n        return max;"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        // YOUR CODE HERE\n        // You may want to use Collections.max()\n \
  \       int max = Collections.max(l);\n        return max;"
- '        return Collections.max(l);'
- "        // ...\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i\
  \ < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n  \
  \      return max;"
- "        int max_element = Integer.MIN_VALUE;\n        // Your code here...\n  \
  \      return max_element;"
- "        int result = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
  \            if (l.get(i) > result) {\n                result = l.get(i);\n    \
  \        }\n        }\n        return result;"
- "        /* Replace this with your code. */\n        int max = 0;\n        for (int\
  \ i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n             \
  \   max = l.get(i);\n            }\n        }\n        return max;"
- '        return 0;'
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        int maximum = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size();\
  \ i++) {\n            maximum = Math.max(maximum, l.get(i));\n        }\n      \
  \  return maximum;"
- '        return Collections.max(l);'
- "        int max = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  if (l.get(i) > max) {\n                max = l.get(i);\n            }\n     \
  \   }\n        return max;"
- '        return l.stream().max(Integer::compare).get();'
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        int max = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  if (l.get(i) > max) {\n                max = l.get(i);\n            }\n     \
  \   }\n        return max;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        // Your code goes here\n        return Collections.max(l);"
- "        // WRITE CODE HERE.\n        if(l.size()==0)\n            return 0;\n \
  \       if(l.size()==1)\n            return l.get(0);\n        int max=l.get(0);\n\
  \        for(int i=1;i<l.size();i++)\n        {\n            if(l.get(i)>max)\n\
  \                max=l.get(i);\n        }\n        return max;"
- '        return Collections.max(l);'
- "        // YOUR CODE HERE\n        return Collections.max(l);"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        int ret = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  if (ret < l.get(i)) {\n                ret = l.get(i);\n            }\n     \
  \   }\n        return ret;"
- '        return Collections.max(l);'
- '        return 0;'
- '        return Collections.max(l);'
- "        // your code\n        int max = Integer.MIN_VALUE;\n        for (int item\
  \ : l) {\n            if (item > max) {\n                max = item;\n         \
  \   }\n        }\n        return max;"
- '        throw new IllegalArgumentException("Not implemented yet");'
- "        // TODO: Implement me\n        return l.stream().max(Integer::compare).get();"
- "        // Your code goes here...\n        return 0;"
- "        // This works as well: return Collections.max(l);\n        return l.stream().max(Integer::compare).get();"
- "        //return Collections.max(l);\n        return l.stream().mapToInt(v -> v).max().getAsInt();"
- "        int result = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size();\
  \ i++) {\n            if (l.get(i) > result) {\n                result = l.get(i);\n\
  \            }\n        }\n        return result;"
- "        if (l.size() == 0)\n            return 0;\n        int m = l.get(0);\n\
  \        for (int e : l)\n            if (e > m)\n                m = e;\n     \
  \   return m;"
- '        return l.stream().max(Integer::compare).get();'
- "        int max = l.get(0);\n        for (int a: l) {\n            if (a > max)\
  \ {\n                max = a;\n            }\n        }\n        return max;"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        int max = l.get(0);\n        for (int i : l) {\n            if (i > max)\
  \ {\n                max = i;\n            }\n        }\n        return max;"
- "        int max_value = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size();\
  \ i++) {\n            max_value = Math.max(max_value, l.get(i));\n        }\n  \
  \      return max_value;"
- '        return l.stream().max(Integer::compare).get();'
- "      int max = 0;\n      for (int i = 0; i < l.size(); i++) {\n        if (l.get(i)\
  \ > max) {\n          max = l.get(i);\n        }\n      }\n      return max;"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        if (l.size() == 0) return 0;\n        int max = l.get(0);\n        for\
  \ (int i = 1; i < l.size(); i++)\n            if (l.get(i) > max) max = l.get(i);\n\
  \        return max;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         int value = l.get(i);\n            if (value > max) {\n              \
  \  max = value;\n            }\n        }\n        return max;"
- '        return Collections.max(l);'
- "        int x = 0;\n        for (int i : l) x = Math.max(x, i);\n        return\
  \ x;"
- '        return Collections.max(l);'
- '        throw new RuntimeException("Not implemented");'
- "        // YOUR CODE HERE\n        int max = l.get(0);\n        for (int n: l)\
  \ {\n            if (n > max) {\n                max = n;\n            }\n     \
  \   }\n        return max;"
- '        return 0;'
- '        return Collections.max(l);'
- "        // Find the maximum element\n        return 42;"
- '        return Collections.max(l);'
- "      int max = l.get(0);\n      for (int i = 1; i < l.size(); i++) {\n       \
  \ max = Math.max(max, l.get(i));\n      }\n      return max;"
- '        return Collections.max(l);'
- "        // TODO: implement this function (remove \"return -1;\" part)\n       \
  \ return -1;"
- "        int max_value = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size();\
  \ i++) {\n            max_value = Math.max(max_value, l.get(i));\n        }\n  \
  \      return max_value;"
- '        // Your code here.'
- "        // TODO: Implement this function.\n        // The function implementation\
  \ must pass all the test cases.\n        // Implement your solution here!\n    \
  \    int max=l.get(0);\n        for(int i=1;i<l.size();i++){\n            if(l.get(i)>max){\n\
  \                max=l.get(i);\n            }\n        }\n        return max;"
- "        int result = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size();\
  \ i++) {\n            result = Math.max(result, l.get(i));\n        }\n        return\
  \ result;"
- '        return Collections.max(l);'
- "        int max = Integer.MIN_VALUE;\n        for (int e : l) {\n            if\
  \ (e > max) {\n                max = e;\n            }\n        }\n        return\
  \ max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- '        return l.stream().max(Integer::compare).get();'
- "        // Replace with your implementation.\n        int result = l.get(0);\n\
  \        for (int i = 1; i < l.size(); i++) {\n            result = Math.max(result,\
  \ l.get(i));\n        }\n        return result;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         int current_value = l.get(i);\n            if (current_value > max) {\n\
  \                max = current_value;\n            }\n        }\n        return\
  \ max;"
- '        return l.stream().max(Integer::compare).get();'
- "        // >>> Replace this line with your code.\n        int max = l.get(0);\n\
  \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n\
  \                max = l.get(i);\n            }\n        }\n        return max;"
- "        // write your code here\n        int maxElem = Integer.MIN_VALUE;\n   \
  \     for (int elem : l) {\n            if (elem > maxElem)\n                maxElem\
  \ = elem;\n        }\n        return maxElem;"
- '        return Collections.max(l);'
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "      int largest = l.get(0);\n      for (int i = 1; i < l.size(); i++) {\n   \
  \     if (l.get(i) > largest) {\n          largest = l.get(i);\n        }\n    \
  \  }\n      return largest;"
- "        // Write your code here.\n        int max = l.get(0);\n        for (int\
  \ i = 1; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n    \
  \    }\n        return max;"
- "        // STUDENT\n        return 0;"
- '        return 0;'
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            max = Math.max(max, l.get(i));\n        }\n        return max;"
- "\treturn Collections.max(l);"
- "        // Your code here.\n        return 0;"
- "        /* *********************\n         * Do not modify code below\n       \
  \  * *********************\n         */\n        return -1;"
- '        return Collections.max(l);'
- "        int n = l.size();\n        int maxValue = l.get(0);\n        for (int i\
  \ = 1; i < n; i++) {\n            if (l.get(i) > maxValue) {\n                maxValue\
  \ = l.get(i);\n            }\n        }\n        return maxValue;"
- "        // Java 'reduce' method\n        // https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-T-java.util.function.BinaryOperator-\n\
  \        return l.stream().reduce(Integer.MIN_VALUE, (a, b) -> Math.max(a, b));"
- '        return -1;'
- '        return Collections.max(l);'
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");"
- "        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
  \       m = Math.max(m, l.get(i));\n        }\n        return m;"
- '        throw new RuntimeException("implement me");'
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max)\n                max = l.get(i);\n        }\n    \
  \    return max;"
- "        // Fill in your answer here.\n        // Hint: sort the list.\n       \
  \ // l.sort(null);\n        int max = l.get(0);\n        for (int i = 1; i < l.size();\
  \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n \
  \           }\n        }\n        return max;"
- "        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
  \       if (l.get(i) > m) {\n                m = l.get(i);\n            }\n    \
  \    }\n        return m;"
- '        return Collections.max(l);'
- '        return 0;'
- "        int max = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  if (l.get(i) > max) {\n                max = l.get(i);\n            }\n     \
  \   }\n        return max;"
- '        return 0;'
- "        int max = Integer.MIN_VALUE;\n        for (int n : l) {\n            if\
  \ (n > max) {\n                max = n;\n            }\n        }\n        return\
  \ max;"
- '        // Write your code here.'
- '        return Collections.max(l);'
- '        return l.stream().reduce(Integer.MIN_VALUE, Integer::max);'
- '        return Collections.max(l);'
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            max = Math.max(max, l.get(i));\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            if (l.get(i) > max) {\n                max = l.get(i);\n      \
  \      }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            max = Math.max(max, l.get(i));\n        }\n        return max;"
- '        return Collections.max(l);'
- '        return Collections.max(l);'
- "        if (l.size() == 0) {\n            return 0;\n        }\n        int max\
  \ = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n     \
  \           max = num;\n            }\n        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if\
  \ (i > max) {\n                max = i;\n            }\n        }\n        return\
  \ max;"
- "        int max = Integer.MIN_VALUE;\n        for (int e : l) {\n            if\
  \ (e > max) {\n                max = e;\n            }\n        }\n        return\
  \ max;"
- '        // >>> YOUR CODE HERE <<<'
- '        return 0;'
- "        int max = l.get(0);\n        for (int x : l) {\n            if (x > max)\
  \ {\n                max = x;\n            }\n        }\n        return max;"
- "        // write your code here\n        int max = Integer.MIN_VALUE;\n       \
  \ for (int i = 0; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n\
  \        }\n        return max;"
- "        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            if (l.get(i) > max) {\n                max = l.get(i);\n      \
  \      }\n        }\n        return max;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- '      return l.stream().max(Integer::compare).get();'
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- '        return Collections.max(l);'
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- '      // Your code here'
- '        return Collections.max(l);'
- "        // int max = 0;\n        // for (int i = 0; i < l.size(); i++) {\n    \
  \    //     if (l.get(i) > max) {\n        //         max = l.get(i);\n        //\
  \     }\n        // }\n        // return max;\n        int max = Integer.MIN_VALUE;\n\
  \        for (int n : l) {\n            if (n > max) {\n                max = n;\n\
  \            }\n        }\n        return max;"
- "        int max = l.get(0);\n        for (int x : l) {\n            if (x > max)\
  \ max = x;\n        }\n        return max;"
- "        /* replace this with your code */\n        int max = 0;\n        for (int\
  \ i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n             \
  \   max = l.get(i);\n            }\n        }\n        return max;"
- '        return Collections.max(l);'
- "        int maximum = 0;\n        for (int i : l) {\n            if (i > maximum)\n\
  \                maximum = i;\n        }\n        return maximum;"
- "        int max = l.get(0);\n        for (int n : l) {\n            if (n > max)\
  \ {\n                max = n;\n            }\n        }\n        return max;"
- '        return Collections.max(l);'
- "      int max = l.get(0);\n      for (int i = 1; i < l.size(); i++) {\n       \
  \ max = Math.max(max, l.get(i));\n      }\n      return max;"
- "        int ans = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         ans = Math.max(ans, l.get(i));\n        }\n        return ans;"
- "        // TODO: put your code here\n        return Collections.max(l);"
- '        return Collections.max(l);'
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         int num = l.get(i);\n            if (num > max) {\n                max\
  \ = num;\n            }\n        }\n        return max;"
- "        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n   \
  \         if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
  \        }\n        return max;"
- "        // Write your code here.\n        return 0;"
- "        int max = 0;\n        for (int i : l) {\n            if (i > max) {\n \
  \               max = i;\n            }\n        }\n        return max;"
- '        return Collections.max(l);'
- '        return 0;'
- "        int max = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  if (l.get(i) > max) {\n                max = l.get(i);\n            }\n     \
  \   }\n        return max;"
- '        return l.stream().max(Integer::compare).get();'
- '        return l.stream().max(Integer::compare).get();'
- "\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int e : l) {\n\t\t\tif(e > max) {\n\t\
  \t\t\tmax = e;\n\t\t\t}\n\t\t}\n\t\treturn max;"
- "        int ret = Integer.MIN_VALUE;\n        for (int x : l) {\n            ret\
  \ = Math.max(ret, x);\n        }\n        return ret;"
- '        return 0;'
- "        if (l.size() == 0) return 0;\n        int ans = l.get(0);\n        for\
  \ (int i = 1; i < l.size(); i++) {\n            ans = Math.max(ans, l.get(i));\n\
  \        }\n        return ans;"
- "        int max = Integer.MIN_VALUE;\n        for (int elem : l) {\n          \
  \  if (elem > max) {\n                max = elem;\n            }\n        }\n  \
  \      return max;"
- "        // return maximum element in l\n        int max = Integer.MIN_VALUE;\n\
  \        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n\
  \                max = l.get(i);\n            }\n        }\n        return max;"
- "        // <<<\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i\
  \ < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n\
  \            }\n        }\n        return max;\n        // >>>"
- '        return Collections.max(l);'
- "        if (l.size() == 0) {\n            return 0;\n        }\n        int max\
  \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
  \ > max) {\n                max = l.get(i);\n            }\n        }\n        return\
  \ max;"
- '        return l.stream().max(Integer::compare).get();'
language: java
name: HumanEval_35_max_element
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return maximum element in the list.\n    // >>> max_element([1,\
  \ 2, 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  \    // 123\n    public static int maxElement(ArrayList<Integer> l) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(maxElement((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3)))) == (3));\n    assert(maxElement((new\
  \ ArrayList<Integer>(Arrays.asList((int)5, (int)3, (int)-5, (int)2, (int)-3, (int)3,\
  \ (int)9, (int)0, (int)124, (int)1, (int)-10)))) == (124));\n    }\n\n}\n"
