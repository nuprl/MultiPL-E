language: java
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket\
    \ == '(') {\n                count++;\n            } else if (bracket == ')')\
    \ {\n                count--;\n            }\n            if (count < 0) {\n \
    \               return false;\n            }\n        }\n        return count\
    \ == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new RuntimeException(\"implement me!\");\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: implement me!\n\
    \tat Problem.correctBracketing(tmp5ey40c1a.java:20)\n\tat Problem.main(tmp5ey40c1a.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int n = brackets.length();\n        int b = 0;\n      \
    \  for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '(') {\n\
    \                b += 1;\n            } else {\n                b -= 1;\n    \
    \        }\n            if (b < 0) {\n                return false;\n        \
    \    }\n        }\n        return b == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO\n        int counter = 0;\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            char currChar = brackets.charAt(i);\n\
    \            if (currChar == '(') {\n                counter++;\n            }\
    \ else if (currChar == ')') {\n                counter--;\n            }\n   \
    \         if (counter < 0) {\n                return false;\n            }\n \
    \       }\n        return counter == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int numOpen = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                numOpen++;\n\
    \            } else {\n                numOpen--;\n            }\n           \
    \ if (numOpen < 0) {\n                return false;\n            }\n        }\n\
    \        return numOpen == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // STUDENT CODE GOES HERE\n        if (brackets.length()\
    \ == 0) return true;\n        if (brackets.charAt(0) == ')') return false;\n \
    \       int count = 0;\n        for (int i = 0; i < brackets.length(); i++){\n\
    \            if (brackets.charAt(i) == '(') count++;\n            else count--;\n\
    \            if (count < 0) return false;\n        }\n        return count ==\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new Error(\"TODO\");\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.Error: TODO\n\tat Problem.correctBracketing(tmpg3zzxmj7.java:20)\n\
    \tat Problem.main(tmpg3zzxmj7.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() % 2 != 0) return false;\n       \
    \ int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n    \
    \        if (brackets.charAt(i) == '(') count++;\n            else count--;\n\
    \            if (count < 0) return false;\n        }\n        return count ==\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openCount = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char curr = brackets.charAt(i);\n            if (curr ==\
    \ '(') {\n                openCount++;\n            } else if (curr == ')') {\n\
    \                openCount--;\n            } else {\n                return false;\n\
    \            }\n            if (openCount < 0) {\n                return false;\n\
    \            }\n        }\n        return openCount == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int c = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '(')\
    \ {\n                c += 1;\n            } else if (ch == ')') {\n          \
    \      c -= 1;\n            }\n            if (c < 0) {\n                return\
    \ false;\n            }\n        }\n        return c == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new RuntimeException(\"Not implemented\");\n}\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.correctBracketing(tmp2g52sbd7.java:20)\n\tat Problem.main(tmp2g52sbd7.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '(')\
    \ {\n                count += 1;\n            } else if (ch == ')') {\n      \
    \          count -= 1;\n            }\n            if (count < 0) {\n        \
    \        return false;\n            }\n        }\n        return count == 0;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011191
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n\t\tStack<String> stk = new Stack<String>();\n\t\tfor(int i = 0;\
    \ i < brackets.length(); i++) {\n\t\t\tif(brackets.charAt(i) == '(') {\n\t\t\t\
    \tstk.push(\"(\");\n\t\t\t} else {\n\t\t\t\tif(stk.isEmpty()) {\n\t\t\t\t\treturn\
    \ false;\n\t\t\t\t} else {\n\t\t\t\t\tstk.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    \treturn stk.isEmpty();\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.chars().filter(c -> c == '(').count() ==\
    \ brackets.chars().filter(c -> c == ')').count();\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujqrmlep.java:28)\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int n = brackets.length();\n        int count = 0;\n  \
    \      for (int i = 0; i < n; i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                count += 1;\n            } else\
    \ if (c == ')') {\n                count -= 1;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if(brackets.charAt(0) == ')') {\n            return false;\n\
    \        }\n        int counter = 0;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) == '(') {\n                counter++;\n\
    \            } else {\n                counter--;\n            }\n           \
    \ if(counter < 0) {\n                return false;\n            }\n        }\n\
    \        return counter == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                count += 1;\n            } else if (c == ')') {\n       \
    \         count -= 1;\n            }\n            if (count < 0) {\n         \
    \       return false;\n            }\n        }\n        return count == 0;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011191
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int pCount = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                pCount++;\n\
    \            } else {\n                pCount--;\n            }\n            if\
    \ (pCount < 0) {\n                return false;\n            }\n        }\n  \
    \      return pCount == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011191
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0) {\n            return true;\n\
    \        } else if (brackets.charAt(0) == ')') {\n            return false;\n\
    \        } else {\n            int open = 0;\n            for (int i = 0; i <\
    \ brackets.length(); i++) {\n                if (brackets.charAt(i) == '(') {\n\
    \                    open++;\n                } else {\n                    open--;\n\
    \                }\n                if (open < 0) {\n                    return\
    \ false;\n                }\n            }\n            return open == 0;\n  \
    \      }\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Complete this function\n        int n = brackets.length();\n\
    \        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                cnt++;\n            } else {\n                cnt--;\n\
    \            }\n            if (cnt < 0) {\n                return false;\n  \
    \          }\n        }\n        return cnt == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // your code here\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktgd_f6n.java:24)\n"
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int l = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                l += 1;\n\
    \            } else {\n                l -= 1;\n            }\n            if\
    \ (l < 0) {\n                return false;\n            }\n        }\n       \
    \ return l == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket\
    \ == '(') {\n                open++;\n            } else if (bracket == ')') {\n\
    \                open--;\n            }\n            if (open < 0) {\n       \
    \         return false;\n            }\n        }\n        return open == 0;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int n = brackets.length();\n        int count = 0;\n  \
    \      for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '(')\
    \ {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openingBrackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                openingBrackets += 1;\n            } else if (c == ')') {\n\
    \                openingBrackets -= 1;\n            }\n            if (openingBrackets\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ openingBrackets == 0;\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new RuntimeException(\"not implemented\");\n}\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.correctBracketing(tmpfopns0vc.java:20)\n\tat Problem.main(tmpfopns0vc.java:23)\n"
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int balance = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '(')\
    \ {\n                balance += 1;\n            } else if (ch == ')') {\n    \
    \            balance -= 1;\n            }\n            if (balance < 0) {\n  \
    \              return false;\n            }\n        }\n        return balance\
    \ == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayDeque<String> q = new ArrayDeque<String>();\n    \
    \    for (int i = 0; i < brackets.length(); i++) {\n            String bracket\
    \ = brackets.substring(i, i + 1);\n            if (bracket.equals(\"(\")) {\n\
    \                q.addLast(bracket);\n            } else {\n                if\
    \ (q.isEmpty()) {\n                    return false;\n                }\n    \
    \            q.removeLast();\n            }\n        }\n        return q.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // pop everything off a stack as long as it's \"(\"\n \
    \       // if you reach a \")\", add it to a counter.\n        // if you reach\
    \ the end and there are more \"(\" than \")\", return False\n        int counter\
    \ = 0;\n        int stack = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                stack++;\n\
    \            } else {\n                if (stack == 0) {\n                   \
    \ counter++;\n                } else {\n                    stack--;\n       \
    \         }\n            }\n        }\n        if (counter == 0 && stack == 0)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int counter = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                counter++;\n            } else if (c == ')') {\n        \
    \        counter--;\n            }\n            if (counter < 0) {\n         \
    \       return false;\n            }\n        }\n        return counter == 0;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int numOpen=0;\n        for(int i=0;i<brackets.length();i++){\n\
    \            if(brackets.charAt(i)=='('){\n                numOpen++;\n      \
    \      }\n            else if(brackets.charAt(i)==')'){\n                numOpen--;\n\
    \            }\n            if(numOpen<0){\n                return false;\n  \
    \          }\n        }\n        return numOpen==0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> s = new Stack<Character>();\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                s.push(c);\n            } else if\
    \ (c == ')') {\n                if (s.empty()) {\n                    return false;\n\
    \                }\n                s.pop();\n            }\n        }\n     \
    \   return s.empty();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int n = brackets.length();\n        if (n % 2 == 1) {\n\
    \            return false;\n        }\n        int k = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            char c = brackets.charAt(i);\n            if\
    \ (c == '(') {\n                k++;\n            } else {\n                k--;\n\
    \            }\n            if (k < 0) {\n                return false;\n    \
    \        }\n        }\n        return k == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        int length = brackets.length();\n\
    \        char c;\n        for (int i = 0; i < length; i++) {\n            c =\
    \ brackets.charAt(i);\n            if (c == '(')\n                count++;\n \
    \           else\n                count--;\n            if (count < 0)\n     \
    \           return false;\n        }\n        return count == 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                depth++;\n            } else if (c == ')') {\n          \
    \      depth--;\n            }\n            if (depth < 0) {\n               \
    \ return false;\n            }\n        }\n        return depth == 0;\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if(brackets.isEmpty())\n            return true;\n    \
    \    if(brackets.length() % 2 != 0)\n            return false;\n        int count\
    \ = 0;\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i)\
    \ == '(')\n                count++;\n            else\n                count--;\n\
    \            if(count < 0)\n                return false;\n        }\n       \
    \ return count == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.chars().mapToObj(e -> (char) e).collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting())).getOrDefault('(', 0L) == brackets.chars().mapToObj(e\
    \ -> (char) e).collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).getOrDefault(')',\
    \ 0L);\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp94t6y8w9.java:20: error: cannot find symbol\n        return brackets.chars().mapToObj(e\
    \ -> (char) e).collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).getOrDefault('(',\
    \ 0L) == brackets.chars().mapToObj(e -> (char) e).collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting())).getOrDefault(')', 0L);\n                           \
    \                                                           ^\n  symbol:   variable\
    \ Function\n  location: class Problem\n/tmp/tmp94t6y8w9.java:20: error: cannot\
    \ find symbol\n        return brackets.chars().mapToObj(e -> (char) e).collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting())).getOrDefault('(', 0L) == brackets.chars().mapToObj(e\
    \ -> (char) e).collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).getOrDefault(')',\
    \ 0L);\n                                                                     \
    \                                                                            \
    \                                                                            \
    \      ^\n  symbol:   variable Function\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<Character>();\n    \
    \    for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(')\n                stack.push(c);\n            else if\
    \ (c == ')') {\n                if (stack.empty()) return false;\n           \
    \     char a = stack.pop();\n                if (a != '(') return false;\n   \
    \         }\n        }\n        return stack.empty();\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n\tArrayList<Character> opening = new ArrayList<Character>();\n\t\
    for (int i = 0; i < brackets.length(); i++) {\n\t    if (brackets.charAt(i) ==\
    \ '(') {\n\t\topening.add('(');\n\t    } else if (brackets.charAt(i) == ')') {\n\
    \t\tif (opening.size() == 0) {\n\t\t    return false;\n\t\t} else {\n\t\t    opening.remove(opening.size()\
    \ - 1);\n\t\t}\n\t    }\n\t}\n\tif (opening.size() == 0) {\n\t    return true;\n\
    \t} else {\n\t    return false;\n\t}\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                count++;\n            } else if (c == ')') {\n          \
    \      count--;\n            }\n            if (count < 0) {\n               \
    \ return false;\n            }\n        }\n        return count == 0;\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int n = brackets.length();\n        int cnt = 0;\n    \
    \    for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '(')\
    \ {\n                cnt += 1;\n            } else {\n                cnt -= 1;\n\
    \            }\n            if (cnt < 0) {\n                return false;\n  \
    \          }\n        }\n        return cnt == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // replace pass above with your code\n        return false;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvtnn8rn1.java:24)\n"
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int cnt = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                cnt++;\n            } else {\n                cnt--;\n  \
    \          }\n            if (cnt < 0) {\n                return false;\n    \
    \        }\n        }\n        return cnt == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int balance = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                balance += 1;\n            } else if (c == ')') {\n     \
    \           balance -= 1;\n            }\n            if (balance < 0) {\n   \
    \             return false;\n            }\n        }\n        return balance\
    \ == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int counter = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                counter++;\n\
    \            } else {\n                counter--;\n            }\n           \
    \ if (counter < 0) {\n                return false;\n            }\n        }\n\
    \        return counter == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int counter = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') counter++;\n            else\
    \ if (brackets.charAt(i) == ')') counter--;\n            if (counter < 0) return\
    \ false;\n        }\n        return counter == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Your code here.\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwcqyh2v.java:24)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new RuntimeException(\"Not implemented yet\");\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\
    \ yet\n\tat Problem.correctBracketing(tmphgh92wa7.java:20)\n\tat Problem.main(tmphgh92wa7.java:23)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO implement me!\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxuvghy3.java:24)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                count += 1;\n            } else if (c == ')') {\n       \
    \         count -= 1;\n            }\n            if (count < 0) {\n         \
    \       return false;\n            }\n        }\n        return count == 0;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int level = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                level++;\n            } else if (c == ')') {\n          \
    \      level--;\n            }\n            if (level < 0) {\n               \
    \ return false;\n            }\n        }\n        return level == 0;\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open_brackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                open_brackets++;\n\
    \            } else {\n                open_brackets--;\n            }\n     \
    \       if (open_brackets < 0) {\n                return false;\n            }\n\
    \        }\n        return open_brackets == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int bracket_counter = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                bracket_counter++;\n\
    \            } else if (brackets.charAt(i) == ')') {\n                bracket_counter--;\n\
    \            }\n            if (bracket_counter < 0) {\n                return\
    \ false;\n            }\n        }\n        return bracket_counter == 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int score = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            score += brackets.charAt(i) == '(' ? 1 : -1;\n         \
    \   if (score < 0) return false;\n        }\n        return score == 0;\n}\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int N = brackets.length();\n        int openCount = 0;\n\
    \        for (int i = 0; i < N; i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                openCount++;\n            } else {\n               \
    \ openCount--;\n            }\n            if (openCount < 0) {\n            \
    \    return false;\n            }\n        }\n        return openCount == 0;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                open++;\n            } else if (c == ')') {\n           \
    \     open--;\n            }\n            if (open < 0) {\n                return\
    \ false;\n            }\n        }\n        return open == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int i, level;\n        level = 0;\n        for (i = 0;\
    \ i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n\
    \                level++;\n            } else {\n                level--;\n  \
    \          }\n            if (level < 0) {\n                return false;\n  \
    \          }\n        }\n        return level == 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO: write code here\n        return true;\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp69i0x6ws.java:28)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // # BEGIN SOLUTION\n\n        // This is the official\
    \ solution, but it is not obvious what it does.\n        // def correct_bracketing(brackets):\n\
    \        //     count = 0\n        //     for c in brackets:\n        //     \
    \    if c == '(':\n        //             count += 1\n        //         else:\n\
    \        //             count -= 1\n        //         if count < 0:\n       \
    \ //             return False\n        //     return count == 0\n\n        //\
    \ This is an alternative solution that is more readable.\n        int count =\
    \ 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char\
    \ c = brackets.charAt(i);\n            if (c == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n\n        // # END SOLUTION\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new Error(\"Delete this line and put your code here\"\
    );\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.Error: Delete this line and put\
    \ your code here\n\tat Problem.correctBracketing(tmpn0j3fa7t.java:20)\n\tat Problem.main(tmpn0j3fa7t.java:23)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // insert your code here\n        return false;\n}\n  \
    \  public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpst3c6gg1.java:24)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new RuntimeException(\"not implemented\");\n}\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.correctBracketing(tmpfopns0vc.java:20)\n\tat Problem.main(tmpfopns0vc.java:23)\n"
  stdout: ''
  timestamp: 1660011192
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> s = new Stack<Character>();\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                s.push(c);\n            } else if\
    \ (c == ')') {\n                if (s.empty()) {\n                    return false;\n\
    \                }\n                s.pop();\n            }\n        }\n     \
    \   return s.empty();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0) {\n            return true;\n\
    \        }\n        if (brackets.length() % 2 == 1) {\n            return false;\n\
    \        }\n        Stack<String> stack = new Stack<String>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            String bracket = brackets.substring(i,\
    \ i + 1);\n            if (bracket.equals(\"(\")) {\n                stack.push(bracket);\n\
    \            } else {\n                if (stack.empty()) {\n                \
    \    return false;\n                }\n                stack.pop();\n        \
    \    }\n        }\n        return stack.empty();\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int len = brackets.length();\n        int open = 0;\n \
    \       for (int i = 0; i < len; i++) {\n            if (brackets.charAt(i) ==\
    \ '(') open++;\n            else if (brackets.charAt(i) == ')') open--;\n    \
    \        if (open < 0) return false;\n        }\n        return open == 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // FIXME\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5ld14wl.java:24)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int balance = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                balance\
    \ += 1;\n            } else {\n                balance -= 1;\n            }\n\
    \            if (balance < 0) {\n                return false;\n            }\n\
    \        }\n        return balance == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> bracketStack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                bracketStack.push('(');\n            } else if (brackets.charAt(i)\
    \ == ')') {\n                if (bracketStack.empty()) {\n                   \
    \ return false;\n                } else {\n                    bracketStack.pop();\n\
    \                }\n            }\n        }\n        return bracketStack.empty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int balance = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                balance++;\n\
    \            } else {\n                balance--;\n            }\n           \
    \ if (balance < 0) {\n                return false;\n            }\n        }\n\
    \        return balance == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // REPLACE THE BODY OF THIS METHOD WITH YOUR OWN IMPLEMENTATION\n\
    \        return false;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0kbibx6.java:24)\n"
  stdout: ''
  timestamp: 1660011194
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new NotImplementedError();\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9buzmg2t.java:20: error: cannot find symbol\n        throw new\
    \ NotImplementedError();\n                  ^\n  symbol:   class NotImplementedError\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                open++;\n\
    \            } else {\n                open--;\n            }\n            if\
    \ (open < 0) {\n                return false;\n            }\n        }\n    \
    \    return open == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket\
    \ == '(') {\n                openBrackets++;\n            } else if (bracket ==\
    \ ')') {\n                openBrackets--;\n            }\n            if (openBrackets\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ openBrackets == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int cnt = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '(')\
    \ cnt++;\n            else if (ch == ')') cnt--;\n            if (cnt < 0) return\
    \ false;\n        }\n        return cnt == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n\
    \        }\n        int openCount = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                openCount++;\n\
    \            } else {\n                openCount--;\n            }\n         \
    \   if (openCount < 0) {\n                return false;\n            }\n     \
    \   }\n        return openCount == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open_brackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                open_brackets\
    \ += 1;\n            } else if (brackets.charAt(i) == ')') {\n               \
    \ open_brackets -= 1;\n            }\n            if (open_brackets < 0) {\n \
    \               return false;\n            }\n        }\n        return open_brackets\
    \ == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // the number of opening brackets minus the number of closing\
    \ brackets\n        int bracketCount = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket\
    \ == '(') {\n                bracketCount += 1;\n            } else if (bracket\
    \ == ')') {\n                bracketCount -= 1;\n            }\n            if\
    \ (bracketCount < 0) {\n                return false;\n            }\n       \
    \ }\n        return bracketCount == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // todo: implement me\n        if (brackets.length() %\
    \ 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack\
    \ = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n  \
    \          char ch = brackets.charAt(i);\n            if (ch == '(') {\n     \
    \           stack.push(ch);\n            } else {\n                if (stack.empty())\
    \ {\n                    return false;\n                }\n                stack.pop();\n\
    \            }\n        }\n        return stack.empty();\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stk = new Stack<Character>();\n      \
    \  for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n  \
    \              stk.push(ch);\n            } else if (ch == ')') {\n          \
    \      if (stk.empty()) {\n                    return false;\n               \
    \ }\n                stk.pop();\n            }\n        }\n        return stk.empty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // your code goes here.\n        int count = 0;\n     \
    \   for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                count += 1;\n            } else {\n             \
    \   count -= 1;\n            }\n            if (count < 0) {\n               \
    \ return false;\n            }\n        }\n        return count == 0;\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> s = new Stack<Character>();\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                s.push('(');\n            } else if (brackets.charAt(i)\
    \ == ')') {\n                if (s.empty()) {\n                    return false;\n\
    \                } else {\n                    s.pop();\n                }\n \
    \           }\n        }\n        return s.empty();\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // \n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxqri0avh.java:28)\n"
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0) return true;\n        int n\
    \ = brackets.length();\n        if (brackets.charAt(0) == ')') return false;\n\
    \        if (brackets.charAt(n - 1) == '(') return false;\n        int nOpen =\
    \ 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i)\
    \ == '(') nOpen++;\n            else if (brackets.charAt(i) == ')') nOpen--;\n\
    \            if (nOpen < 0) return false;\n        }\n        return nOpen ==\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                open++;\n            } else if (c == ')') {\n           \
    \     open--;\n            }\n            if (open < 0) {\n                return\
    \ false;\n            }\n        }\n        return open == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // START SOLUTION\n        int level = 0;\n        for\
    \ (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n\
    \                level++;\n            } else if (bracket == ')') {\n        \
    \        level--;\n            }\n            if (level < 0) {\n             \
    \   return false;\n            }\n        }\n        return level == 0;\n    \
    \    // END SOLUTION\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n\
    \        }\n        Stack<Character> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char cur = brackets.charAt(i);\n\
    \            if (cur == '(') {\n                stack.push(cur);\n           \
    \ } else {\n                if (stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                stack.pop();\n            }\n   \
    \     }\n        return stack.isEmpty();\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int parens = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                parens++;\n\
    \            } else if (brackets.charAt(i) == ')') {\n                parens--;\n\
    \            }\n            if (parens < 0) {\n                return false;\n\
    \            }\n        }\n        return parens == 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> b = new Stack<Character>();\n        for\
    \ (char br : brackets.toCharArray()) {\n            if (br == '(') {\n       \
    \         b.push(br);\n            } else if (br == ')') {\n                if\
    \ (b.empty()) {\n                    return false;\n                } else {\n\
    \                    b.pop();\n                }\n            }\n        }\n \
    \       return b.empty();\n}\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new UnsupportedOperationException(\"Not implemented\"\
    );\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.correctBracketing(tmp9fgn0dl3.java:20)\n\tat Problem.main(tmp9fgn0dl3.java:23)\n"
  stdout: ''
  timestamp: 1660011195
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // your code here\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp_lr41ewe.java:21: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int l = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                l++;\n\
    \            } else {\n                l--;\n            }\n            if (l\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ l == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011195
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int level = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                level++;\n\
    \            } else {\n                level--;\n            }\n            if\
    \ (level < 0) {\n                return false;\n            }\n        }\n   \
    \     return level == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011195
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // your code here\n        int countOpen = 0;\n       \
    \ int countClose = 0;\n        for (int i = 0; i < brackets.length(); i++){\n\
    \            if (brackets.charAt(i) == '('){\n                countOpen++;\n \
    \           }\n            else if (brackets.charAt(i) == ')'){\n            \
    \    countClose++;\n            }\n        }\n        if (countOpen == countClose){\n\
    \            return true;\n        }\n        else{\n            return false;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp843tv8ie.java:44)\n"
  stdout: ''
  timestamp: 1660011195
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count=0;\n        for(int i=0;i<brackets.length();i++){\n\
    \            if(brackets.charAt(i)=='(')\n                count++;\n         \
    \   else if(brackets.charAt(i)==')')\n                count--;\n            if(count<0)\n\
    \                return false;\n        }\n        return (count==0);\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011195
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> stack = new ArrayList<String>();\n       \
    \ for (int i = 0; i < brackets.length(); i++) {\n            String bracket =\
    \ Character.toString(brackets.charAt(i));\n            if (bracket.equals(\"(\"\
    )) {\n                stack.add(bracket);\n            } else if (bracket.equals(\"\
    )\")) {\n                if (stack.size() == 0) {\n                    return\
    \ false;\n                }\n                stack.remove(stack.size() - 1);\n\
    \            }\n        }\n        return stack.size() == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011195
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // check if brackets is empty\n        // check if brackets\
    \ has \"()\"\n        // remove \"()\"\n        // repeat until empty or no more\
    \ \"()\"\n        // test if empty\n        // return True if empty\n        //\
    \ otherwise return False\n        int numOpen = 0;\n        int numClose = 0;\n\
    \        int numEmpty = 0;\n        while(brackets.length()>0) {\n           \
    \ if(brackets.length()>1) {\n                if(brackets.substring(0,2).equals(\"\
    ()\")) {\n                    brackets = brackets.substring(2);\n            \
    \        numEmpty++;\n                }\n                else {\n            \
    \        if(brackets.substring(0,1).equals(\"(\")) {\n                       \
    \ numOpen++;\n                        brackets = brackets.substring(1);\n    \
    \                }\n                    else {\n                        numClose++;\n\
    \                        brackets = brackets.substring(1);\n                 \
    \   }\n                }\n            }\n            else {\n                if(brackets.substring(0,1).equals(\"\
    (\")) {\n                    numOpen++;\n                    brackets = brackets.substring(1);\n\
    \                }\n                else {\n                    numClose++;\n\
    \                    brackets = brackets.substring(1);\n                }\n  \
    \          }\n        }\n        if(numOpen==numClose && numOpen==numEmpty) {\n\
    \            return true;\n        }\n        else {\n            return false;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwh6twre.java:66)\n"
  stdout: ''
  timestamp: 1660011195
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO: write your code here\n        return false;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_5kmabka.java:24)\n"
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if(brackets.isEmpty())\n            return true;\n    \
    \    int count=0;\n        for(int i=0;i<brackets.length();i++){\n           \
    \ if(brackets.charAt(i)=='(')\n                count++;\n            else\n  \
    \              count--;\n            if(count<0)\n                return false;\n\
    \        }\n        return count==0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011195
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo9ejv5u9.java:31)\n"
  stdout: ''
  timestamp: 1660011195
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> st = new Stack<Character>();\n       \
    \ for (int i = 0; i < brackets.length(); i++) {\n            char cur = brackets.charAt(i);\n\
    \            if (cur == '(') {\n                st.push(cur);\n            } else\
    \ {\n                if (st.empty()) {\n                    return false;\n  \
    \              }\n                st.pop();\n            }\n        }\n      \
    \  return st.empty();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int flag = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                flag++;\n\
    \            } else {\n                flag--;\n            }\n            if\
    \ (flag < 0) {\n                return false;\n            }\n        }\n    \
    \    return flag == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                open++;\n\
    \            } else {\n                open--;\n            }\n            if\
    \ (open < 0) {\n                return false;\n            }\n        }\n    \
    \    return open == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int numberOfOpen = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                numberOfOpen++;\n\
    \            } else {\n                numberOfOpen--;\n            }\n      \
    \      if (numberOfOpen < 0) {\n                return false;\n            }\n\
    \        }\n        return numberOfOpen == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return (brackets.length() % 2 == 0) && (brackets.length()\
    \ == 0 || brackets.charAt(0) == '(' && brackets.charAt(brackets.length() - 1)\
    \ == ')');\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpummc5mjy.java:33)\n"
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        assert brackets != null;\n        int numOpenBrackets =\
    \ 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                numOpenBrackets++;\n            } else if (brackets.charAt(i)\
    \ == ')') {\n                numOpenBrackets--;\n            } else {\n      \
    \          return false;\n            }\n            if (numOpenBrackets < 0)\
    \ {\n                return false;\n            }\n        }\n        return numOpenBrackets\
    \ == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count=0;\n        for(int i=0;i<brackets.length();i++){\n\
    \            if(brackets.charAt(i)=='(')\n                count++;\n         \
    \   else if(brackets.charAt(i)==')')\n                count--;\n            if(count<0)\n\
    \                return false;\n        }\n        return count==0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Your code here.\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwcqyh2v.java:24)\n"
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int c = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            c += brackets.charAt(i) == '(' ? 1 : -1;\n            if\
    \ (c < 0) {\n                return false;\n            }\n        }\n       \
    \ return c == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n\tint open = 0;\n\tfor (int i = 0; i < brackets.length(); i++)\
    \ {\n\t    if (brackets.charAt(i) == '(') open++;\n\t    else open--;\n\t    if\
    \ (open < 0) return false;\n\t}\n\treturn open == 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int balance = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                balance\
    \ += 1;\n            } else {\n                balance -= 1;\n            }\n\
    \            if (balance < 0) {\n                return false;\n            }\n\
    \        }\n        return balance == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ygdystt.java:24)\n"
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // YOUR CODE HERE\n        throw new RuntimeException(\"\
    not implemented\");\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.correctBracketing(tmpco4ygmbx.java:21)\n\tat Problem.main(tmpco4ygmbx.java:24)\n"
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0) {\n            return true;\n\
    \        }\n        int stack = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                stack++;\n\
    \            } else {\n                stack--;\n            }\n            if\
    \ (stack < 0) {\n                return false;\n            }\n        }\n   \
    \     return stack == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int counter = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                counter++;\n\
    \            } else {\n                counter--;\n            }\n           \
    \ if (counter < 0) {\n                return false;\n            }\n        }\n\
    \        return counter == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayDeque<Character> stack = new ArrayDeque<>();\n   \
    \     for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) return false;\n      \
    \          stack.pop();\n            }\n        }\n        return stack.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.isEmpty()) {\n            return true;\n \
    \       } else if (brackets.charAt(0) == ')') {\n            return false;\n \
    \       } else {\n            int i = 1;\n            int balance = 1;\n     \
    \       while (i < brackets.length() && balance != 0) {\n                if (brackets.charAt(i)\
    \ == '(') {\n                    balance += 1;\n                } else {\n   \
    \                 balance -= 1;\n                }\n                i += 1;\n\
    \            }\n            if (balance == 0) {\n                return correctBracketing(brackets.substring(1,\
    \ i - 1)) && correctBracketing(brackets.substring(i));\n            } else {\n\
    \                return false;\n            }\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') count++;\n            else\
    \ if (brackets.charAt(i) == ')') count--;\n            if (count < 0) return false;\n\
    \        }\n        return count == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') open++;\n            else\
    \ if (brackets.charAt(i) == ')') open--;\n            if (open < 0) return false;\n\
    \        }\n        return open == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int balance = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                balance++;\n\
    \            } else {\n                balance--;\n            }\n           \
    \ if (balance < 0) {\n                return false;\n            }\n        }\n\
    \        return balance == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int sum = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            sum += brackets.charAt(i) == '(' ? 1 : -1;\n           \
    \ if (sum < 0) {\n                return false;\n            }\n        }\n  \
    \      return sum == 0;\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"[^()]\", \"\").chars().reduce(0,\
    \ (x, y) -> x += y == '(' ? 1 : -1) == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxuji94h.java:28)\n"
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // your code here\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktgd_f6n.java:24)\n"
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int counter = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') counter++;\n            else\
    \ if (brackets.charAt(i) == ')') counter--;\n            if (counter < 0) return\
    \ false;\n        }\n        return counter == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.length() % 2 == 0 && brackets.replace(\"\
    ()\", \"\").length() == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7853lnr7.java:24)\n"
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int num_open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                num_open++;\n            } else if (c == ')') {\n       \
    \         num_open--;\n            }\n            if (num_open < 0) {\n      \
    \          return false;\n            }\n        }\n        return num_open ==\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.isEmpty() || (brackets.charAt(0) == '('\
    \ && correctBracketing(brackets.substring(1)) && brackets.charAt(brackets.length()\
    \ - 1) == ')');\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvitqo56c.java:23)\n"
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count\
    \ += 1;\n            } else {\n                count -= 1;\n            }\n  \
    \          if (count < 0) {\n                return false;\n            }\n  \
    \      }\n        return count == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int b = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                b += 1;\n            } else if (c == ')') {\n           \
    \     b -= 1;\n            }\n            if (b < 0) {\n                return\
    \ false;\n            }\n        }\n        return b == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                openBrackets += 1;\n            } else if (c == ')') {\n\
    \                openBrackets -= 1;\n            }\n            if (openBrackets\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ openBrackets == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int num_open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                num_open++;\n            } else if (c == ')') {\n       \
    \         num_open--;\n            }\n            if (num_open < 0) {\n      \
    \          return false;\n            }\n        }\n        return num_open ==\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011196
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                open++;\n\
    \            } else {\n                open--;\n            }\n            if\
    \ (open < 0) {\n                return false;\n            }\n        }\n    \
    \    return open == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011194
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> bracketStack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                bracketStack.push('(');\n            } else if (brackets.charAt(i)\
    \ == ')') {\n                if (bracketStack.empty()) {\n                   \
    \ return false;\n                } else {\n                    bracketStack.pop();\n\
    \                }\n            }\n        }\n        return bracketStack.empty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO: implement this\n        int state = 0;\n     \
    \   for (int i = 0; i < brackets.length(); i++){\n            if (brackets.charAt(i)\
    \ == '('){\n                state++;\n            }\n            else if (brackets.charAt(i)\
    \ == ')'){\n                state--;\n            }\n            if (state < 0){\n\
    \                return false;\n            }\n        }\n        if (state ==\
    \ 0){\n            return true;\n        }\n        else{\n            return\
    \ false;\n        }\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // your code here\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktgd_f6n.java:24)\n"
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        throw new UnsupportedOperationException(\"Problem: Incorrect\
    \ bracketing not solved yet.\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem:\
    \ Incorrect bracketing not solved yet.\n\tat Problem.correctBracketing(tmpe3n0oa16.java:20)\n\
    \tat Problem.main(tmpe3n0oa16.java:23)\n"
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int c = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                c++;\n\
    \            } else {\n                c--;\n            }\n            if (c\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ c == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i += 1) {\n            if (brackets.charAt(i) == '(') {\n                count\
    \ += 1;\n            } else {\n                count -= 1;\n            }\n  \
    \          if (count < 0) {\n                return false;\n            }\n  \
    \      }\n        return count == 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n\tint count = 0;\n\tfor (int i = 0; i < brackets.length(); i++)\
    \ {\n\t    if (brackets.charAt(i) == '(') {\n\t\tcount += 1;\n\t    } else {\n\
    \t\tcount -= 1;\n\t    }\n\t    if (count < 0) {\n\t\treturn false;\n\t    }\n\
    \t}\n\treturn count == 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if(brackets.length()==0) return true;\n        int open\
    \ = 0;\n        for(int i=0;i<brackets.length();i++){\n            char bracket\
    \ = brackets.charAt(i);\n            if(bracket=='(') open++;\n            else{\n\
    \                if(open==0) return false;\n                open--;\n        \
    \    }\n        }\n        return open==0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int number_of_opening_brackets = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '(') {\n                number_of_opening_brackets\
    \ += 1;\n            } else if (bracket == ')') {\n                number_of_opening_brackets\
    \ -= 1;\n            }\n            if (number_of_opening_brackets < 0) {\n  \
    \              return false;\n            }\n        }\n        return number_of_opening_brackets\
    \ == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<Character>();\n    \
    \    for (char c : brackets.toCharArray()) {\n            if (c == '(')\n    \
    \            stack.push(c);\n            else if (c == ')') {\n              \
    \  if (stack.isEmpty())\n                    return false;\n                stack.pop();\n\
    \            }\n        }\n        return stack.isEmpty();\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> s = new Stack<Character>();\n        if\
    \ (brackets.length() % 2 != 0) return false;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '(')\
    \ {\n                s.push(ch);\n            } else {\n                if (s.empty())\
    \ return false;\n                s.pop();\n            }\n        }\n        return\
    \ s.empty();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> s = new Stack<Character>();\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                s.push(c);\n            } else if\
    \ (c == ')') {\n                if (s.empty()) {\n                    return false;\n\
    \                }\n                char d = s.pop();\n                if (d !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return s.empty();\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n      Stack<Character> stack = new Stack<Character>();\n      for\
    \ (char c : brackets.toCharArray()) {\n        if (c == '(') {\n          stack.push(c);\n\
    \        } else if (c == ')') {\n          if (stack.empty()) {\n            return\
    \ false;\n          }\n          stack.pop();\n        }\n      }\n      return\
    \ stack.empty();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpib6srx71.java:27)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s552_dy.java:23)\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                open++;\n            } else if (c == ')') {\n           \
    \     open--;\n            }\n            if (open < 0) {\n                return\
    \ false;\n            }\n        }\n        return open == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011193
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.equals(\"\")) return true;\n        int open\
    \ = 0;\n        int close = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') open++;\n            else\
    \ if (brackets.charAt(i) == ')') close++;\n            if (close > open) return\
    \ false;\n        }\n        return open == close;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        for (int i = 0; i < brackets.length(); i++) {\n       \
    \     char bracket = brackets.charAt(i);\n            // YOUR CODE HERE\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdax9gm8.java:31)\n"
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openCounter = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char curr = brackets.charAt(i);\n            if (curr ==\
    \ '(') {\n                openCounter++;\n            } else if (curr == ')')\
    \ {\n                openCounter--;\n            }\n            if (openCounter\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ openCounter == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                count++;\n            } else if (c == ')') {\n          \
    \      count--;\n            }\n            if (count < 0) {\n               \
    \ return false;\n            }\n        }\n        return count == 0;\n}\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.chars().mapToObj(i -> (char) i).reduce(0,\
    \ (prev, i) -> {\n            if (i == '(') {\n                return prev + 1;\n\
    \            } else if (i == ')') {\n                return prev - 1;\n      \
    \      } else {\n                return prev;\n            }\n        }, (first,\
    \ second) -> first + second) == 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ek5_jma.java:36)\n"
  stdout: ''
  timestamp: 1660011197
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\"\
    )\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    //\
    \ >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.charAt(0) == ')') {\n            return false;\n\
    \        }\n        int left = 0;\n        int right = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(')\
    \ {\n                left++;\n            } else {\n                right++;\n\
    \            }\n            if (right > left) {\n                return false;\n\
    \            }\n        }\n        return left == right;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011197
