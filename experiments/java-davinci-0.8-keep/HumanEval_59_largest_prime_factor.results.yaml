language: java
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                return largestPrimeFactor(n / i);\n            }\n\
    \        }\n        return n;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // >>> largest_prime_factor(13195)\n        // 29\n        //\
    \ >>> largest_prime_factor(2048)\n        // 2\n        // >>> largest_prime_factor(600851475143)\n\
    \        // 6857\n        // >>> largest_prime_factor(314159)\n        // 3\n\
    \        // >>> largest_prime_factor(315)\n        // 5\n        // >>> largest_prime_factor(906609)\n\
    \        // 906609\n        // >>> largest_prime_factor(93819012551L)\n      \
    \  // 379\n        // >>> largest_prime_factor(930675566)\n        // 139\n  \
    \      return 0;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6_brxs7g.java:34)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return primeFactors(n).stream().reduce(Math::max).get();\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwm9uevw.java:15: error: cannot find symbol\n        return primeFactors(n).stream().reduce(Math::max).get();\n\
    \               ^\n  symbol:   method primeFactors(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // \n        while(n % 2 == 0) {\n            n /= 2;\n      \
    \  }\n        int m = n;\n        for(int i = 3; i <= m; i += 2) {\n         \
    \   if(n % i == 0) {\n                n /= i;\n                m = n;\n      \
    \      }\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7oduhz1.java:29)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n\t/* IMPLEMENT THIS METHOD! */\n\t// Fill in the implementation here\n\
    \tint factor = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t    while (n % i == 0)\
    \ {\n\t\tfactor = i;\n\t\tn /= i;\n\t    }\n\t}\n\treturn factor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n <= 1) {\n            throw new IllegalArgumentException(\"\
    n must be > 1\");\n        }\n        // write your code here\n        return\
    \ -1;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp37c2mo46.java:22)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                return largestPrimeFactor(n / i);\n            }\n\
    \        }\n        return n;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplgezpn5e.java:24)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = 1;\n        while (n % 2 == 0) {\n            max =\
    \ 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            while (n % i == 0) {\n                max = i;\n    \
    \            n /= i;\n            }\n        }\n        if (n > 2) {\n       \
    \     max = n;\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int prime = 1;\n        int curr = n;\n        while (curr % 2\
    \ == 0) {\n            prime = 2;\n            curr /= 2;\n        }\n       \
    \ int i = 3;\n        while (i * i <= curr) {\n            if (curr % i == 0)\
    \ {\n                prime = i;\n                curr /= i;\n            } else\
    \ {\n                i += 2;\n            }\n        }\n        return prime;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy_ay4o2f.java:33)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 2;\n        while (n % 2 == 0) {\n            n\
    \ /= 2;\n        }\n        if (n == 1) {\n            return largest;\n     \
    \   }\n        largest = 3;\n        while (n > 1) {\n            while (n % largest\
    \ == 0) {\n                n /= largest;\n            }\n            largest +=\
    \ 2;\n        }\n        return largest - 2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                if (isPrime(n / i)) return n / i;\n                else\
    \ n /= i;\n            } else i++;\n        }\n        return 1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc931sh0d.java:18: error: cannot find symbol\n                if\
    \ (isPrime(n / i)) return n / i;\n                    ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n     \
    \   int prime = 2;\n        while (n > 1) {\n            while (n % prime == 0)\
    \ {\n                factors.add(prime);\n                n /= prime;\n      \
    \      }\n            prime++;\n        }\n        return factors.get(factors.size()\
    \ - 1);\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                boolean isPrime = true;\n\
    \                for (int j = 2; j <= i / 2; j++) {\n                    if (i\
    \ % j == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    largestPrimeFactor = i;\n                }\n        \
    \    }\n        }\n        return largestPrimeFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int ans = 2;\n        while (n > ans) {\n            if (n % ans\
    \ == 0) {\n                n /= ans;\n            } else {\n                ans++;\n\
    \            }\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n       \
    \ int result = 0;\n        while (n > 1) {\n            int factor = 3;\n    \
    \        while (n % factor != 0) {\n                factor += 2;\n           \
    \ }\n            n /= factor;\n            result = factor;\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Hint: a number n is prime if and only if it's divisible only\
    \ by 1 and itself.\n        // Hint: 2 is the only even prime number.\n      \
    \  // Hint: try to find the largest prime factor of a number m by finding\n  \
    \      // the smallest prime factor of m.\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_x2h_ja0.java:22)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Fill this in.\n        int largestPrimeFactor = 2;\n      \
    \  while (n > 1) {\n            if (n % largestPrimeFactor == 0) {\n         \
    \       n /= largestPrimeFactor;\n            } else {\n                largestPrimeFactor++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011754
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 1;\n        while (n % 2 == 0) {\n            factor\
    \ = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            while (n % i == 0) {\n                factor = i;\n \
    \               n /= i;\n            }\n        }\n        if (n > 2) {\n    \
    \        factor = n;\n        }\n        return factor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        assert n > 1;\n        int i = 2;\n        while (n % i != 0)\n\
    \            i++;\n        while (n % i == 0)\n            n /= i;\n        return\
    \ n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0ndff53.java:25)\n"
  stdout: ''
  timestamp: 1660011754
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // end is sqrt(n) because n could have at most one prime > sqrt(n)\n\
    \        for (int i = 2; i <= (int) Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) return largestPrimeFactor(n / i);\n        }\n        return n;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnkose_f.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int div = 2;\n        int k = n;\n        while (k > 1) {\n  \
    \          if (k % div == 0) {\n                k /= div;\n            } else\
    \ {\n                div++;\n            }\n        }\n        return div;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i\
    \ = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n            \
    \    factors.add(i);\n            }\n        }\n        return largestPrimeFactorHelper(n,\
    \ factors);\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdex3mc9g.java:21: error: cannot find symbol\n        return largestPrimeFactorHelper(n,\
    \ factors);\n               ^\n  symbol:   method largestPrimeFactorHelper(int,List<Integer>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011754
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n     \
    \   int i = 2;\n        while (n > 1) {\n            while (n % i == 0) {\n  \
    \              factors.add(i);\n                n /= i;\n            }\n     \
    \       i++;\n        }\n        return factors.get(factors.size() - 1);\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int count = 2;\n        while (count * count <= n) {\n       \
    \     if (n % count == 0) {\n                n /= count;\n            } else {\n\
    \                count++;\n            }\n        }\n        return n;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // The largest prime factor of n has to be <= sqrt(n).\n     \
    \   // Try all primes <= sqrt(n).\n        int limit = (int) Math.sqrt(n);\n \
    \       int largest = -1;\n        for (int i = 2; i <= limit; i++) {\n      \
    \      if (n % i == 0 && Problem.isPrime(i)) {\n                largest = i;\n\
    \            }\n        }\n        return largest;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwqc1lte.java:20: error: cannot find symbol\n            if (n\
    \ % i == 0 && Problem.isPrime(i)) {\n                                     ^\n\
    \  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 1;\n        int i = 2;\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                largest = i;\n            \
    \    n /= i;\n            }\n            i++;\n        }\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnkose_f.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                int d = n / i;\n                if (isPrime(d)) {\n         \
    \           return d;\n                }\n            }\n        }\n        return\
    \ -1;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptokt4ty8.java:18: error: cannot find symbol\n                if\
    \ (isPrime(d)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n % 2 == 0) {\n            return largestPrimeFactor(n / 2);\n\
    \        }\n        for (int i = 3; i < n; i += 2) {\n            if (n % i ==\
    \ 0) {\n                return largestPrimeFactor(n / i);\n            }\n   \
    \     }\n        return n;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = 0;\n        int d = n;\n        while (d % 2 == 0) {\n\
    \            max = 2;\n            d /= 2;\n        }\n        int p = 3;\n  \
    \      while (d != 1) {\n            while (d % p == 0) {\n                max\
    \ = p;\n                d /= p;\n            }\n            p += 2;\n        }\n\
    \        return max;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int x = n;\n        int i = 2;\n        while (i <= x) {\n   \
    \         if (x % i == 0) {\n                x /= i;\n            } else {\n \
    \               i++;\n            }\n        }\n        return i;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        throw new RuntimeException(\"TODO: implement\");\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: TODO: implement\n\
    \tat Problem.largestPrimeFactor(tmpp6i05szj.java:15)\n\tat Problem.main(tmpp6i05szj.java:18)\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // TODO:\n        // return -1;\n        if (n <= 1) return -1;\n\
    \        if (n <= 3) return n;\n        int largest = 0;\n        int divisor\
    \ = 2;\n        while (n > 1) {\n            if (n % divisor == 0) {\n       \
    \         n /= divisor;\n                largest = divisor;\n            } else\
    \ {\n                divisor++;\n            }\n        }\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int p = 1;\n        for (int i = 2; i <= n; i++) {\n         \
    \   if (isFactor(n, i) && isPrime(i)) {\n                p = i;\n            }\n\
    \        }\n        return p;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpahv1wq2j.java:17: error: cannot find symbol\n            if (isFactor(n,\
    \ i) && isPrime(i)) {\n                ^\n  symbol:   method isFactor(int,int)\n\
    \  location: class Problem\n/tmp/tmpahv1wq2j.java:17: error: cannot find symbol\n\
    \            if (isFactor(n, i) && isPrime(i)) {\n                           \
    \       ^\n  symbol:   method isPrime(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        ArrayList<Integer> primes = Utils.getPrimes(n);\n        int m\
    \ = -1;\n        for (int i = primes.size() - 1; i >= 0; i--) {\n            if\
    \ (n % primes.get(i) == 0) {\n                m = primes.get(i);\n           \
    \     break;\n            }\n        }\n        return m;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8dru1ht.java:15: error: cannot find symbol\n        ArrayList<Integer>\
    \ primes = Utils.getPrimes(n);\n                                    ^\n  symbol:\
    \   variable Utils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int d = 2; d < n; d++) {\n            if (n % d == 0) {\n\
    \                return largestPrimeFactor(n / d);\n            }\n        }\n\
    \        return n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 0;\n        while (n % 2 == 0) {\n  \
    \          largestPrimeFactor = 2;\n            n = n / 2;\n        }\n      \
    \  for (int i = 3; i <= Math.sqrt(n); i = i + 2) {\n            while (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                n = n / i;\n\
    \            }\n        }\n        if (n > 2) {\n            largestPrimeFactor\
    \ = n;\n        }\n        return largestPrimeFactor;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int p = 2;\n        while (p < n) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int limit = (int) Math.sqrt(n);\n        for (int i = limit; i\
    \ > 0; i--) {\n            if (n % i == 0 && isPrime(i)) {\n                return\
    \ i;\n            }\n        }\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupqp_2vq.java:17: error: cannot find symbol\n            if (n\
    \ % i == 0 && isPrime(i)) {\n                              ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n == 1) {\n            return 1;\n        }\n        int factor\
    \ = 2;\n        for (; factor <= n / factor; factor++) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n                break;\n     \
    \       }\n        }\n        return largestPrimeFactor(n);\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\
    \tat Problem.largestPrimeFactor(tmpr5f4t15t.java:25)\n\tat Problem.larg"
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        throw new UnsupportedOperationException(\"TODO: implement\");\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: TODO:\
    \ implement\n\tat Problem.largestPrimeFactor(tmp54svx1cq.java:15)\n\tat Problem.main(tmp54svx1cq.java:18)\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int cur = 2;\n        while (n > 1) {\n            while (n %\
    \ cur == 0) {\n                n /= cur;\n            }\n            cur++;\n\
    \        }\n        return cur - 1;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // >>> largest_prime_factor(2048)\n        // 2\n        return\
    \ n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02xhy8w6.java:20)\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                boolean isPrime = true;\n\
    \                for (int j = 2; j < i; j++) {\n                    if (i % j\
    \ == 0) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n                if (isPrime) {\n  \
    \                  largestPrimeFactor = i;\n                }\n            }\n\
    \        }\n        return largestPrimeFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i <= n / i; i++) {\n            while (n % i ==\
    \ 0) {\n                n /= i;\n            }\n        }\n        return n;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnesu16jl.java:24)\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = -1;\n        while (n % 2 == 0) {\n            max =\
    \ 2;\n            n >>= 1;\n        }\n        for (int i = 3; i <= n; i += 2)\
    \ {\n            while (n % i == 0) {\n                max = i;\n            \
    \    n = n / i;\n            }\n        }\n        return max;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest_prime_factor = 2;\n        int divisor = 3;\n    \
    \    while (n > largest_prime_factor) {\n            if (n % divisor == 0) {\n\
    \                largest_prime_factor = divisor;\n                n /= divisor;\n\
    \            } else {\n                divisor += 2;\n            }\n        }\n\
    \        return largest_prime_factor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest_prime_factor = -1;\n        while (n % 2 == 0) {\n\
    \            largest_prime_factor = 2;\n            n /= 2;\n        }\n     \
    \   for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i ==\
    \ 0) {\n                largest_prime_factor = i;\n                n /= i;\n \
    \           }\n        }\n        if (n > 2) {\n            largest_prime_factor\
    \ = n;\n        }\n        return largest_prime_factor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Base case\n        if (isPrime(n)) return n;\n        // Recursive\
    \ case\n        int[] factors = factor(n);\n        int largestPrimeFactor = 0;\n\
    \        for (int factor : factors) {\n            int primeFactor = largestPrimeFactor(factor);\n\
    \            if (primeFactor > largestPrimeFactor) largestPrimeFactor = primeFactor;\n\
    \        }\n        return largestPrimeFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphucb2k2j.java:16: error: cannot find symbol\n        if (isPrime(n))\
    \ return n;\n            ^\n  symbol:   method isPrime(int)\n  location: class\
    \ Problem\n/tmp/tmphucb2k2j.java:18: error: cannot find symbol\n        int[]\
    \ factors = factor(n);\n                        ^\n  symbol:   method factor(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // BEGIN SOLUTION\n        int largest_factor = -1;\n        int\
    \ d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n        \
    \        largest_factor = d;\n                n /= d;\n            }\n       \
    \     d += 1;\n        }\n        return largest_factor;\n        // END SOLUTION\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int lpf = 0;\n        for (int i = 2; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                lpf = i;\n                n /= i;\n \
    \               i--;\n            }\n        }\n        return lpf;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnkose_f.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // TODO write this code.\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrc0y4d0.java:19)\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n     \
    \   for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n       \
    \         factors.add(i);\n                n /= i;\n            }\n        }\n\
    \        return factors.get(factors.size() - 1);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n % 2 == 0) {\n            return largestPrimeFactor(n / 2);\n\
    \        }\n        for (int i = 3; i < n / 2; i += 2) {\n            if (n %\
    \ i == 0) {\n                if (isPrime(i)) {\n                    return i;\n\
    \                }\n            }\n        }\n        return -1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpldp3ke_b.java:20: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n < 4) {\n            return 1;\n        }\n\n        int\
    \ largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n      \
    \      if (isPrime(i) && n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n        }\n\n        return largestPrimeFactor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcag7bk7.java:21: error: cannot find symbol\n            if (isPrime(i)\
    \ && n % i == 0) {\n                ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n <= 1) {\n            throw new IllegalArgumentException();\n\
    \        }\n        int i = 2;\n        int max = 1;\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                max = i;\n                n /=\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       return max;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n                largestPrimeFactor\
    \ = i;\n            }\n        }\n        return largestPrimeFactor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1mvz2jsn.java:26)\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest_factor = 1;\n        int d = 2;\n        while (n\
    \ > 1) {\n            while (n % d == 0) {\n                largest_factor = d;\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return largest_factor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        throw new UnsupportedOperationException(\"I don't know how to\
    \ do this one either\");\n}\n    public static void main(String[] args) {\n  \
    \  assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: I\
    \ don't know how to do this one either\n\tat Problem.largestPrimeFactor(tmp2xw7e15q.java:15)\n\
    \tat Problem.main(tmp2xw7e15q.java:18)\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // YOUR CODE HERE\n        return -1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_km3ywgg.java:19)\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 0;\n        for (int i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n                largestPrimeFactor\
    \ = i;\n            }\n        }\n        return largestPrimeFactor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnzkt63g7.java:26)\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return (int) largestPrimeFactor(n, 2);\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpswgg5jx2.java:15: error: method largestPrimeFactor in class Problem\
    \ cannot be applied to given types;\n        return (int) largestPrimeFactor(n,\
    \ 2);\n                     ^\n  required: int\n  found:    int,int\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                n /= factor;\n            } else {\n  \
    \              factor++;\n            }\n        }\n        return factor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestFactor = 0;\n        for (int i = 1; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                if (isPrime(i)) {\n          \
    \          largestFactor = i;\n                }\n            }\n        }\n \
    \       return largestFactor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxf4p5hqf.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = 1;\n        while (n % 2 == 0) {\n            max =\
    \ 2;\n            n = n / 2;\n        }\n        int i = 3;\n        while (i\
    \ <= Math.sqrt(n)) {\n            while (n % i == 0) {\n                max =\
    \ i;\n                n = n / i;\n            }\n            i = i + 2;\n    \
    \    }\n        if (n > 2) {\n            max = n;\n        }\n        return\
    \ max;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n <= 2)\n            return n;\n        // If a number is\
    \ a prime, then the largest prime factor is 1, so\n        // it can be ignored\n\
    \        int largestPrimeFactor = 1;\n        while (n % 2 == 0) {\n         \
    \   largestPrimeFactor = 2;\n            n /= 2;\n        }\n        // For each\
    \ odd number starting at 3 and going to the square root of\n        // n, if it\
    \ is a factor, then divide n by it as many times as it can\n        // be, keeping\
    \ track of the largest factor found.\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            while (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            }\n        }\n        // If n is\
    \ not one, then it is the largest prime factor\n        if (n > 2)\n         \
    \   largestPrimeFactor = n;\n        return largestPrimeFactor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int p = 2;\n        while (n % p != 0) {\n            p++;\n \
    \       }\n        int q = n / p;\n        if (q > 1) {\n            return largestPrimeFactor(q);\n\
    \        } else {\n            return p;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int best = 0;\n        for (int i = 2; i <= n / i; i++) {\n  \
    \          while (n % i == 0) {\n                best = i;\n                n\
    \ /= i;\n            }\n        }\n        if (n > 1) best = n;\n        return\
    \ best;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n <= 1) {\n            throw new IllegalArgumentException(\"\
    Assume n > 1 and is not a prime.\");\n        }\n        int ans = 1;\n      \
    \  for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    ans = Math.max(ans, largestPrimeFactor(n / i));\n            }\n        }\n\
    \        return ans;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95hge1yy.java:27)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                return largestPrimeFactor(n / i);\n            }\n        }\n\
    \        return n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ut9ft_w.java:23)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int ans = 1;\n        int i = 2;\n        while (i*i <= n) {\n\
    \            if (n % i == 0) {\n                ans = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n            i++;\n        }\n        if (n > 1) ans = n;\n        return\
    \ ans;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 1;\n        for (int i = 2; i < n / 2; i++) {\n\
    \            if (isPrime(i) && (n % i == 0)) {\n                largest = i;\n\
    \            }\n        }\n        return largest;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93p7eye4.java:17: error: cannot find symbol\n            if (isPrime(i)\
    \ && (n % i == 0)) {\n                ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 1;\n        int p = 2;\n        while\
    \ (p <= n) {\n            if (n % p == 0) {\n                largestPrimeFactor\
    \ = p;\n                n /= p;\n            } else {\n                p += 1;\n\
    \            }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Your code here.\n        return 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1ch8r6p.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                int f = n / i;\n         \
    \       if (isPrime(f)) {\n                    largest = f;\n                \
    \    break;\n                }\n            }\n        }\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7jedpe1z.java:19: error: cannot find symbol\n                if\
    \ (isPrime(f)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int result = 0;\n        while (n % 2 == 0) {\n            result\
    \ = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            while (n % i == 0) {\n                result = i;\n \
    \               n /= i;\n            }\n        }\n        if (n > 2)\n      \
    \      result = n;\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Your code here.\n        int largest_prime_factor = 2;\n  \
    \      while (n % 2 == 0) {\n            n /= 2;\n        }\n        int factor\
    \ = 3;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           largest_prime_factor = factor;\n                n /= factor;\n   \
    \         }\n            factor += 2;\n        }\n        return largest_prime_factor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        List<Integer> primes = new ArrayList<>();\n        while (n !=\
    \ 1) {\n            // Find the next smallest prime factor\n            int p\
    \ = smallestPrimeFactor(n);\n            // Use this to divide out and reduce\
    \ the problem size\n            n /= p;\n            // Keep track of the smallest\
    \ prime factor as it is the answer\n            primes.add(p);\n        }\n  \
    \      return primes.get(primes.size() - 1);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08qovg0d.java:18: error: cannot find symbol\n            int p\
    \ = smallestPrimeFactor(n);\n                    ^\n  symbol:   method smallestPrimeFactor(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // ...\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo482e7sd.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factors = 0;\n        int sqr = (int) Math.sqrt(n);\n    \
    \    for (int i = 2; i <= sqr; i++) {\n            while (n % i == 0) {\n    \
    \            n /= i;\n                sqr = (int) Math.sqrt(n);\n            \
    \    factors = i;\n            }\n        }\n        if (n > 1) {\n          \
    \  factors = n;\n        }\n        return factors;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // YOUR CODE HERE\n        //throw new UnsupportedOperationException(\"\
    largestPrimeFactor\");\n\t\tif(n == 1) return 1;\n\t\tif(n % 2 == 0) { \n\t\t\t\
    return largestPrimeFactor(n/2);\n\t\t} else {\n\t\t\tfor(int i = 3; i <= n/2;\
    \ i+=2) {\n\t\t\t\tif(n % i == 0) {\n\t\t\t\t\treturn largestPrimeFactor(n/i);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 1;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpslo94dac.java:18)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Get a list of all primes up to n.\n        ArrayList<Integer>\
    \ primes = listOfPrimes(n);\n        // We should have the prime factors of n\
    \ in this list.\n        for (int i = primes.size() - 1; i >= 0; i--) {\n    \
    \        if (n % primes.get(i) == 0) {\n                return primes.get(i);\n\
    \            }\n        }\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2ue2ez2.java:16: error: cannot find symbol\n        ArrayList<Integer>\
    \ primes = listOfPrimes(n);\n                                    ^\n  symbol:\
    \   method listOfPrimes(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int limit = (int) Math.sqrt(n);\n        for (int i = 2; i <=\
    \ limit; i++) {\n            if (n % i == 0) {\n                return Math.max(largestPrimeFactor(n\
    \ / i), largestPrimeFactor(i));\n            }\n        }\n        return n;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // TODO: Add your code here\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpex0724wi.java:19)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int f = 1;\n        while (n % 2 == 0) {\n            f = 2;\n\
    \            n /= 2;\n        }\n        if (n == 1) return f;\n        // n is\
    \ odd\n        int r = (int) Math.sqrt(n);\n        for (int i = 3; i <= r; i\
    \ += 2) {\n            if (n % i == 0) {\n                f = i;\n           \
    \     n /= i;\n                r = (int) Math.sqrt(n);\n            }\n      \
    \  }\n        return f;\n}\n    public static void main(String[] args) {\n   \
    \ assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbnsx38m8.java:33)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i <= n / i; i++) {\n            while (n % i ==\
    \ 0) {\n                n /= i;\n            }\n        }\n        return n;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnesu16jl.java:24)\n"
  stdout: ''
  timestamp: 1660011756
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = -1;\n        for (int i = 2; i * i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                if (max < i) {\n               \
    \     max = i;\n                }\n                n /= i;\n                i--;\n\
    \            }\n        }\n        if (n > 1) {\n            max = n;\n      \
    \  }\n        return max;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n\tint largestPrimeFactor = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t  \
    \  while (n % i == 0) {\n\t\tn /= i;\n\t\tlargestPrimeFactor = i;\n\t    }\n\t\
    }\n\treturn largestPrimeFactor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 2;\n        while (factor <= n) {\n            if\
    \ (n % factor == 0) {\n                n /= factor;\n            } else {\n  \
    \              factor++;\n            }\n        }\n        return factor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // >>> largest_prime_factor(13195)\n        // 29\n        //\
    \ >>> largest_prime_factor(2048)\n        // 2\n        if (n < 2) {\n       \
    \     return n;\n        }\n        int d = 2;\n        while (n > 1) {\n    \
    \        while (n % d == 0) {\n                n /= d;\n            }\n      \
    \      d += 1;\n        }\n        return d - 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                if (isPrime(i)) {\n      \
    \              largestPrimeFactor = i;\n                }\n            }\n   \
    \     }\n        return largestPrimeFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmnttgjp.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int currentDivisor = 2;\n        int largestPrimeFactor = -1;\n\
    \        while (n > 1) {\n            if (n % currentDivisor == 0) {\n       \
    \         largestPrimeFactor = currentDivisor;\n                n /= currentDivisor;\n\
    \                while (n % currentDivisor == 0) {\n                    n /= currentDivisor;\n\
    \                }\n            }\n            currentDivisor++;\n        }\n\
    \        return largestPrimeFactor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                if (i == n) {\n                    return i;\n              \
    \  } else {\n                    n /= i;\n                    i--;\n         \
    \       }\n            }\n        }\n        return n;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        /* The algorithm is based on the fact that every non-prime is\
    \ divisible by a prime (excluding 1).\n        First, generate a list of primes.\
    \ Then, repeatedly divide n by the first prime that is a factor.\n        The\
    \ last prime that divides n is the largest prime factor. */\n        List<Integer>\
    \ primes = generatePrimes(Math.min(10_000, n)); // generate primes up to 10,000\
    \ or n, whichever is smaller\n        for (int i = 0; i < primes.size(); i++)\
    \ {\n            int p = primes.get(i);\n            if (n % p == 0) {\n     \
    \           n /= p;\n                i--;\n            }\n        }\n        return\
    \ n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9yvjlv8w.java:18: error: cannot find symbol\n        List<Integer>\
    \ primes = generatePrimes(Math.min(10_000, n)); // generate primes up to 10,000\
    \ or n, whichever is smaller\n                               ^\n  symbol:   method\
    \ generatePrimes(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int maxFactor = 1;\n        for (int i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                boolean isPrime = true;\n     \
    \           for (int j = 2; j <= i; j++) {\n                    if (i % j == 0\
    \ && j != i) {\n                        isPrime = false;\n                   \
    \     break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    maxFactor = i;\n                }\n            }\n  \
    \      }\n        return maxFactor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n     \
    \   for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n           \
    \     factors.add(i);\n            }\n        }\n        for (int i = factors.size()\
    \ - 1; i >= 0; i--) {\n            int isPrime = 1;\n            for (int j =\
    \ 2; j < factors.get(i); j++) {\n                if (factors.get(i) % j == 0)\
    \ {\n                    isPrime = 0;\n                    break;\n          \
    \      }\n            }\n            if (isPrime == 1) {\n                return\
    \ factors.get(i);\n            }\n        }\n        return -1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 0;\n        int i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                n /= i;\n       \
    \         largestPrimeFactor = i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        throw new UnsupportedOperationException(\"TODO: implement\");\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: TODO:\
    \ implement\n\tat Problem.largestPrimeFactor(tmp54svx1cq.java:15)\n\tat Problem.main(tmp54svx1cq.java:18)\n"
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return i;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Fill in your answer here.\n        int m = 1;\n        for\
    \ (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n         \
    \       m = i;\n                n /= i;\n            }\n        }\n        return\
    \ n == 1 ? m : n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // find smallest factor with n % f == 0\n        int f = 2;\n\
    \        while (n % f != 0) {\n            f++;\n        }\n        // remove\
    \ factor from n until n is fully decomposed into prime factors\n        while\
    \ (n % f == 0) {\n            n /= f;\n        }\n        // when n is fully decomposed,\
    \ f is the largest prime factor of n\n        return f;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcx1puei5.java:28)\n"
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // divide by 2 until n odd\n        while (n % 2 == 0) {\n   \
    \         n /= 2;\n        }\n        // test odd numbers up to sqrt(n)\n    \
    \    int maxPrime = 1;\n        for (int d = 3; d * d <= n; d += 2) {\n      \
    \      while (n % d == 0) {\n                maxPrime = d;\n                n\
    \ /= d;\n            }\n        }\n        // if n > 2 it is a prime factor\n\
    \        if (n > 2) {\n            maxPrime = n;\n        }\n        return maxPrime;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int res = 1;\n        while (n % 2 == 0) {\n            res =\
    \ 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            while (n % i == 0) {\n                res = i;\n    \
    \            n /= i;\n            }\n        }\n        if (n > 2) res = n;\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int divisor = 2;\n        int remaining = n;\n        int largestFactor\
    \ = 0;\n        while (remaining > 1) {\n            // System.out.printf(\"Divisor:\
    \ %d, Remaining: %d\\n\", divisor, remaining);\n            if (remaining % divisor\
    \ == 0) {\n                largestFactor = divisor;\n                remaining\
    \ /= divisor;\n            } else {\n                divisor++;\n            }\n\
    \        }\n        return largestFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        throw new RuntimeException(\"Method not implemented\");\n}\n \
    \   public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Method not implemented\n\
    \tat Problem.largestPrimeFactor(tmpbilm55to.java:15)\n\tat Problem.main(tmpbilm55to.java:18)\n"
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return new Problem().largestPrimeFactorHelper(n);\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6zuhw5gw.java:15: error: cannot find symbol\n        return new\
    \ Problem().largestPrimeFactorHelper(n);\n                            ^\n  symbol:\
    \   method largestPrimeFactorHelper(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011758
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n < 2) return 0;\n        int maxPrime = 2;\n        // Divide\
    \ out all 2's:\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n\
    \        // Try dividing out all other primes:\n        for (int i = 3; i <= n;\
    \ i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n\
    \                n /= i;\n            }\n        }\n        return maxPrime;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtgffvpe.java:24)\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = 1;\n        for (int i = 2; i * i <= n; i++) {\n   \
    \         if (n % i == 0) {\n                max = i;\n                while (n\
    \ % i == 0) n /= i;\n            }\n        }\n        if (n > 1) max = n;\n \
    \       return max;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                return largestPrimeFactor(n / i);\n            }\n        }\n\
    \        return n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n   \
    \         if (n % i == 0) {\n                if (isPrime(i)) {\n             \
    \       largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaeftq06y.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Your code here.\n        int val = n;\n        for (int i =\
    \ 2; i < n; i++) {\n            if (val % i == 0) {\n                val = val\
    \ / i;\n                i--;\n            }\n        }\n        return val;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0khgz49g.java:26)\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int prime = -1;\n        for (int i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                prime = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return prime;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 0;\n        int i = 2;\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                if (isPrime(i))\n            \
    \        largest = i;\n                n /= i;\n            } else {\n       \
    \         i++;\n            }\n        }\n        return largest;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6x8orhqp.java:19: error: cannot find symbol\n                if\
    \ (isPrime(i))\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int ans = -1;\n        for (int i = 2; i * i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                ans = Math.max(ans, largestPrimeFactor(n\
    \ / i));\n            }\n        }\n        return ans == -1 ? n : ans;\n}\n \
    \   public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return factor-1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = 1;\n        for (int i = 2; i <= n; i++) {\n       \
    \     while (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \            }\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Use a prime generator to get the prime factors.\n        PrimeGenerator\
    \ primeGenerator = new PrimeGenerator();\n        ArrayList<Integer> primeFactors\
    \ = new ArrayList<Integer>();\n        while (n > 1) {\n            int prime\
    \ = primeGenerator.next();\n            if (n % prime == 0) {\n              \
    \  primeFactors.add(prime);\n                n /= prime;\n            }\n    \
    \    }\n        return primeFactors.get(primeFactors.size() - 1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqu1lp6.java:16: error: cannot find symbol\n        PrimeGenerator\
    \ primeGenerator = new PrimeGenerator();\n        ^\n  symbol:   class PrimeGenerator\n\
    \  location: class Problem\n/tmp/tmp6aqu1lp6.java:16: error: cannot find symbol\n\
    \        PrimeGenerator primeGenerator = new PrimeGenerator();\n             \
    \                               ^\n  symbol:   class PrimeGenerator\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        assert n > 1;\n        int x = 2;\n        while (x * x <= n)\
    \ {\n            if (n % x == 0) {\n                n /= x;\n            } else\
    \ {\n                x++;\n            }\n        }\n        return n;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int[] factors = findPrimeFactors(n);\n        return factors[factors.length\
    \ - 1];\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp205p6bc1.java:15: error: cannot find symbol\n        int[] factors\
    \ = findPrimeFactors(n);\n                        ^\n  symbol:   method findPrimeFactors(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest_prime_factor = 2;\n        for (int i = 3; i <= n\
    \ / i; i += 2) {\n            if (n % i == 0) {\n                largest_prime_factor\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > largest_prime_factor)\
    \ {\n            largest_prime_factor = n;\n        }\n        return largest_prime_factor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ukbxpbg.java:33)\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnkose_f.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int prime = -1;\n        for (int i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                if (isPrime(i)) prime = i;\n     \
    \       }\n        }\n        return prime;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_jxmq0e.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) prime = i;\n                    ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Assuming n > 1 and is not a prime.\n        if (n <= 1) throw\
    \ new IllegalArgumentException();\n        if (isPrime(n)) throw new IllegalArgumentException();\n\
    \        int max_factor = 0;\n        for (int i = 2; i <= n / 2; i++) {\n   \
    \         if (n % i == 0 && isPrime(i)) max_factor = i;\n        }\n        return\
    \ max_factor;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp757g9y4o.java:17: error: cannot find symbol\n        if (isPrime(n))\
    \ throw new IllegalArgumentException();\n            ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n/tmp/tmp757g9y4o.java:20: error: cannot find symbol\n\
    \            if (n % i == 0 && isPrime(i)) max_factor = i;\n                 \
    \             ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 1;\n        for (int i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                boolean isPrime = true;\n    \
    \            for (int j = 2; j * j <= i; j++) {\n                    if (i % j\
    \ == 0) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n                if (isPrime) {\n  \
    \                  largest = i;\n                }\n            }\n        }\n\
    \        return largest;\n}\n    public static void main(String[] args) {\n  \
    \  assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne_ywoxg.java:33)\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n\t\tfor (int i = (int)Math.sqrt(n); i > 0; i--) {\n\t\t\tif (n % i ==\
    \ 0 && isPrime(i)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcwig6no.java:16: error: cannot find symbol\n\t\t\tif (n % i ==\
    \ 0 && isPrime(i)) {\n\t\t\t                  ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return i;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnkose_f.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 1;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpslo94dac.java:18)\n"
  stdout: ''
  timestamp: 1660011757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return n;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiz9elm6d.java:18)\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int result = 1;\n        int factor = 2;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                result = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int f = 2;\n        while (n % f != 0) {\n            f += 1;\n\
    \        }\n        return f;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuk_e0p1n.java:22)\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 2;\n        int lastFactor = 1;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                lastFactor = factor;\n\
    \                n = n / factor;\n                while (n % factor == 0) {\n\
    \                    n = n / factor;\n                }\n            }\n     \
    \       factor++;\n        }\n        return lastFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011760
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return factor - 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = n / 2; i > 1; i--) {\n            if (n % i == 0\
    \ && isPrime(i)) {\n                return i;\n            }\n        }\n    \
    \    return -1;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5my9gv8.java:16: error: cannot find symbol\n            if (n\
    \ % i == 0 && isPrime(i)) {\n                              ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        /*\n        // This is the solution from Wikipedia.\n        int\
    \ num = n;\n        int factor = 2;\n        while (factor <= num) {\n       \
    \     if (num % factor == 0) {\n                num /= factor;\n             \
    \   factor = 2;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return factor;\n        */\n        // We can use Fermat's\
    \ factorization.\n        BigInteger a = BigInteger.valueOf(2);\n        BigInteger\
    \ n_BigInteger = BigInteger.valueOf(n);\n        BigInteger x = BigInteger.valueOf(1);\n\
    \        BigInteger y = BigInteger.valueOf(1);\n        while (x.compareTo(y)\
    \ == 0) {\n            a = a.add(BigInteger.ONE);\n            x = a.pow(2).subtract(n_BigInteger);\n\
    \            y = x.sqrt();\n        }\n        return a.subtract(y).intValue();\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: Negative BigInteger\n\
    \tat java.base/java.math.BigInteger.sqrt(BigInteger.java:2554)\n\tat Problem.largestPrimeFactor(tmpsilzdt_3.java:37)\n\
    \tat Problem.main(tmpsilzdt_3.java:42)\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int res = 0;\n        int max = (int)Math.sqrt(n);\n        boolean[]\
    \ flag = new boolean[max + 1];\n        Arrays.fill(flag, true);\n        flag[0]\
    \ = false;\n        flag[1] = false;\n        for (int i = 2; i < max; i++) {\n\
    \            if (flag[i]) {\n                for (int j = i * i; j <= max; j +=\
    \ i) {\n                    flag[j] = false;\n                }\n            }\n\
    \        }\n        for (int i = max; i >= 2; i--) {\n            if (flag[i]\
    \ && n % i == 0) {\n                res = i;\n                break;\n       \
    \     }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_um0cjon.java:37)\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 1;\n        int largestFactor = 1;\n        for (int\
    \ i = 2; i <= n; i++) {\n            if (factor != 1) {\n                i = factor;\n\
    \                factor = 1;\n            }\n            if (n % i == 0) {\n \
    \               factor = i;\n                largestFactor = i;\n            }\n\
    \        }\n        return largestFactor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011765
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largestPrimeFactor = 1;\n        int current = 2;\n      \
    \  while (n > 1) {\n            if (n % current == 0) {\n                n /=\
    \ current;\n                largestPrimeFactor = current;\n            } else\
    \ {\n                current++;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // TODO: Fill this in.\n        return n;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldb7ymgz.java:19)\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int r = 1;\n        int f = 2;\n        while (f <= n) {\n   \
    \         if (n % f == 0) {\n                r = f;\n                n /= f;\n\
    \            } else {\n                f++;\n            }\n        }\n      \
    \  return r;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011760
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return factor-1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011759
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int ans = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            while (n % i == 0) {\n                ans = i;\n            \
    \    n /= i;\n            }\n        }\n        if (n > 1) ans = n;\n        return\
    \ ans;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n % 2 == 0) return largestPrimeFactor(n / 2);\n        for\
    \ (int d = 3; d <= n; d += 2) {\n            if (n % d == 0) return largestPrimeFactor(n\
    \ / d);\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdo6id65x.java:22)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        int res = 0;\n        while (i <= n) {\n \
    \           if (n % i == 0) {\n                n /= i;\n                res =\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       return res;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int max = 0;\n        for (int i = 2; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                if (isPrime(i)) {\n                  \
    \  max = i;\n                }\n            }\n        }\n        return max;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5odwye8b.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return largestPrimeFactorHelper(n, 2);\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfittj5p.java:15: error: cannot find symbol\n        return largestPrimeFactorHelper(n,\
    \ 2);\n               ^\n  symbol:   method largestPrimeFactorHelper(int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011760
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 0;\n        // Start divisor with 2, continue to\
    \ divide n by odd numbers until\n        // n can no longer be divided by 2.\n\
    \        for (int divisor = 2; n > 1; divisor += 1) {\n            if (divisor\
    \ > 2) {\n                divisor += 1;\n            }\n            while (n %\
    \ divisor == 0) {\n                n /= divisor;\n                factor = divisor;\n\
    \            }\n        }\n        return factor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011766
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // YOUR CODE HERE\n        return 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaojqxwu4.java:19)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                int div = n / i;\n                if (isPrime(div)) {\n     \
    \               return div;\n                }\n            }\n        }\n   \
    \     return n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5x5xlzo5.java:18: error: cannot find symbol\n                if\
    \ (isPrime(div)) {\n                    ^\n  symbol:   method isPrime(int)\n \
    \ location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int result = 0;\n        int r = (int) Math.sqrt(n);\n       \
    \ boolean isPrime;\n        while (r > 0) {\n            isPrime = true;\n   \
    \         for (int i = 2; i <= r; i++) {\n                if (r % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime && n % r == 0) {\n          \
    \      result = r;\n                break;\n            }\n            r--;\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nkdrzpj.java:35)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 0;\n        while (n % 2 == 0) {\n            largest\
    \ = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            while (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n            }\n        }\n        if (n > 2) {\n   \
    \         largest = n;\n        }\n        return largest;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Hint: Modular Arithmetic\n        // Hint: Fermat's little\
    \ theorem\n        // Hint: https://en.wikipedia.org/wiki/Fermat's_little_theorem\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpisw7pdkg.java:21)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int factor = n - 1; factor > 1; factor--) {\n           \
    \ if (n % factor == 0 && Utils.isPrime(factor)) {\n                return factor;\n\
    \            }\n        }\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeex7mtbo.java:16: error: cannot find symbol\n            if (n\
    \ % factor == 0 && Utils.isPrime(factor)) {\n                                \
    \   ^\n  symbol:   variable Utils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnkose_f.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        throw new UnsupportedOperationException(\"Delete this line and\
    \ implement this function.\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Delete\
    \ this line and implement this function.\n\tat Problem.largestPrimeFactor(tmp16omg_jd.java:15)\n\
    \tat Problem.main(tmp16omg_jd.java:18)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest_prime_factor = 0;\n        int current_prime = 2;\n\
    \        while (n > 1) {\n            while (n % current_prime == 0) {\n     \
    \           largest_prime_factor = current_prime;\n                n /= current_prime;\n\
    \            }\n            current_prime += 1;\n        }\n        return largest_prime_factor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int largest = 0;\n        // YOUR CODE HERE\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg12tn1l6.java:20)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i;\n        for (i = 2; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                n /= i;\n                i--;\n            }\n\
    \        }\n        return i;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int lastFactor = 1;\n        while (n % 2 == 0) {\n          \
    \  lastFactor = 2;\n            n /= 2;\n        }\n        int factor = 3;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     lastFactor = factor;\n                n /= factor;\n            }\n    \
    \        factor += 2;\n        }\n        return lastFactor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i < n) {\n            if (n % i ==\
    \ 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // edge cases\n        if (n <= 1) return -1;\n        if (isPrime(n))\
    \ return n;\n        // prime factorization\n        // brute force\n        int\
    \ max = 0;\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i\
    \ == 0 && isPrime(i)) {\n                max = i;\n            }\n        }\n\
    \        return max;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpadp42_g6.java:17: error: cannot find symbol\n        if (isPrime(n))\
    \ return n;\n            ^\n  symbol:   method isPrime(int)\n  location: class\
    \ Problem\n/tmp/tmpadp42_g6.java:22: error: cannot find symbol\n            if\
    \ (n % i == 0 && isPrime(i)) {\n                              ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        List<Integer> primes = new ArrayList<>();\n        int num = n;\n\
    \        while (num % 2 == 0) {\n            primes.add(2);\n            num /=\
    \ 2;\n        }\n        int limit = (int) Math.sqrt(num);\n        for (int i\
    \ = 3; i <= limit; i += 2) {\n            while (num % i == 0) {\n           \
    \     primes.add(i);\n                num /= i;\n            }\n        }\n  \
    \      if (num > 2) {\n            primes.add(num);\n        }\n        return\
    \ primes.get(primes.size() - 1);\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n      \
    \  int product = 1;\n        for (int i = 2; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                primes.add(i);\n                product *= i;\n\
    \            }\n            if (product == n) {\n                return primes.get(primes.size()\
    \ - 1);\n            }\n        }\n        return -1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_zw0yda.java:30)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int divisor = 2; divisor <= n / 2; divisor++) {\n       \
    \     if (n % divisor == 0 && isPrime(divisor)) {\n                return divisor;\n\
    \            }\n        }\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpazswew_b.java:16: error: cannot find symbol\n            if (n\
    \ % divisor == 0 && isPrime(divisor)) {\n                                    ^\n\
    \  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int result = 0;\n        for (int i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                n /= i;\n                result =\
    \ i;\n            }\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctnvxma7.java:26)\n"
  stdout: ''
  timestamp: 1660011761
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n}\n   \
    \ public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011761
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int result = 0;\n        if (n % 2 == 0) {\n            result\
    \ = 2;\n            n /= 2;\n            while (n % 2 == 0) {\n              \
    \  n /= 2;\n            }\n        }\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            if (n % i == 0) {\n                result = i;\n    \
    \            n /= i;\n                while (n % i == 0) {\n                 \
    \   n /= i;\n                }\n            }\n        }\n        if (n > 2) {\n\
    \            result = n;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n \
    \   assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011762
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        for (int d = 2; d * d <= n; d++) {\n            if (n % d == 0)\
    \ {\n                return largestPrimeFactor(n / d);\n            }\n      \
    \  }\n        return n;\n}\n    public static void main(String[] args) {\n   \
    \ assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011762
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int factor = 0;\n        int max = 0;\n        for (int i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                factor = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n                max = Math.max(max, factor);\n            }\n     \
    \   }\n        return max;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        return 0;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgc7utd7.java:18)\n"
  stdout: ''
  timestamp: 1660011753
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n <= 1) {\n            throw new IllegalArgumentException(\"\
    n must be greater than 1\");\n        }\n        if (isPrime(n)) {\n         \
    \   throw new IllegalArgumentException(\"n must not be prime\");\n        }\n\
    \        // The final factor will be the largest prime factor.\n        int factor\
    \ = 1;\n        // Divide by 2 until n is odd.\n        while (n % 2 == 0) {\n\
    \            n /= 2;\n        }\n        // One at a time, check if there is a\
    \ factor of n that is also a prime number.\n        // The last factor will be\
    \ the largest prime factor.\n        for (int i = 3; i <= Math.sqrt(n); i += 2)\
    \ {\n            while (n % i == 0) {\n                factor = i;\n         \
    \       n /= i;\n            }\n        }\n        // If the final prime factor\
    \ is less than the square root of n, then the final\n        // factor will be\
    \ the number itself.\n        if (n > 2) {\n            factor = n;\n        }\n\
    \        return factor;\n}\n    public static void main(String[] args) {\n   \
    \ assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxr4q3bdf.java:18: error: cannot find symbol\n        if (isPrime(n))\
    \ {\n            ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011762
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int m = 2;\n        while (n > 1) {\n            while (n % m\
    \ == 0) {\n                n /= m;\n            }\n            m++;\n        }\n\
    \        return m-1;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i;\n        for (i = 2; i * i <= n; i++) {\n            while\
    \ (n % i == 0) {\n                n /= i;\n            }\n        }\n        return\
    \ n;\n}\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3l2smbo4.java:25)\n"
  stdout: ''
  timestamp: 1660011762
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        // Note: 2 is the only even prime, so all other primes are odd.\n\
    \        // If a number is divisible by 2, all its prime factors are also even.\n\
    \        // Remove factors of 2 from n, so all remaining prime factors are odd.\n\
    \        while (n % 2 == 0) {\n            n /= 2;\n        }\n        // Now\
    \ n is odd, so skip all even numbers when looping to check if they\n        //\
    \ are factors of n.\n        int factor = 3;\n        while (n > 1) {\n      \
    \      while (n % factor == 0) {\n                n /= factor;\n            }\n\
    \            factor += 2;\n        }\n        return factor - 2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15)) == (5));\n\
    \    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011762
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15)) == (5));\n    assert(largestPrimeFactor((27))\
    \ == (3));\n    assert(largestPrimeFactor((63)) == (7));\n    assert(largestPrimeFactor((330))\
    \ == (11));\n    assert(largestPrimeFactor((13195)) == (29));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int\
    \ n) {\n        if (n <= 3) {\n            return n;\n        }\n        int largestPrimeFactor\
    \ = 2;\n        int limit = (int) Math.sqrt(n);\n        for (int i = 3; i <=\
    \ limit; i += 2) {\n            while (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            }\n        }\n        return largestPrimeFactor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15))\
    \ == (5));\n    assert(largestPrimeFactor((27)) == (3));\n    assert(largestPrimeFactor((63))\
    \ == (7));\n    assert(largestPrimeFactor((330)) == (11));\n    assert(largestPrimeFactor((13195))\
    \ == (29));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcyg3tv2u.java:29)\n"
  stdout: ''
  timestamp: 1660011762
