language: java
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Size = 0;\n        int lst2Size\
    \ = 0;\n        for (String s : lst1) {\n            lst1Size += s.length();\n\
    \        }\n        for (String s : lst2) {\n            lst2Size += s.length();\n\
    \        }\n        if (lst1Size < lst2Size) {\n            return lst1;\n   \
    \     } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsux0tj3v.java:40)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int c1 = lst1.stream().reduce(0, (acc,\
    \ s) -> acc + s.length(), (a, b) -> a + b);\n        int c2 = lst2.stream().reduce(0,\
    \ (acc, s) -> acc + s.length(), (a, b) -> a + b);\n        return c1 < c2 ? lst1\
    \ : c1 > c2 ? lst2 : lst1;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1CharCount = 0;\n        int\
    \ lst2CharCount = 0;\n        for (String word : lst1) {\n            lst1CharCount\
    \ += word.length();\n        }\n        for (String word : lst2) {\n         \
    \   lst2CharCount += word.length();\n        }\n        if (lst1CharCount > lst2CharCount)\
    \ {\n            return lst2;\n        } else {\n            return lst1;\n  \
    \      }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        for (String str : lst1) {\n            sum1 += str.length();\n      \
    \  }\n        for (String str : lst2) {\n            sum2 += str.length();\n \
    \       }\n        if (sum1 < sum2) {\n            return lst1;\n        } else\
    \ {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpja2wyguj.java:40)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sumlst1 = 0;\n        int sumlst2\
    \ = 0;\n        for (String el : lst1)\n            sumlst1 += el.length();\n\
    \        for (String el : lst2)\n            sumlst2 += el.length();\n       \
    \ return sumlst1 > sumlst2 ? lst2 : lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> ans = new ArrayList<String>();\n\
    \        int lst1Chars = lst1.stream().mapToInt(s -> s.length()).sum();\n    \
    \    int lst2Chars = lst2.stream().mapToInt(s -> s.length()).sum();\n        if\
    \ (lst1Chars < lst2Chars) {\n            ans = lst1;\n        } else if (lst1Chars\
    \ > lst2Chars) {\n            ans = lst2;\n        } else {\n            ans =\
    \ lst1;\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ word : lst1) {\n            sum1 += word.length();\n        }\n        for (String\
    \ word : lst2) {\n            sum2 += word.length();\n        }\n        if (sum1\
    \ == sum2) {\n            return lst1;\n        } else if (sum1 < sum2) {\n  \
    \          return lst1;\n        } else {\n            return lst2;\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String i : lst1) {\n            count1 += i.length();\n \
    \       }\n        for (String i : lst2) {\n            count2 += i.length();\n\
    \        }\n        if (count1 < count2) {\n            return lst1;\n       \
    \ } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpirewcgae.java:40)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1total = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        int lst2total = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        return lst1total <= lst2total ? lst1 : lst2;\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1count = 0;\n        int lst2count\
    \ = 0;\n        for (String element: lst1) {\n            lst1count += element.length();\n\
    \        }\n        for (String element: lst2) {\n            lst2count += element.length();\n\
    \        }\n        if (lst1count < lst2count) {\n            return lst1;\n \
    \       } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kctjdjb.java:40)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.totalMatch(java.util.ArrayList,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpwb5twptj.java:22)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count = 0;\n        for (String\
    \ s : lst1) count += s.length();\n        for (String s : lst2) count -= s.length();\n\
    \        return count >= 0 ? lst2 : lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_gdao075.java:31)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = 0;\n        int len2 = 0;\n\
    \        for (String s: lst1) len1 += s.length();\n        for (String s: lst2)\
    \ len2 += s.length();\n        if (len1 < len2) return lst1;\n        if (len2\
    \ < len1) return lst2;\n        return lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        if (lst1.size() == 0 && lst2.size()\
    \ == 0) {\n            return new ArrayList<String>();\n        } else if (lst1.size()\
    \ > lst2.size()) {\n            return lst2;\n        } else if (lst1.size() <\
    \ lst2.size()) {\n            return lst1;\n        } else {\n            if (lst1.get(0).length()\
    \ < lst2.get(0).length()) {\n                return lst1;\n            } else\
    \ if (lst1.get(0).length() > lst2.get(0).length()) {\n                return lst2;\n\
    \            } else {\n                return lst1;\n            }\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbyc7fwad.java:37)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        if (lst1.size() < 1) return lst1;\n\
    \        int c1 = lst1.stream().mapToInt(i -> i.length()).sum();\n        int\
    \ c2 = lst2.stream().mapToInt(i -> i.length()).sum();\n        return c1 > c2\
    \ ? lst2 : lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011605
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sumLst1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int sumLst2 = lst2.stream().mapToInt(String::length).sum();\n       \
    \ return sumLst1 < sumLst2 ? lst1 : sumLst1 > sumLst2 ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> arrayList = new ArrayList<>();\n\
    \        return arrayList;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg6x4hm0.java:24)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Total = 0;\n        int lst2Total\
    \ = 0;\n        for (String str: lst1) {\n            lst1Total += str.length();\n\
    \        }\n        for (String str: lst2) {\n            lst2Total += str.length();\n\
    \        }\n        if (lst1Total == lst2Total) {\n            return lst1;\n\
    \        } else if (lst1Total < lst2Total) {\n            return lst1;\n     \
    \   } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n      int c1 = 0;\n      int c2 = 0;\n    \
    \  for (String s: lst1) {\n        c1 += s.length();\n      }\n      for (String\
    \ s: lst2) {\n        c2 += s.length();\n      }\n      if (c1 < c2) {\n     \
    \   return lst1;\n      } else if (c2 < c1) {\n        return lst2;\n      } else\
    \ {\n        return lst1;\n      }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().reduce(0,\
    \ (sum, str) -> sum + str.length(), (sum1A, sum2A) -> sum1A + sum2A);\n      \
    \  int sum2 = lst2.stream().reduce(0, (sum, str) -> sum + str.length(), (sum1A,\
    \ sum2A) -> sum1A + sum2A);\n        if (sum1 <= sum2) {\n            return lst1;\n\
    \        } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011605
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(w\
    \ -> w.length()).sum();\n        int sum2 = lst2.stream().mapToInt(w -> w.length()).sum();\n\
    \        if (sum1 < sum2) return lst1;\n        else if (sum1 > sum2) return lst2;\n\
    \        else return lst1;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011605
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        //int a = 0; int b = 0;\n        //for\
    \ (String a1 : lst1) { a += a1.length(); }\n        //for (String b1 : lst2) {\
    \ b += b1.length(); }\n        //if (a == b) { return lst1; }\n        //if (a\
    \ < b) { return lst1; }\n        //return lst2;\n        //int a = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        //int b = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        //return a == b ? lst1 : a < b ? lst1 : lst2;\n        return IntStream.of(lst1.stream().mapToInt(s\
    \ -> s.length()).sum(), lst2.stream().mapToInt(s -> s.length()).sum()).max().getAsInt()\
    \ == lst1.stream().mapToInt(s -> s.length()).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8isw8lbx.java:32)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // get the total number of chars of\
    \ all strings in the lists\n        int lst1total = lst1.stream().mapToInt(String::length).sum();\n\
    \        int lst2total = lst2.stream().mapToInt(String::length).sum();\n     \
    \   // if lst1 has the smallest amount of chars then return lst1\n        if (lst1total\
    \ < lst2total) {\n            return lst1;\n        }\n        // if lst2 has\
    \ the smallest amount of chars then return lst2\n        else if (lst2total <\
    \ lst1total) {\n            return lst2;\n        }\n        // if the two lists\
    \ have the same amount of chars then return lst1\n        else {\n           \
    \ return lst1;\n        }\n}\n    public static void main(String[] args) {\n \
    \   assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011605
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int totalLst1 = 0;\n        int totalLst2\
    \ = 0;\n        for (String str: lst1) {\n            totalLst1 += str.length();\n\
    \        }\n        for (String str: lst2) {\n            totalLst2 += str.length();\n\
    \        }\n        return totalLst1 < totalLst2 ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr2lr5aur.java:36)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Count = 0;\n        int lst2Count\
    \ = 0;\n        for (String s : lst1) {\n            lst1Count += s.length();\n\
    \        }\n        for (String s : lst2) {\n            lst2Count += s.length();\n\
    \        }\n        if (lst1Count == lst2Count) {\n            return lst1;\n\
    \        } else if (lst1Count < lst2Count) {\n            return lst1;\n     \
    \   } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        if (lst1.size() == 0 && lst2.size()\
    \ == 0) {\n            return new ArrayList<String>();\n        }\n        int\
    \ lst1total = lst1.stream().mapToInt(s -> s.length()).sum();\n        int lst2total\
    \ = lst2.stream().mapToInt(s -> s.length()).sum();\n        if (lst1total < lst2total)\
    \ {\n            return lst1;\n        } else if (lst2total < lst1total) {\n \
    \           return lst2;\n        } else {\n            return lst1;\n       \
    \ }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1CharCount = lst1.stream().mapToInt(String::length).sum();\n\
    \        int lst2CharCount = lst2.stream().mapToInt(String::length).sum();\n \
    \       return lst1CharCount > lst2CharCount ? lst2 : lst1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7f03ww6.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = lst1.stream().mapToInt(i\
    \ -> i.length()).sum();\n        int total2 = lst2.stream().mapToInt(i -> i.length()).sum();\n\
    \        return total1 <= total2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int one = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        int two = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        if (one == two) return lst1;\n        return one < two ? lst1 : lst2;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int lst1_total = 0;\n        int lst2_total = 0;\n        for (String\
    \ s : lst1) {\n            lst1_total += s.length();\n        }\n        for (String\
    \ s : lst2) {\n            lst2_total += s.length();\n        }\n        if (lst1_total\
    \ < lst2_total) {\n            result = lst1;\n        } else {\n            result\
    \ = lst2;\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaf04zme0.java:42)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int lst1Total = 0;\n        int lst2Total = 0;\n        if (lst1.size()\
    \ > 0 && lst2.size() > 0) {\n            for (String str : lst1) {\n         \
    \       lst1Total += str.length();\n            }\n            for (String str\
    \ : lst2) {\n                lst2Total += str.length();\n            }\n     \
    \       if (lst1Total < lst2Total) {\n                result = lst1;\n       \
    \     } else if (lst1Total > lst2Total) {\n                result = lst2;\n  \
    \          } else {\n                result = lst1;\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Sum = lst1.stream().mapToInt(String::length).sum();\n\
    \        int lst2Sum = lst2.stream().mapToInt(String::length).sum();\n       \
    \ if (lst1Sum == lst2Sum) return lst1;\n        return lst1Sum < lst2Sum ? lst1\
    \ : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n      // Code\n      int sum = 0;\n      int\
    \ sum1 = 0;\n      for(int i = 0; i < lst1.size(); i++) {\n          sum += lst1.get(i).length();\n\
    \      }\n      for(int i = 0; i < lst2.size(); i++) {\n          sum1 += lst2.get(i).length();\n\
    \      }\n      if(sum == sum1) {\n          return lst1;\n      } else if(sum\
    \ > sum1) {\n          return lst2;\n      } else {\n          return lst1;\n\
    \      }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return (lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum()) ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6spscfy.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> answer = new ArrayList<String>();\n\
    \        int sum1 = 0;\n        int sum2 = 0;\n        for (String i : lst1) {\n\
    \            sum1 += i.length();\n        }\n        for (String i : lst2) {\n\
    \            sum2 += i.length();\n        }\n        if (sum1 < sum2) {\n    \
    \        answer = lst1;\n        } else if (sum1 > sum2) {\n            answer\
    \ = lst2;\n        } else {\n            answer = lst1;\n        }\n        return\
    \ answer;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = 0;\n        int len2 = 0;\n\
    \        for (String s : lst1) len1 += s.length();\n        for (String s : lst2)\
    \ len2 += s.length();\n        if (len1 == len2) return lst1;\n        if (len1\
    \ < len2) return lst1;\n        return lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total_chars_lst1 = 0;\n       \
    \ int total_chars_lst2 = 0;\n        for (String str : lst1) {\n            total_chars_lst1\
    \ += str.length();\n        }\n        for (String str : lst2) {\n           \
    \ total_chars_lst2 += str.length();\n        }\n        return total_chars_lst1\
    \ <= total_chars_lst2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = lst1;\n\
    \        int lst1Chars = 0;\n        int lst2Chars = 0;\n        if(lst1.size()\
    \ == 0 || lst2.size() == 0) {\n            return result;\n        }\n       \
    \ for(String s : lst1) {\n            lst1Chars += s.length();\n        }\n  \
    \      for(String s : lst2) {\n            lst2Chars += s.length();\n        }\n\
    \        if(lst1Chars == lst2Chars) {\n            return result;\n        }\n\
    \        else if(lst1Chars > lst2Chars) {\n            result = lst2;\n      \
    \  }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp8cj6jno.java:48)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ > \n               lst2.stream().mapToInt(String::length).sum() ? lst2 : lst1;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int num1 = 0;\n        int num2 = 0;\n\
    \        for (String s : lst1) {\n            num1 += s.length();\n        }\n\
    \        for (String s : lst2) {\n            num2 += s.length();\n        }\n\
    \        if (num1 < num2) {\n            return lst1;\n        } else {\n    \
    \        return lst2;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpony_snzg.java:40)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        if (lst1.size() == 0) return lst1;\n\
    \        if (lst2.size() == 0) return lst2;\n        int len1 = lst1.stream().reduce(0,\
    \ (total, each) -> total += each.length(), (total1, total2) -> total1 + total2);\n\
    \        int len2 = lst2.stream().reduce(0, (total, each) -> total += each.length(),\
    \ (total1, total2) -> total1 + total2);\n        return len1 < len2 ? lst1 : len2\
    \ < len1 ? lst2 : lst1;\n}\n    public static void main(String[] args) {\n   \
    \ assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sumLst1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int sumLst2 = lst2.stream().mapToInt(String::length).sum();\n       \
    \ return sumLst1 == sumLst2 ? lst1 : sumLst1 < sumLst2 ? lst1 : lst2;\n}\n   \
    \ public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011607
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return IntStream.range(0, (lst1.size()\
    \ > lst2.size() ? lst1.size() : lst2.size()))\n            .mapToObj(index ->\
    \ lst1.size() > lst2.size() ? lst1.get(index) : lst2.get(index))\n           \
    \ .map(x -> (int) x.chars().count())\n            .reduce(0, (a, b) -> a + b)\
    \ > IntStream.range(0, (lst1.size() > lst2.size() ? lst1.size() : lst2.size()))\n\
    \            .mapToObj(index -> lst1.size() > lst2.size() ? lst2.get(index) :\
    \ lst1.get(index))\n            .map(x -> (int) x.chars().count())\n         \
    \   .reduce(0, (a, b) -> a + b) ? lst1.size() > lst2.size() ? lst2 : lst1 : lst1.size()\
    \ > lst2.size() ? lst1 : lst2;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 2 out of bounds for length 2\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.lambda$totalMatch$3(tmptw_jgn2z.java:23)\n\tat java.base/java.util.stream.IntPipeline$1$1.accept(IntPipeline.java:180)\n\
    \tat java.base/java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:104)\n\
    \tat java.base/java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:711)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:657)\n\
    \tat Problem.totalMatch(tmptw_jgn2z.java:25)\n\tat Problem.main(tmptw_jgn2z.java:30)\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n\
    \            sum1 += s.length();\n        }\n        for (String s : lst2) {\n\
    \            sum2 += s.length();\n        }\n        return sum1 < sum2 ? lst1\
    \ : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ah63_qp.java:37)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> ret = new ArrayList<String>();\n\
    \        if (lst1.size() == 0)\n            return lst1;\n        if (lst2.size()\
    \ == 0)\n            return lst2;\n        int lst1_chars = 0;\n        int lst2_chars\
    \ = 0;\n        for (String s : lst1)\n            lst1_chars += s.length();\n\
    \        for (String s : lst2)\n            lst2_chars += s.length();\n      \
    \  if (lst1_chars < lst2_chars)\n            return lst1;\n        if (lst2_chars\
    \ < lst1_chars)\n            return lst2;\n        return lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().collect(Collectors.joining()).length()\
    \ < \n            lst2.stream().collect(Collectors.joining()).length() ? lst1\
    \ : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpom_z3mkl.java:29)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String s: lst1) {\n            count1 += s.length();\n  \
    \      }\n        for (String s: lst2) {\n            count2 += s.length();\n\
    \        }\n        return count1 > count2 ? lst2 : lst1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return (lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum()) ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6spscfy.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1TotalChars = lst1.stream().mapToInt(String::length).sum();\n\
    \        int lst2TotalChars = lst2.stream().mapToInt(String::length).sum();\n\
    \        return lst1TotalChars < lst2TotalChars ? lst1 : lst2TotalChars < lst1TotalChars\
    \ ? lst2 : lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1NumOfChars = 0;\n        int\
    \ lst2NumOfChars = 0;\n        for (String s : lst1) {\n            lst1NumOfChars\
    \ += s.length();\n        }\n        for (String s : lst2) {\n            lst2NumOfChars\
    \ += s.length();\n        }\n        if (lst1NumOfChars < lst2NumOfChars) {\n\
    \            return lst1;\n        } else {\n            return lst2;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxxqg8lg_.java:40)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // your code\n        int char1 = 0;\n\
    \        int char2 = 0;\n        for(String s : lst1) {\n            char1 +=\
    \ s.length();\n        }\n        for(String s : lst2) {\n            char2 +=\
    \ s.length();\n        }\n        if(char1 < char2) {\n            return lst1;\n\
    \        } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_rb13ec.java:41)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7f03ww6.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(e ->\
    \ e.length()).sum() < lst2.stream().mapToInt(e -> e.length()).sum() ? lst1 : lst2;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3iimkrhx.java:28)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ <= lst2.stream().mapToInt(String::length).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // return the first list if either\
    \ list is empty\n        if (lst1.size() == 0 || lst2.size() == 0) {\n       \
    \     return lst1;\n        }\n        // sum the number of chars in each list\n\
    \        Integer sum1 = lst1.stream().mapToInt(i -> i.length()).sum();\n     \
    \   Integer sum2 = lst2.stream().mapToInt(i -> i.length()).sum();\n        //\
    \ return the list with the smaller sum\n        return sum1 < sum2 ? lst1 : lst2;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2ix9pib.java:36)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(x\
    \ -> x.length()).sum();\n        int sum2 = lst2.stream().mapToInt(x -> x.length()).sum();\n\
    \        return sum1 < sum2 ? lst1 : sum1 > sum2 ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.totalMatch(java.util.ArrayList,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpwb5twptj.java:22)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Total = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        int lst2Total = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        if (lst1Total == lst2Total) {\n            return lst1;\n        } else\
    \ if (lst1Total < lst2Total) {\n            return lst1;\n        } else {\n \
    \           return lst2;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Total = lst1.stream().mapToInt(x\
    \ -> x.length()).sum();\n        int lst2Total = lst2.stream().mapToInt(x -> x.length()).sum();\n\
    \        if (lst1Total == lst2Total) {\n            return lst1;\n        } else\
    \ if (lst1Total < lst2Total) {\n            return lst1;\n        } else {\n \
    \           return lst2;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1TotalChar = 0;\n        int\
    \ lst2TotalChar = 0;\n        for (String string : lst1) {\n            lst1TotalChar\
    \ += string.length();\n        }\n        for (String string : lst2) {\n     \
    \       lst2TotalChar += string.length();\n        }\n        if (lst1TotalChar\
    \ > lst2TotalChar) {\n            return lst2;\n        } else {\n           \
    \ return lst1;\n        }\n}\n    public static void main(String[] args) {\n \
    \   assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = lst1.stream().mapToInt(x\
    \ -> x.length()).sum();\n        int len2 = lst2.stream().mapToInt(x -> x.length()).sum();\n\
    \        return len1 < len2 ? lst1 : len1 > len2 ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total_lst1 = 0;\n        int total_lst2\
    \ = 0;\n        for (String str : lst1) {\n            total_lst1 += str.length();\n\
    \        }\n        for (String str : lst2) {\n            total_lst2 += str.length();\n\
    \        }\n        return total_lst1 < total_lst2 ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpem_x_e2g.java:36)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int length1 = 0;\n        int length2\
    \ = 0;\n        for (String x : lst1) {\n            length1 += x.length();\n\
    \        }\n        for (String x : lst2) {\n            length2 += x.length();\n\
    \        }\n        if (length1 == length2) {\n            return lst1;\n    \
    \    } else if (length1 < length2) {\n            return lst1;\n        } else\
    \ {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int length1 = 0;\n        int length2\
    \ = 0;\n        for (String s : lst1) {\n            length1 += s.length();\n\
    \        }\n        for (String s : lst2) {\n            length2 += s.length();\n\
    \        }\n        return length1 < length2 ? lst1 : length1 > length2 ? lst2\
    \ : lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        if (lst1.size() == 0 && lst2.size()\
    \ == 0) {\n            return new ArrayList<String>();\n        }\n        int\
    \ len1 = lst1.stream().mapToInt(String::length).sum();\n        int len2 = lst2.stream().mapToInt(String::length).sum();\n\
    \        if (len1 <= len2) {\n            return lst1;\n        } else {\n   \
    \         return lst2;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int list1Total = 0;\n        int list2Total\
    \ = 0;\n        for (String str : lst1) list1Total += str.length();\n        for\
    \ (String str : lst2) list2Total += str.length();\n        if (list1Total == list2Total)\
    \ return lst1;\n        else if (list1Total < list2Total) return lst1;\n     \
    \   else return lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int totalChars1 = 0;\n        int totalChars2\
    \ = 0;\n        for (String s : lst1) {\n            totalChars1 += s.length();\n\
    \        }\n        for (String s : lst2) {\n            totalChars2 += s.length();\n\
    \        }\n        if (totalChars1 < totalChars2) {\n            return lst1;\n\
    \        } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3n1r2txf.java:40)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        for (String s : lst1) {\n \
    \           i1 += s.length();\n        }\n        for (String s : lst2) {\n  \
    \          i2 += s.length();\n        }\n        if (i1 == i2) {\n           \
    \ return lst1;\n        } else if (i1 < i2) {\n            return lst1;\n    \
    \    } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1TotalChars = 0;\n        int\
    \ lst2TotalChars = 0;\n        for (String s : lst1) {\n            lst1TotalChars\
    \ += s.length();\n        }\n        for (String s : lst2) {\n            lst2TotalChars\
    \ += s.length();\n        }\n        if (lst1TotalChars < lst2TotalChars) {\n\
    \            return lst1;\n        } else {\n            return lst2;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqavfh4va.java:40)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // your code here\n        ArrayList<String>\
    \ ans = new ArrayList<String>();\n        int len1 = 0;\n        int len2 = 0;\n\
    \        for(String i : lst1) {\n            len1 += i.length();\n        }\n\
    \        for(String i : lst2) {\n            len2 += i.length();\n        }\n\
    \        if(len1 < len2) {\n            ans = lst1;\n        } else if(len1 >\
    \ len2) {\n            ans = lst2;\n        } else {\n            ans = lst1;\n\
    \        }\n        return ans;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        for (String s: lst1) {\n            sum1 += s.length();\n        }\n\
    \        for (String s: lst2) {\n            sum2 += s.length();\n        }\n\
    \        return sum1 < sum2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9pp059su.java:36)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        String temp = String.join(\"\", lst1);\n\
    \        int len1 = temp.length();\n        temp = String.join(\"\", lst2);\n\
    \        int len2 = temp.length();\n        if (len1 > len2) {\n            return\
    \ lst2;\n        } else {\n            return lst1;\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int s1 = 0;\n        int s2 = 0;\n\
    \        for (String str : lst1) s1 += str.length();\n        for (String str\
    \ : lst2) s2 += str.length();\n        if (s1 < s2) return lst1;\n        else\
    \ if (s2 < s1) return lst2;\n        else return lst1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        int total2 = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        return total1 < total2 ? lst1 : total1 > total2 ? lst2 : lst1;\n}\n \
    \   public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Total = 0;\n        int lst2Total\
    \ = 0;\n        for (String s : lst1) {\n            lst1Total += s.length();\n\
    \        }\n        for (String s : lst2) {\n            lst2Total += s.length();\n\
    \        }\n        return lst1Total < lst2Total ? lst1 : lst2Total < lst1Total\
    \ ? lst2 : lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        Integer lst1Sum = 0;\n        Integer\
    \ lst2Sum = 0;\n        for (String s : lst1) lst1Sum += s.length();\n       \
    \ for (String s : lst2) lst2Sum += s.length();\n        return lst1Sum < lst2Sum\
    \ ? lst1 : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoy6jh8yy.java:32)\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return countChars(lst1) < countChars(lst2)\
    \ ? lst1 : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kz_tfhs.java:19: error: cannot find symbol\n        return countChars(lst1)\
    \ < countChars(lst2) ? lst1 : lst2;\n               ^\n  symbol:   method countChars(ArrayList<String>)\n\
    \  location: class Problem\n/tmp/tmp1kz_tfhs.java:19: error: cannot find symbol\n\
    \        return countChars(lst1) < countChars(lst2) ? lst1 : lst2;\n         \
    \                         ^\n  symbol:   method countChars(ArrayList<String>)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write your code here\n        int\
    \ sum1 = 0;\n        int sum2 = 0;\n        for(String s : lst1) {\n         \
    \   sum1 += s.length();\n        }\n        for(String s : lst2) {\n         \
    \   sum2 += s.length();\n        }\n        if(sum1 == sum2) {\n            return\
    \ lst1;\n        }\n        if(sum1 < sum2) {\n            return lst1;\n    \
    \    }\n        return lst2;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Sum = lst1.stream().mapToInt(String::length).sum();\n\
    \        int lst2Sum = lst2.stream().mapToInt(String::length).sum();\n       \
    \ return lst1Sum < lst2Sum ? lst1 : lst2Sum < lst1Sum ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Count = lst1.stream().mapToInt(String::length).sum();\n\
    \        int lst2Count = lst2.stream().mapToInt(String::length).sum();\n     \
    \   return lst1Count > lst2Count ? lst2 : lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.totalMatch(java.util.ArrayList,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpwb5twptj.java:22)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int num = 0;\n        for (String s\
    \ : lst1) num += s.length();\n        int num2 = 0;\n        for (String s : lst2)\
    \ num2 += s.length();\n        if (num < num2) return lst1;\n        else if (num\
    \ > num2) return lst2;\n        else return lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // return the list that has a total\
    \ number of chars in all the strings of the list less than the other list\n  \
    \      int sum = lst1.stream().mapToInt(String::length).sum();\n        int sum2\
    \ = lst2.stream().mapToInt(String::length).sum();\n        if (sum < sum2) {\n\
    \            return lst1;\n        } else if (sum2 < sum) {\n            return\
    \ lst2;\n        } else {\n            return lst1;\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum_1 = 0;\n        int sum_2 =\
    \ 0;\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String elem: lst1) {\n            sum_1 += elem.length();\n        }\n    \
    \    for (String elem: lst2) {\n            sum_2 += elem.length();\n        }\n\
    \        if (sum_1 <= sum_2) {\n            result = lst1;\n        } else {\n\
    \            result = lst2;\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ > lst2.stream().mapToInt(String::length).sum() ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int a = lst1.stream().mapToInt(String::length).sum();\n\
    \        int b = lst2.stream().mapToInt(String::length).sum();\n        return\
    \ a == b ? lst1 : a < b ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = 0;\n        int total2\
    \ = 0;\n        for (String s: lst1) {\n            total1 += s.length();\n  \
    \      }\n        for (String s: lst2) {\n            total2 += s.length();\n\
    \        }\n        return total1 <= total2 ? lst1 : lst2;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Given two lists of strings and returns\
    \ the list that has \n        // total number of chars in the all strings of the\
    \ list less than the other list.\n        int lst1Total = 0;\n        int lst2Total\
    \ = 0;\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String s : lst1) {\n            lst1Total += s.length();\n        }\n     \
    \   for (String s : lst2) {\n            lst2Total += s.length();\n        }\n\
    \        if (lst1Total < lst2Total) {\n            result = lst1;\n        } else\
    \ if (lst1Total > lst2Total) {\n            result = lst2;\n        } else {\n\
    \            result = lst1;\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return (lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum()) ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6spscfy.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        for (String str : lst1) {\n            sum1 += str.length();\n      \
    \  }\n        for (String str : lst2) {\n            sum2 += str.length();\n \
    \       }\n        return sum1 > sum2 ? lst2 : lst1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (lst1.size() == 0 && lst2.size() == 0) {\n            return result;\n\
    \        }\n        int lst1TotalChars = 0;\n        int lst2TotalChars = 0;\n\
    \        for (String s: lst1) {\n            lst1TotalChars += s.length();\n \
    \       }\n        for (String s: lst2) {\n            lst2TotalChars += s.length();\n\
    \        }\n        return lst1TotalChars <= lst2TotalChars ? lst1 : lst2;\n}\n\
    \    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = 0;\n        int total2\
    \ = 0;\n        for (String str: lst1) {\n            total1 += str.length();\n\
    \        }\n        for (String str: lst2) {\n            total2 += str.length();\n\
    \        }\n        if (total1 < total2) {\n            return lst1;\n       \
    \ } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvq5bmny.java:40)\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write your code here\n        int\
    \ s1 = 0;\n        int s2 = 0;\n        for(String a : lst1) {\n            s1\
    \ += a.length();\n        }\n        for(String a : lst2) {\n            s2 +=\
    \ a.length();\n        }\n        if(s1 > s2) {\n            return lst2;\n  \
    \      }\n        else {\n            return lst1;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        long chars1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        long chars2 = lst2.stream().mapToInt(String::length).sum();\n       \
    \ return chars1 < chars2 ? lst1 : chars1 > chars2 ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (lst1.size() == 0 && lst2.size() == 0) return result;\n        if\
    \ (totalChars(lst1) == totalChars(lst2)) return lst1;\n        return totalChars(lst1)\
    \ < totalChars(lst2) ? lst1 : lst2;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbodclijf.java:21: error: cannot find symbol\n        if (totalChars(lst1)\
    \ == totalChars(lst2)) return lst1;\n            ^\n  symbol:   method totalChars(ArrayList<String>)\n\
    \  location: class Problem\n/tmp/tmpbodclijf.java:21: error: cannot find symbol\n\
    \        if (totalChars(lst1) == totalChars(lst2)) return lst1;\n            \
    \                    ^\n  symbol:   method totalChars(ArrayList<String>)\n  location:\
    \ class Problem\n/tmp/tmpbodclijf.java:22: error: cannot find symbol\n       \
    \ return totalChars(lst1) < totalChars(lst2) ? lst1 : lst2;\n               ^\n\
    \  symbol:   method totalChars(ArrayList<String>)\n  location: class Problem\n\
    /tmp/tmpbodclijf.java:22: error: cannot find symbol\n        return totalChars(lst1)\
    \ < totalChars(lst2) ? lst1 : lst2;\n                                  ^\n  symbol:\
    \   method totalChars(ArrayList<String>)\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1TotalChar = lst1.stream().mapToInt(String::length).sum();\n\
    \        int lst2TotalChar = lst2.stream().mapToInt(String::length).sum();\n \
    \       if (lst1TotalChar < lst2TotalChar) {\n            return lst1;\n     \
    \   } else if (lst1TotalChar > lst2TotalChar) {\n            return lst2;\n  \
    \      } else {\n            return lst1;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int one = 0;\n        int two = 0;\n\
    \        for (String str : lst1) {\n            one += str.length();\n       \
    \ }\n        for (String str : lst2) {\n            two += str.length();\n   \
    \     }\n        if (one > two) {\n            return lst2;\n        } else {\n\
    \            return lst1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Sum = 0;\n        int lst2Sum\
    \ = 0;\n        for (String i : lst1) {\n            lst1Sum += i.length();\n\
    \        }\n        for (String i : lst2) {\n            lst2Sum += i.length();\n\
    \        }\n        if (lst1Sum == lst2Sum) {\n            return lst1;\n    \
    \    } else if (lst1Sum < lst2Sum) {\n            return lst1;\n        } else\
    \ {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int sum2 = lst2.stream().mapToInt(String::length).sum();\n        if\
    \ (sum1 < sum2) {\n            return lst1;\n        } else if (sum2 < sum1) {\n\
    \            return lst2;\n        } else {\n            return lst1;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // code here\n        int lst1Total\
    \ = 0;\n        int lst2Total = 0;\n        for (String s : lst1) {\n        \
    \    lst1Total += s.length();\n        }\n        for (String s : lst2) {\n  \
    \          lst2Total += s.length();\n        }\n        if (lst1Total < lst2Total)\
    \ {\n            return lst1;\n        } else {\n            return lst2;\n  \
    \      }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxj6j2sly.java:41)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = 0;\n        int total2\
    \ = 0;\n        for (String l1 : lst1) {\n            total1 += l1.length();\n\
    \        }\n        for (String l2 : lst2) {\n            total2 += l2.length();\n\
    \        }\n        if (total1 > total2) {\n            return lst2;\n       \
    \ } else {\n            return lst1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // your code here\n        int lst1total\
    \ = lst1.stream().mapToInt(x -> x.length()).sum();\n        int lst2total = lst2.stream().mapToInt(x\
    \ -> x.length()).sum();\n        if (lst1total < lst2total) return lst1;\n   \
    \     else if (lst1total > lst2total) return lst2;\n        else return lst1;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int charCount1 = 0;\n        int charCount2\
    \ = 0;\n        ArrayList<String> totalMatch = new ArrayList<String>();\n    \
    \    for (String s : lst1) {\n            charCount1 += s.length();\n        }\n\
    \        for (String s : lst2) {\n            charCount2 += s.length();\n    \
    \    }\n        if (charCount1 < charCount2) {\n            totalMatch = lst1;\n\
    \        } else if (charCount1 > charCount2) {\n            totalMatch = lst2;\n\
    \        } else {\n            totalMatch = lst1;\n        }\n        return totalMatch;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Count = 0;\n        int lst2Count\
    \ = 0;\n        for (String s: lst1) {\n            lst1Count += s.length();\n\
    \        }\n        for (String s: lst2) {\n            lst2Count += s.length();\n\
    \        }\n        if (lst1Count < lst2Count) {\n            return lst1;\n \
    \       } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptaiswv0a.java:40)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int sum1 = 0;\n        int sum2 = 0;\n        for (String st : lst1)\
    \ {\n            sum1 += st.length();\n        }\n        for (String st : lst2)\
    \ {\n            sum2 += st.length();\n        }\n        if (sum1 == sum2) {\n\
    \            return lst1;\n        } else if (sum1 < sum2) {\n            return\
    \ lst1;\n        } else {\n            return lst2;\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(x ->\
    \ x.length()).sum() < lst2.stream().mapToInt(x -> x.length()).sum() ? lst1 : lst2;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vhvf_6y.java:28)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int len2 = lst2.stream().mapToInt(String::length).sum();\n        return\
    \ len1 < len2 ? lst1 : len1 > len2 ? lst2 : lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int sum2 = lst2.stream().mapToInt(String::length).sum();\n        return\
    \ sum1 <= sum2 ? lst1 : lst2;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // lst1 == lst2\n        if (lst1.size()\
    \ == lst2.size()) return lst1;\n        // lst1 has more items than lst2\n   \
    \     if (lst1.size() > lst2.size()) {\n            if (lst1.stream().reduce(0,\
    \ (sum, str) -> sum + str.length(), Integer::sum) < lst2.stream().reduce(0, (sum,\
    \ str) -> sum + str.length(), Integer::sum)) {\n                return lst1;\n\
    \            } else {\n                return lst2;\n            }\n        }\n\
    \        // lst2 has more items than lst1\n        if (lst2.size() > lst1.size())\
    \ {\n            if (lst2.stream().reduce(0, (sum, str) -> sum + str.length(),\
    \ Integer::sum) < lst1.stream().reduce(0, (sum, str) -> sum + str.length(), Integer::sum))\
    \ {\n                return lst2;\n            } else {\n                return\
    \ lst1;\n            }\n        }\n        return lst1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ns1zqho.java:41)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int totalLst1 = 0;\n        int totalLst2\
    \ = 0;\n        for (String s : lst1) {\n            totalLst1 += s.length();\n\
    \        }\n        for (String s : lst2) {\n            totalLst2 += s.length();\n\
    \        }\n        return totalLst1 < totalLst2 ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgc06pzyq.java:36)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int num1 = 0;\n        int num2 = 0;\n        for (String item : lst1)\
    \ {\n            num1 += item.length();\n        }\n        for (String item :\
    \ lst2) {\n            num2 += item.length();\n        }\n        if (num1 ==\
    \ num2) {\n            result = lst1;\n        } else if (num1 < num2) {\n   \
    \         result = lst1;\n        } else {\n            result = lst2;\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7f03ww6.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        //     int lst1_size = 0;\n       \
    \ //     int lst2_size = 0;\n        //     for (String str : lst1) {\n      \
    \  //         lst1_size += str.length();\n        //     }\n        //     for\
    \ (String str : lst2) {\n        //         lst2_size += str.length();\n     \
    \   //     }\n        //     if (lst1_size > lst2_size) {\n        //        \
    \ return lst2;\n        //     } else if (lst1_size < lst2_size) {\n        //\
    \         return lst1;\n        //     } else {\n        //         return lst1;\n\
    \        //     }\n        // }\n        // int lst1_size = 0;\n        // for\
    \ (String str : lst1) {\n        //     lst1_size += str.length();\n        //\
    \ }\n        // int lst2_size = 0;\n        // for (String str : lst2) {\n   \
    \     //     lst2_size += str.length();\n        // }\n        // if (lst1_size\
    \ > lst2_size) {\n        //     return lst2;\n        // } else if (lst1_size\
    \ < lst2_size) {\n        //     return lst1;\n        // } else {\n        //\
    \     return lst1;\n        // }\n        // int lst1_size = 0;\n        // for\
    \ (String str : lst1) {\n        //     lst1_size += str.length();\n        //\
    \ }\n        // int lst2_size = 0;\n        // for (String str : lst2) {\n   \
    \     //     lst2_size += str.length();\n        // }\n        // if (lst1_size\
    \ > lst2_size) {\n        //     return lst2;\n        // } else if (lst1_size\
    \ < lst2_size) {\n        //     return lst1;\n        // } else {\n        //\
    \     return lst1;\n        // }\n        return (lst1.stream().mapToInt(x\n}\n\
    \    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd16kpzxr.java:65: error: ')' expected\n        return (lst1.stream().mapToInt(x\n\
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7f03ww6.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = 0;\n        int len2 = 0;\n\
    \        for (String s : lst1) len1 += s.length();\n        for (String s : lst2)\
    \ len2 += s.length();\n        if (len1 == len2) return lst1;\n        if (len1\
    \ < len2) return lst1;\n        return lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int length1 = 0;\n        int length2\
    \ = 0;\n        for (String str : lst1) {\n            length1 += str.length();\n\
    \        }\n        for (String str : lst2) {\n            length2 += str.length();\n\
    \        }\n        if (length1 > length2) {\n            return lst2;\n     \
    \   } else {\n            return lst1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> shorterList = new\
    \ ArrayList<String>();\n        ArrayList<String> longerList = new ArrayList<String>();\n\
    \        int lst1Chars = 0;\n        int lst2Chars = 0;\n        for (String word\
    \ : lst1) {\n            lst1Chars += word.length();\n        }\n        for (String\
    \ word : lst2) {\n            lst2Chars += word.length();\n        }\n       \
    \ if (lst1Chars > lst2Chars) {\n            longerList = lst1;\n            shorterList\
    \ = lst2;\n        } else if (lst1Chars < lst2Chars) {\n            longerList\
    \ = lst2;\n            shorterList = lst1;\n        } else {\n            longerList\
    \ = lst1;\n            shorterList = lst2;\n        }\n        return shorterList;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpefv3w3sh.java:48)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        //return IntStream.range(0, lst1.size()).mapToObj(i\
    \ -> lst1.get(i).length()).reduce(0, (a, b) -> a + b);\n        // return lst1.stream().mapToInt(i\
    \ -> i.length()).sum();\n        //return IntStream.range(0, lst2.size()).mapToObj(i\
    \ -> lst2.get(i).length()).reduce(0, (a, b) -> a + b);\n        int sum1 = lst1.stream().mapToInt(i\
    \ -> i.length()).sum();\n        int sum2 = lst2.stream().mapToInt(i -> i.length()).sum();\n\
    \        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum1\
    \ > sum2) {\n            return lst2;\n        } else {\n            return lst1;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1chars = 0;\n        int lst2chars\
    \ = 0;\n        for (String i : lst1) {\n            lst1chars += i.length();\n\
    \        }\n        for (String i : lst2) {\n            lst2chars += i.length();\n\
    \        }\n        if (lst1chars < lst2chars) {\n            return lst1;\n \
    \       } else {\n            return lst2;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7e1xebh.java:40)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String str : lst1) {\n            count1 += str.length();\n\
    \        }\n        for (String str : lst2) {\n            count2 += str.length();\n\
    \        }\n        if (count1 == count2) {\n            return lst1;\n      \
    \  } else if (count1 < count2) {\n            return lst1;\n        } else {\n\
    \            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7f03ww6.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int counter1 = 0;\n        int counter2 = 0;\n        for (String s :\
    \ lst1) {\n            counter1 += s.length();\n        }\n        for (String\
    \ s : lst2) {\n            counter2 += s.length();\n        }\n        if (counter1\
    \ < counter2) {\n            result = lst1;\n        } else if (counter1 > counter2)\
    \ {\n            result = lst2;\n        } else {\n            result = lst1;\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        for (String s : lst1) {\n            sum1 += s.length();\n        }\n\
    \        for (String s : lst2) {\n            sum2 += s.length();\n        }\n\
    \        if (sum1 < sum2) return lst1;\n        else if (sum2 < sum1) return lst2;\n\
    \        else return lst1;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write code here\n        return\
    \ lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8u67oy8.java:24)\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // https://stackoverflow.com/questions/15564992/java-how-to-find-the-total-characters-in-a-list-of-strings\n\
    \        int lst1Total = lst1.stream().mapToInt(s -> s.length()).sum();\n    \
    \    int lst2Total = lst2.stream().mapToInt(s -> s.length()).sum();\n        return\
    \ lst1Total > lst2Total ? lst2 : lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        int sum2 = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        return sum1 < sum2 ? lst1 : sum1 > sum2 ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.totalMatch(java.util.ArrayList,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpwb5twptj.java:22)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // We need to count the characters\
    \ in each string of each list\n        int total1 = 0;\n        int total2 = 0;\n\
    \        ArrayList<String> copyLst1 = new ArrayList<String>(lst1);\n        ArrayList<String>\
    \ copyLst2 = new ArrayList<String>(lst2);\n        for (String x : copyLst1) {\n\
    \            total1 += x.length();\n        }\n        for (String x : copyLst2)\
    \ {\n            total2 += x.length();\n        }\n        if (total1 > total2)\
    \ {\n            return copyLst2;\n        } else if (total1 < total2) {\n   \
    \         return copyLst1;\n        } else {\n            return copyLst1;\n \
    \       }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int c1 = 0;\n        int c2 = 0;\n\
    \        for (String str : lst1) c1 += str.length();\n        for (String str\
    \ : lst2) c2 += str.length();\n        return c1 < c2 ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwsg3s43.java:32)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n \
    \       }\n        for (String s : lst2) {\n            count2 += s.length();\n\
    \        }\n        if (count1 < count2) {\n            return lst1;\n       \
    \ } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcb0jeza.java:40)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().collect(Collectors.joining()).length()\
    \ >= lst2.stream().collect(Collectors.joining()).length() ? lst2 : lst1;\n}\n\
    \    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbn6u6tij.java:28)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int a = 0;\n        int b = 0;\n  \
    \      for (String str : lst1) {\n            a += str.length();\n        }\n\
    \        for (String str : lst2) {\n            b += str.length();\n        }\n\
    \        if (a < b) {\n            return lst1;\n        } else {\n          \
    \  return lst2;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyuipiv2.java:40)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> ans = lst1;\n   \
    \     int lst1chars = 0;\n        int lst2chars = 0;\n        for (String w: lst1)\
    \ {\n            lst1chars += w.length();\n        }\n        for (String w: lst2)\
    \ {\n            lst2chars += w.length();\n        }\n        if (lst1chars ==\
    \ lst2chars) {\n            return ans;\n        } else if (lst1chars > lst2chars)\
    \ {\n            ans = lst2;\n        }\n        return ans;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lenLst1 = 0;\n        int lenLst2\
    \ = 0;\n        for (String s : lst1) {\n            lenLst1 += s.length();\n\
    \        }\n        for (String s : lst2) {\n            lenLst2 += s.length();\n\
    \        }\n        return lenLst1 < lenLst2 ? lst1 : lst2;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohphe5zg.java:36)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int lst1Total = 0;\n        int lst2Total\
    \ = 0;\n        for (String word : lst1) {\n            lst1Total += word.length();\n\
    \        }\n        for (String word : lst2) {\n            lst2Total += word.length();\n\
    \        }\n        if (lst1Total > lst2Total) {\n            return lst2;\n \
    \       } else {\n            return lst1;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n \
    \       }\n        for (String s : lst2) {\n            count2 += s.length();\n\
    \        }\n        if (count1 < count2) {\n            return lst1;\n       \
    \ } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcb0jeza.java:40)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum = 0;\n        int sum2 = 0;\n\
    \        for (String s : lst1) {\n            sum += s.length();\n        }\n\
    \        for (String s : lst2) {\n            sum2 += s.length();\n        }\n\
    \        if (sum < sum2) {\n            return lst1;\n        } else {\n     \
    \       return lst2;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfzpeoa7.java:40)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        for (String s : lst1) {\n            sum1 += s.length();\n        }\n\
    \        for (String s : lst2) {\n            sum2 += s.length();\n        }\n\
    \        return sum1 <= sum2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String str : lst1) {\n            count1 += str.length();\n\
    \        }\n        for (String str : lst2) {\n            count2 += str.length();\n\
    \        }\n        if (count1 < count2) {\n            return lst1;\n       \
    \ } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9psylwhw.java:40)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().reduce(\"\"\
    , (a, b) -> a + b).length();\n        int sum2 = lst2.stream().reduce(\"\", (a,\
    \ b) -> a + b).length();\n        if (sum1 == sum2) return lst1;\n        return\
    \ sum1 < sum2 ? lst1 : lst2;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return (totalMatch(lst1) < totalMatch(lst2))\
    \ ? lst1 : (totalMatch(lst1) > totalMatch(lst2)) ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpahrloyik.java:19: error: method totalMatch in class Problem cannot\
    \ be applied to given types;\n        return (totalMatch(lst1) < totalMatch(lst2))\
    \ ? lst1 : (totalMatch(lst1) > totalMatch(lst2)) ? lst2 : lst1;\n            \
    \    ^\n  required: ArrayList<String>,ArrayList<String>\n  found:    ArrayList<String>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpahrloyik.java:19:\
    \ error: method totalMatch in class Problem cannot be applied to given types;\n\
    \        return (totalMatch(lst1) < totalMatch(lst2)) ? lst1 : (totalMatch(lst1)\
    \ > totalMatch(lst2)) ? lst2 : lst1;\n                                   ^\n \
    \ required: ArrayList<String>,ArrayList<String>\n  found:    ArrayList<String>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpahrloyik.java:19:\
    \ error: method totalMatch in class Problem cannot be applied to given types;\n\
    \        return (totalMatch(lst1) < totalMatch(lst2)) ? lst1 : (totalMatch(lst1)\
    \ > totalMatch(lst2)) ? lst2 : lst1;\n                                       \
    \                        ^\n  required: ArrayList<String>,ArrayList<String>\n\
    \  found:    ArrayList<String>\n  reason: actual and formal argument lists differ\
    \ in length\n/tmp/tmpahrloyik.java:19: error: method totalMatch in class Problem\
    \ cannot be applied to given types;\n        return (totalMatch(lst1) < totalMatch(lst2))\
    \ ? lst1 : (totalMatch(lst1) > totalMatch(lst2)) ? lst2 : lst1;\n            \
    \                                                                      ^\n  required:\
    \ ArrayList<String>,ArrayList<String>\n  found:    ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n4 errors\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int length1 = 0;\n        int length2\
    \ = 0;\n        for (String s : lst1) {\n            length1 += s.length();\n\
    \        }\n        for (String s : lst2) {\n            length2 += s.length();\n\
    \        }\n        return length1 < length2 ? lst1 : length1 > length2 ? lst2\
    \ : lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011608
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int len2 = lst2.stream().mapToInt(String::length).sum();\n        if\
    \ (len1 < len2) {\n            return lst1;\n        } else if (len2 < len1) {\n\
    \            return lst2;\n        } else {\n            return lst1;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int list1 = lst1.stream().mapToInt(e\
    \ -> e.length()).sum();\n        int list2 = lst2.stream().mapToInt(e -> e.length()).sum();\n\
    \        if (list1 > list2) {\n            return lst2;\n        } else if (list1\
    \ < list2) {\n            return lst1;\n        } else {\n            return lst1;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ > lst2.stream().mapToInt(String::length).sum() ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int totalLength1 = 0;\n        int\
    \ totalLength2 = 0;\n        for (String s : lst1) totalLength1 += s.length();\n\
    \        for (String s : lst2) totalLength2 += s.length();\n        return totalLength1\
    \ > totalLength2 ? lst2 : lst1;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int a = 0;\n        int b = 0;\n  \
    \      for (String str : lst1) {\n            a += str.length();\n        }\n\
    \        for (String str : lst2) {\n            b += str.length();\n        }\n\
    \        if (a > b) {\n            return lst2;\n        } else {\n          \
    \  return lst1;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // if(lst1.size() == 0 && lst2.size()\
    \ == 0) return lst1;\n        // int cnt = 0;\n        // for(String x : lst1)\
    \ cnt += x.length();\n        // if(cnt == 0) return lst2;\n        // int cnt2\
    \ = 0;\n        // for(String x : lst2) cnt2 += x.length();\n        // if(cnt\
    \ < cnt2) return lst1;\n        // else return lst2;\n        return lst1.size()\
    \ == 0 && lst2.size() == 0 ? lst1 : lst1.stream().reduce(\"\", (a, b) -> a +=\
    \ b).length() == 0 ? lst2 : lst1.stream().reduce(\"\", (a, b) -> a += b).length()\
    \ < lst2.stream().reduce(\"\", (a, b) -> a += b).length() ? lst1 : lst2;\n}\n\
    \    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_kmw2jn.java:36)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n      int ch1 = lst1.stream().mapToInt(str\
    \ -> str.length()).sum();\n      int ch2 = lst2.stream().mapToInt(str -> str.length()).sum();\n\
    \      return ch1 <= ch2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        var str1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        var str2 = lst2.stream().mapToInt(String::length).sum();\n        return\
    \ str1 <= str2 ? lst1 : lst2;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        //This is the inefficient version.\n\
    \        int s1 = 0;\n        int s2 = 0;\n        int n;\n        int k;\n  \
    \      for (String s : lst1) {\n            n = s.length();\n            s1 +=\
    \ n;\n        }\n        for (String s : lst2) {\n            k = s.length();\n\
    \            s2 += k;\n        }\n        if (s1 < s2) {\n            return lst1;\n\
    \        } else if (s2 < s1) {\n            return lst2;\n        } else {\n \
    \           return lst1;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        for (String x : lst1) {\n            sum1 += x.length();\n        }\n\
    \        for (String x : lst2) {\n            sum2 += x.length();\n        }\n\
    \        return sum1 < sum2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vreiz0z.java:36)\n"
  stdout: ''
  timestamp: 1660011615
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int totalCharsLst1 = 0;\n        int\
    \ totalCharsLst2 = 0;\n        for (String word : lst1) {\n            totalCharsLst1\
    \ += word.length();\n        }\n        for (String word : lst2) {\n         \
    \   totalCharsLst2 += word.length();\n        }\n        if (totalCharsLst1 <\
    \ totalCharsLst2) {\n            return lst1;\n        } else {\n            return\
    \ lst2;\n        }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg8egopcb.java:40)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> ans = new ArrayList<String>();\n\
    \        int lst1_size = 0;\n        int lst2_size = 0;\n        for (String str\
    \ : lst1) {\n            lst1_size += str.length();\n        }\n        for (String\
    \ str : lst2) {\n            lst2_size += str.length();\n        }\n        if\
    \ (lst1_size <= lst2_size)\n            ans = lst1;\n        else\n          \
    \  ans = lst2;\n        return ans;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int t1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int t2 = lst2.stream().mapToInt(String::length).sum();\n        return\
    \ t1 > t2 ? lst2 : t1 < t2 ? lst1 : lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(String::length).sum();\n\
    \        int sum2 = lst2.stream().mapToInt(String::length).sum();\n        return\
    \ sum1 == sum2 ? lst1 : sum1 < sum2 ? lst1 : lst2;\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write your code here\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.totalMatch(java.util.ArrayList,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpl0afkwtp.java:23)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int charCount1 = 0;\n        int charCount2\
    \ = 0;\n        for (String s: lst1) {\n            charCount1 += s.length();\n\
    \        }\n        for (String s: lst2) {\n            charCount2 += s.length();\n\
    \        }\n        return charCount1 < charCount2 ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphv8hcxom.java:36)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        int total2 = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        if (total1 < total2) return lst1;\n        if (total2 < total1) return\
    \ lst2;\n        return lst1;\n}\n    public static void main(String[] args) {\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write code here\n        int list1Size\
    \ = 0;\n        int list2Size = 0;\n        for(String s : lst1) {\n         \
    \   list1Size += s.length();\n        }\n        for(String s : lst2) {\n    \
    \        list2Size += s.length();\n        }\n        if(list1Size < list2Size)\
    \ {\n            return lst1;\n        } else if(list2Size < list1Size) {\n  \
    \          return lst2;\n        } else {\n            return lst1;\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> rv = new ArrayList<String>();\n\
    \        int c1 = 0;\n        int c2 = 0;\n        for (String s : lst1) {\n \
    \           c1 += s.length();\n        }\n        for (String s : lst2) {\n  \
    \          c2 += s.length();\n        }\n        if (c1 < c2) {\n            rv\
    \ = lst1;\n        } else if (c2 < c1) {\n            rv = lst2;\n        } else\
    \ {\n            rv = lst1;\n        }\n        return rv;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = 0;\n        int len2 = 0;\n\
    \        for (String s: lst1) {\n            len1 += s.length();\n        }\n\
    \        for (String s: lst2) {\n            len2 += s.length();\n        }\n\
    \        return len1 < len2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwyrjxj9c.java:36)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int count1 = 0;\n        int count2 = 0;\n        for (String word :\
    \ lst1) {\n            count1 += word.length();\n        }\n        for (String\
    \ word : lst2) {\n            count2 += word.length();\n        }\n        if\
    \ (count1 == count2) {\n            return lst1;\n        } else if (count1 <\
    \ count2) {\n            return lst1;\n        } else {\n            return lst2;\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write code here\n        int c1\
    \ = 0;\n        int c2 = 0;\n        for(String s: lst1) {\n            c1 +=\
    \ s.length();\n        }\n        for(String s: lst2) {\n            c2 += s.length();\n\
    \        }\n        if(c1 == c2) return lst1;\n        if(c1 > c2) return lst2;\n\
    \        return lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // code here\n        if (lst1.size()\
    \ == 0) {\n            return lst1;\n        }\n        if (lst2.size() == 0)\
    \ {\n            return lst2;\n        }\n        int count1 = 0;\n        int\
    \ count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n\
    \        }\n        for (String s : lst2) {\n            count2 += s.length();\n\
    \        }\n        if (count1 == count2) {\n            return lst1;\n      \
    \  }\n        if (count1 < count2) {\n            return lst1;\n        }\n  \
    \      if (count2 < count1) {\n            return lst2;\n        }\n        return\
    \ lst1;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n \
    \       }\n        for (String s : lst2) {\n            count2 += s.length();\n\
    \        }\n        if (count1 < count2) {\n            return lst1;\n       \
    \ } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcb0jeza.java:40)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        String lst1Str = String.join(\"\",\
    \ lst1);\n        String lst2Str = String.join(\"\", lst2);\n        return lst1Str.length()\
    \ < lst2Str.length() ? lst1 : lst2;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn6ctem_c.java:30)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ > lst2.stream().mapToInt(String::length).sum() ? lst2 : lst1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        long sum1 = lst1.stream().mapToInt(x\
    \ -> x.length()).sum();\n        long sum2 = lst2.stream().mapToInt(x -> x.length()).sum();\n\
    \        ArrayList<String> toReturn = sum1 < sum2 ? lst1 : lst2;\n        return\
    \ toReturn;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptbzszoz6.java:31)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int lst1sum = 0;\n        int lst2sum = 0;\n        for (String s : lst1)\
    \ {\n            lst1sum += s.length();\n        }\n        for (String s : lst2)\
    \ {\n            lst2sum += s.length();\n        }\n        if (lst1sum <= lst2sum)\
    \ {\n            result = lst1;\n        } else {\n            result = lst2;\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(String::length).sum()\
    \ < lst2.stream().mapToInt(String::length).sum() ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7f03ww6.java:28)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n      ArrayList<String> res = new ArrayList<String>();\n\
    \      ArrayList<String> res2 = new ArrayList<String>();\n      int t = 0;\n \
    \     int t2 = 0;\n      for(String s : lst1) {\n        t += s.length();\n  \
    \    }\n      for(String s : lst2) {\n        t2 += s.length();\n      }\n   \
    \   if(t > t2) {\n        return lst2;\n      }\n      else if(t < t2) {\n   \
    \     return lst1;\n      }\n      else {\n        return lst1;\n      }\n}\n\
    \    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> list1 = new ArrayList<String>();\n\
    \        ArrayList<String> list2 = new ArrayList<String>();\n        int lst1Length\
    \ = 0;\n        int lst2Length = 0;\n        for (String s : lst1) {\n       \
    \     lst1Length += s.length();\n        }\n        for (String s : lst2) {\n\
    \            lst2Length += s.length();\n        }\n        if (lst1Length == lst2Length)\
    \ {\n            return lst1;\n        } else if (lst1Length < lst2Length) {\n\
    \            return lst1;\n        } else {\n            return lst2;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        if (lst1.size() == 0) return lst1;\n\
    \        if (lst2.size() == 0) return lst2;\n        int len1 = 0;\n        int\
    \ len2 = 0;\n        for (String i : lst1) len1 += i.length();\n        for (String\
    \ i : lst2) len2 += i.length();\n        if (len1 == len2) return lst1;\n    \
    \    return len1 < len2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write your code here!\n        int\
    \ count1 = 0;\n        int count2 = 0;\n        for(String s : lst1) {\n     \
    \       count1 += s.length();\n        }\n        for(String s : lst2) {\n   \
    \         count2 += s.length();\n        }\n        return count1 < count2 ? lst1\
    \ : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hhbg2wb.java:37)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> minList = lst1.size()\
    \ < lst2.size() ? lst1 : lst2;\n        ArrayList<String> maxList = lst1.size()\
    \ > lst2.size() ? lst1 : lst2;\n        // sum chars in both list\n        int\
    \ minListChars = 0;\n        int maxListChars = 0;\n        for (String s : minList)\
    \ {\n            minListChars += s.length();\n        }\n        for (String s\
    \ : maxList) {\n            maxListChars += s.length();\n        }\n        if\
    \ (minListChars < maxListChars) {\n            return minList;\n        } else\
    \ {\n            return maxList;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprlxtw1h8.java:43)\n"
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int len1 = lst1.stream().mapToInt(e\
    \ -> e.length()).sum();\n        int len2 = lst2.stream().mapToInt(e -> e.length()).sum();\n\
    \        return len1 > len2 ? lst2 : lst1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011616
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\
    \        for (String str : lst1) {\n            sum1 += str.length();\n      \
    \  }\n        for (String str : lst2) {\n            sum2 += str.length();\n \
    \       }\n        if (sum1 == sum2) {\n            return lst1;\n        } else\
    \ if (sum1 < sum2) {\n            return lst1;\n        } else {\n           \
    \ return lst2;\n        }\n}\n    public static void main(String[] args) {\n \
    \   assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011617
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int s1 = lst1.stream().reduce(\"\"\
    , (a, b) -> a + b).length();\n        int s2 = lst2.stream().reduce(\"\", (a,\
    \ b) -> a + b).length();\n        if (s1 < s2) {\n            return lst1;\n \
    \       } else if (s2 < s1) {\n            return lst2;\n        } else {\n  \
    \          return lst1;\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011617
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int length1 = 0;\n        int length2\
    \ = 0;\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String s : lst1) {\n            length1 += s.length();\n        }\n       \
    \ for (String s : lst2) {\n            length2 += s.length();\n        }\n   \
    \     if (length1 < length2) {\n            result = lst1;\n        } else if\
    \ (length1 > length2) {\n            result = lst2;\n        } else {\n      \
    \      result = lst1;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total_chars_lst1 = 0;\n       \
    \ int total_chars_lst2 = 0;\n        for (String a : lst1) {\n            total_chars_lst1\
    \ += a.length();\n        }\n        for (String b : lst2) {\n            total_chars_lst2\
    \ += b.length();\n        }\n        return total_chars_lst1 < total_chars_lst2\
    \ ? lst1 : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ttleww9.java:36)\n"
  stdout: ''
  timestamp: 1660011617
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(item\
    \ -> item.length()).sum() < lst2.stream().mapToInt(item -> item.length()).sum()\
    \ ? lst1 : lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tbxqsva.java:28)\n"
  stdout: ''
  timestamp: 1660011617
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> stringList = new\
    \ ArrayList<String>();\n        int lst1Length = 0;\n        int lst2Length =\
    \ 0;\n        for (String s : lst1) {\n            lst1Length += s.length();\n\
    \        }\n        for (String s : lst2) {\n            lst2Length += s.length();\n\
    \        }\n        if (lst1Length < lst2Length) {\n            stringList = lst1;\n\
    \        } else if (lst1Length > lst2Length) {\n            stringList = lst2;\n\
    \        } else {\n            stringList = lst1;\n        }\n        return stringList;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = lst1.stream().mapToInt(s\
    \ -> s.length()).sum();\n        int total2 = lst2.stream().mapToInt(s -> s.length()).sum();\n\
    \        return total1 <= total2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int sum_lst1 = 0;\n        int sum_lst2\
    \ = 0;\n        for (String s : lst1) {\n            sum_lst1 += s.length();\n\
    \        }\n        for (String s : lst2) {\n            sum_lst2 += s.length();\n\
    \        }\n        return sum_lst1 > sum_lst2 ? lst2 : lst1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> longest = (lst1.size()\
    \ > lst2.size()) ? lst1 : lst2;\n        ArrayList<String> shortest = (lst1.size()\
    \ > lst2.size()) ? lst2 : lst1;\n        ArrayList<String> output = new ArrayList<String>();\n\
    \        int shortestTotal = 0;\n        int longestTotal = 0;\n        for (String\
    \ str : shortest) {\n            shortestTotal += str.length();\n        }\n \
    \       for (String str : longest) {\n            longestTotal += str.length();\n\
    \        }\n        if (shortestTotal == longestTotal) {\n            return lst1;\n\
    \        } else if (shortestTotal < longestTotal) {\n            return shortest;\n\
    \        } else {\n            return longest;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> temp1 = new ArrayList<String>();\n\
    \        ArrayList<String> temp2 = new ArrayList<String>();\n        temp1.addAll(lst1);\n\
    \        temp2.addAll(lst2);\n        int sum1 = 0;\n        int sum2 = 0;\n \
    \       while(temp1.size() > 0) {\n            sum1 += temp1.get(0).length();\n\
    \            temp1.remove(0);\n        }\n        while(temp2.size() > 0) {\n\
    \            sum2 += temp2.get(0).length();\n            temp2.remove(0);\n  \
    \      }\n        if(sum1 == sum2) return lst1;\n        if(sum1 < sum2) return\
    \ lst1;\n        else return lst2;\n}\n    public static void main(String[] args)\
    \ {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        long length1 = lst1.stream().mapToInt(x\
    \ -> x.length()).sum();\n        long length2 = lst2.stream().mapToInt(x -> x.length()).sum();\n\
    \        return length1 <= length2 ? lst1 : lst2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        Integer list1count = 0;\n        Integer\
    \ list2count = 0;\n        for (String word : lst1) {\n            list1count\
    \ += word.length();\n        }\n        for (String word : lst2) {\n         \
    \   list2count += word.length();\n        }\n        if (list1count <= list2count)\
    \ {\n            return lst1;\n        } else {\n            return lst2;\n  \
    \      }\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // write your code\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.totalMatch(java.util.ArrayList,\
    \ java.util.ArrayList)\" is null\n\tat Problem.main(tmpcqgxqhmc.java:23)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        Integer lst1sum = 0;\n        Integer\
    \ lst2sum = 0;\n        for (String x : lst1) {\n            lst1sum += x.length();\n\
    \        }\n        for (String x : lst2) {\n            lst2sum += x.length();\n\
    \        }\n        if (lst1sum < lst2sum) {\n            return lst1;\n     \
    \   } else if (lst1sum > lst2sum) {\n            return lst2;\n        } else\
    \ {\n            return lst1;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int count1 = 0;\n        int count2\
    \ = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n \
    \       }\n        for (String s : lst2) {\n            count2 += s.length();\n\
    \        }\n        if (count1 == count2) {\n            return lst1;\n      \
    \  } else if (count1 < count2) {\n            return lst1;\n        } else {\n\
    \            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int len1 = 0;\n        int len2 = 0;\n        for (String s : lst1) len1\
    \ += s.length();\n        for (String s : lst2) len2 += s.length();\n        if\
    \ (len1 == len2) return lst1;\n        if (len1 < len2) return lst1;\n       \
    \ else return lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        var result = new ArrayList<String>();\n\
    \        var sum = 0;\n        var sum1 = 0;\n        for (var i : lst1) {\n \
    \           sum += i.length();\n        }\n        for (var i : lst2) {\n    \
    \        sum1 += i.length();\n        }\n        if (sum == sum1) {\n        \
    \    return lst1;\n        } else if (sum > sum1) {\n            return lst2;\n\
    \        } else {\n            return lst1;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        // Write your code here\n        int\
    \ sum1 = 0;\n        int sum2 = 0;\n        for(String s: lst1) {\n          \
    \  sum1 += s.length();\n        }\n        for(String s: lst2) {\n           \
    \ sum2 += s.length();\n        }\n        if(sum1 <= sum2) return lst1;\n    \
    \    else return lst2;\n}\n    public static void main(String[] args) {\n    assert(totalMatch((new\
    \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int total1 = 0;\n        int total2\
    \ = 0;\n        for (String i : lst1) {\n            total1 += i.length();\n \
    \       }\n        for (String i : lst2) {\n            total2 += i.length();\n\
    \        }\n        if (total1 < total2) {\n            return lst1;\n       \
    \ } else {\n            return lst2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg20r5vzi.java:40)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        ArrayList<String> ans = lst1;\n   \
    \     int c1 = 0;\n        int c2 = 0;\n        for (String a : lst1) {\n    \
    \        c1 += a.length();\n        }\n        for (String a : lst2) {\n     \
    \       c2 += a.length();\n        }\n        if (c1 > c2) {\n            ans\
    \ = lst2;\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new\
    \ ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        return lst1.stream().mapToInt(s ->\
    \ s.length()).sum() < lst2.stream().mapToInt(s -> s.length()).sum() ? lst1 : lst2;\n\
    }\n    public static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1jy9pcn0.java:28)\n"
  stdout: ''
  timestamp: 1660011618
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts two lists of strings and\
    \ returns the list that has \n    // total number of chars in the all strings\
    \ of the list less than the other list.\n    // if the two lists have the same\
    \ number of chars, return the first list.\n    // Examples\n    // total_match([],\
    \ []) \u279E []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI',\
    \ 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String>\
    \ lst1, ArrayList<String> lst2) {\n        int list1Size = 0;\n        int list2Size\
    \ = 0;\n        for (String str : lst1) {\n            list1Size += str.length();\n\
    \        }\n        for (String str : lst2) {\n            list2Size += str.length();\n\
    \        }\n        return list1Size < list2Size ? lst1 : lst2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
    admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\"\
    )))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
    , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
    3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
    , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
    hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
    \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
    \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3_5b5xh5.java:36)\n"
  stdout: ''
  timestamp: 1660011618
