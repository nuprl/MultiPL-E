completions:
- '        return null;'
- '        // your code'
- '        return "";'
- "        int max_count = 0;\n        String max_word = \"\";\n        for (String\
  \ word : words) {\n            Set<Character> set = new HashSet<>();\n         \
  \   for (char c : word.toCharArray()) {\n                set.add(c);\n         \
  \   }\n            if (set.size() > max_count) {\n                max_count = set.size();\n\
  \                max_word = word;\n            }\n        }\n        return max_word;"
- '        // YOUR CODE GOES HERE...'
- "        return words.stream()\n            .max(Comparator.comparing(s -> s.chars().distinct().count()))\n\
  \            .get();"
- "        // TODO: write your code here.\n        int num = 0;\n        String max\
  \ = \"\";\n        for (String word : words) {\n            int count = 0;\n   \
  \         HashSet<Character> set = new HashSet<>();\n            for (int i = 0;\
  \ i < word.length(); i++) {\n                if (!set.contains(word.charAt(i)))\
  \ {\n                    count++;\n                    set.add(word.charAt(i));\n\
  \                }\n            }\n            if (count > num) {\n            \
  \    num = count;\n                max = word;\n            }\n        }\n     \
  \   return max;"
- "        // TODO\n        if (words.size() == 0) return \"\";\n        String max_word\
  \ = words.get(0);\n        for (int i = 1; i < words.size(); i++) {\n          \
  \  String word = words.get(i);\n            if (word.length() > max_word.length())\
  \ {\n                max_word = word;\n            } else if (word.length() == max_word.length())\
  \ {\n                if (word.compareTo(max_word) < 0) {\n                    max_word\
  \ = word;\n                }\n            }\n        }\n        return max_word;"
- '        return "";'
- "        if (words.size() == 0) {\n            return \"\";\n        }\n       \
  \ int max = 0;\n        String ret = \"\";\n        for (String s : words) {\n \
  \           StringBuilder sb = new StringBuilder();\n            for (int i = 0;\
  \ i < s.length(); i++) {\n                if (sb.indexOf(s.substring(i, i + 1))\
  \ == -1) {\n                    sb.append(s.substring(i, i + 1));\n            \
  \    }\n            }\n            if (sb.length() > max) {\n                max\
  \ = sb.length();\n                ret = s;\n            }\n        }\n        return\
  \ ret;"
- "        int max = -1;\n        String maxString = \"\";\n        for (String word\
  \ : words) {\n            Set<Character> chars = new HashSet<>();\n            for\
  \ (char c : word.toCharArray()) {\n                chars.add(c);\n            }\n\
  \            if (chars.size() > max) {\n                max = chars.size();\n  \
  \              maxString = word;\n            }\n        }\n        return maxString;"
- "        // You need to write the body of this function\n        String temp = \"\
  \";\n        for (int i = 0; i < words.size(); i++) {\n            String current\
  \ = words.get(i);\n            if (temp.isEmpty()) {\n                temp = current;\n\
  \            } else {\n                int tempChars = countDistinctChars(temp);\n\
  \                int currentChars = countDistinctChars(current);\n             \
  \   if (tempChars == currentChars) {\n                    if (current.compareTo(temp)\
  \ < 0) {\n                        temp = current;\n                    }\n     \
  \           } else if (currentChars > tempChars) {\n                    temp = current;\n\
  \                }\n            }\n        }\n        return temp;"
- "        return words.stream()\n                .max(Comparator.comparing(s -> s.chars().distinct().count()))\n\
  \                .orElse(\"\");"
- '        return null;'
- "        String res = \"\";\n        if (words.size() > 0) {\n            res =\
  \ words.get(0);\n            for (int i = 1; i < words.size(); i++) {\n        \
  \        if (res.length() < words.get(i).length()) {\n                    res =\
  \ words.get(i);\n                } else if (res.length() == words.get(i).length())\
  \ {\n                    if (res.compareTo(words.get(i)) > 0) {\n              \
  \          res = words.get(i);\n                    }\n                }\n     \
  \       }\n        }\n        return res;"
- "        if (words.size() == 0) {\n            return \"\";\n        }\n       \
  \ String ans = words.get(0);\n        int ansCount = countUniqueChars(ans);\n  \
  \      for (int i = 1; i < words.size(); i++) {\n            String next = words.get(i);\n\
  \            int currCount = countUniqueChars(next);\n            if (currCount\
  \ > ansCount) {\n                ans = next;\n                ansCount = currCount;\n\
  \            } else if (currCount == ansCount) {\n                if (next.compareTo(ans)\
  \ < 0) {\n                    ans = next;\n                }\n            }\n  \
  \      }\n        return ans;"
- "        String ans = \"\";\n        int currMax = 0;\n        for (String word\
  \ : words) {\n            Set<Character> distinct = new HashSet<>();\n         \
  \   for (char c : word.toCharArray())\n                distinct.add(c);\n      \
  \      if (distinct.size() > currMax) {\n                currMax = distinct.size();\n\
  \                ans = word;\n            }\n        }\n        return ans;"
- "        if (words.size() == 0) {\n            return \"\";\n        }\n       \
  \ String res = words.get(0);\n        int max = 0;\n        for (String s : words)\
  \ {\n            int count = 0;\n            for (int i = 0; i < s.length(); i++)\
  \ {\n                if (s.indexOf(s.charAt(i)) == i) {\n                    count++;\n\
  \                }\n            }\n            if (count > max) {\n            \
  \    max = count;\n                res = s;\n            }\n        }\n        return\
  \ res;"
- '        throw new UnsupportedOperationException("You need to implement this method.");'
- '        return null;'
- "        HashMap<String, Integer> max_uniq_c = new HashMap<String, Integer>();\n\
  \        HashMap<String, Integer> length = new HashMap<String, Integer>();\n   \
  \     HashMap<String, Integer> key_value = new HashMap<String, Integer>();\n   \
  \     int max = 0;\n        for (String s : words) {\n            HashSet<Character>\
  \ uniq_c = new HashSet<Character>();\n            for (int i = 0; i < s.length();\
  \ i++) {\n                uniq_c.add(s.charAt(i));\n            }\n            max_uniq_c.put(s,\
  \ uniq_c.size());\n            length.put(s, s.length());\n            int value\
  \ = uniq_c.size() + s.length();\n            key_value.put(s, value);\n        \
  \    if (max < value) {\n                max = value;\n            }\n        }\n\
  \        String max_value = \"\";\n        for (String s : key_value.keySet()) {\n\
  \            if (key_value.get(s) == max) {\n                max_value = s;\n  \
  \              break;\n            }\n        }\n        return max_value;"
- '        throw new RuntimeException("not implemented");'
- "        int max = 0;\n        String answer = \"\";\n        for (String w : words)\
  \ {\n            HashSet<Character> unique = new HashSet<Character>();\n       \
  \     for (int i = 0; i < w.length(); i++) {\n                unique.add(w.charAt(i));\n\
  \            }\n            if (unique.size() > max) {\n                max = unique.size();\n\
  \                answer = w;\n            }\n        }\n        return answer;"
- '        return "";'
- "        // Write your code here\n        return \"\";"
- "        String output = \"\";\n        HashMap<String, Integer> uniqueCharacters\
  \ = new HashMap<>();\n        for (String word : words) {\n            char[] characters\
  \ = word.toCharArray();\n            int count = 0;\n            for (char c : characters)\
  \ {\n                if (!uniqueCharacters.containsKey(Character.toString(c))) {\n\
  \                    uniqueCharacters.put(Character.toString(c), count);\n     \
  \               count++;\n                }\n            }\n            if (count\
  \ > uniqueCharacters.size()) {\n                output = word;\n            }\n\
  \        }\n        return output;"
- "        return words.stream()\n            .map(word -> Pair.with(word, word.chars().distinct().count()))\n\
  \            .max(Comparator.comparing(Pair::getValue1))\n            .map(Pair::getValue0)\n\
  \            .orElse(null);"
- "        HashMap<String, Integer> unique = new HashMap<>();\n        for (String\
  \ word : words) {\n            String key = String.valueOf(word.chars().distinct().count());\n\
  \            int val = unique.getOrDefault(key, 0);\n            unique.put(key,\
  \ val + 1);\n        }\n        String res = \"\";\n        int max = Integer.MIN_VALUE;\n\
  \        for (String word : words) {\n            int cur = word.chars().distinct().count();\n\
  \            if (unique.get(String.valueOf(cur)) == 1) {\n                if (cur\
  \ > max) {\n                    max = cur;\n                    res = word;\n  \
  \              }\n            }\n        }\n        return res;"
- "        String answer = words.get(0);\n        String temp = \"\";\n        ArrayList<String>\
  \ finalStrings = new ArrayList<String>();\n        ArrayList<String> finalStrings2\
  \ = new ArrayList<String>();\n        Set<Character> charSet = new HashSet<Character>();\n\
  \        for (int i = 0; i < words.size(); i++) {\n            temp = words.get(i);\n\
  \            for (int j = 0; j < temp.length(); j++) {\n                charSet.add(temp.charAt(j));\n\
  \            }\n            finalStrings.add(temp);\n            charSet.clear();\n\
  \        }\n        for (int i = 0; i < finalStrings.size(); i++) {\n          \
  \  temp = finalStrings.get(i);\n            if (temp.length() == finalStrings.get(0).length())\
  \ {\n                finalStrings2.add(temp);\n            }\n        }\n      \
  \  answer = finalStrings2.get(0);\n        for (int i = 0; i < finalStrings2.size();\
  \ i++) {\n            temp = finalStrings2.get(i);\n            if (temp.compareTo(answer)\
  \ < 0) {\n                answer = temp;\n            }\n        }\n        return\
  \ answer;"
- "        String max = \"\";\n        int maxUnique = 0;\n        for (String word\
  \ : words) {\n            String unique = \"\";\n            for (char c : word.toCharArray())\
  \ {\n                if (unique.indexOf(c) == -1) {\n                    unique\
  \ += c;\n                }\n            }\n            if (unique.length() > maxUnique)\
  \ {\n                max = word;\n                maxUnique = unique.length();\n\
  \            }\n        }\n        return max;"
- "        String res = \"\";\n        int max_count = 0;\n        for (String word\
  \ : words) {\n            Set<Character> s = new HashSet<>();\n            for (char\
  \ c : word.toCharArray())\n                s.add(c);\n            if (s.size() >\
  \ max_count) {\n                max_count = s.size();\n                res = word;\n\
  \            }\n        }\n        return res;"
- "        // your code here\n        String result = \"\";\n        int max = 0;\n\
  \        for (String s : words) {\n            if (s.length() > max) {\n       \
  \         result = s;\n                max = s.length();\n            }\n      \
  \  }\n        return result;"
- '        return "";'
- '        return null;'
- "        // Fill your code here\n        return \"\";"
- "        String ret = \"\";\n        int max = -1;\n        for (String word : words)\
  \ {\n            Set<Character> chars = new HashSet<>();\n            for (int i\
  \ = 0; i < word.length(); i++) {\n                chars.add(word.charAt(i));\n \
  \           }\n            if (chars.size() > max) {\n                max = chars.size();\n\
  \                ret = word;\n            }\n        }\n        return ret;"
- "        String best = \"\";\n        for (String word : words) {\n            if\
  \ (countUnique(word) > countUnique(best)) {\n                best = word;\n    \
  \        }\n        }\n        return best;"
- '        throw new RuntimeException("Implement this function");'
- "        // Your code goes here!\n        return null;"
- "        String result = \"\";\n        int max = 0;\n        int i = 0;\n     \
  \   while (i < words.size()) {\n            String word = words.get(i);\n      \
  \      if (uniqueCharacters(word) > max) {\n                max = uniqueCharacters(word);\n\
  \                result = word;\n            }\n            i++;\n        }\n  \
  \      return result;"
- "        final int MAX = 26;\n        boolean[] found = new boolean[MAX];\n    \
  \    int[] count = new int[MAX];\n        int maxLen = 0;\n        String maxWord\
  \ = \"\";\n        for (String word : words) {\n            int wordLen = word.length();\n\
  \            if (wordLen > maxLen) {\n                maxLen = wordLen;\n      \
  \          maxWord = word;\n            }\n            else if (wordLen == maxLen)\
  \ {\n                if (word.compareTo(maxWord) < 0) {\n                    maxWord\
  \ = word;\n                }\n            }\n        }\n        return maxWord;"
- "        // write code here\n        Map<String, Integer> map = new HashMap<>();\n\
  \        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n\
  \            for (char c : word.toCharArray()) {\n                set.add(c);\n\
  \            }\n            map.put(word, set.size());\n        }\n        int max\
  \ = 0;\n        String s = \"\";\n        for (String word : words) {\n        \
  \    if (map.get(word) > max) {\n                max = map.get(word);\n        \
  \        s = word;\n            }\n        }\n        return s;"
- '        throw new RuntimeException("Please implement this function");'
- "        String result = \"\";\n        for (String word : words) {\n          \
  \  if (result.length() < word.length()) {\n                result = word;\n    \
  \        }\n        }\n        return result;"
- '        return null;'
- '        throw new UnsupportedOperationException("Not implemented");'
- '        // your code here'
- "        String maxWord = \"\";\n        int maxChars = 0;\n        for (String\
  \ word : words) {\n            int chars = countUnique(word);\n            if (chars\
  \ > maxChars) {\n                maxChars = chars;\n                maxWord = word;\n\
  \            }\n        }\n        return maxWord;"
- "        int max = 0;\n        String ans = \"\";\n        for (String word : words)\
  \ {\n            if (word.length() > max) {\n                max = word.length();\n\
  \                ans = word;\n            }\n        }\n        return ans;"
- "        String ans = \"\";\n        int maxUnique = 0;\n        for (String word\
  \ : words) {\n            int count = uniqueCount(word);\n            if (count\
  \ > maxUnique) {\n                maxUnique = count;\n                ans = word;\n\
  \            }\n        }\n        return ans;"
- '        return null;'
- "        int max = 0;\n        String res = \"\";\n        for (String s : words)\
  \ {\n            if (s.length() > max) {\n                max = s.length();\n  \
  \              res = s;\n            }\n        }\n        return res;"
- "      int max_unique = 0;\n      String max_unique_word = \"\";\n      for (String\
  \ word : words) {\n        Set<Character> set = new HashSet<Character>();\n    \
  \    for (char c : word.toCharArray()) {\n          set.add(c);\n        }\n   \
  \     if (set.size() > max_unique) {\n          max_unique = set.size();\n     \
  \     max_unique_word = word;\n        }\n      }\n      return max_unique_word;"
- "        int max = 0;\n        int max_idx = 0;\n        for (int i = 0; i < words.size();\
  \ i++) {\n            int cur = 0;\n            Set<Character> uniq = new HashSet<>();\n\
  \            for (int j = 0; j < words.get(i).length(); j++) {\n               \
  \ if (!uniq.contains(words.get(i).charAt(j))) {\n                    cur++;\n  \
  \                  uniq.add(words.get(i).charAt(j));\n                }\n      \
  \      }\n            if (cur > max) {\n                max = cur;\n           \
  \     max_idx = i;\n            }\n        }\n        return words.get(max_idx);"
- "        return words.stream()\n            .max(Comparator.comparingInt(s -> s.chars().distinct().count()))\n\
  \            .orElse(null);"
- '        return "";'
- "        // Write your code here\n        return \"\";"
- "        String output = \"\";\n        int uniques = 0;\n        for (String word\
  \ : words) {\n            int unique_count = 0;\n            int i = 0;\n      \
  \      while (i < word.length()) {\n                char c = word.charAt(i);\n \
  \               if (word.indexOf(c) == word.lastIndexOf(c)) {\n                \
  \    unique_count++;\n                }\n                i++;\n            }\n \
  \           if (unique_count > uniques) {\n                uniques = unique_count;\n\
  \                output = word;\n            }\n        }\n        return output;"
- "        // <<<FILL_IN>>>\n        int max = 0;\n        String maxWord = \"\";\n\
  \        for (String word : words) {\n            if (word.length() > max) {\n \
  \               max = word.length();\n                maxWord = word;\n        \
  \    }\n        }\n        return maxWord;"
- "        String max = \"\";\n        HashSet<Character> curr = new HashSet<>();\n\
  \        for (String word : words) {\n            if (word.length() > max.length())\
  \ {\n                max = word;\n            } else if (word.length() == max.length())\
  \ {\n                curr.clear();\n                for (int i = 0; i < word.length();\
  \ i++) {\n                    curr.add(word.charAt(i));\n                }\n   \
  \             int count = 0;\n                for (int i = 0; i < max.length();\
  \ i++) {\n                    if (curr.contains(max.charAt(i))) {\n            \
  \            count++;\n                    }\n                }\n              \
  \  if (count < max.length()) {\n                    max = word;\n              \
  \  }\n            }\n        }\n        return max;"
- "        String max_word = \"\";\n        int max_unique_chars = 0;\n        for\
  \ (String word : words) {\n            String uniq = Set.of(word.split(\"\")).stream().collect(Collectors.joining());\n\
  \            if (uniq.length() > max_unique_chars) {\n                max_unique_chars\
  \ = uniq.length();\n                max_word = word;\n            }\n        }\n\
  \        return max_word;"
- '        throw new RuntimeException("Not implemented");'
- '        return null;'
- "        var list = new ArrayList<Pair<String, Integer>>();\n        for (String\
  \ word : words) {\n            list.add(Pair.with(word, uniqueCharacters(word)));\n\
  \        }\n        var num = list.stream().map(x -> x.getValue1()).max(Integer::compare).get();\n\
  \        return list.stream().filter(x -> x.getValue1() == num).min(Comparator.comparing(Pair::getValue0)).get().getValue0();"
- '        return "";'
- "        int maxNum = 0;\n        String maxStr = \"\";\n        for (String s :\
  \ words) {\n            int uniqueChars = uniqueChars(s);\n            if (uniqueChars\
  \ > maxNum) {\n                maxNum = uniqueChars;\n                maxStr = s;\n\
  \            }\n        }\n        return maxStr;"
- '        return null;'
- "        if (words.size() < 1) {\n            return \"\";\n        }\n        String\
  \ max = words.get(0);\n        for (int i = 1; i < words.size(); i++) {\n      \
  \      String s = words.get(i);\n            if (max.length() < s.length()) {\n\
  \                max = s;\n            } else if (max.length() == s.length()) {\n\
  \                if (max.compareTo(s) > 0) {\n                    max = s;\n   \
  \             }\n            }\n        }\n        return max;"
- "        List<String> uWords = new ArrayList<String>();\n        for (String str\
  \ : words) {\n            if (new HashSet<String>(Arrays.asList(str.split(\"\"))).size()\
  \ == str.length()) {\n                uWords.add(str);\n            }\n        }\n\
  \        if (uWords.size() == 0) {\n            return \"\";\n        }\n      \
  \  Collections.sort(uWords);\n        return uWords.get(0);"
- "        // Write your code here!\n        String max = \"\";\n        int max_length\
  \ = 0;\n        int count = 0;\n        for (String word : words) {\n          \
  \  count = 0;\n            for (int i = 0; i < word.length(); i++) {\n         \
  \       if (word.substring(0, i).indexOf(word.charAt(i)) == -1) {\n            \
  \        count++;\n                }\n            }\n            if (count > max_length)\
  \ {\n                max_length = count;\n                max = word;\n        \
  \    }\n        }\n        return max;"
- "        int max_len = 0;\n        String max_word = \"\";\n        for (String\
  \ word : words) {\n            Set<Character> set = new HashSet<>();\n         \
  \   for (char c : word.toCharArray()) {\n                set.add(c);\n         \
  \   }\n            if (set.size() > max_len) {\n                max_len = set.size();\n\
  \                max_word = word;\n            }\n        }\n        return max_word;"
- "        String result = \"\";\n        int maxUnique = 0;\n        HashSet<Character>\
  \ unique = new HashSet<Character>();\n        for (String word : words) {\n    \
  \        unique.clear();\n            for (int i = 0; i < word.length(); i++) {\n\
  \                unique.add(word.charAt(i));\n            }\n            if (unique.size()\
  \ > maxUnique) {\n                maxUnique = unique.size();\n                result\
  \ = word;\n            }\n        }\n        return result;"
- "        String max = \"\";\n        int uc = 0;\n        for (String word : words)\
  \ {\n            if (uniqueChars(word) > uc) {\n                max = word;\n  \
  \              uc = uniqueChars(word);\n            }\n        }\n        return\
  \ max;"
- "        Pair<String,Integer> max = words.stream()\n                           \
  \             .map(w -> new Pair<String,Integer>(w,w.chars().distinct().count()))\n\
  \                                        .max(Comparator.comparing(Pair::getValue1))\n\
  \                                        .get();\n        return max.getValue0();"
- "        // When we read the first string \"name\", we found 'n' has been seen,\n\
  \        // and it has two unique characters 'n' and 'a'.\n        // When we read\
  \ the second string \"of\", we found 'f' has been seen,\n        // and it has three\
  \ unique characters 'n', 'a', and 'f'.\n        // When we read the third string\
  \ \"string\", we found 's' has been seen,\n        // and it has four unique characters\
  \ 'n', 'a', 'f', and 's'.\n        // Now we have three candidates 'of', 'string',\
  \ and 'name'.\n        // We don't need to keep 'of' because it has fewer unique\
  \ characters than\n        // 'string' and 'name'.\n        // There are two candidates\
  \ 'string' and 'name'.\n        // 'string' is returned because it comes first in\
  \ lexicographical order.\n        if (words.size() == 0) {\n            return \"\
  \";\n        }\n        // We need to keep track of the words that have the maximum\
  \ number of\n        // unique characters.\n        ArrayList<String> candidates\
  \ = new ArrayList<String>();\n        // Keep track of characters we have seen so\
  \ far.\n        HashSet<Character> chars = new HashSet<Character>();\n        int\
  \ maxUniqueChars = 0;\n        for (String word : words) {\n            // Keep\
  \ track of the number of unique characters we have seen so far.\n            HashSet<Character>\
  \ seen = new HashSet<Character>();\n            for (int i = 0; i < word.length();\
  \ i++) {\n                // Add the character to the set of seen characters.\n\
  \                seen.add(word.charAt(i));\n            }\n            // Update\
  \ the maximum number of unique characters.\n            maxUniqueChars = Math.max(maxUniqueChars,\
  \ seen.size());\n            // Add the word to the list of candidates if it has\
  \ the maximum number\n            // of unique characters.\n            if (seen.size()\
  \ == maxUniqueChars) {\n                candidates.add(word);\n            }\n \
  \       }\n        // Find the lexicographically smallest candidate and return it.\n\
  \        String result = \"\";\n        for (String word : candidates) {\n     \
  \       if (result.compareTo("
- "        String result = \"\";\n        String unique = \"\";\n        int max =\
  \ 0;\n        for (String word : words) {\n            unique = new String(new LinkedHashSet<String>(Arrays.asList(word.split(\"\
  \"))).toArray(new String[0]));\n            if (unique.length() > max) {\n     \
  \           max = unique.length();\n                result = word;\n           \
  \ }\n        }\n        return result;"
- "        return words.stream()\n            .max(Comparator.comparing(s -> {\n \
  \               String[] c = s.split(\"\");\n                Set<String> u = new\
  \ HashSet<>(Arrays.asList(c));\n                return u.size();\n            }))\n\
  \            .get();"
- '        return "";'
- "        String answer = \"\";\n        int max = 0;\n        for (String word :\
  \ words) {\n            int cur = uniques(word);\n            if (cur > max) {\n\
  \                max = cur;\n                answer = word;\n            }\n   \
  \     }\n        return answer;"
- "        int maxLength = 0;\n        String answer = \"\";\n        for (String\
  \ word : words) {\n            int length = word.length();\n            if (length\
  \ > maxLength) {\n                maxLength = length;\n                answer =\
  \ word;\n            }\n        }\n        return answer;"
- "        String max = \"\";\n        int maxUniq = 0;\n        for (String word\
  \ : words) {\n            int uniq = 0;\n            for (int i = 0; i < word.length();\
  \ i++) {\n                if (word.lastIndexOf(word.charAt(i)) == i)\n         \
  \           uniq++;\n            }\n            if (uniq > maxUniq) {\n        \
  \        max = word;\n                maxUniq = uniq;\n            }\n        }\n\
  \        return max;"
- '        throw new UnsupportedOperationException("Not implemented");'
- "        String result = \"\";\n        Set<Character> chars = new HashSet<>();\n\
  \        for (String word : words) {\n            for (char c : word.toCharArray())\
  \ {\n                chars.add(c);\n            }\n            if (chars.size()\
  \ > result.length()) {\n                result = word;\n            }\n        \
  \    chars.clear();\n        }\n        return result;"
- "        // iterate over arraylist\n        // calculate unique letters in each\
  \ string\n        // find largest count of unique letters\n        // return string\
  \ with largest count\n        // if count is equal return string that comes first\n\
  \        return \"unimplemented\";"
- "        // Your code here\n        String result = \"\";\n        int maxLen =\
  \ 0;\n        for (String word : words) {\n            int len = word.length();\n\
  \            if (word.length() == maxLen) {\n                result = result.compareTo(word)\
  \ > 0 ? word : result;\n            } else if (word.length() > maxLen) {\n     \
  \           maxLen = word.length();\n                result = word;\n          \
  \  }\n        }\n        return result;"
- '        return new String();'
- "        String result = \"\";\n        int max_unique = 0;\n        for (String\
  \ word : words) {\n            Set<Character> set = new HashSet<Character>();\n\
  \            for (char ch : word.toCharArray()) {\n                set.add(ch);\n\
  \            }\n            if (set.size() > max_unique) {\n                max_unique\
  \ = set.size();\n                result = word;\n            }\n        }\n    \
  \    return result;"
- "        int i = 0;\n        int max = 0;\n        StringBuilder b = new StringBuilder();\n\
  \        while (i < words.size()) {\n            String s = words.get(i);\n    \
  \        HashSet<Character> set = new HashSet<Character>();\n            for (int\
  \ j = 0; j < s.length(); j++) {\n                char c = s.charAt(j);\n       \
  \         set.add(c);\n            }\n            if (set.size() > max) {\n    \
  \            max = set.size();\n                b.setLength(0);\n              \
  \  b.append(s);\n            }\n            i++;\n        }\n        return b.toString();"
- "        int maxUnique = 0;\n        String maxWord = \"\";\n        for (String\
  \ word : words) {\n            int unique = countUnique(word);\n            if (unique\
  \ > maxUnique) {\n                maxUnique = unique;\n                maxWord =\
  \ word;\n            }\n        }\n        return maxWord;"
- "        int currentMax = -1;\n        String word = \"\";\n        for (String\
  \ w : words) {\n            ArrayList<Character> chars = new ArrayList<Character>();\n\
  \            for (int i = 0; i < w.length(); i++) {\n                chars.add(w.charAt(i));\n\
  \            }\n            int uniqueChars = chars.stream().distinct().toArray().length;\n\
  \            if (uniqueChars > currentMax) {\n                currentMax = uniqueChars;\n\
  \                word = w;\n            }\n        }\n        return word;"
- "        ArrayList<Integer> count = new ArrayList<Integer>();\n        HashSet<Character>\
  \ hset = new HashSet<Character>();\n        char c;\n        for (String str : words)\
  \ {\n            hset.clear();\n            for (int i = 0; i < str.length(); i++)\
  \ {\n                c = str.charAt(i);\n                hset.add(c);\n        \
  \    }\n            count.add(hset.size());\n        }\n        int max = Collections.max(count);\n\
  \        int index = count.indexOf(max);\n        return words.get(index);"
- "        String mx = \"\";\n        for (String word : words) {\n            if\
  \ (word.length() > mx.length())\n                mx = word;\n        }\n       \
  \ String ret = mx;\n        for (String word : words) {\n            int uniq =\
  \ 0;\n            for (int i = 0; i < word.length(); i++) {\n                if\
  \ (word.indexOf(word.charAt(i)) == i)\n                    uniq++;\n           \
  \ }\n            if (uniq == mx.length()) {\n                if (word.compareTo(ret)\
  \ < 0)\n                    ret = word;\n            }\n        }\n        return\
  \ ret;"
- "        int maxSoFar = 0;\n        String result = \"\";\n        for (String s\
  \ : words) {\n            int count = 0;\n            for (int i = 0; i < s.length();\
  \ i++) {\n                if (s.indexOf(s.charAt(i)) == i) {\n                 \
  \   count++;\n                }\n            }\n            if (count > maxSoFar)\
  \ {\n                maxSoFar = count;\n                result = s;\n          \
  \  }\n        }\n        return result;"
- '        return "";'
- "        String bestWord = \"\";\n        // your code here\n        return bestWord;"
- "        int maxUniqueChars = 0;\n        String maxUniqueCharsWord = \"\";\n  \
  \      for (String word : words) {\n            Set<Character> uniqueChars = new\
  \ HashSet<Character>();\n            for (int i = 0; i < word.length(); i++) {\n\
  \                uniqueChars.add(word.charAt(i));\n            }\n            if\
  \ (uniqueChars.size() > maxUniqueChars) {\n                maxUniqueChars = uniqueChars.size();\n\
  \                maxUniqueCharsWord = word;\n            }\n        }\n        return\
  \ maxUniqueCharsWord;"
- "        StringBuilder output = new StringBuilder();\n        words.forEach(word\
  \ -> {\n            if (word.length() == word.chars().distinct().count()) {\n  \
  \              output.append(word);\n            }\n        });\n        return\
  \ output.toString();"
- "        return words.stream()\n        .max(new Comparator<String>() {\n      \
  \      @Override\n            public int compare(String a, String b) {\n       \
  \         String an = a.replaceAll(\"\\\\s+\",\"\");\n                String bn\
  \ = b.replaceAll(\"\\\\s+\",\"\");\n                ArrayList<Character> al = new\
  \ ArrayList<Character>();\n                ArrayList<Character> bl = new ArrayList<Character>();\n\
  \                for (char c : an.toCharArray()) {\n                    al.add(c);\n\
  \                }\n                for (char c : bn.toCharArray()) {\n        \
  \            bl.add(c);\n                }\n                Set<Character> s = new\
  \ HashSet<Character>(al);\n                Set<Character> t = new HashSet<Character>(bl);\n\
  \                if (s.size() == t.size()) {\n                    if (a.compareTo(b)\
  \ < 0) {\n                        return -1;\n                    } else {\n   \
  \                     return 1;\n                    }\n                } else if\
  \ (s.size() > t.size()) {\n                    return -1;\n                } else\
  \ {\n                    return 1;\n                }\n            }\n        }).get();"
- "        return words.stream()\n                    .max(new Comparator<String>()\
  \ {\n                        @Override\n                        public int compare(String\
  \ a, String b) {\n                            int aLen = a.length();\n         \
  \                   int bLen = b.length();\n                            if (aLen\
  \ == bLen) {\n                                return a.compareTo(b);\n         \
  \                   }\n                            return Integer.compare(aLen,\
  \ bLen);\n                        }\n                    })\n                  \
  \  .get();"
- "      if (words.size() == 0) return \"\";\n      String max_word = words.get(0);\n\
  \      int max_count = getUniqueCharCount(max_word);\n      for (int i = 1; i <\
  \ words.size(); i++) {\n        String word = words.get(i);\n        int count =\
  \ getUniqueCharCount(word);\n        if (count > max_count) {\n          max_count\
  \ = count;\n          max_word = word;\n        } else if (count == max_count) {\n\
  \          if (word.compareTo(max_word) < 0) {\n            max_word = word;\n \
  \         }\n        }\n      }\n      return max_word;"
- "        Map<String, Integer> counts = new HashMap<>();\n        for (String word\
  \ : words) {\n            HashSet<Character> set = new HashSet<>();\n          \
  \  for (int i = 0; i < word.length(); i++) {\n                set.add(word.charAt(i));\n\
  \            }\n            counts.put(word, set.size());\n        }\n        int\
  \ max = 0;\n        String out = \"\";\n        for (String word : words) {\n  \
  \          if (counts.get(word) > max) {\n                max = counts.get(word);\n\
  \                out = word;\n            }\n        }\n        return out;"
- "        // ...\n        return null;"
- "        //throw new RuntimeException(\"Not implemented\");\n        String maxStr\
  \ = \"\";\n        int maxCount = 0;\n        StringBuilder sb = new StringBuilder();\n\
  \        for (String word : words) {\n            sb.setLength(0);\n           \
  \ sb.append(word);\n            int count = 0;\n            for (int i = 0; i <\
  \ sb.length(); i++) {\n                for (int j = i + 1; j < sb.length(); j++)\
  \ {\n                    if (sb.charAt(i) == sb.charAt(j)) {\n                 \
  \       sb.deleteCharAt(j);\n                        j--;\n                    }\n\
  \                }\n            }\n            count = sb.length();\n          \
  \  if (count > maxCount) {\n                maxCount = count;\n                maxStr\
  \ = word;\n            }\n        }\n        return maxStr;"
- "        // Iterate over all words, counting number of unique characters for each\
  \ word\n        // The word with the max number of uniques will be our result.\n\
  \        // Write your code here, after all variable declarations\n\n        //\
  \ Iterate over all words, counting number of unique characters for each word\n \
  \       // The word with the max number of uniques will be our result.\n       \
  \ String answer = null;\n        int max = 0;\n        // Iterate over all words,\
  \ counting number of unique characters for each word\n        // The word with the\
  \ max number of uniques will be our result.\n        for (String word : words) {\n\
  \            HashSet<Character> uniques = new HashSet<Character>();\n          \
  \  // Count the number of unique characters in this word\n            for (int i\
  \ = 0; i < word.length(); i++) {\n                uniques.add(word.charAt(i));\n\
  \            }\n            // Do we have a new max?\n            if (uniques.size()\
  \ > max) {\n                max = uniques.size();\n                answer = word;\n\
  \            }\n        }\n        return answer;"
- "        int max_length = words.stream().map(w -> w.length()).max(Integer::compare).get();\n\
  \        return words.stream().filter(w -> w.length() == max_length).min(String::compareTo).get();"
- "\t\tint maxSize = 0;\n\t\tString maxWord = \"\";\n\t\t\n\t\tfor (String str : words)\
  \ {\n\t\t\tArrayList<Character> ch = new ArrayList<Character>();\n\t\t\tfor (int\
  \ i = 0; i < str.length(); i++) {\n\t\t\t\tif (!ch.contains(str.charAt(i))) {\n\t\
  \t\t\t\tch.add(str.charAt(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ch.size() > maxSize)\
  \ {\n\t\t\t\tmaxSize = ch.size();\n\t\t\t\tmaxWord = str;\n\t\t\t}\n\t\t}\n\t\t\
  return maxWord;"
- "        assert words != null;\n        String maxString = \"\";\n        int maxUnique\
  \ = 0;\n        for (String word : words) {\n            HashSet<Character> set\
  \ = new HashSet<>();\n            for (int i = 0; i < word.length(); i++) {\n  \
  \              set.add(word.charAt(i));\n            }\n            if (set.size()\
  \ > maxUnique) {\n                maxUnique = set.size();\n                maxString\
  \ = word;\n            } else if (set.size() == maxUnique) {\n                maxString\
  \ = word.compareTo(maxString) < 0 ? word : maxString;\n            }\n        }\n\
  \        return maxString;"
- "        Integer maxLength = 0;\n        String result = \"\";\n        for (String\
  \ word : words) {\n            String word2 = word.replaceAll(\".\", \" \");\n \
  \           String[] word2Array = word2.split(\" \");\n            Set<String> set\
  \ = new HashSet<String>(Arrays.asList(word2Array));\n            Integer setSize\
  \ = set.size();\n            if (setSize > maxLength) {\n                maxLength\
  \ = setSize;\n                result = word;\n            }\n        }\n       \
  \ return result;"
- "        int max = -1;\n        String maxStr = \"\";\n        for (String word\
  \ : words) {\n            // count number of unique characters\n            HashSet<Character>\
  \ set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n    \
  \            set.add(c);\n            }\n            int count = set.size();\n \
  \           if (count > max) {\n                max = count;\n                maxStr\
  \ = word;\n            } else if (count == max) {\n                // if count equals\
  \ max and the word is lexicographically less\n                // than the maxStr\
  \ then assign it to maxStr\n                if (word.compareTo(maxStr) < 0) {\n\
  \                    maxStr = word;\n                }\n            }\n        }\n\
  \        return maxStr;"
- "        String result = \"\";\n        HashMap<String, Integer> map = new HashMap<>();\n\
  \        for (String i : words) {\n            Integer count = 0;\n            for\
  \ (int j = 0; j < i.length(); j++) {\n                if (!map.containsKey(i.substring(j,\
  \ j + 1))) {\n                    count++;\n                    map.put(i.substring(j,\
  \ j + 1), count);\n                }\n            }\n            result = i;\n \
  \       }\n        return result;"
- '        throw new UnsupportedOperationException("not implemented");'
- '        return "";'
- "        HashMap<String, Integer> wordToUniqueCharCount = new HashMap<>();\n   \
  \     int uniqueCharCount = 0;\n        for (String word : words) {\n          \
  \  for (int i = 0; i < word.length(); i++) {\n                // skip the duplicates\n\
  \                if (word.indexOf(word.charAt(i), i + 1) > -1) {\n             \
  \       continue;\n                }\n                uniqueCharCount++;\n     \
  \       }\n            wordToUniqueCharCount.put(word, uniqueCharCount);\n     \
  \       uniqueCharCount = 0;\n        }\n        int maxCount = Collections.max(wordToUniqueCharCount.values());\n\
  \        ArrayList<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
  \ Integer> wordEntry : wordToUniqueCharCount.entrySet()) {\n            if (wordEntry.getValue()\
  \ == maxCount) {\n                result.add(wordEntry.getKey());\n            }\n\
  \        }\n        return Collections.min(result);"
- "        String maxWord = \"\";\n        for (String word : words) {\n         \
  \   boolean isNotUnique = false;\n            for (int i = 0; i < word.length();\
  \ i++) {\n                if (word.indexOf(word.charAt(i)) != word.lastIndexOf(word.charAt(i)))\
  \ {\n                    isNotUnique = true;\n                    break;\n     \
  \           }\n            }\n            if (!isNotUnique) {\n                maxWord\
  \ = maxWord.length() < word.length() ? word : maxWord;\n            }\n        }\n\
  \        return maxWord;"
- '        return "";'
- "        // TODO: write the code for this function.\n        return \"\";"
- "        int maxUnique = 0;\n        String best = \"\";\n        for (String word\
  \ : words) {\n            int unique = 0;\n            ArrayList<Character> characters\
  \ = new ArrayList<Character>();\n            for (char c : word.toCharArray()) {\n\
  \                if (!characters.contains(c)) {\n                    unique += 1;\n\
  \                    characters.add(c);\n                }\n            }\n    \
  \        if (unique > maxUnique) {\n                maxUnique = unique;\n      \
  \          best = word;\n            }\n        }\n        return best;"
- "        // Your code here\n        return \"\";"
- "        int max = 0;\n        String ans = \"\";\n        for (String word : words)\
  \ {\n            Set<Character> s = new HashSet<>();\n            for (int i = 0;\
  \ i < word.length(); i++) {\n                s.add(word.charAt(i));\n          \
  \  }\n            if (s.size() > max) {\n                max = s.size();\n     \
  \           ans = word;\n            }\n        }\n        return ans;"
- "\t\t//TODO: Implement me\n        return null;"
- "\t\t// Insert your code here"
- "        int max = -1;\n        String target = \"\";\n        for (String word\
  \ : words) {\n            if (word.length() > max) {\n                max = word.length();\n\
  \                target = word;\n            }\n        }\n        return target;"
- "        int max = 0;\n        String ret = \"\";\n        for (String word : words)\
  \ {\n            int cur = word.chars().distinct().count();\n            if (cur\
  \ > max) {\n                max = cur;\n                ret = word;\n          \
  \  }\n        }\n        return ret;"
- "        // Any solution in O(n) time and O(1) space will be accepted.\n       \
  \ return \"\";"
- "        String max = words.get(0);\n        for (String word : words) {\n     \
  \       if (word.length() > max.length()) {\n                max = word;\n     \
  \       }\n        }\n        return max;"
- '        return "";'
- "        int best = -1;\n        String bestString = \"\";\n        for (String\
  \ word : words) {\n            Set<Character> set = new HashSet<>();\n         \
  \   for (char c : word.toCharArray()) {\n                set.add(c);\n         \
  \   }\n            if (set.size() > best) {\n                best = set.size();\n\
  \                bestString = word;\n            }\n        }\n        return bestString;"
- '        return null;'
- "        var anagrams = new Anagrams();\n        return anagrams.FindMax(words);"
- "        String max = words.get(0);\n        for (String word : words) {\n     \
  \       if (word.length() > max.length()) {\n                max = word;\n     \
  \       }\n        }\n        return max;"
- '        return "";'
- "        int max = 0;\n        String maxStr = \"\";\n        for (String word :\
  \ words) {\n            if (word.length() > max) {\n                max = word.length();\n\
  \                maxStr = word;\n            }\n        }\n        return maxStr;"
- '        return "";'
- "        String maxStr = \"\";\n        String[] alphabet = {\"a\", \"b\", \"c\"\
  , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
  o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
  };\n        int maxNum = 0;\n        for (String word : words) {\n            Set<String>\
  \ chars = new HashSet<>();\n            int currentNum = 0;\n            for (String\
  \ s : alphabet) {\n                if (word.contains(s)) {\n                   \
  \ chars.add(s);\n                    currentNum += 1;\n                }\n     \
  \       }\n            if (currentNum > maxNum) {\n                maxNum = currentNum;\n\
  \                maxStr = word;\n            }\n        }\n        return maxStr;"
- "        // If there are no words, return an empty string.\n        if (words.size()\
  \ == 0) {\n            return \"\";\n        }\n        ArrayList<Integer> counts\
  \ = new ArrayList<Integer>();\n        for (String word : words) {\n           \
  \ // HashSet stores only unique elements.\n            HashSet<Character> set =\
  \ new HashSet<Character>();\n            for (char c : word.toCharArray()) {\n \
  \               set.add(c);\n            }\n            counts.add(set.size());\n\
  \        }\n        int maxCount = Collections.max(counts);\n        int index =\
  \ counts.indexOf(maxCount);\n        return words.get(index);"
- "        if (words.size() == 0) {\n            return \"\";\n        }\n\n     \
  \   int maxCount = 0;\n        String result = \"\";\n        for (String word :\
  \ words) {\n            HashSet<Character> set = new HashSet<>();\n            for\
  \ (int i = 0; i < word.length(); i++) {\n                set.add(word.charAt(i));\n\
  \            }\n            if (set.size() > maxCount) {\n                maxCount\
  \ = set.size();\n                result = word;\n            } else if (set.size()\
  \ == maxCount) {\n                if (word.compareTo(result) < 0) {\n          \
  \          result = word;\n                }\n            }\n        }\n       \
  \ return result;"
- "        // TODO: write your code here\n        return null;"
- '      return null;'
- "        //TODO: write your code here\n        return \"\";"
- "        // Implement your solution here\n        return \"\";"
- "        int curmax = -1;\n        String curstring = \"\";\n        for (String\
  \ word : words) {\n            int curlen = word.length();\n            String curunique\
  \ = \"\";\n            for (int i = 0; i < curlen; i++) {\n                String\
  \ curch = Character.toString(word.charAt(i));\n                if (!curunique.contains(curch))\
  \ {\n                    curunique += curch;\n                }\n            }\n\
  \            if (curunique.length() > curmax) {\n                curmax = curunique.length();\n\
  \                curstring = word;\n            }\n        }\n        return curstring;"
- "        return words.stream()\n            .map(word -> new Object() {\n      \
  \          int uniques = word.chars().distinct().count();\n                String\
  \ w = word;\n            })\n            .sorted((o1, o2) -> {\n               \
  \ int diff = o2.uniques - o1.uniques;\n                if (diff == 0) {\n      \
  \              return o1.w.compareTo(o2.w);\n                }\n               \
  \ return diff;\n            })\n            .findFirst()\n            .get()\n \
  \           .w;"
- "        // Empty list\n        if (words.size() == 0) {\n            return \"\"\
  ;\n        }\n        // Loop through each word, and find the max length\n     \
  \   String max_word = words.get(0);\n        int max_word_length = find_max_length(max_word);\n\
  \        for (int i = 1; i < words.size(); i++) {\n            // Check if the current\
  \ word's length is > max_word_length\n            String curr_word = words.get(i);\n\
  \            int curr_word_length = find_max_length(curr_word);\n            if\
  \ (curr_word_length > max_word_length) {\n                max_word = curr_word;\n\
  \                max_word_length = curr_word_length;\n            }\n          \
  \  else if (curr_word_length == max_word_length) {\n                // If the curr_word\
  \ is lexicographically smaller than the max_word\n                if (curr_word.compareTo(max_word)\
  \ < 0) {\n                    max_word = curr_word;\n                    max_word_length\
  \ = curr_word_length;\n                }\n            }\n        }\n        return\
  \ max_word;"
- "        // todo: implement me!\n        return \"\";"
- '        throw new UnsupportedOperationException("TODO - implement");'
- '        return null;'
- '        return null;'
- "        // Write code here\n        String maxword=\"\";\n        int maxcount=0;\n\
  \        for(String word:words){\n            int count=0;\n            String uniqueWord=\"\
  \";\n            for(int i=0;i<word.length();i++){\n                String c=\"\"\
  +word.charAt(i);\n                if(!uniqueWord.contains(c)){\n               \
  \     uniqueWord+=c;\n                    count++;\n                }\n        \
  \    }\n            if(count>maxcount){\n                maxcount=count;\n     \
  \           maxword=word;\n            }\n            else if(count==maxcount){\n\
  \                if(word.compareTo(maxword)<0){\n                    maxword=word;\n\
  \                }\n            }\n        }\n        return maxword;"
- "        int maxUniqueChars = 0;\n        String maxWord = \"\";\n        for (String\
  \ word : words) {\n            if (word.length() > maxUniqueChars) {\n         \
  \       maxUniqueChars = word.length();\n                maxWord = word;\n     \
  \       }\n        }\n        return maxWord;"
- "        ArrayList<Pair<String, Integer>> numChars = new ArrayList<>();\n      \
  \  for (String word : words) {\n            int numUnique = 0;\n            for\
  \ (int i = 0; i < word.length(); i++) {\n                char curr = word.charAt(i);\n\
  \                if (word.indexOf(curr) == i) {\n                    numUnique++;\n\
  \                }\n            }\n            numChars.add(new Pair<>(word, numUnique));\n\
  \        }\n        int max = numChars.get(0).getValue1();\n        int index =\
  \ 0;\n        for (int i = 1; i < numChars.size(); i++) {\n            if (numChars.get(i).getValue1()\
  \ > max) {\n                max = numChars.get(i).getValue1();\n               \
  \ index = i;\n            }\n        }\n        return numChars.get(index).getValue0();"
- "        // TODO: Implement\n        String result = \"\";\n        String max =\
  \ \"\";\n        String min = \"\";\n        int maxNum = 0;\n        int minNum\
  \ = words.get(0).length();\n        int num = 0;\n        //int minNum = words.get(0).length();\n\
  \        for (int i = 0; i < words.size(); i++) {\n            if (minNum >= words.get(i).length())\
  \ {\n                minNum = words.get(i).length();\n                min = words.get(i);\n\
  \            }\n        }\n        for (int i = 0; i < words.size(); i++) {\n  \
  \          for (int j = 0; j < words.get(i).length(); j++) {\n                for\
  \ (int k = j + 1; k < words.get(i).length(); k++) {\n                    if (words.get(i).charAt(j)\
  \ == words.get(i).charAt(k)) {\n                        num++;\n               \
  \     }\n                }\n            }\n            if (maxNum <= num) {\n  \
  \              maxNum = num;\n                max = words.get(i);\n            }\n\
  \            num = 0;\n        }\n        if (maxNum == minNum) {\n            result\
  \ = min;\n        } else {\n            result = max;\n        }\n        return\
  \ result;"
- "        if (words.size() == 0) {\n            return \"\";\n        }\n       \
  \ HashMap<String, Integer> wordCount = new HashMap<>();\n        for (String word\
  \ : words) {\n            wordCount.put(word, new HashSet<>(Arrays.asList(word.split(\"\
  \"))).size());\n        }\n        TreeMap<Integer, ArrayList<String>> reversedMap\
  \ = new TreeMap<>(Collections.reverseOrder());\n        for (Map.Entry<String, Integer>\
  \ entry : wordCount.entrySet()) {\n            String word = entry.getKey();\n \
  \           Integer count = entry.getValue();\n            if (!reversedMap.containsKey(count))\
  \ {\n                reversedMap.put(count, new ArrayList<>());\n            }\n\
  \            reversedMap.get(count).add(word);\n        }\n        ArrayList<String>\
  \ max = reversedMap.firstEntry().getValue();\n        if (max.size() == 1) {\n \
  \           return max.get(0);\n        }\n        String result = max.get(0);\n\
  \        for (String word : max) {\n            if (word.compareTo(result) < 0)\
  \ {\n                result = word;\n            }\n        }\n        return result;"
- "        ArrayList<Pair<String, Integer>> counts = new ArrayList<>();\n        for\
  \ (String word : words) {\n            counts.add(new Pair<>(word, \n          \
  \      Arrays.stream(word.split(\"\")).distinct().count()));\n        }\n      \
  \  Optional<Pair<String, Integer>> max = counts.stream().max(\n            (x, y)\
  \ -> Integer.compare(x.getValue1(), y.getValue1()));\n        if (max.isPresent())\
  \ {\n            int maxCount = max.get().getValue1();\n            Optional<Pair<String,\
  \ Integer>> result = \n                counts.stream().filter(x -> x.getValue1()\
  \ == maxCount).findFirst();\n            if (result.isPresent()) {\n           \
  \     return result.get().getValue0();\n            }\n        }\n        return\
  \ \"\";"
- '        return null;'
- "        // Type your code here\n        int max = 0;\n        String max_word =\
  \ \"\";\n        for (String word : words) {\n            if (word.length() > max)\
  \ {\n                HashSet<Character> chars = new HashSet<>();\n             \
  \   for (char c : word.toCharArray()) {\n                    chars.add(c);\n   \
  \             }\n                if (chars.size() > max) {\n                   \
  \ max = chars.size();\n                    max_word = word;\n                }\n\
  \            }\n        }\n        return max_word;"
- "        String result = \"\";\n        int max = 0;\n        for (String word :\
  \ words) {\n            HashSet<Character> hs = new HashSet<Character>();\n    \
  \        for (char c : word.toCharArray()) {\n                hs.add(c);\n     \
  \       }\n            if (hs.size() > max) {\n                max = hs.size();\n\
  \                result = word;\n            }\n        }\n        return result;"
- "        // Write your code here\n        return null;"
- "        // Start typing your Java solution below\n        // DO NOT write main()\
  \ function\n        ArrayList<Pair<String, Integer>> tuples = new ArrayList<Pair<String,\
  \ Integer>>();\n        for (String word : words) {\n            Set<Character>\
  \ s = new HashSet<Character>();\n            for (int i = 0; i < word.length();\
  \ i++) {\n                s.add(word.charAt(i));\n            }\n            tuples.add(new\
  \ Pair<String, Integer>(word, s.size()));\n        }\n        Collections.sort(tuples,\
  \ new Comparator<Pair<String, Integer>>() {\n            public int compare(Pair<String,\
  \ Integer> p1, Pair<String, Integer> p2) {\n                if (p1.getValue1() >\
  \ p2.getValue1()) {\n                    return -1;\n                } else if (p1.getValue1()\
  \ < p2.getValue1()) {\n                    return 1;\n                } else {\n\
  \                    return p1.getValue0().compareTo(p2.getValue0());\n        \
  \        }\n            }\n        });\n        return tuples.get(0).getValue0();"
- "        String result = words.get(0);\n        for (String str : words) {\n   \
  \         if (str.length() > result.length()) {\n                result = str;\n\
  \            }\n        }\n        return result;"
- "        String result = \"\";\n        int max_uniques = 0;\n        for (String\
  \ s : words) {\n            int uniques = numberOfUniqueCharacters(s);\n       \
  \     if (uniques > max_uniques) {\n                max_uniques = uniques;\n   \
  \             result = s;\n            }\n        }\n        return result;"
- "      int max = 0;\n      String str = \"\";\n      // 1. find max unique\n   \
  \   for (String s : words) {\n        int count = 0;\n        // find distinct characters\
  \ in word\n        Set<Character> chars = new HashSet<Character>();\n        for\
  \ (char c : s.toCharArray()) {\n          chars.add(c);\n        }\n        if (chars.size()\
  \ > max) {\n          max = chars.size();\n          str = s;\n        }\n     \
  \ }\n      // 2. we now have max and string, need to check for tie breaker\n   \
  \   for (String s : words) {\n        int count = 0;\n        // find distinct characters\
  \ in word\n        Set<Character> chars = new HashSet<Character>();\n        for\
  \ (char c : s.toCharArray()) {\n          chars.add(c);\n        }\n        if (chars.size()\
  \ == max && s.compareTo(str) < 0) {\n          max = chars.size();\n          str\
  \ = s;\n        }\n      }\n      return str;"
- "        if (words.size() == 0) return \"\";\n        HashMap<String, HashSet<Character>>\
  \ uniques = new HashMap<>();\n        for (String word : words) {\n            HashSet<Character>\
  \ set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n    \
  \            set.add(c);\n            }\n            uniques.put(word, set);\n \
  \       }\n        int max = 0;\n        String maxWord = \"\";\n        for (String\
  \ word : words) {\n            if (uniques.get(word).size() > max) {\n         \
  \       max = uniques.get(word).size();\n                maxWord = word;\n     \
  \       }\n        }\n        return maxWord;"
- "        String ret = \"\";\n        int max = 0;\n        for (String s : words)\
  \ {\n            int cnt = 0;\n            for (int i = 0; i < s.length(); i++)\
  \ {\n                int ch = s.charAt(i);\n                if ((cnt & (1 << ch))\
  \ == 0) {\n                    cnt |= (1 << ch);\n                }\n          \
  \  }\n            if (cnt > max) {\n                max = cnt;\n               \
  \ ret = s;\n            }\n        }\n        return ret;"
- "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n        for (String\
  \ word : words) {\n            int uniqueChars = countUniqueCharacters(word);\n\
  \            if (uniqueChars > maxUniqueChars) {\n                maxUniqueChars\
  \ = uniqueChars;\n                maxWord = word;\n            }\n        }\n  \
  \      return maxWord;"
- '        // fill out this method'
- "        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < words.size();\
  \ i++) {\n            if (uniqueChars(words.get(i)) > max) {\n                max\
  \ = uniqueChars(words.get(i));\n                maxIndex = i;\n            }\n \
  \       }\n        return words.get(maxIndex);"
- '        // your code here'
- '        return Collections.max(words, Comparator.comparing(s -> s.chars().distinct().count()));'
- "        // Your code here.\n        int max = 0;\n        String word = \"\";\n\
  \        for (String w : words) {\n            int uniq = uniq_chars(w);\n     \
  \       if (uniq > max) {\n                max = uniq;\n                word = w;\n\
  \            }\n        }\n        return word;"
- '        return "";'
- "        return words.stream()\n            .map((word) -> new Pair<>(word, new\
  \ HashSet<>(Arrays.asList(word.split(\"\")))))\n            .max((a, b) -> a.getValue().size()\
  \ == b.getValue().size()\n                            ? a.getKey().compareTo(b.getKey())\n\
  \                            : a.getValue().size() - b.getValue().size())\n    \
  \        .get().getKey();"
- "        int max = Integer.MIN_VALUE;\n        int indexOfMax = -1;\n        int\
  \ i = 0;\n        for (String word : words) {\n            int unique = uniqueChars(word);\n\
  \            if (unique > max) {\n                max = unique;\n              \
  \  indexOfMax = i;\n            }\n            i++;\n        }\n        return words.get(indexOfMax);"
- '        return null;'
- "        // Check all strings in the list\n        // If it has higher number of\
  \ unique chars, return it\n        // If there are more than one string with same\
  \ number of unique chars,\n        // return the one which comes first in lexicographical\
  \ order\n        // If there are no strings, return the empty string\n        //\
  \ Time complexity is O(n)\n        // Space complexity is O(1)\n        if (words.size()\
  \ == 0) {\n            return \"\";\n        }\n        String best_string = words.get(0);\n\
  \        int best_count = countUniqueChars(best_string);\n        for (int i = 1;\
  \ i < words.size(); i++) {\n            String candidate = words.get(i);\n     \
  \       int candidate_count = countUniqueChars(candidate);\n            if (candidate_count\
  \ > best_count) {\n                best_string = candidate;\n                best_count\
  \ = candidate_count;\n            } else if (candidate_count == best_count &&\n\
  \                    candidate.compareTo(best_string) < 0) {\n                best_string\
  \ = candidate;\n                best_count = candidate_count;\n            }\n \
  \       }\n        return best_string;"
- '        // Your code here!'
- '        return null;'
- "        int max = 0;\n        String maxWord = \"\";\n        for (String word\
  \ : words) {\n            HashSet<Character> set = new HashSet<>();\n          \
  \  for (int i = 0; i < word.length(); i++) {\n                set.add(word.charAt(i));\n\
  \            }\n            if (set.size() > max) {\n                max = set.size();\n\
  \                maxWord = word;\n            }\n        }\n        return maxWord;"
- "        // Your code here.\n        int maxlength = 0;\n        String retval =\
  \ \"\";\n        ArrayList<String> maxlength_words = new ArrayList<String>();\n\
  \        for (String w : words) {\n            int length = findUnique(w);\n   \
  \         if (length > maxlength) {\n                maxlength = length;\n     \
  \           maxlength_words.clear();\n                maxlength_words.add(w);\n\
  \            } else if (length == maxlength) {\n                maxlength_words.add(w);\n\
  \            }\n        }\n        Collections.sort(maxlength_words);\n        if\
  \ (maxlength_words.size() > 0) {\n            retval = maxlength_words.get(0);\n\
  \        }\n        return retval;"
- "        return Collections.max(words, new Comparator<String>() {\n            @Override\n\
  \            public int compare(String s1, String s2) {\n                // Write\
  \ this function!\n                int result = 0;\n                if (getUniqueChars(s1).size()\
  \ > getUniqueChars(s2).size())\n                    result = 1;\n              \
  \  else if (getUniqueChars(s1).size() < getUniqueChars(s2).size())\n           \
  \         result = -1;\n                else\n                    result = s1.compareTo(s2);\n\
  \                return result;\n            }\n        });"
- "        // write your code here\n        return null;"
- "        // Write your code here\n        return \"\";"
- '        return "";'
- "        return words.stream()\n        .max(Comparator.comparing(word -> word.chars().distinct().count()))\n\
  \        .get();"
- "      //<Fill in your code here>\n      return \"\";"
- "        ArrayList<String> uniqueChars = new ArrayList<String>();\n        for (String\
  \ word : words) {\n            uniqueChars.add(getUniqueChars(word));\n        }\n\
  \        int index = 0;\n        for (int i = 1; i < uniqueChars.size(); i++) {\n\
  \            if (uniqueChars.get(i).length() > uniqueChars.get(index).length())\
  \ {\n                index = i;\n            }\n        }\n        return words.get(index);"
- '        return "";'
- "        String max = \"\";\n        int max_uniq_chars = 0;\n        for (String\
  \ word : words) {\n            int uniq_chars = uniqueChars(word);\n           \
  \ if (uniq_chars > max_uniq_chars) {\n                max = word;\n            \
  \    max_uniq_chars = uniq_chars;\n            }\n        }\n        return max;"
- "        String max = words.get(0);\n        int maxCount = 0;\n        for (String\
  \ word : words) {\n            int uCount = uniqueCount(word);\n            if (uCount\
  \ > maxCount) {\n                max = word;\n                maxCount = uCount;\n\
  \            }\n        }\n        return max;"
- "        // YOUR CODE GOES HERE\n        return \"\";"
- "        // Write your code here\n        return \"\";"
- '        // Your code here.'
- "        return words.stream()\n        .max(Comparator.comparing(word -> new HashSet<>(Arrays.asList(word.split(\"\
  \"))).size()))\n        .get();"
- "        // YOUR CODE GOES HERE\n        return \"\";"
- "        // TODO: add your code here\n\n        return null;"
- "        // Please write your code here.\n        int max = 0;\n        String word\
  \ = \"\";\n        for (String s : words) {\n            if (max < s.length()) {\n\
  \                max = s.length();\n                word = s;\n            }\n \
  \       }\n        return word;"
- '        return null;'
- "        String max = \"\";\n        HashSet<Character> unique = new HashSet<Character>();\n\
  \        for (String w : words) {\n            unique.clear();\n            for\
  \ (int i = 0; i < w.length(); i++) {\n                unique.add(w.charAt(i));\n\
  \            }\n            if (unique.size() > max.length()) {\n              \
  \  max = w;\n            }\n        }\n        return max;"
- "        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < words.size();\
  \ i++) {\n            if (max < words.get(i).length()) {\n                max =\
  \ words.get(i).length();\n                maxIndex = i;\n            }\n       \
  \ }\n        if (max == 0) {\n            return \"\";\n        } else {\n     \
  \       return words.get(maxIndex);\n        }"
- "        return Collections.max(words,\n                Comparator.comparing(x ->\
  \ x.chars().distinct().count())\n                        .thenComparing(x -> x)\n\
  \        );"
- "        int max = -1;\n        String maxWord = \"\";\n        for (String word\
  \ : words) {\n            String wordChar = String.join(\"\", word.split(\"\"));\n\
  \            Set<String> wordSet = new HashSet<>(Arrays.asList(wordChar.split(\"\
  \")));\n            int unique = wordSet.size();\n            if (unique > max)\
  \ {\n                max = unique;\n                maxWord = word;\n          \
  \  }\n        }\n        return maxWord;"
language: java
name: HumanEval_158_find_max
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts a list of strings.\n    //\
  \ The list contains different words. Return the word with maximum number\n    //\
  \ of unique characters. If multiple strings have maximum number of unique\n    //\
  \ characters, return the one which comes first in lexicographical order.\n    //\
  \ find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\"\
  , \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
  ]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String> words) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
  game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
  abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"\
  footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
