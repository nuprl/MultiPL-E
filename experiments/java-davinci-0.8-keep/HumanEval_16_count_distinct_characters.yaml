completions:
- '        return string.toLowerCase().chars().distinct().count();'
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- "        String lowered = string.toLowerCase();\n        String stripped = String.join(\"\
  \", new HashSet<String>(Arrays.asList(lowered.split(\"\"))));\n        return stripped.length();"
- '        return string.toLowerCase().chars().distinct().count();'
- '        return (int) string.toLowerCase().chars().distinct().count();'
- '        return (int) string.chars().distinct().count();'
- '        throw new UnsupportedOperationException("Method countDistinctCharacters
  has not been implemented yet.");'
- '        return (int) string.toLowerCase().chars().distinct().count();'
- "        // return 0; // TODO: Your code here!\n        String[] strs = string.split(\"\
  \");\n        Set<String> set = new HashSet<String>();\n        for (String str\
  \ : strs) {\n            set.add(str.toLowerCase());\n        }\n        return\
  \ set.size();"
- "        if (string == null)\n            return 0;\n        int count = 0;\n  \
  \      string = string.toLowerCase();\n        Set<Character> set = new HashSet<>();\n\
  \        for (int i = 0; i < string.length(); i++) {\n            if (!set.contains(string.charAt(i)))\
  \ {\n                set.add(string.charAt(i));\n                count++;\n    \
  \        }\n        }\n        return count;"
- "        // We need to use a Set to represent a collection of unique elements\n\
  \        // You need to initialize a new Set object here\n        return 0;"
- "        int len = string.length();\n        if (len == 0) {\n            return\
  \ 0;\n        }\n        HashSet<Character> hs = new HashSet<Character>();\n   \
  \     for (int i = 0; i < len; i++) {\n            char c = string.charAt(i);\n\
  \            hs.add(c);\n        }\n        return hs.size();"
- "        if (string == null) {\n            return 0;\n        }\n\n        HashSet<Character>\
  \ chars = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n\
  \            char charAt = string.charAt(i);\n            chars.add(Character.toLowerCase(charAt));\n\
  \        }\n\n        return chars.size();"
- "        var set = new HashSet<Character>();\n        var chars = string.toCharArray();\n\
  \        for (var c : chars) {\n            set.add(c);\n        }\n        return\
  \ set.size();"
- '        throw new RuntimeException("Not implemented yet");'
- "        Set<Character> characters = new HashSet<>();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            characters.add(string.charAt(i));\n   \
  \     }\n        return characters.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(c);\n        }\n        return set.size();"
- "        //return string.toLowerCase().chars().distinct().count();\n        return\
  \ (int) Stream.of(string.toLowerCase().split(\"\")).distinct().count();"
- "        Set<String> charSet = new HashSet<>();\n        char[] chars = string.toCharArray();\n\
  \        for (char c : chars) {\n            charSet.add(String.valueOf(c).toLowerCase());\n\
  \        }\n        return charSet.size();"
- '        return 0;'
- '        return (int) string.chars().boxed().map(Object::toString).distinct().count();'
- '        return (int)string.toLowerCase().chars().distinct().count();'
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- "        Set<Character> distinctCharacters = new HashSet<>();\n        for (char\
  \ c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n\
  \        return distinctCharacters.size();"
- "        Set<String> hs = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            hs.add(string.substring(i, i + 1));\n        }\n        return\
  \ hs.size();"
- '        return 0;'
- "        HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n \
  \       return set.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            char c = string.charAt(i);\n            if\
  \ (!set.contains(c)) {\n                set.add(c);\n            }\n        }\n\
  \        return set.size();"
- '        return string.chars().map(Character::toLowerCase).distinct().count();'
- "        Set<Character> distinctCharacters = new HashSet<>();\n        for (char\
  \ c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n\
  \        return distinctCharacters.size();"
- "        var set = new HashSet<Character>();\n        for (var c : string.toCharArray())\
  \ {\n            set.add(c);\n        }\n        return set.size();"
- "        char[] distinct = new char[string.length()];\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            if (new String(distinct).contains(Character.toString(string.charAt(i))))\
  \ {\n                continue;\n            }\n            distinct[i] = string.charAt(i);\n\
  \        }\n        return new String(distinct).trim().length();"
- '        return (int) string.chars().map(Character::toLowerCase).distinct().count();'
- '        return (int) string.toLowerCase().chars().distinct().count();'
- "        // TODO: your code here\n        return -1;"
- "        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            charSet.add(c);\n        }\n        return charSet.size();"
- "        return (int) string.chars().map(\n            // convert char to int\n\
  \            // then map int to lower case int\n            c -> Character.toLowerCase(c)\n\
  \        ).distinct().count();"
- '        return 0;'
- '        return (int) string.toLowerCase().chars().distinct().count();'
- '        return string.toLowerCase().chars().distinct().count();'
- '        return 0;'
- '        return (int) string.toLowerCase().chars().distinct().count();'
- '        return (int) string.toLowerCase().chars().distinct().count();'
- "        Set<Character> distinct = new HashSet<>();\n        string.chars().forEach(distinct::add);\n\
  \        return distinct.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char ch : string.toCharArray())\
  \ {\n            set.add(ch);\n        }\n        return set.size();"
- "        Set<Character> chars = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            chars.add(c);\n        }\n        return chars.size();"
- '        return (int) Arrays.stream(string.split("")).distinct().count();'
- "        HashSet<Character> seen = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            seen.add(c);\n        }\n        return seen.size();"
- '        return string.toLowerCase().chars().distinct().count();'
- "        Set<Character> s = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            s.add(c);\n        }\n        return s.size();"
- '        return string.toLowerCase().chars().distinct().count();'
- "        String s = string.toLowerCase();\n        Set<Character> set = new HashSet<>();\n\
  \        for (char c : s.toCharArray()) {\n            set.add(c);\n        }\n\
  \        return set.size();"
- '        return (int) string.chars().distinct().count();'
- '        return 0;'
- "        Set<Character> chars = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            chars.add(string.charAt(i));\n        }\n        return chars.size();"
- "        String[] str = string.split(\"\");\n        int ans = 0;\n        Set<String>\
  \ set = new HashSet<String>();\n        for (int i = 0; i < str.length; i++) {\n\
  \            set.add(str[i]);\n        }\n        return set.size();"
- "        String[] arrOfStr = string.split(\"\", 0);\n        Set<String> distinctString\
  \ = new HashSet<String>(Arrays.asList(arrOfStr));\n        return distinctString.size();"
- "        // TODO: implement me\n        return 0;"
- "        String upper_case = string.toUpperCase();\n        String lower_case =\
  \ string.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (string.charAt(i) != upper_case.charAt(i) && string.charAt(i)\
  \ != lower_case.charAt(i))\n                count++;\n        }\n        return\
  \ count;"
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- "        Set<Character> result = new HashSet<>();\n        for (char ch : string.toCharArray())\
  \ {\n            result.add(Character.toLowerCase(ch));\n        }\n        return\
  \ result.size();"
- '        return (int) string.toLowerCase().chars().distinct().count();'
- "        Set<String> u = new HashSet<String>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            u.add(string.substring(i, i + 1));\n        }\n        return\
  \ u.size();"
- "        // [ ]\n        return 0;"
- '        return string.chars().map(Character::toLowerCase).distinct().count();'
- "        // convert all characters to lower case\n        string = string.toLowerCase();\n\
  \        Set<Character> characters = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            characters.add(c);\n        }\n        return characters.size();"
- '        return (int) string.chars().distinct().count();'
- '        return (int) string.chars().distinct().count();'
- "        int count = 0;\n        Set<Character> set = new HashSet<>();\n       \
  \ for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
  \        }\n        return set.size();"
- "        int len = string.length();\n        int ret = 0;\n        for (int i =\
  \ 0; i < len; i++) {\n            if (i == 0) {\n                ret++;\n      \
  \      } else {\n                boolean found = false;\n                for (int\
  \ j = 0; j < i; j++) {\n                    if (string.charAt(i) == string.charAt(j))\
  \ {\n                        found = true;\n                        break;\n   \
  \                 }\n                }\n                if (!found) {\n        \
  \            ret++;\n                }\n            }\n        }\n        return\
  \ ret;"
- "        if (string == null) {\n            return 0;\n        }\n\n        return\
  \ string.toLowerCase().chars().distinct().count();"
- '        return 0;'
- '        return 0;'
- '        return 1;'
- '        return string.toLowerCase().chars().distinct().count();'
- "        int count = 0;\n        Set<Character> set = new HashSet<>();\n       \
  \ for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
  \            if (!set.contains(c)) {\n                set.add(c);\n            \
  \    count++;\n            }\n        }\n        return count;"
- "        char[] chars = string.toCharArray();\n        HashSet<Character> distinctChars\
  \ = new HashSet<Character>();\n        for (char ch : chars) {\n            distinctChars.add(ch);\n\
  \        }\n        return distinctChars.size();"
- '        return 0;'
- "        int result = 0;\n        // start\n        Set<Character> hm = new HashSet<>();\n\
  \        for (int i = 0; i < string.length(); i++) {\n            hm.add(string.charAt(i));\n\
  \        }\n        result = hm.size();\n        // end\n        return result;"
- '        return string.toLowerCase().chars().distinct().count();'
- '        return string.toLowerCase().chars().distinct().toArray().length;'
- '        throw new RuntimeException("Not implemented");'
- '        return (int)string.chars().distinct().count();'
- "        int x = 1;\n        Set<Character> s = new HashSet<Character>();\n    \
  \    for (char c : string.toCharArray()) {\n            s.add(c);\n        }\n \
  \       return s.size();"
- "        // TODO\n        return 0;"
- '        return -1;'
- '        return 0;'
- "        Set<Character> uniqueSet = new HashSet<>();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            uniqueSet.add(string.charAt(i));\n    \
  \    }\n        return uniqueSet.size();"
- "        int count = 0;\n        Set<Character> mySet = new HashSet<Character>();\n\
  \        for (int i = 0; i < string.length(); i++) {\n            mySet.add(string.charAt(i));\n\
  \        }\n        count = mySet.size();\n        return count;"
- "        //return string.length() - string.replaceAll(\"(?i)\\\\p{L}\", \"\").length();\n\
  \        char[] characters = string.toCharArray();\n        Arrays.sort(characters);\n\
  \        String tmp = new String(characters);\n        return tmp.chars().distinct().count();"
- "        char[] arr = string.toCharArray();\n        HashSet<Character> set = new\
  \ HashSet<>();\n        for (char c : arr) {\n            set.add(c);\n        }\n\
  \        return set.size();"
- "        Set<Character> ans = new HashSet<>();\n        for (char ch : string.toCharArray())\
  \ {\n            ans.add(ch);\n        }\n        return ans.size();"
- '        throw new UnsupportedOperationException("Method not implemented yet");'
- '        return string.chars().distinct().count();'
- '        return (int)string.chars().distinct().count();'
- "        // set the string to lower case\n        string = string.toLowerCase();\n\
  \        int count = 0;\n        boolean[] charSet = new boolean[26];\n        for\
  \ (int i = 0; i < string.length(); i++) {\n            int letter = string.charAt(i)\
  \ - 'a';\n            if (charSet[letter] == false) {\n                charSet[letter]\
  \ = true;\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        HashSet<Character> characters = new HashSet<Character>();\n\
  \        for (int i = 0; i < string.length(); i++) {\n            characters.add(string.charAt(i));\n\
  \        }\n        return characters.size();"
- "        HashSet<Character> set = new HashSet<>();\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n \
  \       return set.size();"
- '        return string.length() - string.toLowerCase().chars().distinct().count();'
- '        return (int) string.chars().map(Character::toLowerCase).distinct().count();'
- '        return string.toLowerCase().chars().distinct().count();'
- '        return -1;'
- "        // >>> YOUR CODE HERE <<<\n        return 0;"
- "        // TODO: Implement me\n        //throw new NotImplementedException();\n\
  \        char[] c = string.toCharArray();\n        HashSet<Character> distinctChar\
  \ = new HashSet<Character>();\n        for(int i = 0; i < c.length; i++){\n    \
  \        distinctChar.add(c[i]);\n        }\n        return distinctChar.size();"
- "        int len = string.length();\n        Set<Character> set = new HashSet<>();\n\
  \        for (int i = 0; i < len; i++) {\n            set.add(string.charAt(i));\n\
  \        }\n        return set.size();"
- '        return string.toLowerCase().chars().distinct().count();'
- '        throw new RuntimeException("Not implemented yet");'
- "        Map<Character, Integer> map = new HashMap<>();\n        for (char ch :\
  \ string.toCharArray()) {\n            ch = Character.toLowerCase(ch);\n       \
  \     map.put(ch, map.getOrDefault(ch, 0) + 1);\n        }\n        return map.size();"
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- '        return new HashSet<Character>(string.toLowerCase().chars().mapToObj(c ->
  (char) c).collect(Collectors.toList())).size();'
- '        return string.toLowerCase().chars().distinct().toArray().length;'
- '        throw new UnsupportedOperationException("Please Implement");'
- '        return 0;'
- '        return 0;'
- '        return Arrays.stream(string.split("")).distinct().count();'
- "        Set<Character> chars = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            chars.add(c);\n  \
  \      }\n        return chars.size();"
- '        return 0;'
- '        return string.toLowerCase().chars().distinct().count();'
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(c);\n        }\n        return set.size();"
- "        int n = string.length();\n        String low = string.toLowerCase();\n\
  \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            char\
  \ c = low.charAt(i);\n            boolean seen = false;\n            for (int j\
  \ = 0; j < i; j++) {\n                if (low.charAt(j) == c) {\n              \
  \      seen = true;\n                    break;\n                }\n           \
  \ }\n            if (!seen) count++;\n        }\n        return count;"
- '        return string.toLowerCase().chars().distinct().count();'
- '        return (int) string.chars().map(x -> Character.toLowerCase(x)).distinct().count();'
- "        // TODO\n        char[] chArray = string.toCharArray();\n        Set<Character>\
  \ set = new HashSet<Character>();\n        for (char x : chArray) {\n          \
  \  set.add(x);\n        }\n        return set.size();"
- '        return (int) string.toLowerCase().chars().distinct().count();'
- '        return (int) Arrays.stream(string.split("")).map(s -> s.toLowerCase()).distinct().count();'
- "        // Write your code here\n        int count = 0;\n        HashSet<Character>\
  \ set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n\
  \            set.add(string.charAt(i));\n        }\n        return set.size();"
- '        return 0;'
- "        // TODO: Implement\n        return 0;"
- "        // Implement this placeholder.\n        return 0;"
- '        throw new RuntimeException("Implement me");'
- "        Set<Character> distinct = new HashSet<>();\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            distinct.add(string.charAt(i));\n       \
  \ }\n        return distinct.size();"
- '        return (int) string.chars().distinct().count();'
- "        // TODO: implement it\n        int[] charArr = new int[string.length()];\n\
  \        int index = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           char temp = string.charAt(i);\n            if (!contains(charArr, index,\
  \ temp)) {\n                charArr[index] = temp;\n                index++;\n \
  \           }\n        }\n        return index;"
- '        return string.chars().distinct().count();'
- "        // your code here\n        String newString = string.toLowerCase();\n \
  \       Set<Character> distinctChars = new HashSet<Character>();\n        for (int\
  \ i = 0; i < newString.length(); i++) {\n            distinctChars.add(newString.charAt(i));\n\
  \        }\n        return distinctChars.size();"
- "        var set = new HashSet<Character>();\n        for (var ch : string.toCharArray())\n\
  \            set.add(ch);\n        return set.size();"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           char c = string.charAt(i);\n            if (!string.substring(0, i).contains(String.valueOf(c)))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        Set<Character> charset = new HashSet<>();\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            charset.add(string.charAt(i));\n        }\n\
  \        return charset.size();"
- "        String[] s = string.split(\"\");\n        Set<String> distinctCharacters\
  \ = new HashSet<>(Arrays.asList(s));\n        int count = distinctCharacters.size();\n\
  \        return count;"
- '        return 0;'
- "        // return 0;\n        return string.toLowerCase().chars().distinct().count();"
- '        return (int) string.chars().distinct().count();'
- '        return string.chars().distinct().count();'
- "        if (string == null)\n            return 0;\n        return (int) string.chars().distinct().count();"
- "        // throw new NotImplementedException();\n        int count = 0;\n     \
  \   char[] ch = string.toCharArray();\n        Set<Character> set = new HashSet<Character>();\n\
  \        for(int i = 0; i < ch.length; i++) {\n            set.add(ch[i]);\n   \
  \     }\n        count = set.size();\n        return count;"
- "        String[] a = string.split(\"\");\n        int c = 0;\n        String n\
  \ = \"\";\n        for (int i = 0; i < a.length; i++) {\n            if (!n.contains(a[i].toLowerCase()))\
  \ {\n                n += a[i].toLowerCase();\n                c++;\n          \
  \  }\n        }\n        return c;"
- '        return (int) Arrays.stream(string.split("")).distinct().count();'
- "        string = string.toLowerCase();\n        int counter = 0;\n        ArrayList<Character>\
  \ unique = new ArrayList<Character>();\n        for (char c : string.toCharArray())\
  \ {\n            if (!unique.contains(c)) {\n                unique.add(c);\n  \
  \              counter++;\n            }\n        }\n        return counter;"
- "        Set<Character> chars = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            chars.add(string.charAt(i));\n        }\n        return chars.size();"
- "        string = string.toLowerCase();\n        Set<Character> distinctCharacters\
  \ = new HashSet<>();\n        for (char c : string.toCharArray()) {\n          \
  \  distinctCharacters.add(c);\n        }\n        return distinctCharacters.size();"
- "        // use a set to keep track of the distinct characters\n        Set<Character>\
  \ distinct = new HashSet<>();\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            distinct.add(string.charAt(i));\n        }\n        return distinct.size();"
- "        HashSet<Character> distinctCharacters = new HashSet<Character>();\n   \
  \     for (char c : string.toCharArray()) {\n            distinctCharacters.add(c);\n\
  \        }\n        return distinctCharacters.size();"
- '        return (int) string.chars().distinct().count();'
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- '        return (int) string.chars().map(i -> Character.toLowerCase(i)).distinct().count();'
- '        return (int) string.toLowerCase().chars().distinct().count();'
- '        return (int) string.chars().distinct().count();'
- '        return 0;'
- "        // fill in the body of this function\n        Set<Character> distinct_chars\
  \ = new HashSet<Character>();\n        for (char c : string.toCharArray()) {\n \
  \           if (Character.isLetter(c)) {\n                distinct_chars.add(Character.toLowerCase(c));\n\
  \            }\n        }\n        return distinct_chars.size();"
- "        char[] charArr = string.toCharArray();\n        Set<Character> charSet\
  \ = new HashSet<Character>();\n        for (int i = 0; i < charArr.length; i++)\
  \ {\n            charSet.add(charArr[i]);\n        }\n        return charSet.size();"
- '        return 0;'
- '        return string.chars().map(Character::toLowerCase).distinct().count();'
- '        return string.toLowerCase().chars().distinct().count();'
- "        // return string.toLowerCase().chars().distinct().count();\n        return\
  \ (int) string.toLowerCase().chars().distinct().count();"
- "        string = string.toLowerCase();\n        return string.codePoints().distinct().toArray().length;"
- "        // Instantiate a set\n        Set<Character> charSet = new HashSet<Character>();\n\
  \        // Convert string to a char array\n        char[] charArray = string.toCharArray();\n\
  \        // Loop over the char array\n        for (char c : charArray) {\n     \
  \       // Add each character to the set\n            charSet.add(c);\n        }\n\
  \        // Return the size of the set\n        return charSet.size();"
- '        return -1;'
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(c);\n        }\n        return set.size();"
- "        Set<Character> distinctChars = new HashSet<>();\n        for (int i = 0;\
  \ i < string.length(); i++) {\n            distinctChars.add(string.charAt(i));\n\
  \        }\n        return distinctChars.size();"
- "        // your code\n        return -1;"
- "        //create two treesets, set1 for lowercase, set2 for uppercase, loop through\
  \ the string and add all the chars to both treesets\n        TreeSet<Character>\
  \ set1 = new TreeSet<Character>();\n        TreeSet<Character> set2 = new TreeSet<Character>();\n\
  \        for(int i = 0; i < string.length(); i++){\n            char c = string.charAt(i);\n\
  \            if(Character.isLowerCase(c)){\n                set1.add(c);\n     \
  \       }\n            else{\n                set2.add(c);\n            }\n    \
  \    }\n        return set1.size() + set2.size();"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        Set<Character> set = new HashSet<>();\n        char[] array\
  \ = string.toCharArray();\n        for (char c : array) {\n            set.add(c);\n\
  \        }\n        return set.size();"
- '        return string.length() - string.toLowerCase().chars().distinct().count();'
- "        // get all characters as a set\n        Set<Character> set = new HashSet<>();\n\
  \        for (int i = 0; i < string.length(); i++) {\n            // each character\
  \ is already distinct so add it to the set\n            set.add(string.charAt(i));\n\
  \        }\n        // return the size of the set\n        return set.size();"
- '        return (int)string.chars().distinct().count();'
- "      Set<Character> set = new HashSet<>();\n      for (char c : string.toCharArray())\
  \ {\n        set.add(c);\n      }\n      return set.size();"
- '        return string.chars().distinct().count();'
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(c);\n        }\n        return set.size();"
- '        throw new RuntimeException("TODO: implement countDistinctCharacters");'
- "        int[] charArray = new int[26];\n        for (int i = 0; i < string.length();\
  \ i++) {\n            int c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                charArray[c - 'A'] = 1;\n            } else {\n           \
  \     charArray[c - 'a'] = 1;\n            }\n        }\n        int count = 0;\n\
  \        for (int i = 0; i < 26; i++) {\n            if (charArray[i] == 1) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        Map<Character, Boolean> char_map = new HashMap<>();\n        for (int i\
  \ = 0; i < string.length(); i++) {\n            char curr_char = string.charAt(i);\n\
  \            if (!char_map.containsKey(curr_char)) {\n                char_map.put(curr_char,\
  \ true);\n            }\n        }\n        return char_map.size();"
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- '        return (int)Arrays.stream(string.split("")).distinct().count();'
- "        int count = 0;\n        Set<Character> set = new HashSet<>();\n       \
  \ for (char ch : string.toCharArray()) {\n            set.add(Character.toLowerCase(ch));\n\
  \        }\n        return set.size();"
- '        return (int) string.chars().map(Character::toLowerCase).distinct().count();'
- "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
  \ {\n            set.add(c);\n        }\n        return set.size();"
- '        return string.length() - string.toLowerCase().chars().distinct().count();'
- '        return 0;'
- "        String lower = string.toLowerCase();\n        HashSet<Character> charSet\
  \ = new HashSet<Character>();\n        for (int i = 0; i < lower.length(); i++)\
  \ {\n            charSet.add(lower.charAt(i));\n        }\n        return charSet.size();"
- "        // Your code goes here\n        int distinct = 0;\n        Set<Character>\
  \ s = new HashSet<Character>();\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            if (s.add(string.charAt(i))) {\n                distinct++;\n \
  \           }\n        }\n        return distinct;"
- '        return 0;'
- '        return Arrays.stream(string.split("")).map(s -> s.toLowerCase()).distinct().toArray().length;'
- "        Set<Character> characters = new HashSet<>();\n        char[] charactersArray\
  \ = string.toCharArray();\n        for (char c : charactersArray) {\n          \
  \  characters.add(c);\n        }\n        return characters.size();"
- '        throw new UnsupportedOperationException("Not implemented yet");'
- "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();"
- '        return 0;'
- '        return string.toLowerCase().chars().distinct().count();'
- '        return (int) string.chars().boxed().map(Character::toLowerCase).distinct().count();'
- "        int[] count = new int[256];\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char ch = string.charAt(i);\n            count[ch]++;\n  \
  \      }\n        int unique = 0;\n        for (int i = 0; i < 256; i++) {\n   \
  \         if (count[i] != 0) {\n                unique++;\n            }\n     \
  \   }\n        return unique;"
language: java
name: HumanEval_16_count_distinct_characters
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
  \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public static\
  \ int countDistinctCharacters(String string) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\
  \")) == (0));\n    assert(countDistinctCharacters((\"abcde\")) == (5));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5));\n\
  \    }\n\n}\n"
