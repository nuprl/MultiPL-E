name: HumanEval_143_words_in_sentence
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String res = \"\";\n\
    \        for (String w : words) {\n            if (isPrime(w.length())) {\n  \
    \              res += w + \" \";\n            }\n        }\n        return res.trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9v5gings.java:27: error: cannot find symbol\n            if (isPrime(w.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += \" \" + word;\n            }\n        }\n     \
    \   return result.trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8qyvuhkb.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        String[] array = sentence.split(\" \"\
    );\n        for (String s : array) {\n            int n = s.length();\n      \
    \      if (isPrime(n)) {\n                result += s + \" \";\n            }\n\
    \        }\n        return result.trim();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8l9bwxv.java:28: error: cannot find symbol\n            if (isPrime(n))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ primes = new ArrayList<>();\n        for (String word : words) {\n         \
    \   if (isPrime(word.length())) {\n                primes.add(word);\n       \
    \     }\n        }\n        return String.join(\" \", primes);\nreturn \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gkcxfv6.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) return \"\";\n      \
    \  String[] words = sentence.split(\" \");\n        String[] filteredWords = new\
    \ String[words.length];\n        int i = 0;\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                filteredWords[i++]\
    \ = word;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int j = 0; j < i; j++) {\n            sb.append(filteredWords[j]);\n\
    \            if (j < i - 1) sb.append(\" \");\n        }\n        return sb.toString();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm76h3i7t.java:29: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        var words = sentence.split(\" \");\n        var builder = new StringBuilder();\n\
    \        for (var word : words) {\n            var wordLength = word.length();\n\
    \            if (isPrime(wordLength)) {\n                builder.append(word);\n\
    \                builder.append(\" \");\n            }\n        }\n        return\
    \ builder.toString().trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp37qb50bz.java:24: error: cannot find symbol\n        var words\
    \ = sentence.split(\" \");\n        ^\n  symbol:   class var\n  location: class\
    \ Problem\n/tmp/tmp37qb50bz.java:25: error: cannot find symbol\n        var builder\
    \ = new StringBuilder();\n        ^\n  symbol:   class var\n  location: class\
    \ Problem\n/tmp/tmp37qb50bz.java:26: error: cannot find symbol\n        for (var\
    \ word : words) {\n             ^\n  symbol:   class var\n  location: class Problem\n\
    /tmp/tmp37qb50bz.java:27: error: cannot find symbol\n            var wordLength\
    \ = word.length();\n            ^\n  symbol:   class var\n  location: class Problem\n\
    4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            int length = word.length();\n\
    \            boolean isPrime = true;\n            for (int i = 2; i < length;\
    \ i++) {\n                if (length % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += word + \" \";\n          \
    \  }\n        }\n        return result.trim();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgkcjdrqb.java:40: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        boolean[] primes = sieve(sentence.length());\n        String[] words\
    \ = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            if (primes[word.length()]) {\n\
    \                sb.append(word);\n                sb.append(\" \");\n       \
    \     }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return\
    \ sb.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa5q7ddmv.java:24: error: cannot find symbol\n        boolean[]\
    \ primes = sieve(sentence.length());\n                           ^\n  symbol:\
    \   method sieve(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n        .filter(s -> new BigInteger(s.length()\
    \ + \"\").isProbablePrime(Integer.MAX_VALUE))\n        .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp43gtfels.java:27: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.isEmpty()) {\n            return \"\"\
    ;\n        }\n        // split sentences into words\n        final String[] words\
    \ = sentence.split(\" \");\n        // check if words are prime\n        return\
    \ Arrays.stream(words)\n            .filter(w -> isPrime(w.length()))\n      \
    \      .collect(Collectors.joining(\" \"));\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7i3y7svv.java:31: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // use the string split function to parse the string\n        String[]\
    \ words = sentence.split(\" \");\n        StringBuilder builder = new StringBuilder();\n\
    \        // iterate through the words and check if they are prime numbers\n  \
    \      for (String word : words) {\n            // if the length of the word is\
    \ a prime number then add it to the string builder\n            if (isPrime(word.length()))\
    \ {\n                builder.append(word);\n                builder.append(\"\
    \ \");\n            }\n        }\n        // remove the trailing space\n     \
    \   return builder.toString().trim();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp57gcr85w.java:30: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<Integer> lens =\
    \ new ArrayList<>();\n        List<String> results = new ArrayList<>();\n    \
    \    for (String w : words) {\n            if (isPrime(w.length())) {\n      \
    \          results.add(w);\n            }\n        }\n        return String.join(\"\
    \ \", results);\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7b98eil_.java:28: error: cannot find symbol\n            if (isPrime(w.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ primes = words.stream().filter(word -> isPrime(word.length())).collect(Collectors.toList());\n\
    \        return String.join(\" \", primes);\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8k5bw8ni.java:25: error: cannot find symbol\n        List<String>\
    \ primes = words.stream().filter(word -> isPrime(word.length())).collect(Collectors.toList());\n\
    \                                                            ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // TODO: implement this function.\n        return null;\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3kda3mbx.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // ......\n        throw new UnsupportedOperationException(\"Not implemented\
    \ yet!\");\nreturn \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp88sadsrp.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (word.length() ==\
    \ 1) continue;\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp508zbqfr.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        return\
    \ words.stream()\n            .filter(w -> isPrime(w.length()))\n            .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdgge142p.java:26: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ if (isPrime(word.length())) {\n                sb.append(word);\n          \
    \      sb.append(\" \");\n            }\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpli6q2_qk.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        String[] words = sentence.split(\" \"\
    );\n        for (String word : words) {\n            if (primeLength(word)) {\n\
    \                result += word + \" \";\n            }\n        }\n        return\
    \ result.trim();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp31odl4dm.java:27: error: cannot find symbol\n            if (primeLength(word))\
    \ {\n                ^\n  symbol:   method primeLength(String)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps5_9i4m1.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(word\
    \ -> isPrime(word.length()))\n            .collect(Collectors.joining(\" \"));\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp67vwa7d_.java:25: error: cannot find symbol\n            .filter(word\
    \ -> isPrime(word.length()))\n                            ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuffer result = new StringBuffer();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            boolean isPrime = true;\n            for (int i = 2; i < len; i++)\
    \ {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result.append(word);\n                result.append(\"\
    \ \");\n            }\n        }\n        return result.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6d2k1sn9.java:41: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // note that there's also a shortcut method to find prime numbers,\n\
    \        // which is called the Sieve of Eratosthenes, which calculates all the\
    \ prime numbers\n        // between 1 and n in O(nloglogn) time, so it's faster\
    \ than the prime number test\n        // in this example\n        StringBuilder\
    \ result = new StringBuilder();\n        // another way to do it would be to just\
    \ use the split function,\n        // but i wanna show you how a simple loop can\
    \ also do the same thing\n        // note that sb's value starts with an empty\
    \ string, and if we add\n        // a space at the end it'll look like this \"\
    \ \", which we want to avoid\n        // (unless the result is an empty string)\n\
    \        // so we'll just add a space at the beginning\n        result.append(\"\
    \ \");\n        // to avoid adding more than one space to the string, we can set\
    \ the\n        // value of this boolean to true right before we append a space,\n\
    \        // and the next time we're going to append a space, we'll check this\
    \ boolean\n        // and if it's true, we'll skip adding the space, since it's\
    \ already there\n        boolean lastCharWasSpace = false;\n        for (int i\
    \ = 0; i < sentence.length(); i++) {\n            char c = sentence.charAt(i);\n\
    \            if (c == ' ') {\n                // if the last character we added\
    \ was a space\n                // we just skip this character\n              \
    \  if (lastCharWasSpace) continue;\n                // if the last character we\
    \ added wasn't a space\n                // we can just set lastCharWasSpace to\
    \ true,\n                // and don't forget to add the space to the string\n\
    \                lastCharWasSpace = true;\n                result.append(\" \"\
    );\n            } else {\n                // if it's not a space, we can just\
    \ set lastCharWasSpace to false\n                lastCharWasSpace = false;\n \
    \               // and append the character to the string\n                result.append(c);\n\
    \            }\n        }\n        // now we just have to check if the last character\
    \ is a space,\n        // and if it is, we just remove it\n        int len = result.length();\n\
    \        if (result.charAt(len - 1) == '\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprx867pou.java:62: error: illegal line end in character literal\n\
    \        if (result.charAt(len - 1) == '\n                                   \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(w ->\
    \ isPrime(w.length()))\n            .collect(Collectors.joining(\" \"));\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjx8m7bxb.java:25: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        String[] words = sentence.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \                sb.append(\" \");\n            }\n        }\n        if (sb.length()\
    \ == 0) {\n            return \"\";\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiperyq_g.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String w : words) {\n            if (isPrime(w.length()))\
    \ {\n                sb.append(w);\n                sb.append(\" \");\n      \
    \      }\n        }\n        return sb.toString().trim();\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcyefl08r.java:27: error: cannot find symbol\n            if (isPrime(w.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdwdg1if8.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // split the sentence into words\n        // make a list of the words\n\
    \        // make a list of the prime numbers\n        // make a new list of the\
    \ words that have a length that is a prime number\n        // make a string of\
    \ the new list\n        return null;\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlas5ijk.java:30: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        // build a list of words\
    \ whose lengths are prime numbers\n        List<String> list = new ArrayList<>();\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                list.add(word);\n            }\n        }\n        // return\
    \ a string contains the words from the original sentence,\n        // whose lengths\
    \ are prime numbers,\n        // the order of the words in the new string should\
    \ be the same as the original one.\n        String result = \"\";\n        for\
    \ (String word : words) {\n            if (list.contains(word)) {\n          \
    \      result += word + \" \";\n            }\n        }\n        return result.trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeeyjmgyg.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // return sentence.split(\" \").stream().filter(w -> BigInteger.valueOf(w.length()).isProbablePrime(1000)).collect(Collectors.joining(\"\
    \ \"));\n        return sentence.split(\" \").stream().filter(w -> isPrime(w.length())).collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7n6k8q4e.java:25: error: cannot find symbol\n        return sentence.split(\"\
    \ \").stream().filter(w -> isPrime(w.length())).collect(Collectors.joining(\"\
    \ \"));\n                                  ^\n  symbol:   method stream()\n  location:\
    \ class String[]\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Use a java.util.List to store the words that have prime length,\n\
    \        // because you need to preserve the order of the words in the original\
    \ sentence.\n        // Use a java.util.ArrayList because this class provides\
    \ random access,\n        // which is much faster than the linked list implementation.\n\
    \        // Use java.util.Arrays.asList(String[]) to create a List of String objects.\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  if (isPrime(word.length())) {\n                result.add(word);\n        \
    \    }\n        }\n        // Use a string builder to construct the result string,\n\
    \        // and use StringBuilder.append(String) to append each word, followed\
    \ by a space character.\n        // Use StringBuilder.setLength(int) to remove\
    \ the last space character.\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String s : result) {\n            sb.append(s).append(\" \");\n\
    \        }\n        sb.setLength(sb.length() - 1);\n        return sb.toString();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxp24j5cj.java:32: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        boolean[] prime = new boolean[32];\n        Arrays.fill(prime, true);\n\
    \        prime[0] = prime[1] = false;\n        for (int i = 2; i * i < prime.length;\
    \ i++) {\n            if (prime[i]) {\n                for (int j = i + i; j <\
    \ prime.length; j += i) {\n                    prime[j] = false;\n           \
    \     }\n            }\n        }\n        String[] words = sentence.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (prime[word.length()]) {\n                sb.append(word);\n\
    \                sb.append(\" \");\n            }\n        }\n        if (sb.length()\
    \ > 0) {\n            sb.deleteCharAt(sb.length() - 1);\n        }\n        return\
    \ sb.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwulgqvea.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.substring(0, result.length() - 1);\nreturn \"\";\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mmhw14z.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word).append(\" \");\n            }\n        }\n\
    \        return sb.toString().trim();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptljoibu5.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] w = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < w.length; i++) {\n            String s = w[i];\n\
    \            int len = s.length();\n            boolean isPrime = true;\n    \
    \        for (int j = 2; j < len; j++) {\n                if (len % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                sb.append(s);\n\
    \                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjycmd_03.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(word\
    \ -> isPrime(word.length()))\n            .collect(Collectors.joining(\" \"));\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp43x80hf7.java:25: error: cannot find symbol\n            .filter(word\
    \ -> isPrime(word.length()))\n                            ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        String[] words = sentence.split(\" \"\
    );\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length > 1 && length % 2 == 1) {\n                int limit =\
    \ (int) Math.sqrt(length);\n                boolean isPrime = true;\n        \
    \        for (int i = 3; i <= limit; i += 2) {\n                    if (length\
    \ % i == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    result += word + \" \";\n                }\n        \
    \    }\n        }\n        if (result.length() > 0) {\n            result = result.substring(0,\
    \ result.length() - 1);\n        }\n        return result;\nreturn \"\";\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4gys9z9.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word).append(\" \");\n            }\n        }\n\
    \        return sb.toString().trim();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiyy9z3lz.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n                     .filter(Problem::isPrime)\n\
    \                     .collect(Collectors.joining(\" \"));\nreturn \"\";\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfbgert_9.java:25: error: invalid method reference\n           \
    \          .filter(Problem::isPrime)\n                             ^\n  cannot\
    \ find symbol\n    symbol:   method isPrime()\n    location: class Problem\n1\
    \ error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String w : words) {\n            if (isPrime(w.length()))\
    \ {\n                sb.append(w);\n                sb.append(\" \");\n      \
    \      }\n        }\n        if (sb.length() > 0) {\n            sb.deleteCharAt(sb.length()\
    \ - 1);\n        }\n        return sb.toString();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfciwbsya.java:27: error: cannot find symbol\n            if (isPrime(w.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> listOfWords = Arrays.asList(sentence.split(\" \"));\n  \
    \      List<String> primeWords = new ArrayList<>();\n        String delimiter\
    \ = \"\";\n        StringBuilder ret = new StringBuilder();\n        for (String\
    \ word : listOfWords) {\n            if (word.length() > 1 && isPrime(word.length()))\
    \ {\n                primeWords.add(word);\n            }\n        }\n       \
    \ for (String word : primeWords) {\n            ret.append(delimiter).append(word);\n\
    \            delimiter = \" \";\n        }\n        return ret.toString();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqj94wjbk.java:29: error: cannot find symbol\n            if (word.length()\
    \ > 1 && isPrime(word.length())) {\n                                     ^\n \
    \ symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        return sb.length() == 0 ? \"\" : sb.substring(0,\
    \ sb.length() - 1);\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf94g3usw.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        var words = sentence.split(\" \");\n        var builder = new StringBuilder();\n\
    \        for (var word : words) {\n            if (isPrime(word.length())) {\n\
    \                builder.append(word);\n                builder.append(\" \");\n\
    \            }\n        }\n        return builder.toString().trim();\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ukctyd1.java:24: error: cannot find symbol\n        var words\
    \ = sentence.split(\" \");\n        ^\n  symbol:   class var\n  location: class\
    \ Problem\n/tmp/tmp0ukctyd1.java:25: error: cannot find symbol\n        var builder\
    \ = new StringBuilder();\n        ^\n  symbol:   class var\n  location: class\
    \ Problem\n/tmp/tmp0ukctyd1.java:26: error: cannot find symbol\n        for (var\
    \ word : words) {\n             ^\n  symbol:   class var\n  location: class Problem\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> ans = new\
    \ ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                ans.add(word);\n            }\n        }\n        return\
    \ String.join(\" \", ans);\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpipe1dgq1.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.isEmpty()) return \"\";\n        String[]\
    \ words = sentence.split(\" \");\n        String res = \"\";\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ res += word + \" \";\n            }\n        }\n        return res.trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8br6uove.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder solution = new StringBuilder();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                solution.append(word + \" \");\n\
    \            }\n        }\n        return solution.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8z012f_o.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return (sentence.replaceAll(\"\\\\w+\", \"$0 \").trim().replaceAll(\"\
    (\\\\w+)(.*)(?=\\\\s\\\\1)\", \"\")).trim();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9tsbw3j.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        boolean[] isPrime = getPrimes(20);\n        return Stream.of(sentence.split(\"\
    \ \"))\n                .filter(s -> isPrime[s.length()])\n                .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4y4c3n0g.java:24: error: cannot find symbol\n        boolean[]\
    \ isPrime = getPrimes(20);\n                            ^\n  symbol:   method\
    \ getPrimes(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ newWords = new ArrayList<>();\n        for (String word : words) {\n       \
    \     if (isPrime(word.length())) {\n                newWords.add(word);\n   \
    \         }\n        }\n        return String.join(\" \", newWords);\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpra437zpf.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : sentence.split(\"\
    \ \")) {\n            if (word.length() > 1 && isPrime(word.length())) {\n   \
    \             sb.append(word).append(\" \");\n            }\n        }\n     \
    \   return sb.toString().trim();\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3byaplg.java:26: error: cannot find symbol\n            if (word.length()\
    \ > 1 && isPrime(word.length())) {\n                                     ^\n \
    \ symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n        return null;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptsn03rna.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ result.add(word);\n        }\n        return String.join(\" \", result);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmproxd3bj3.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ result.add(word);\n                ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Assume there are exactly 100 words in the sentence\n        // Assume\
    \ there are no empty strings in the sentence\n        // Assume the sentence can\
    \ contain 100 characters\n        // Assume the sentence can contain ' '\n   \
    \     // Assume the sentence contains only letters\n        // Assume the sentence\
    \ contains at least 1 word\n        // Assume the sentence contains at least 1\
    \ prime length word\n        // Assume the sentence contains no words that are\
    \ less than 1 character long\n        // Assume the sentence contains no words\
    \ that are greater than 100 characters long\n        // Assume the sentence contains\
    \ no words that contain non-letters\n        // Assume no input is always an empty\
    \ string\n        // Assume the sentence is always lowercase\n        // Assume\
    \ the sentence contains no special characters\n        // Assume the sentence\
    \ does not contain adjacent spaces\n        // Assume the sentence does not contain\
    \ leading or trailing spaces\n        // Assume the sentence does not contain\
    \ a string that only contains ' '\n        // Assume the sentence does not contain\
    \ a word that can have a space on both sides\n        // Assume the sentence does\
    \ not contain ' ' at the beginning\n        // Assume the sentence does not contain\
    \ ' ' at the end\n        // Assume the sentence contains no non-letters except\
    \ ' '\n        // Assume the sentence contains at least 1 word\n        // Assume\
    \ the sentence contains at least 1 prime length word\n        // Assume the sentence\
    \ contains no words that are less than 1 character long\n        // Assume the\
    \ sentence contains no words that are greater than 100 characters long\n     \
    \   // Assume the sentence contains no words that contain non-letters\n      \
    \  // Assume there are not 2 or more words with the same length\n        // Assume\
    \ there are not 2 or more words with the same length\n        // Assume there\
    \ are not 2 or more words with the same length\n        // Assume there are not\
    \ 2 or more words with the same length\n        // Assume there are not 2 or more\
    \ words with the same length\n        // Assume there are not 2 or more words\
    \ with the same length\n        // Assume there are not 2 or more words with the\
    \ same length\n        // Assume there are not 2 or more words with the same length\n\
    \        // Assume there are not 2 or more words with the same length\n      \
    \  // Assume there are not 2 or more words with the same length\n       \nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55hqd540.java:63)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<Integer> primes = new ArrayList<>();\n        primes.add(2);\n\
    \        for (int i = 3; i < 100; i += 2) {\n            boolean div = false;\n\
    \            for (int j = 0; j < primes.size(); j++) {\n                if (i\
    \ % primes.get(j) == 0) {\n                    div = true;\n                 \
    \   break;\n                }\n            }\n            if (!div) {\n      \
    \          primes.add(i);\n            }\n        }\n        ArrayList<String>\
    \ newSentence = new ArrayList<>();\n        for (String word : sentence.split(\"\
    \ \")) {\n            if (primes.contains(word.length())) {\n                newSentence.add(word);\n\
    \            }\n        }\n        return String.join(\" \", newSentence);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpso9q0ask.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (word.length()\
    \ == 1) {\n                continue;\n            }\n            if (word.length()\
    \ == 2) {\n                result.add(word);\n                continue;\n    \
    \        }\n            boolean isPrime = true;\n            for (int i = 2; i\
    \ < word.length(); i++) {\n                if (word.length() % i == 0) {\n   \
    \                 isPrime = false;\n                    break;\n             \
    \   }\n            }\n            if (isPrime) {\n                result.add(word);\n\
    \            }\n        }\n        return String.join(\" \", result);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx10liby6.java:46: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n            .filter(w -> isPrime(w.length()))\n\
    \            .collect(Collectors.joining(\" \"));\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2zx9k7xd.java:25: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo183pxkh.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        boolean[] isNotPrime = new boolean[100];\n   \
    \     int x = 2;\n        while (x < 100) {\n            if (!isNotPrime[x]) {\n\
    \                primes.add(x);\n                for (int j = x; j < 100; j +=\
    \ x) {\n                    isNotPrime[j] = true;\n                }\n       \
    \     }\n            x++;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            if (primes.contains(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        return sb.toString().trim();\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkrndnoao.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ primes = new ArrayList<>();\n        List<Integer> lengths = new ArrayList<>();\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                primes.add(word);\n                lengths.add(word.length());\n\
    \            }\n        }\n        int sum = lengths.stream().mapToInt(i -> i).sum();\n\
    \        if (isPrime(sum)) {\n            return String.join(\" \", primes);\n\
    \        }\n        return \"\";\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0kf249pm.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    /tmp/tmp0kf249pm.java:34: error: cannot find symbol\n        if (isPrime(sum))\
    \ {\n            ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.isEmpty()) {\n            return \"\"\
    ;\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (String word : words) {\n      \
    \      if (word.length() == 1) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 2) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 3) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 5) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 7) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 11) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 13) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 17) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 19) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 23) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 29) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 31) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 37) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 41) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 43) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 47) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 53) {\n                builder.append(word).append(\"\
    \ \");\n            } else if (word.length() == 59) {\n                builder\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4u4zsfu3.java:65: error: not a statement\n                builder\n\
    \                ^\n/tmp/tmp4u4zsfu3.java:65: error: ';' expected\n          \
    \      builder\n                       ^\n/tmp/tmp4u4zsfu3.java:68: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp4u4zsfu3.java:68:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp4u4zsfu3.java:68: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp4u4zsfu3.java:68: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp4u4zsfu3.java:68: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp4u4zsfu3.java:78: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // if you want to know the solution I used, remove the comment below\
    \ to see how I implemented the solution\n        // the solution below is just\
    \ a dummy solution that returns \"\".\n        // return \"\";\n        StringBuilder\
    \ result = new StringBuilder();\n        StringTokenizer tokenizer = new StringTokenizer(sentence);\n\
    \        for (int i = 0; i < tokenizer.countTokens(); i++) {\n            String\
    \ word = tokenizer.nextToken();\n            if (isPrime(word.length())) {\n \
    \               result.append(word + \" \");\n            }\n        }\n     \
    \   return result.toString().trim();\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphhzrp7k0.java:31: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int[] isPrime = new int[101];\n        for (int i = 2; i < isPrime.length;\
    \ i++) {\n            isPrime[i] = 1;\n        }\n        for (int i = 2; i <\
    \ isPrime.length; i++) {\n            if (isPrime[i] == 1) {\n               \
    \ for (int j = i * 2; j < isPrime.length; j += i) {\n                    isPrime[j]\
    \ = 0;\n                }\n            }\n        }\n        String[] words =\
    \ sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n  \
    \      for (String word : words) {\n            if (isPrime[word.length()] ==\
    \ 1) {\n                sb.append(word);\n                sb.append(\" \");\n\
    \            }\n        }\n        return sb.toString().trim();\nreturn \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzlw8xb5e.java:44: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        for (String word :\
    \ sentence.split(\" \")) {\n            if (isPrime(word.length())) {\n      \
    \          result.add(word);\n            }\n        }\n        return String.join(\"\
    \ \", result);\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsz2_najg.java:26: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            boolean isPrime = true;\n            for (int i = 2; i < len; i++)\
    \ {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                sb.append(word);\n                sb.append(\"\
    \ \");\n            }\n        }\n        return sb.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1pyk3p3n.java:41: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8s3fse3r.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (isPrime(length)) {\n                sb.append(word);\n      \
    \          sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpajr561t0.java:28: error: cannot find symbol\n            if (isPrime(length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n                     .filter(s\
    \ -> isPrime(s.length()))\n                     .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplh8yhdav.java:25: error: cannot find symbol\n                 \
    \    .filter(s -> isPrime(s.length()))\n                                  ^\n\
    \  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word + \" \");\n \
    \           }\n        }\n        return result.length() == 0 ? result.toString()\
    \ : result.substring(0, result.length() - 1);\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpad18cyhk.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        final String[] words = sentence.split(\" \");\n        final List<String>\
    \ matches = new ArrayList<>();\n        for (String word : words) {\n        \
    \    if (word.length() == 1) {\n                matches.add(word);\n         \
    \   } else {\n                final int lastIndex = word.length() - 1;\n     \
    \           final char lastCharacter = word.charAt(lastIndex);\n             \
    \   final String integerString = word.substring(0, lastIndex);\n             \
    \   final BigInteger number = new BigInteger(integerString);\n               \
    \ if (new BigInteger(String.valueOf(lastCharacter)).mod(new BigInteger(\"2\")).equals(BigInteger.ZERO))\
    \ {\n                    continue;\n                }\n                if (number.mod(new\
    \ BigInteger(\"2\")).equals(BigInteger.ZERO)) {\n                    continue;\n\
    \                }\n                for (BigInteger i = new BigInteger(\"3\");\
    \ i.compareTo(number.divide(new BigInteger(\"2\"))) <= 0; i = i.add(new BigInteger(\"\
    2\"))) {\n                    if (number.mod(i).equals(BigInteger.ZERO)) {\n \
    \                       break;\n                    }\n                    if\
    \ (i.compareTo(number.divide(new BigInteger(\"2\"))) == 0) {\n               \
    \         matches.add(word);\n                    }\n                }\n     \
    \       }\n        }\n        return String.join(\" \", matches);\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpikrobf3u.java:51: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        if (words.length ==\
    \ 0) return \"\";\n        StringBuilder result = new StringBuilder();\n     \
    \   for (String word : words) {\n            if (isPrime(word.length())) {\n \
    \               result.append(word + \" \");\n            }\n        }\n     \
    \   return result.toString().trim();\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5jx8aom.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) return \"\";\n      \
    \  String[] a = sentence.split(\" \");\n        List<String> r = new ArrayList<>();\n\
    \        for (String w : a) {\n            if (isPrime(w.length())) {\n      \
    \          r.add(w);\n            }\n        }\n        return String.join(\"\
    \ \", r);\nreturn \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph65sl89y.java:28: error: cannot find symbol\n            if (isPrime(w.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word).append(\" \");\n            }\n        }\n\
    \        return sb.toString().trim();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdt5pcnz3.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder result = new StringBuilder();\n        String[] words =\
    \ sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() > 1 && isPrime(word.length())) {\n                result.append(word).append(\"\
    \ \");\n            }\n        }\n        return result.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcxvr_50q.java:27: error: cannot find symbol\n            if (word.length()\
    \ > 1 && isPrime(word.length())) {\n                                     ^\n \
    \ symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Stream.of(sentence.split(\" \")).collect(Collectors.toList());\n\
    \        List<String> newWords = new ArrayList<>();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                newWords.add(word);\n\
    \            }\n        }\n        return String.join(\" \", newWords);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0stmywme.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Note that there are only 26 letters in the English alphabet\n    \
    \    boolean[] notPrime = new boolean[26];\n        notPrime[1] = true;\n    \
    \    for (int i = 2; i < notPrime.length; i++) {\n            if (!notPrime[i])\
    \ {\n                int j = i + i;\n                while (j < notPrime.length)\
    \ {\n                    notPrime[j] = true;\n                    j += i;\n  \
    \              }\n            }\n        }\n        List<String> result = new\
    \ ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n      \
    \      if (!notPrime[word.length()]) {\n                result.add(word);\n  \
    \          }\n        }\n        return String.join(\" \", result);\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgs2oedi9.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] a = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String s : a) {\n            if (isPrime(s.length())) {\n      \
    \          sb.append(s + \" \");\n            }\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnxwpf_ny.java:27: error: cannot find symbol\n            if (isPrime(s.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) {\n            return\
    \ \"\";\n        }\n        StringBuilder builder = new StringBuilder();\n   \
    \     String[] words = sentence.split(\" \");\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                builder.append(word).append(\"\
    \ \");\n            }\n        }\n        if (builder.length() == 0) {\n     \
    \       return \"\";\n        }\n        return builder.substring(0, builder.length()\
    \ - 1);\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8slbouol.java:30: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (word.length()\
    \ == 1) continue;\n            if (isPrime(word.length())) {\n               \
    \ sb.append(word + \" \");\n            }\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbsn47xgt.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder builder = new StringBuilder();\n        StringTokenizer\
    \ tokenizer = new StringTokenizer(sentence);\n        while (tokenizer.hasMoreTokens())\
    \ {\n            String word = tokenizer.nextToken();\n            if (isPrime(word.length()))\
    \ {\n                builder.append(word).append(\" \");\n            }\n    \
    \    }\n        return builder.toString().trim();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3cn75xfh.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your solution goes here.\n        return \"\";\nreturn \"\";\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmq2dkufx.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Stream.of(sentence.split(\" \")).collect(Collectors.toList());\n\
    \        return words.stream().filter(w -> isPrime(w.length())).collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeav3gpuj.java:25: error: cannot find symbol\n        return words.stream().filter(w\
    \ -> isPrime(w.length())).collect(Collectors.joining(\" \"));\n              \
    \                            ^\n  symbol:   method isPrime(int)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> wordList\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  if (primeWords(word)) {\n                wordList.add(word);\n            }\n\
    \        }\n        return String.join(\" \", wordList);\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe9lg6yh4.java:27: error: cannot find symbol\n            if (primeWords(word))\
    \ {\n                ^\n  symbol:   method primeWords(String)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length()))\n                result.append(word).append(\" \");\n\
    \        }\n        return result.toString().trim();\nreturn \"\";\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7w7fr0js.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\n\
    \                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<Integer> primes = Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n        String[]\
    \ words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        for (String word : words) {\n            if (primes.contains(word.length()))\
    \ {\n                result.append(word);\n                result.append(\" \"\
    );\n            }\n        }\n        return result.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlxmehm0.java:34: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word + \" \");\n \
    \           }\n        }\n        return result.toString().trim();\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkpaer3ls.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n        return null;\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7t_goym8.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   if (result.equals(\"\")) return \"\";\n        return result.substring(0,\
    \ result.length() - 1);\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwxup53dq.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // All prime numbers are of the form 6k +/- 1, with the exception of\
    \ 2 and 3.\n        // This is because all integers can be expressed as (6k +\
    \ i) for some integer k and for i = -1, 0, 1, 2, 3, or 4;\n        // 2 divides\
    \ (6k + 0), (6k + 2), (6k + 4); and 3 divides (6k + 3).\n        // So a more\
    \ efficient method is to test if n is divisible by 2 or 3, then to check through\
    \ all the numbers of form 6k +/- 1.\n        // If n is not divisible by 2 or\
    \ 3, then all the factors of n must be of the form 6k +/- 1.\n        // A more\
    \ efficient approach is to test if n is divisible by 2 or 3, then to check through\
    \ all the numbers of form 6k +/- 1.\n        // If n is not divisible by 2 or\
    \ 3, then all the factors of n must be of the form 6k +/- 1.\n        // The algorithm\
    \ can be improved further by observing that all primes are of the form 6k - 1\
    \ or 6k + 1 for some integer k.\n        // Hence, a more efficient method is\
    \ to test if n is divisible by 2 or 3, then to check through all the numbers of\
    \ form 6k \xB1 1.\n        // (Source: https://en.wikipedia.org/wiki/Primality_test)\n\
    \        // I guess that we can assume that only numbers divisible by 6 +/- 1\
    \ can be primes\n        // so we can just check if the number is prime,\n   \
    \     // If it is return true,\n        // if not return false.\n        // isPrime(int)\
    \ will return true if n is prime,\n        // and false if n is not prime.\n \
    \       // The algorithm can be improved further by observing that all primes\
    \ are of the form 6k - 1 or 6k + 1 for some integer k.\n        // Hence, a more\
    \ efficient method is to test if n is divisible by 2 or 3, then to check through\
    \ all the numbers of form 6k \xB1 1.\n        // (Source: https://en.wikipedia.org/wiki/Primality_test)\n\
    \        String[] words = sentence.split(\" \");\n        String output = \"\"\
    ;\n        for (String word : words)\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp37pl1fs7.java:47: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ primeWords = new ArrayList<>();\n        for (String word : words) {\n     \
    \       if (isPrime(word.length())) {\n                primeWords.add(word);\n\
    \            }\n        }\n        return String.join(\" \", primeWords);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplp2oe47a.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzy3q4xs0.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String res = \"\";\n\
    \        for (String word : words) {\n            if (word.length() > 1 && isPrime(word.length()))\
    \ {\n                res += word + \" \";\n            }\n        }\n        if\
    \ (res.length() > 0) {\n            res = res.substring(0, res.length() - 1);\n\
    \        }\n        return res;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxwyh0sbo.java:27: error: cannot find symbol\n            if (word.length()\
    \ > 1 && isPrime(word.length())) {\n                                     ^\n \
    \ symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptgxaq3fv.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // * 1 <= len(sentence) <= 100\n        // * sentence contains only letters\n\
    \        // \"This is a test\"\n        //\n        // \"This\" -> 4\n       \
    \ // \"is\" -> 2\n        // \"a\" -> 1\n        // \"test\" -> 4\n        //\n\
    \        // \"is\" -> 2\n        //\n        // \"lets go for swimming\"\n   \
    \     //\n        // \"lets\" -> 4\n        // \"go\" -> 2\n        // \"for\"\
    \ -> 3\n        // \"swimming\" -> 8\n        //\n        // \"go for\" -> 2 3\n\
    \        if (sentence == null || sentence.isEmpty()) {\n            return \"\"\
    ;\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ if (isPrime(word.length())) {\n                sb.append(word).append(\" \"\
    );\n            }\n        }\n        return sb.toString().trim();\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplfso268l.java:49: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Implement your solution here\n        String[] words = sentence.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjd_9al0.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int prime[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101};\n        //Set<Integer> set =\
    \ new HashSet<>(Arrays.asList(primes));\n        List<String> words = Arrays.asList(sentence.split(\"\
    \ \"));\n        List<String> result = new ArrayList<>();\n        for (String\
    \ word : words) {\n            int len = word.length();\n            if (Arrays.binarySearch(prime,\
    \ len) >= 0) {\n                result.add(word);\n            }\n        }\n\
    \        return String.join(\" \", result);\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo_2n723t.java:35: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> wordsWithPrimeLength\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                wordsWithPrimeLength.add(word);\n            }\n        }\n\
    \        return String.join(\" \", wordsWithPrimeLength);\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpssv_pa3w.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String[] words_primes\
    \ = new String[words.length];\n        int words_primes_size = 0;\n        for\
    \ (int i = 0; i < words.length; i++) {\n            if (Util.isPrime(words[i].length()))\
    \ {\n                words_primes[words_primes_size] = words[i];\n           \
    \     words_primes_size++;\n            }\n        }\n        String result =\
    \ \"\";\n        for (int i = 0; i < words_primes_size; i++) {\n            result\
    \ += words_primes[i];\n            if (i < words_primes_size - 1) {\n        \
    \        result += \" \";\n            }\n        }\n        return result;\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ipktm14.java:28: error: cannot find symbol\n            if (Util.isPrime(words[i].length()))\
    \ {\n                ^\n  symbol:   variable Util\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return\
    \ sb.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x48sacw.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return \n            Arrays.stream(sentence.split(\" \"))\n         \
    \       .filter(s -> isPrime(s.length()))\n                .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrcrm2o8.java:26: error: cannot find symbol\n                .filter(s\
    \ -> isPrime(s.length()))\n                             ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return\
    \ sb.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_dfw6ey.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Stream.of(sentence.split(\" \")).collect(Collectors.toList());\n\
    \        String ans = \"\";\n        for (String word : words) {\n           \
    \ if (isPrime(word.length())) {\n                ans += word + \" \";\n      \
    \      }\n        }\n        return ans.trim();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfocr2huu.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n        .filter(s -> isPrime(s.length()))\n\
    \        .collect(Collectors.joining(\" \"));\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbnd39k0.java:25: error: cannot find symbol\n        .filter(s\
    \ -> isPrime(s.length()))\n                     ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here.\n        String[] words = sentence.split(\"\
    \ \");\n        ArrayList<String> primes = new ArrayList<String>();\n        for\
    \ (String word : words) {\n            int wLen = word.length();\n           \
    \ if (isPrime(wLen)) {\n                primes.add(word);\n            }\n   \
    \     }\n        return String.join(\" \", primes);\nreturn \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1juxt93g.java:29: error: cannot find symbol\n            if (isPrime(wLen))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n                .filter(x ->\
    \ isPrime(x.length()))\n                .collect(Collectors.joining(\" \"));\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_zr09v75.java:25: error: cannot find symbol\n                .filter(x\
    \ -> isPrime(x.length()))\n                             ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        String result = sb.toString();\n        return\
    \ result.trim();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9bhaw65.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        String[] words = sentence.split(\" \"\
    );\n        ArrayList<Integer> primeNumbers = new ArrayList<Integer>();\n    \
    \    for (int i = 2; i < 16; i++) {\n            boolean isPrime = true;\n   \
    \         for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n \
    \                   isPrime = false;\n                    break;\n           \
    \     }\n            }\n            if (isPrime) {\n                primeNumbers.add(i);\n\
    \            }\n        }\n        for (int i = 0; i < words.length; i++) {\n\
    \            for (int j = 0; j < primeNumbers.size(); j++) {\n               \
    \ if (words[i].length() == primeNumbers.get(j)) {\n                    result\
    \ += words[i] + \" \";\n                }\n            }\n        }\n        return\
    \ result.trim();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpskb63qh3.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ result = new ArrayList<>();\n        for (String word : words) {\n         \
    \   if (Problem.isPrime(word.length())) {\n                result.add(word);\n\
    \            }\n        }\n        return String.join(\" \", result);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpktgd2u3r.java:27: error: cannot find symbol\n            if (Problem.isPrime(word.length()))\
    \ {\n                       ^\n  symbol:   method isPrime(int)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (primeNumber(word.length())) {\n                builder.append(word + \" \"\
    );\n            }\n        }\n        return builder.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnapgzwpg.java:27: error: cannot find symbol\n            if (primeNumber(word.length()))\
    \ {\n                ^\n  symbol:   method primeNumber(int)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Each word has a length\n        // All word lengths must be prime\
    \ numbers\n        // So if I take each word's length and check if that's a prime\
    \ number,\n        // I'll know which words to include.\n        String[] words\
    \ = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.append(word);\n                result.append(\" \"\
    );\n            }\n        }\n        return result.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc3ivcgt3.java:31: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder result = new StringBuilder();\n        String[] words =\
    \ sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word + \" \");\n \
    \           }\n        }\n        if (result.length() > 0) {\n            result.deleteCharAt(result.length()\
    \ - 1);\n        }\n        return result.toString();\nreturn \"\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd3hqe07r.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        return sb.toString().trim();\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcpoubnay.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(x ->\
    \ isPrime(x.length()))\n            .collect(Collectors.joining(\" \"));\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfxkm5ob2.java:25: error: cannot find symbol\n            .filter(x\
    \ -> isPrime(x.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Store in result only words that are prime numbers\n        String\
    \ result = \"\";\n        // Split sentence into words\n        String[] words\
    \ = sentence.split(\" \");\n        // For each word, check if it is a prime number\n\
    \        for (String word : words) {\n            // If the word is a prime number\n\
    \            if (isPrime(word.length())) {\n                // add it to the result\n\
    \                result += word + \" \";\n            }\n        }\n        //\
    \ Return the result\n        return result.trim();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpht_9kpv0.java:31: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        boolean isPrime = true;\n\
    \        String result = \"\";\n        for (String word : words) {\n        \
    \    if (word.length() > 1) {\n                for (int i = 2; i < word.length();\
    \ i++) {\n                    if (word.length() % i == 0) {\n                \
    \        isPrime = false;\n                        break;\n                  \
    \  }\n                }\n                if (isPrime) {\n                    result\
    \ += word + \" \";\n                }\n                isPrime = true;\n     \
    \       }\n        }\n        return result.trim();\nreturn \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0hsee_v7.java:42: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) return \"\";\n      \
    \  StringBuilder result = new StringBuilder();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ result.append(word).append(\" \");\n        }\n        return result.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg450764s.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ result.append(word).append(\" \");\n                ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return\
    \ sb.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5si9fnzh.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(word\
    \ -> isPrime(word.length()))\n            .collect(Collectors.joining(\" \"));\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp96qv5bim.java:25: error: cannot find symbol\n            .filter(word\
    \ -> isPrime(word.length()))\n                            ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n                .filter(s ->\
    \ s.length() > 1 && isPrime(s.length()))\n                .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl39se83m.java:25: error: cannot find symbol\n                .filter(s\
    \ -> s.length() > 1 && isPrime(s.length()))\n                                \
    \               ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String w : words) {\n            if (isPrime(w.length())) {\n\
    \                result += w + \" \";\n            }\n        }\n        return\
    \ result.trim();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8sxnkac.java:27: error: cannot find symbol\n            if (isPrime(w.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n            .filter(w -> isPrime(w.length()))\n\
    \            .collect(Collectors.joining(\" \"));\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbap52e48.java:25: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n            .filter(w -> isPrime(w.length()))\n\
    \            .collect(Collectors.joining(\" \"));\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplsq7myl7.java:25: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word + \" \");\n \
    \           }\n        }\n        return result.toString().trim();\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd3_wbax8.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu9drgixo.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder stringBuilder\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                stringBuilder.append(word);\n  \
    \              stringBuilder.append(\" \");\n            }\n        }\n      \
    \  stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n        return stringBuilder.toString();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphsfcqvkd.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        words\
    \ = words.stream().filter(word -> isPrime(word.length())).collect(Collectors.toList());\n\
    \        return String.join(\" \", words);\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprct20a3m.java:25: error: cannot find symbol\n        words = words.stream().filter(word\
    \ -> isPrime(word.length())).collect(Collectors.toList());\n                 \
    \                             ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n            .filter(w -> w.length()\
    \ > 1 && isPrime(w.length()))\n            .collect(Collectors.joining(\" \"));\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppb8_6yn0.java:25: error: cannot find symbol\n            .filter(w\
    \ -> w.length() > 1 && isPrime(w.length()))\n                                \
    \           ^\n  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] tokens = sentence.split(\" \");\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (String token : tokens) {\n            if\
    \ (token.length() > 1 && isPrime(token.length())) {\n                sb.append(token);\n\
    \                sb.append(\" \");\n            }\n        }\n        if (sb.length()\
    \ > 0) {\n            sb.deleteCharAt(sb.length() - 1);\n        }\n        return\
    \ sb.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcsl5j2i4.java:27: error: cannot find symbol\n            if (token.length()\
    \ > 1 && isPrime(token.length())) {\n                                      ^\n\
    \  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        for (String word : sentence.split(\" \"\
    )) {\n            if (isPrime(word.length())) {\n                result += word\
    \ + \" \";\n            }\n        }\n        return result.trim();\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx3zuens9.java:26: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // TODO\n        // BEGIN\n        String[] words = sentence.split(\"\
    \ \");\n        String[] primes = Arrays.stream(words)\n            .filter(w\
    \ -> isPrime(w.length()))\n            .toArray(String[]::new);\n        return\
    \ String.join(\" \", primes);\n        // END\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdbyqliq.java:28: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        StringBuilder sb = new StringBuilder();\n\
    \        String[] words = sentence.split(\" \");\n        for (String word : words)\
    \ {\n            int n = word.length();\n            boolean isPrime = n > 1;\n\
    \            for (int i = 2; i <= Math.sqrt(n); i++) {\n                if (n\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  sb.append(word);\n                sb.append(\" \");\n            }\n      \
    \  }\n        result = sb.toString().trim();\n        return result;\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplw94o0fq.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // The sentence is a string\n        // The sentence contains some words\
    \ separated by a space\n        // Iterate over the string words\n        // For\
    \ each word, determine if the length of the word is a prime number\n        //\
    \ If it is, add the word to the result string\n        // Return the result string\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ result = new ArrayList<>();\n        for (String word : words) {\n         \
    \   if (isPrime(word.length())) result.add(word);\n        }\n        return String.join(\"\
    \ \", result);\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpycjmaqfk.java:33: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ result.add(word);\n                ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5mehb6j_.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String res = \"\";\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                res += \" \" + word;\n            }\n        }\n        return\
    \ res.trim();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6c4yhbhb.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuffer sb = new\
    \ StringBuffer();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        return sb.toString().trim();\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp068ljtk8.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        //return new String(\n        //    sentence.split(\" \")\n        //\
    \            .filter(w -> new BigInteger(w.length() + \"\").isProbablePrime(100))\n\
    \        //            .collect(Collectors.joining(\" \"))\n        //    );\n\
    \        return \"\";\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt5lwklvp.java:30: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Java: reduce()\n        // https://www.baeldung.com/java-8-reduce\n\
    \        // return Stream.of(sentence.split(\" \"))\n        //              .reduce(\"\
    \", (x, y) -> isPrime(y.length()) ? x + \" \" + y : x);\n        List<String>\
    \ words = Arrays.asList(sentence.split(\" \"));\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word + \" \");\n \
    \           }\n        }\n        return result.toString().trim();\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeak9dann.java:31: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        List<Integer> primes = new ArrayList<>();\n\
    \        for (int i = 2; i < 101; i++) {\n            boolean isPrime = true;\n\
    \            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.add(i);\n\
    \            }\n        }\n        for (String word : words) {\n            if\
    \ (primes.contains(word.length())) {\n                result.append(word + \"\
    \ \");\n            }\n        }\n        return result.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjld2u9ly.java:45: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // TODO: \n        return \"\";\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2hi6cqb0.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        String[] strings = sentence.split(\"\
    \ \");\n        for (String str : strings) {\n            if (isPrime(str.length()))\n\
    \                sb.append(str + \" \");\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxw_c9eo.java:27: error: cannot find symbol\n            if (isPrime(str.length()))\n\
    \                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        int size = sentence.length();\n\
    \        for (int i = 0; i < size; i++) {\n            char ch = sentence.charAt(i);\n\
    \            if (ch == ' ') {\n                continue;\n            }\n    \
    \        int wordStart = i;\n            for (; i < size; i++) {\n           \
    \     ch = sentence.charAt(i);\n                if (ch == ' ') {\n           \
    \         break;\n                }\n            }\n            int wordSize =\
    \ i - wordStart;\n            if (isPrime(wordSize)) {\n                result.add(sentence.substring(wordStart,\
    \ i));\n            }\n        }\n        return String.join(\" \", result);\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbbhlsa_u.java:39: error: cannot find symbol\n            if (isPrime(wordSize))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwsi0155y.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(w ->\
    \ isPrime(w.length()))\n            .collect(Collectors.joining(\" \"));\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp53k8nr6p.java:25: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) {\n            return\
    \ \"\";\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ if (isPrime(word.length())) {\n                sb.append(word);\n          \
    \      sb.append(\" \");\n            }\n        }\n        if (sb.length() >\
    \ 0) {\n            sb.deleteCharAt(sb.length() - 1);\n        }\n        return\
    \ sb.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4e1vxx83.java:30: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfac9or5s.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        String res = sb.toString();\n        return res.trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjq_sscnp.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ int len = word.length();\n            if (isPrime(len)) {\n                sb.append(word\
    \ + \" \");\n            }\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp538wjiud.java:28: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(a ->\
    \ isPrime(a.length()))\n            .collect(Collectors.joining(\" \"));\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxevu0dch.java:25: error: cannot find symbol\n            .filter(a\
    \ -> isPrime(a.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return (Arrays.stream(sentence.split(\" \"))\n                      .filter(x\
    \ -> isPrime(x.length()))\n                      .collect(Collectors.joining(\"\
    \ \")));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf5f04tbu.java:25: error: cannot find symbol\n                 \
    \     .filter(x -> isPrime(x.length()))\n                                   ^\n\
    \  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String[] newWords =\
    \ new String[words.length];\n        int k = 0;\n        for (int i = 0; i < words.length;\
    \ i++) {\n            int len = words[i].length();\n            if (isPrime(len))\
    \ {\n                newWords[k++] = words[i];\n            }\n        }\n   \
    \     return String.join(\" \", newWords);\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgsvaazf5.java:29: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] splitted = sentence.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (String s : splitted) {\n            if\
    \ (isPrime(s.length())) {\n                sb.append(s + \" \");\n           \
    \ }\n        }\n        return sb.toString().trim();\nreturn \"\";\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq0pb86ju.java:27: error: cannot find symbol\n            if (isPrime(s.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        int size = words.length;\n\
    \        if (size == 0) return \"\";\n        boolean[] primes = new boolean[size];\n\
    \        for (int i = 0; i < size; i++) {\n            int length = words[i].length();\n\
    \            if (isPrime(length)) {\n                primes[i] = true;\n     \
    \       }\n        }\n        StringBuilder sb = new StringBuilder();\n      \
    \  for (int i = 0; i < size; i++) {\n            if (primes[i]) {\n          \
    \      sb.append(words[i]);\n                sb.append(\" \");\n            }\n\
    \        }\n        return sb.toString().trim();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuh9932__.java:30: error: cannot find symbol\n            if (isPrime(length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Split sentence into words and remove empty strings\n        List<String>\
    \ words = new ArrayList<>(Arrays.asList(sentence.split(\" \")));\n        words.removeIf(item\
    \ -> item.equals(\"\"));\n        // Filter words whose length is prime\n    \
    \    words = words.stream().filter(word -> isPrime(word.length())).collect(Collectors.toList());\n\
    \        // Construct new sentence and return it\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            sb.append(word);\n\
    \            sb.append(\" \");\n        }\n        return sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2i6rb6c0.java:28: error: cannot find symbol\n        words = words.stream().filter(word\
    \ -> isPrime(word.length())).collect(Collectors.toList());\n                 \
    \                             ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String res = \"\";\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                res += word + \" \";\n            }\n        }\n        return\
    \ res.trim();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb28vxeo6.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Split sentence on space.\n        String[] words = sentence.split(\"\
    \ \");\n        // Iterate over words, convert each one to length,\n        //\
    \ and add length to a list.\n        List<Integer> lengths = new ArrayList<>();\n\
    \        for (String word : words) {\n            lengths.add(word.length());\n\
    \        }\n        // Iterate over lengths, checking each one for primality.\n\
    \        // If prime, keep word, otherwise, toss it.\n        // Do it all lazily.\n\
    \        List<String> wordsToKeep = new ArrayList<>();\n        for (int i = 0;\
    \ i < words.length; i++) {\n            int length = lengths.get(i);\n       \
    \     if (PrimeUtils.isPrime(length)) {\n                wordsToKeep.add(words[i]);\n\
    \            }\n        }\n        // Join words that remain and return.\n   \
    \     return String.join(\" \", wordsToKeep);\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpok_z42ri.java:38: error: cannot find symbol\n            if (PrimeUtils.isPrime(length))\
    \ {\n                ^\n  symbol:   variable PrimeUtils\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        final String[] words = sentence.split(\" \");\n        final List<String>\
    \ primes = new ArrayList<>();\n        for (final String word : words) {\n   \
    \         final int wordLength = word.length();\n            final boolean isPrime\
    \ = isPrime(wordLength);\n            if (isPrime) {\n                primes.add(word);\n\
    \            }\n        }\n        return String.join(\" \", primes);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6bd5viaz.java:28: error: cannot find symbol\n            final\
    \ boolean isPrime = isPrime(wordLength);\n                                   \
    \ ^\n  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzuucg87h.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int n = sentence.length();\n        ArrayList<Integer> wordEndPositions\
    \ = new ArrayList<>();\n        int startIndex = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            if (sentence.charAt(i) == ' ') {\n                wordEndPositions.add(i);\n\
    \                startIndex = i + 1;\n            }\n        }\n        wordEndPositions.add(n);\n\
    \        StringBuilder ret = new StringBuilder();\n        for (int i = 0; i <\
    \ wordEndPositions.size() - 1; i++) {\n            int endIndex = wordEndPositions.get(i);\n\
    \            int length = endIndex - startIndex;\n            if (isPrime(length))\
    \ {\n                ret.append(sentence.substring(startIndex, endIndex));\n \
    \               ret.append(' ');\n            }\n            startIndex = endIndex\
    \ + 1;\n        }\n        ret.deleteCharAt(ret.length() - 1);\n        return\
    \ ret.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgdr_j_i5.java:38: error: cannot find symbol\n            if (isPrime(length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        if (sb.length() > 0) {\n            sb.deleteCharAt(sb.length()\
    \ - 1);\n        }\n        return sb.toString();\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmperswgf7d.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // \"Lazy evaluation\"\n        return Arrays.stream(sentence.split(\"\
    \ \"))\n            .filter(w -> isPrimeNumber(w.length()))\n            .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1engj5a.java:26: error: cannot find symbol\n            .filter(w\
    \ -> isPrimeNumber(w.length()))\n                         ^\n  symbol:   method\
    \ isPrimeNumber(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // First, split the sentence into an array of words.\n        String[]\
    \ words = sentence.split(\" \");\n        // Second, determine which words have\
    \ a length that is a prime number.\n        // Third, add those words to a list.\n\
    \        List<String> wordsToKeep = new ArrayList<>();\n        for (String word\
    \ : words) {\n            if (word.length() > 1 && isPrime(word.length())) {\n\
    \                wordsToKeep.add(word);\n            }\n        }\n        //\
    \ Fourth, return a string containing all of the words in the list.\n        return\
    \ String.join(\" \", wordsToKeep);\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4zyqf5qp.java:30: error: cannot find symbol\n            if (word.length()\
    \ > 1 && isPrime(word.length())) {\n                                     ^\n \
    \ symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // return sentence.replaceAll(\"(\\\\S+)(?:(?!\\\\S+).)*\", \"$1\");\n\
    \        // return sentence.replaceAll(\"\\\\b[^\\\\s]+?\\\\b\", \"$1\");\n  \
    \      // return sentence.replaceAll(\"\\\\b(?:\\\\w{1,})\\\\b\", \"$1\");\n \
    \       // return sentence.replaceAll(\"\\\\b(?:\\\\S+)\\\\b\", \"$1\");\n   \
    \     // return sentence.replaceAll(\"\\\\b[^\\\\s]+\\\\b\", \"$1\");\n      \
    \  // return sentence.replaceAll(\"(\\\\w+)\", \"$1\");\n        // return sentence.replaceAll(\"\
    \\\\b\\\\w+\\\\b\", \"$1\");\n        // return sentence.replaceAll(\"\\\\b(\\\
    \\w+)\\\\b\", \"$1\");\n        // return sentence.replaceAll(\"\\\\b(?:\\\\w+)\\\
    \\b\", \"$1\");\n        // return sentence.replaceAll(\"\\\\b(\\\\w+)\\\\b\"\
    , \"$1\");\n        // return sentence.replaceAll(\"\\\\b\\\\w+\\\\b\", \"$1\"\
    );\n        // return sentence.replaceAll(\"(\\\\b\\\\w+\\\\b)\", \"$1\");\n \
    \       // return sentence.replaceAll(\"(\\\\b\\\\w{1,}\\\\b)\", \"$1\");\n  \
    \      // return sentence.replaceAll(\"(?:\\\\b\\\\w+\\\\b)\", \"$1\");\n    \
    \    // return sentence.replaceAll(\"\\\\b\\\\w+\\\\b\", \"$1\");\n        //\
    \ return sentence.replaceAll(\"(\\\\b\\\\w+\\\\b)\", \"$1\");\n        // return\
    \ sentence.replaceAll(\"(?:\\\\b\\\\w+\\\\b)\", \"$1\");\n        // return sentence.replaceAll(\"\
    (?:\\\\w+\\\\b)\", \"$1\");\n        // return sentence.replaceAll(\"(?:\\\\b\\\
    \\w+)\", \"$1\");\n        // return sentence.replaceAll(\"(?:\\\\b\\\\w+\\\\\
    b)\", \"$1\");\n        // return sentence.replaceAll(\"(?:\\\\b\\\\w+)\", \"\
    $1\");\n        // return sentence.replaceAll(\"(?:\\\\b\\\\w+\\\\b)\", \"$1\"\
    );\n        // return sentence.replaceAll(\"(?:\\\\b\\\\w+\\\\b)\", \"$1\");\n\
    \        // return sentence.replaceAll(\"(?:\\\\b\\\\w+)\",\nreturn \"\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_90orytm.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int n = sentence.length();\n        List<String> words = new ArrayList<>();\n\
    \        int length = 0;\n        for (int i = 0; i < n; i++) {\n            char\
    \ c = sentence.charAt(i);\n            if (c == ' ') {\n                if (isPrime(length))\n\
    \                    words.add(sentence.substring(i - length, i));\n         \
    \       length = 0;\n            } else\n                length++;\n        }\n\
    \        if (isPrime(length))\n            words.add(sentence.substring(n - length,\
    \ n));\n        return String.join(\" \", words);\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeamqqtrg.java:30: error: cannot find symbol\n                if\
    \ (isPrime(length))\n                    ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n/tmp/tmpeamqqtrg.java:36: error: cannot find symbol\n\
    \        if (isPrime(length))\n            ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return sentence;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb6hi6_fv.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word).append(\" \");\n            }\n        }\n\
    \        if (sb.length() > 0) {\n            sb.deleteCharAt(sb.length() - 1);\n\
    \        }\n        return sb.toString();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpte3pw3fd.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        final var words = new ArrayList<String>();\n        final var sb = new\
    \ StringBuilder();\n        for (var i = 0; i < sentence.length(); i++) {\n  \
    \          if (sentence.charAt(i) == ' ') {\n                words.add(sb.toString());\n\
    \                sb.setLength(0);\n            } else {\n                sb.append(sentence.charAt(i));\n\
    \            }\n        }\n        if (sb.length() > 0) {\n            words.add(sb.toString());\n\
    \        }\n        final var primes = primeNumbers(20);\n        final var sb2\
    \ = new StringBuilder();\n        for (var word : words) {\n            if (primes.contains(word.length()))\
    \ {\n                sb2.append(word);\n                sb2.append(' ');\n   \
    \         }\n        }\n        sb2.setLength(sb2.length() - 1);\n        return\
    \ sb2.toString();\nreturn \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgy2h67rw.java:24: error: cannot find symbol\n        final var\
    \ words = new ArrayList<String>();\n              ^\n  symbol:   class var\n \
    \ location: class Problem\n/tmp/tmpgy2h67rw.java:25: error: cannot find symbol\n\
    \        final var sb = new StringBuilder();\n              ^\n  symbol:   class\
    \ var\n  location: class Problem\n/tmp/tmpgy2h67rw.java:26: error: cannot find\
    \ symbol\n        for (var i = 0; i < sentence.length(); i++) {\n            \
    \ ^\n  symbol:   class var\n  location: class Problem\n/tmp/tmpgy2h67rw.java:37:\
    \ error: cannot find symbol\n        final var primes = primeNumbers(20);\n  \
    \            ^\n  symbol:   class var\n  location: class Problem\n/tmp/tmpgy2h67rw.java:37:\
    \ error: cannot find symbol\n        final var primes = primeNumbers(20);\n  \
    \                         ^\n  symbol:   method primeNumbers(int)\n  location:\
    \ class Problem\n/tmp/tmpgy2h67rw.java:38: error: cannot find symbol\n       \
    \ final var sb2 = new StringBuilder();\n              ^\n  symbol:   class var\n\
    \  location: class Problem\n/tmp/tmpgy2h67rw.java:39: error: cannot find symbol\n\
    \        for (var word : words) {\n             ^\n  symbol:   class var\n  location:\
    \ class Problem\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Stream.of(sentence.split(\" \"))\n                .filter(word\
    \ -> {\n                    if (word.length() == 1) return true;\n           \
    \         for (int i = 2; i <= Math.sqrt(word.length()); i++) {\n            \
    \            if (word.length() % i == 0) return false;\n                    }\n\
    \                    return true;\n                })\n                .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjoy6efpw.java:33: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : sentence.split(\" \")) {\n            if (isPrime(word.length())) {\n    \
    \            result.append(word);\n                result.append(\" \");\n   \
    \         }\n        }\n        return result.toString().trim();\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb5ctaryf.java:26: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        final String[] words = sentence.split(\" \");\n        final StringBuilder\
    \ builder = new StringBuilder();\n        for (final String word : words) {\n\
    \            if (prime(word.length())) {\n                builder.append(word).append(\"\
    \ \");\n            }\n        }\n        if (builder.length() > 0) {\n      \
    \      builder.deleteCharAt(builder.length() - 1);\n        }\n        return\
    \ builder.toString();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp54mple_8.java:27: error: cannot find symbol\n            if (prime(word.length()))\
    \ {\n                ^\n  symbol:   method prime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Time Complexity: O(N + V) where V is the number of primes between\
    \ 1 and N.\n        // Space Complexity: O(N + V)\n        // N = length of sentence\n\
    \        var words = sentence.split(\" \");\n        var primes = new HashSet<Integer>();\n\
    \        for (var word : words) {\n            var n = word.length();\n      \
    \      if (isPrime(n)) primes.add(n);\n        }\n        var answer = new StringBuilder();\n\
    \        for (var word : words) {\n            var n = word.length();\n      \
    \      if (primes.contains(n)) {\n                answer.append(word);\n     \
    \           answer.append(\" \");\n            }\n        }\n        return answer.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpup2vh_d1.java:27: error: cannot find symbol\n        var words\
    \ = sentence.split(\" \");\n        ^\n  symbol:   class var\n  location: class\
    \ Problem\n/tmp/tmpup2vh_d1.java:28: error: cannot find symbol\n        var primes\
    \ = new HashSet<Integer>();\n        ^\n  symbol:   class var\n  location: class\
    \ Problem\n/tmp/tmpup2vh_d1.java:29: error: cannot find symbol\n        for (var\
    \ word : words) {\n             ^\n  symbol:   class var\n  location: class Problem\n\
    /tmp/tmpup2vh_d1.java:30: error: cannot find symbol\n            var n = word.length();\n\
    \            ^\n  symbol:   class var\n  location: class Problem\n/tmp/tmpup2vh_d1.java:33:\
    \ error: cannot find symbol\n        var answer = new StringBuilder();\n     \
    \   ^\n  symbol:   class var\n  location: class Problem\n/tmp/tmpup2vh_d1.java:34:\
    \ error: cannot find symbol\n        for (var word : words) {\n             ^\n\
    \  symbol:   class var\n  location: class Problem\n/tmp/tmpup2vh_d1.java:35: error:\
    \ cannot find symbol\n            var n = word.length();\n            ^\n  symbol:\
    \   class var\n  location: class Problem\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) {\n            return\
    \ \"\";\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ newSentence = new StringBuilder();\n        for (String word : words) {\n  \
    \          int length = word.length();\n            if (isPrime(length)) {\n \
    \               newSentence.append(word);\n                newSentence.append(\"\
    \ \");\n            }\n        }\n        return newSentence.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpck1qphal.java:31: error: cannot find symbol\n            if (isPrime(length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Given a string, the sentence.\n        // Split the string into words\
    \ by whitespace.\n        String[] words = sentence.split(\"\\\\s+\");\n     \
    \   // Assume a prime number.\n        int isPrime = 1;\n        // Assume the\
    \ input string is empty.\n        String result = \"\";\n        // Iterate over\
    \ all words in the string.\n        for (int i = 0; i < words.length; i++) {\n\
    \            // Calculate the length of the word.\n            int length = words[i].length();\n\
    \            // Iterate over all numbers from 2 to n - 1.\n            for (int\
    \ j = 2; j < length; j++) {\n                // If n is divisible by j, assume\
    \ n is not prime.\n                if (length % j == 0) {\n                  \
    \  isPrime = 0;\n                    break;\n                }\n            }\n\
    \            // If the number is prime,\n            // add the current word to\
    \ the result string.\n            if (isPrime == 1) {\n                result\
    \ += words[i] + \" \";\n            }\n            // Assume a prime number for\
    \ the next word.\n            isPrime = 1;\n        }\n        // Return the result\
    \ string.\n        return result;\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmzishuxq.java:53: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(Problem::isPrime)\n\
    \            .collect(Collectors.joining(\" \"));\nreturn \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgmgq40sq.java:25: error: invalid method reference\n           \
    \ .filter(Problem::isPrime)\n                    ^\n  cannot find symbol\n   \
    \ symbol:   method isPrime()\n    location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ result = new ArrayList<>();\n        for (String word : words) {\n         \
    \   if (Utils.isPrime(word.length())) {\n                result.add(word);\n \
    \           }\n        }\n        return String.join(\" \", result);\nreturn \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rlfjz7p.java:27: error: cannot find symbol\n            if (Utils.isPrime(word.length()))\
    \ {\n                ^\n  symbol:   variable Utils\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        final var words = sentence.split(\" \");\n        var result = new StringBuilder();\n\
    \        var primes = primeNumbersLessThan(100);\n        for (var word : words)\
    \ {\n            if (primes.contains(word.length())) {\n                result.append(word).append(\"\
    \ \");\n            }\n        }\n        return result.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2nl10z4s.java:24: error: cannot find symbol\n        final var\
    \ words = sentence.split(\" \");\n              ^\n  symbol:   class var\n  location:\
    \ class Problem\n/tmp/tmp2nl10z4s.java:25: error: cannot find symbol\n       \
    \ var result = new StringBuilder();\n        ^\n  symbol:   class var\n  location:\
    \ class Problem\n/tmp/tmp2nl10z4s.java:26: error: cannot find symbol\n       \
    \ var primes = primeNumbersLessThan(100);\n        ^\n  symbol:   class var\n\
    \  location: class Problem\n/tmp/tmp2nl10z4s.java:26: error: cannot find symbol\n\
    \        var primes = primeNumbersLessThan(100);\n                     ^\n  symbol:\
    \   method primeNumbersLessThan(int)\n  location: class Problem\n/tmp/tmp2nl10z4s.java:27:\
    \ error: cannot find symbol\n        for (var word : words) {\n             ^\n\
    \  symbol:   class var\n  location: class Problem\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        return sb.toString().trim();\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tujpwf3.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> wordList\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (isPrime(len)) {\n                wordList.add(word);\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (String word : wordList) {\n            sb.append(word);\n       \
    \     sb.append(\" \");\n        }\n        return sb.toString().trim();\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyk0atjl0.java:28: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String result = \"\"\
    ;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyj1k6vrh.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(word\
    \ -> word.length() > 1 && isPrime(word.length()))\n            .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz5i5duzi.java:25: error: cannot find symbol\n            .filter(word\
    \ -> word.length() > 1 && isPrime(word.length()))\n                          \
    \                       ^\n  symbol:   method isPrime(int)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // For a given string length, s, the maximum possible prime factor is\
    \ sqrt(s).\n        // So we can loop through the first sqrt(s) numbers and divide\
    \ s by each number.\n        // If the remainder is 0 and the number is prime,\n\
    \        // then s is not prime. Otherwise, if we complete the loop and have not\
    \ found a\n        // factor, then s is prime.\n        // Time Complexity: O(n\
    \ log(log(n))) where n is the length of the string\n        // Space Complexity:\
    \ O(n)\n        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ result = new StringBuilder();\n        for (String word : words) {\n       \
    \     int len = word.length();\n            if (isPrime(len)) {\n            \
    \    result.append(word + \" \");\n            }\n        }\n        return result.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkdhrqg0e.java:35: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : sentence.split(\" \")) {\n            if (word.length() == 1) continue;\n\
    \            if (word.length() % 2 == 0) continue;\n            if (word.length()\
    \ == 2) {\n                result.append(word);\n                result.append(\"\
    \ \");\n                continue;\n            }\n            boolean isPrime\
    \ = true;\n            for (int i = 3; i <= word.length() / 2; i += 2) {\n   \
    \             if (word.length() % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result.append(word);\n                result.append(\"\
    \ \");\n            }\n        }\n        if (result.length() > 0) {\n       \
    \     result.deleteCharAt(result.length() - 1);\n        }\n        return result.toString();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvcl8_s0a.java:49: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int[] prime = new int[sentence.length() + 1];\n        Arrays.fill(prime,\
    \ 1);\n        prime[0] = 0;\n        prime[1] = 0;\n        for (int i = 2; i\
    \ * i <= sentence.length(); i++) {\n            if (prime[i] == 1) {\n       \
    \         for (int j = i * i; j <= sentence.length(); j += i) {\n            \
    \        prime[j] = 0;\n                }\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        String[] words = sentence.split(\" \");\n\
    \        for (String word : words) {\n            if (prime[word.length()] ==\
    \ 1) {\n                sb.append(word + \" \");\n            }\n        }\n \
    \       return sb.toString().trim();\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjt0n7v1v.java:43: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String w : words) {\n            if (isPrime(w.length()))\
    \ {\n                sb.append(w).append(\" \");\n            }\n        }\n \
    \       return sb.toString().trim();\nreturn \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4p3k2e1y.java:27: error: cannot find symbol\n            if (isPrime(w.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (word.length() > 1 && isPrime(word.length())) {\n                builder.append(word);\n\
    \                builder.append(\" \");\n            }\n        }\n        return\
    \ builder.toString().trim();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeciducjr.java:27: error: cannot find symbol\n            if (word.length()\
    \ > 1 && isPrime(word.length())) {\n                                     ^\n \
    \ symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : sentence.split(\"\
    \ \")) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\"\
    \ \");\n            }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppx845jqy.java:26: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder result = new StringBuilder();\n        String[] words =\
    \ sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word);\n         \
    \       result.append(\" \");\n            }\n        }\n        return result.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9d8_squl.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) {\n            return\
    \ \"\";\n        }\n        StringBuilder result = new StringBuilder();\n    \
    \    boolean isFirst = true;\n        for (String word : sentence.split(\" \"\
    )) {\n            if (isPrime(word.length())) {\n                if (isFirst)\
    \ {\n                    isFirst = false;\n                } else {\n        \
    \            result.append(\" \");\n                }\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\nreturn \"\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi648l0fq.java:30: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String[] primes = Stream.of(words)\n\
    \            .filter(w -> isPrime(w.length()))\n            .toArray(String[]::new);\n\
    \        return String.join(\" \", primes);\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0uq60gz.java:26: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // sieve array of length n\n        int n = 100;\n        boolean[] sieve\
    \ = new boolean[n];\n        for (int i = 2; i < sieve.length; i++) {\n      \
    \      if (!sieve[i]) {\n                // i is prime\n                int multiple\
    \ = i + i;\n                while (multiple < sieve.length) {\n              \
    \      sieve[multiple] = true;\n                    multiple += i;\n         \
    \       }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : sentence.split(\" \")) {\n            int wordLen\
    \ = word.length();\n            if (!sieve[wordLen]) {\n                sb.append(word);\n\
    \                sb.append(\" \");\n            }\n        }\n        // System.out.println(Arrays.toString(sieve));\n\
    \        return sb.toString().trim();\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqw0i5i8.java:47: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // It seems I'm supposed to use functional programming with streams,\n\
    \        // but that would be slow.\n        // The sentence length will be from\
    \ 1 to 100 inclusive.\n        int sentenceLength = sentence.length();\n     \
    \   if (sentenceLength == 1) {\n            return sentence;\n        }\n    \
    \    // This will keep track of the start of each word in the sentence.\n    \
    \    List<Integer> wordStartIndexes = new ArrayList<Integer>();\n        // This\
    \ will keep track of the end of each word in the sentence.\n        List<Integer>\
    \ wordEndIndexes = new ArrayList<Integer>();\n        // This will keep track\
    \ of the length of each word in the sentence.\n        List<Integer> wordLengths\
    \ = new ArrayList<Integer>();\n        // This will keep track of the position\
    \ in the sentence we are currently at.\n        int currentIndex = 0;\n      \
    \  while (currentIndex < sentenceLength) {\n            // We have found the start\
    \ of a word,\n            // so we will update wordStartIndexes.\n           \
    \ wordStartIndexes.add(currentIndex);\n            // We have found the start\
    \ of a word,\n            // so we will update wordEndIndexes.\n            int\
    \ currentWordEndIndex = currentIndex;\n            // We will iterate over the\
    \ rest of the sentence,\n            // until we find the end of the current word.\n\
    \            for (int i = currentIndex + 1; i < sentenceLength; i++) {\n     \
    \           if (sentence.charAt(i) == ' ') {\n                    currentWordEndIndex\
    \ = i;\n                    break;\n                }\n            }\n       \
    \     // We will update wordEndIndexes.\n            wordEndIndexes.add(currentWordEndIndex);\n\
    \            // We will update currentIndex.\n            currentIndex = currentWordEndIndex\
    \ + 1;\n        }\n        // We will iterate over wordStartIndexes and wordEndIndexes,\n\
    \        // to get the length of each word,\n        // and update wordLengths.\n\
    \        for (int i = 0; i < wordStartIndexes.size(); i++) {\n            int\
    \ currentWordLength = wordEndIndexes.get(i) - wordStartIndexes.get(i);\n     \
    \       wordLengths.add(currentWordLength);\n        }\n\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8h7lgpu.java:70)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        return Arrays.stream(words)\n\
    \            .filter(i -> isPrime(i.length()))\n            .collect(Collectors.joining(\"\
    \ \"));\nreturn \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2q0ltktc.java:26: error: cannot find symbol\n            .filter(i\
    \ -> isPrime(i.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> listOfWords = Arrays.asList(sentence.split(\" \"));\n  \
    \      List<String> listOfPrimes = listOfWords.stream()\n            .filter(i\
    \ -> isPrime(i.length()))\n            .collect(Collectors.toList());\n      \
    \  return String.join(\" \", listOfPrimes);\nreturn \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9x8tp56s.java:26: error: cannot find symbol\n            .filter(i\
    \ -> isPrime(i.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your solution goes here\n        return \"\";\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3c1xykd0.java:26: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.length() == 0) {\n            return\
    \ \"\";\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ if (Util.isPrime(word.length())) {\n                sb.append(word).append(\"\
    \ \");\n            }\n        }\n        return sb.length() == 0 ? \"\" : sb.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptddlvai9.java:30: error: cannot find symbol\n            if (Util.isPrime(word.length()))\
    \ {\n                ^\n  symbol:   variable Util\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word + \" \");\n \
    \           }\n        }\n        return result.toString().trim();\nreturn \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3oy7oqf.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        for (String word :\
    \ sentence.split(\" \")) {\n            int length = word.length();\n        \
    \    if (isPrime(length)) {\n                result.add(word);\n            }\n\
    \        }\n        return String.join(\" \", result);\nreturn \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd7_rk3fi.java:27: error: cannot find symbol\n            if (isPrime(length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // 1. Create an array of words\n        // 2. Test each word for its\
    \ length\n        // 3. If the length is prime then add it to the list\n     \
    \   // 4. Return a string of all the words separated by a space\n        final\
    \ var words = sentence.split(\" \");\n        final var output = new ArrayList<String>();\n\
    \        final var primeTest = new BigInteger(\"2\");\n        for (var word :\
    \ words) {\n            final var wordLength = word.length();\n            if\
    \ (primeTest.isProbablePrime(wordLength)) {\n                output.add(word);\n\
    \            }\n        }\n        return String.join(\" \", output);\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeimp_1ev.java:28: error: cannot find symbol\n        final var\
    \ words = sentence.split(\" \");\n              ^\n  symbol:   class var\n  location:\
    \ class Problem\n/tmp/tmpeimp_1ev.java:29: error: cannot find symbol\n       \
    \ final var output = new ArrayList<String>();\n              ^\n  symbol:   class\
    \ var\n  location: class Problem\n/tmp/tmpeimp_1ev.java:30: error: cannot find\
    \ symbol\n        final var primeTest = new BigInteger(\"2\");\n             \
    \ ^\n  symbol:   class var\n  location: class Problem\n/tmp/tmpeimp_1ev.java:31:\
    \ error: cannot find symbol\n        for (var word : words) {\n             ^\n\
    \  symbol:   class var\n  location: class Problem\n/tmp/tmpeimp_1ev.java:32: error:\
    \ cannot find symbol\n            final var wordLength = word.length();\n    \
    \              ^\n  symbol:   class var\n  location: class Problem\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\nreturn \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbrdg9fa6.java:25: error: unreachable statement\nreturn \"\";\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result.append(word);\n         \
    \       result.append(\" \");\n            }\n        }\n        return result.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzwv6w_8.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder res =\
    \ new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\n\
    \                res.append(word).append(\" \");\n        }\n        return res.toString().trim();\n\
    return \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ojy7t_z.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\n\
    \                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Input:\
    \ sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n  \
    \  // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return Arrays.stream(sentence.split(\" \"))\n            .filter(w ->\
    \ isPrime(w.length()))\n            .collect(Collectors.joining(\" \"));\nreturn\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3djffukv.java:25: error: cannot find symbol\n            .filter(w\
    \ -> isPrime(w.length()))\n                         ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
