name: HumanEval_6_parse_nested_parens
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
  \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
  \ parseNestedParens(String paren_string) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
  )).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n\
  \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
  )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
