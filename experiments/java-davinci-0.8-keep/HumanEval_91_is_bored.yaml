completions:
- "        // What is the time complexity of your algorithm?\n        // What is the\
  \ space complexity of your algorithm?\n        throw new UnsupportedOperationException(\"\
  Please implement this.\");"
- "        String[] sentences = S.split(\"[!.?]\");\n        int count = 0;\n    \
  \    for (String s : sentences) {\n            String[] words = s.split(\"\\\\s+\"\
  );\n            if (words.length > 0 && words[0].equals(\"I\")) {\n            \
  \    count++;\n            }\n        }\n        return count;"
- "        return (int) S.split(\"[.!?]\")\n            .stream()\n            .filter(\n\
  \                sen -> sen.trim().startsWith(\"I\")\n            )\n          \
  \  .count();"
- "        int boredoms = 0;\n        // First, split the string into sentences.\n\
  \        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        for (String sentence\
  \ : sentences) {\n            // Then, split the sentence into words.\n        \
  \    String[] words = sentence.split(\" \");\n            if (words.length > 0 &&\
  \ words[0].equals(\"I\")) {\n                boredoms++;\n            }\n      \
  \  }\n        return boredoms;"
- "        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int boredoms\
  \ = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        // >>> YOUR CODE HERE <<<\n        String[] sentences = S.split(\"\\\\\
  ?|\\\\.|!\");\n        int result = 0;\n        for (String sentence : sentences)\
  \ {\n            if (sentence.startsWith(\"I\")) result++;\n        }\n        return\
  \ result;"
- "        String[] split = S.split(\"[.?!]\");\n        int count = 0;\n        for\
  \ (String s : split) {\n            if (s.trim().startsWith(\"I\")) {\n        \
  \        count++;\n            }\n        }\n        return count;"
- '        return 0;'
- "        // Write your code here\n        return 0;"
- "        String[] sentences = S.split(\"[!?.]\");\n        return (int) Arrays.stream(sentences).filter(x\
  \ -> x.trim().startsWith(\"I\")).count();"
- "        return (int) Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n          \
  \  .filter(s -> s.trim().startsWith(\"I\")).count();"
- "        if (S == null || S.length() == 0) {\n            return 0;\n        }\n\
  \        int boredoms = 0;\n        char[] arr = S.toCharArray();\n        int i\
  \ = 0;\n        while (i < arr.length) {\n            int j = i;\n            while\
  \ (j < arr.length && arr[j] != '.' && arr[j] != '?' && arr[j] != '!') {\n      \
  \          j++;\n            }\n            String sentence = S.substring(i, j);\n\
  \            if (sentence.startsWith(\"I\")) {\n                boredoms++;\n  \
  \          }\n            i = j + 1;\n        }\n        return boredoms;"
- "        String[] words = S.split(\"[?!.]\");\n        int ret = 0;\n        for\
  \ (String word : words) {\n            if (word.split(\"\\\\s+\")[0].equals(\"I\"\
  )) {\n                ret++;\n            }\n        }\n        return ret;"
- "        int count = 0;\n        String[] strArr = S.split(\"[.!?]\");\n       \
  \ for (String str : strArr) {\n            if (str.trim().split(\" \")[0].equals(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        String[] str = S.split(\"[!?.]\");\n        int count = 0;\n        for\
  \ (String s : str) {\n            if (s.trim().startsWith(\"I\"))\n            \
  \    count++;\n        }\n        return count;"
- '        return 0;'
- '        return (int) Arrays.stream(S.split("\\.")).filter(x -> x.trim().startsWith("I")).count();'
- "        //YOUR CODE HERE\n        int count = 0;\n        String[] words = S.split(\"\
  \\\\s\");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        if (S == null || S.length() == 0) return 0;\n        int res = 0;\n   \
  \     String[] words = S.split(\"[ .!?]\");\n        for (String word : words) {\n\
  \            if (word.equals(\"I\")) res++;\n        }\n        return res;"
- "        String[] words = S.split(\"\\\\.|\\\\?|\\\\!\");\n        int boredoms\
  \ = 0;\n        for (String word : words) {\n            String[] parts = word.split(\"\
  \ \");\n            if (parts.length > 0 && parts[0].equals(\"I\")) {\n        \
  \        boredoms++;\n            }\n        }\n        return boredoms;"
- "        // Enter your code here.\n        return (int) (Arrays.stream(S.split(\"\
  [.?!]\"))\n            .filter(sentence -> sentence.trim().startsWith(\"I\")).count());"
- '        return 0;'
- "        int boredoms = 0;\n        // Write your code here\n        // To print\
  \ results to the standard output you can use System.out.println()\n        // Example:\
  \ System.out.println(\"Hello world!\");\n        return boredoms;"
- "        return Stream.of(S.split(\"\\\\.|\\\\?|\\\\!\"))\n                    \
  \ .filter(s -> s.trim().startsWith(\"I\")).count();"
- "        int c = 0;\n        for (String s : S.split(\"[.?!]\")) {\n           \
  \ if (s.trim().startsWith(\"I\")) c++;\n        }\n        return c;"
- "        return (int)Arrays.stream(S.split(\"[.!?]\"))\n            .filter(w ->\
  \ w.trim().startsWith(\"I\"))\n            .count();"
- "        String[] sentences = S.split(\"[.?!]\");\n        int boredoms = 0;\n \
  \       for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \\\\s+\");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n    \
  \            boredoms++;\n            }\n        }\n        return boredoms;"
- "        int count = 0;\n        boolean isBored = false;\n        for (int i =\
  \ 0; i < S.length(); i++) {\n            // new sentence\n            if (S.charAt(i)\
  \ == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n                isBored\
  \ = false;\n            } else if (S.charAt(i) == 'I') {\n                isBored\
  \ = true;\n            }\n            if (isBored) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        String[] arr = S.split(\"[.?!]\");\n        for\
  \ (String s : arr) {\n            if (s.trim().startsWith(\"I\")) {\n          \
  \      count++;\n            }\n        }\n        return count;"
- "        String[] s = S.split(\"[.?!]\");\n        int count = 0;\n        for (String\
  \ i : s) {\n            String[] j = i.split(\" \");\n            if (j[0].equals(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        // Split the string into sentences and count the number that start with\n\
  \        // 'I'.\n        return (int) Arrays.stream(S.split(\"\\\\.|\\\\?|!\"))\n\
  \            .filter(s -> s.trim().startsWith(\"I\"))\n            .count();"
- "        // Your code here\n        int result = 0;\n        String[] sentences\
  \ = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (String sentence : sentences) {\n\
  \            if (sentence.startsWith(\"I\")) result++;\n        }\n        return\
  \ result;"
- "        int boredoms = 0;\n        String[] sentences = S.split(\"[.?!]\");\n \
  \       for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        String sentences[] = S.split(\"[.?!]\");\n        int boredoms = 0;\n \
  \       for (String sentence : sentences) {\n            if (sentence.startsWith(\"\
  I\"))\n                boredoms++;\n        }\n        return boredoms;"
- "        S = S.replaceAll(\"[.?!]\", \" \");\n        String[] parts = S.split(\"\
  \ \");\n        int count = 0;\n        for (String w : parts) {\n            if\
  \ (w.equals(\"I\")) {\n                count++;\n            }\n        }\n    \
  \    return count;"
- "        // Type your solution here\n        int ret = 0;\n        int prev = 0;\n\
  \        int len = S.length();\n        for (int i = 0; i < len; i++) {\n      \
  \      char c = S.charAt(i);\n            if (c == '.' || c == '?' || c == '!')\
  \ {\n                String sub = S.substring(prev, i);\n                if (sub.startsWith(\"\
  I\"))\n                    ret++;\n                prev = i + 1;\n            }\n\
  \        }\n        return ret;"
- "        return (int) Arrays.stream(S.split(\"[!?.]\"))\n            .filter(x ->\
  \ x.length() > 0)\n            .filter(x -> x.charAt(0) == 'I')\n            .count();"
- '        return (int) Arrays.stream(S.split("\\.")).map(String::trim).filter(s ->
  s.startsWith("I")).count();'
- '        return (int)Arrays.stream(S.split("[.?!]")).filter(x -> x.trim().startsWith("I")).count();'
- "        String[] a = S.split(\"[.?!]\");\n        int sum = 0;\n        for (String\
  \ s : a) {\n            if (s.split(\" \")[0].equals(\"I\")) {\n               \
  \ sum++;\n            }\n        }\n        return sum;"
- '        return (int)Arrays.stream(S.split("[.?!]")).filter(x -> x.startsWith("I")).count();'
- '        return (int) S.chars().boxed().filter(x -> x == ''I'').count();'
- "        int count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n    \
  \    for (String sentence : sentences) {\n            if (sentence.split(\"\\\\\
  s+\")[0].equals(\"I\"))\n                count++;\n        }\n        return count;"
- "        int count = 0;\n        String[] split = S.split(\"[.!?]\");\n        for\
  \ (String s : split) {\n            if (s.trim().startsWith(\"I\")) {\n        \
  \        count++;\n            }\n        }\n        return count;"
- "        if (S == null || S.length() == 0) return 0;\n        int counter = 0;\n\
  \        String[] splitString = S.split(\"[!?.]\");\n        for (String s : splitString)\
  \ {\n            if (s.length() > 0 && s.charAt(0) == 'I') {\n                counter++;\n\
  \            }\n        }\n        return counter;"
- "        String[] arr = S.split(\"[\\\\.\\\\?!]\");\n        System.out.println(Arrays.toString(arr));\n\
  \        int count = 0;\n        for (String str : arr) {\n            if (str.startsWith(\"\
  I\")) count++;\n        }\n        return count;"
- "        // Replace pass above with your code\n        int count = 0;\n        int\
  \ start = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i)\
  \ == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n                String\
  \ temp = S.substring(start, i);\n                if (temp.split(\" \")[0].equals(\"\
  I\")) {\n                    count++;\n                }\n                start\
  \ = i + 1;\n            }\n        }\n        return count;"
- "        return (int) Arrays.stream(S.split(\"[.!?]\"))\n            .filter(s ->\
  \ s.trim().startsWith(\"I\"))\n            .count();"
- "        return (int) Stream.of(S.split(\"\\\\.|\\\\?|\\\\!\"))\n            .filter(e\
  \ -> e.length() > 0)\n            .filter(e -> e.charAt(0) == 'I')\n           \
  \ .count();"
- "        // Your code here.\n        int n = 0;\n        S = S.toLowerCase();\n\
  \        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) ==\
  \ 'i') {\n                if (i == 0)\n                    n++;\n              \
  \  else if (S.charAt(i - 1) == '.' || S.charAt(i - 1) == '?' || S.charAt(i - 1)\
  \ == '!')\n                    n++;\n            }\n        }\n        return n;"
- "        // Assume that the input is a string and the output is an integer.\n  \
  \      // Write your code below\n        int boredoms = 0;\n        String[] words\
  \ = S.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n        \
  \    if (words[i].toLowerCase().equals(\"i\")) {\n                boredoms++;\n\
  \            }\n        }\n        return boredoms;"
- "        return Stream.of(S.split(\"[.!?]\"))\n            .filter(s -> s.trim().startsWith(\"\
  I\"))\n            .mapToInt(s -> 1)\n            .sum();"
- "        int ans = 0;\n        String[] split = S.split(\"[.?!]\");\n        for\
  \ (String s : split) {\n            String[] ssplit = s.split(\"\\\\s+\");\n   \
  \         if (ssplit.length > 0 && ssplit[0].equals(\"I\")) {\n                ans++;\n\
  \            }\n        }\n        return ans;"
- '        return Pattern.compile("[.?!]").splitAsStream(S).map(p -> p.trim().replaceAll("
  I", "")).filter(p -> p.startsWith("I")).count();'
- "        int boredoms = 0;\n        String[] sentences = S.split(\"[.?!]\");\n \
  \       for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \ \");\n            if (words.length > 0 && words[0].equals(\"I\"))\n          \
  \      boredoms++;\n        }\n        return boredoms;"
- "        // Add your code here.\n        return -1;"
- "        Scanner scanner = new Scanner(S);\n        int boredoms = 0;\n        while\
  \ (scanner.hasNext()) {\n            String word = scanner.next();\n           \
  \ if (word.startsWith(\"I\")) {\n                boredoms++;\n            }\n  \
  \      }\n        return boredoms;"
- "        int count = 0;\n        if (S.length() == 0) {\n            return count;\n\
  \        }\n        String[] sentences = S.split(\"[.?!]\");\n        for (String\
  \ sentence : sentences) {\n            if (sentence.split(\" \")[0].equals(\"I\"\
  )) {\n                count++;\n            }\n        }\n        return count;"
- '        return (int) Arrays.stream(S.split("\\.")).map(String::trim).filter(s ->
  s.toLowerCase().startsWith("i")).count();'
- "        String[] ss = S.split(\"[.!?]\");\n        int count = 0;\n        for\
  \ (String s : ss) {\n            if (s.trim().startsWith(\"I\")) {\n           \
  \     count++;\n            }\n        }\n        return count;"
- '        return (int) Arrays.stream(S.split("[.?!]")).filter(x -> x.trim().startsWith("I")).count();'
- "        int boredoms = 0;\n        S = S.trim();\n        int len = S.length();\n\
  \        int i = 0;\n        int previ = 0;\n        while (i < len) {\n       \
  \     while (i < len && (S.charAt(i) != '.' && S.charAt(i) != '?' && S.charAt(i)\
  \ != '!')) {\n                i++;\n            }\n            if (i < len) {\n\
  \                String sentence = S.substring(previ, i);\n                if (sentence.startsWith(\"\
  I\")) {\n                    boredoms++;\n                }\n                i++;\n\
  \                previ = i;\n            }\n        }\n        return boredoms;"
- "        int count = 0;\n        String[] words = S.split(\"\\\\.|\\\\?|\\\\!\"\
  );\n        for (String word : words) {\n            if (word.trim().startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        S = S.replaceAll(\"(\\\\.[^I])|(\\\\?[^I])|(![^I])\", \"$1$2$3.\");\n \
  \       return (int) Stream.of(S.split(\"\\\\.\")).filter(x -> x.startsWith(\"I\"\
  )).count();"
- "        int n = 0;\n        String[] s = S.split(\"\\\\.|\\\\?|\\\\!\");\n    \
  \    for (int i = 0; i < s.length; i++) {\n            String[] l = s[i].split(\"\
  \ \");\n            if (l.length > 0 && l[0].equals(\"I\")) {\n                n++;\n\
  \            }\n        }\n        return n;"
- "        String[] words = S.split(\" \");\n        int count = 0;\n        for (int\
  \ i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n \
  \               count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        String[] sentences = S.split(\"[!?.]\");\n    \
  \    for (String sentence : sentences) {\n            if (sentence.startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (String sentence : S.split(\"[.?!]\")) {\n\
  \            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        // YOUR CODE HERE\n        int count = 0;\n        String[] word = S.split(\"\
  [.!?]\");\n        for (int i = 0; i < word.length; i++) {\n            if (word[i].startsWith(\"\
  I \")) {\n                count++;\n            }\n        }\n        return count;"
- "        if (S == null || S.isEmpty()) return 0;\n        if (S.startsWith(\"I\"\
  )) return 1 + isBored(S.substring(1));\n        int i = S.indexOf('.');\n      \
  \  if (i == -1) i = S.indexOf('?');\n        if (i == -1) i = S.indexOf('!');\n\
  \        if (i == -1) return 0;\n        return isBored(S.substring(i + 1));"
- "        String[] words = S.split(\"\\\\.\");\n        int count = 0;\n        for\
  \ (String word : words) {\n            if (word.startsWith(\"I\")) {\n         \
  \       count++;\n            }\n        }\n        return count;"
- "        int boredoms = 0;\n        // TODO: Implement me\n        return boredoms;"
- "        int boredoms = 0;\n        Pattern boredomPattern = Pattern.compile(\"\
  ^I\\\\s\");\n        String[] sentences = S.split(\"[.?!]\");\n        for (String\
  \ sentence : sentences) {\n            Matcher matcher = boredomPattern.matcher(sentence);\n\
  \            if (matcher.find()) boredoms++;\n        }\n        return boredoms;"
- "        int result = 0;\n        String[] sentence = S.split(\"\\\\.|\\\\?|\\\\\
  !\");\n        for (String s : sentence) {\n            if (s.trim().startsWith(\"\
  I\")) result++;\n        }\n        return result;"
- "        String[] words = S.split(\"\\\\s+\");\n        int counter = 0;\n     \
  \   if(words[0].equals(\"I\")) {\n            counter++;\n        }\n        for(int\
  \ i = 1; i < words.length; i++) {\n            if(words[i].equals(\"I\") &&\n  \
  \                  (words[i-1].endsWith(\".\") ||\n                            words[i-1].endsWith(\"\
  ?\") ||\n                            words[i-1].endsWith(\"!\"))) {\n          \
  \      counter++;\n            }\n        }\n        return counter;"
- "        if(S == null || S.length() == 0) {\n            return 0;\n        }\n\
  \        int count = 0;\n        int index = 0;\n        while(index < S.length())\
  \ {\n            char current = S.charAt(index);\n            if(current == '.'\
  \ || current == '?' || current == '!') {\n                // Move to next sentence.\n\
  \                index++;\n                if(index >= S.length()) {\n         \
  \           break;\n                }\n                current = S.charAt(index);\n\
  \                // If its not a capital I, we dont care about this sentence.\n\
  \                if(current != 'I') {\n                    continue;\n         \
  \       }\n                // It is a capital I, so we're bored!\n             \
  \   count++;\n            }\n            index++;\n        }\n        return count;"
- "        String[] sentences = S.split(\"[.?!]\");\n        int counter = 0;\n  \
  \      for (String i : sentences) {\n            String[] words = i.split(\" \"\
  );\n            if (words.length > 0 && words[0].equals(\"I\")) {\n            \
  \    counter++;\n            }\n        }\n        return counter;"
- "        // write your code in Java SE 8\n        int boredoms = 0;\n        int\
  \ index = 0;\n        while(index < S.length()) {\n            if(S.charAt(index)\
  \ == 'I') {\n                if(index == 0 || S.charAt(index - 1) == '.' || S.charAt(index\
  \ - 1) == '?' || S.charAt(index - 1) == '!') {\n                    boredoms++;\n\
  \                }\n            }\n            index++;\n        }\n        return\
  \ boredoms;"
- "        return (int) Arrays.stream(S.split(\"[.?!]\"))\n                      \
  \     .filter(s -> s.startsWith(\"I\"))\n                           .count();"
- "        // This function takes in a string and returns the number of times the\n\
  \        // word \"I\" appears.\n        // Input: string\n        // Output: number\
  \ of occurences of \"I\"\n        int count = 0;\n        Scanner SScanner = new\
  \ Scanner(S);\n        while (SScanner.hasNext()) {\n            String word = SScanner.next();\n\
  \            if (word.equals(\"I\")) {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        // First split the sentence by periods.\n        String[] sentences = S.split(\"\
  \\\\.|\\\\?|\\\\!\");\n        int boredoms = 0;\n        for (String sentence :\
  \ sentences) {\n            // Count the boredoms!\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        String[] sentences = S.split(\"[.?!]\");\n        int ans = 0;\n      \
  \  for (String sentence : sentences) {\n            if (sentence.trim().length()\
  \ == 0) {\n                continue;\n            }\n            String[] words\
  \ = sentence.split(\" \");\n            if (words[0].equals(\"I\")) {\n        \
  \        ans++;\n            }\n        }\n        return ans;"
- "        return (int)S.chars().mapToObj(c -> (char)c).reduce(new Pair<Integer, String>(0,\
  \ \"\"), (x, y) -> {\n            String s = x.getValue1();\n            if (x.getValue1().equals(\"\
  I\")) {\n                s = \"\";\n            }\n            if (y == '.' || y\
  \ == '?' || y == '!') {\n                return new Pair<Integer, String>(x.getValue0()\
  \ + (s.equals(\"I\") ? 1 : 0), \"\");\n            }\n            else {\n     \
  \           return new Pair<Integer, String>(x.getValue0(), s + y);\n          \
  \  }\n        }, (x, y) -> {\n            String s = x.getValue1();\n          \
  \  if (x.getValue1().equals(\"I\")) {\n                s = \"\";\n            }\n\
  \            return new Pair<Integer, String>(x.getValue0() + (s.equals(\"I\") ?\
  \ 1 : 0), \"\");\n        }).getValue0();"
- "        return (int)Arrays.stream(S.split(\"[.?!]\"))\n            .filter(s ->\
  \ s.trim().startsWith(\"I\"))\n            .count();"
- "        int count = 0;\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\\
  !\");\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        // First we need to divide the string into sentences.\n        String[]\
  \ sentences = S.split(\"\\\\.|\\\\?|!\");\n        // Now loop through each sentence\
  \ and check if it starts with \"I\".\n        // We can do this by using the `startsWith`\
  \ method of `String`.\n        int boredoms = 0;\n        for (String sentence :\
  \ sentences) {\n            if (sentence.startsWith(\"I\")) {\n                boredoms++;\n\
  \            }\n        }\n        return boredoms;"
- "        int i = 0;\n        S = S.trim();\n        while (i < S.length()) {\n \
  \           char c = S.charAt(i);\n            if (Character.isWhitespace(c)) {\n\
  \                i++;\n                continue;\n            }\n            if\
  \ (Character.isUpperCase(c)) {\n                break;\n            }\n        \
  \    if (c == 'i') {\n                break;\n            }\n            i++;\n\
  \        }\n        if (i == S.length()) {\n            return 0;\n        }\n \
  \       String maybe_bored = S.substring(i);\n        StringTokenizer st = new StringTokenizer(maybe_bored,\
  \ \"!?.\", false);\n        for (int j = 0; j < st.countTokens(); j++) {\n     \
  \       String word = st.nextToken();\n            if (word.length() > 1 && word.charAt(0)\
  \ == 'I') {\n                return 1;\n            }\n        }\n        return\
  \ 0;"
- "        String[] splitted = S.split(\"\\\\.\", -1);\n        int count = 0;\n \
  \       for (String s : splitted) {\n            if (s.startsWith(\"I\")) {\n  \
  \              count += 1;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (String sentence : S.split(\"\\\\.|\\\\?|\\\
  \\!\")) {\n            sentence = sentence.trim();\n            if (sentence.length()\
  \ > 0 && sentence.charAt(0) == 'I')\n                count++;\n        }\n     \
  \   return count;"
- '        return (int) Arrays.stream(S.split("[.?!]")).filter(s -> s.startsWith("I")).count();'
- '        return 0;'
- "        Pattern pattern = Pattern.compile(\"\\\\.|\\\\?|!\");\n        Matcher\
  \ matcher = pattern.matcher(S);\n        int count = 0;\n        while (matcher.find())\
  \ {\n            if (S.substring(matcher.start() + 1, matcher.start() + 3).equals(\"\
  I \")) {\n                count++;\n            }\n        }\n        return count;"
- "        // ...\n        String sentence[] = S.split(\"[.!?]\");\n        int bored\
  \ = 0;\n        for (String s : sentence) {\n            String words[] = s.split(\"\
  \ \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n        \
  \        bored++;\n            }\n        }\n        return bored;"
- "        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int count = 0;\n\
  \        for (String sentence : sentences) {\n            if (sentence.startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- '        return 0;'
- "        return Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n            .filter(s\
  \ -> s.startsWith(\"I\"))\n            .count();"
- "        int count = 0;\n        String[] arr = S.split(\"[.?!]\");\n        for\
  \ (String s : arr) {\n            if (s.startsWith(\"I\")) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int boredoms = 0;\n        String[] sentences = S.split(\"[\\\\?\\\\.\\\
  \\!]\");\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        // TODO: Implement me\n        return (int) S.chars().filter(Character::isLetter)\n\
  \                .mapToObj(x -> (char) x)\n                .collect(Collectors.groupingBy(Function.identity(),\
  \ Collectors.counting()))\n                .entrySet().stream()\n              \
  \  .map(Object::toString)\n                .collect(Collectors.joining()).chars()\n\
  \                .filter(x -> x == 'I')\n                .count();"
- '        return (int) S.chars().filter(x -> x == ''I'').count();'
- "        String[] sentences = S.split(\"[.!?]\");\n        return (int) Stream.of(sentences)\n\
  \                .filter(s -> s.split(\" \")[0].equals(\"I\"))\n               \
  \ .count();"
- '        return new StringTokenizer(S, ".").countTokens();'
- "        Pattern pattern = Pattern.compile(\"\\\\bI\\\\b\");\n        int count\
  \ = 0;\n        try {\n            Scanner scanner = new Scanner(S);\n         \
  \   while (scanner.hasNextLine()) {\n                String[] sentences = scanner.nextLine().split(\"\
  [.!?]\");\n                for (String sentence : sentences) {\n               \
  \     if (pattern.matcher(sentence).find()) {\n                        count++;\n\
  \                    }\n                }\n            }\n        } catch (InputMismatchException\
  \ e) {\n            e.printStackTrace();\n        }\n        return count;"
- "        // Your code here.\n        // Make sure to use return statements.\n  \
  \      int result = 0;\n        for (String s : S.split(\"[?!.]\")) {\n        \
  \    if (s.matches(\"^\\\\s*I.*\")) result++;\n        }\n        return result;"
- "        int boredoms = 0;\n        for (String sentence : S.split(\"[.?!]\")) {\n\
  \            if (sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n\
  \            }\n        }\n        return boredoms;"
- "        int boredoms = 0;\n        String[] S_array = S.split(\"\\\\.\");\n   \
  \     for (String s : S_array) {\n            if (s.length() > 1 && s.charAt(0)\
  \ == 'I')\n                boredoms++;\n        }\n        return boredoms;"
- "        String[] res = S.split(\"[\\\\.?!]\");\n        int n = 0;\n        for\
  \ (String s : res) {\n            String[] words = s.split(\" \");\n           \
  \ if (words.length > 0 && words[0].equals(\"I\")) {\n                n++;\n    \
  \        }\n        }\n        return n;"
- "        String[] s=S.split(\"[.!?]\");\n        int boredoms=0;\n        for(String\
  \ x:s) {\n            String[] words=x.split(\" \");\n            if(words.length>0)\
  \ {\n                if(words[0].equals(\"I\")) boredoms++;\n            }\n   \
  \     }\n        return boredoms;"
- "        String[] arr = S.split(\"[\\\\.\\\\?!]\");\n        int count = 0;\n  \
  \      for (String s : arr) {\n            s = s.trim();\n            if (s.startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        if (S == null || S.length() == 0) {\n            return 0;\n        }\n\
  \        S = S.replaceAll(\"[^a-zA-Z ]\", \"\").toLowerCase();\n        String[]\
  \ splitArr = S.split(\"[.?!]\");\n        int boredomCount = 0;\n        for (String\
  \ sentence : splitArr) {\n            String[] words = sentence.split(\" \");\n\
  \            if (words.length > 0 && words[0].equals(\"i\")) {\n               \
  \ boredomCount++;\n            }\n        }\n        return boredomCount;"
- '        return S.toLowerCase().split("(\\?|\\.|!)").length - 1;'
- "        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int count = 0;\n\
  \        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        char[] d = {'.', '?', '!'};\n        String[] ss = S.split(\"\\\\s+\");\n\
  \        int count = 0;\n        for (int i = 0; i < ss.length; i++) {\n       \
  \     if (ss[i].equals(\"I\")) {\n                while (i < ss.length && !Arrays.asList(d).contains(ss[i].charAt(ss[i].length()\
  \ - 1))) {\n                    i++;\n                }\n                count++;\n\
  \            }\n        }\n        return count;"
- "        // Write your code here\n        int count = 0;\n        StringTokenizer\
  \ tokenizer = new StringTokenizer(S, \".\");\n        while (tokenizer.hasMoreTokens())\
  \ {\n            String token = tokenizer.nextToken();\n            if (token.startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        int result = 0;\n        StringTokenizer st = new StringTokenizer(S, \"\
  ?.!\");\n        while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n\
  \            String[] words = token.split(\" \");\n            if (words.length\
  \ > 0 && words[0].equals(\"I\")) {\n                result++;\n            }\n \
  \       }\n        return result;"
- "        String[] split = S.split(\"[.?!]\");\n        int cnt = 0;\n        for\
  \ (String s : split) {\n            s = s.trim();\n            if (s.isEmpty())\
  \ {\n                continue;\n            }\n            String[] ss = s.split(\"\
  \ \");\n            if (ss[0].equals(\"I\")) {\n                cnt++;\n       \
  \     }\n        }\n        return cnt;"
- "        String[] splitted = S.split(\"[.!?]\");\n        int result = 0;\n    \
  \    for (String s : splitted) {\n            if (s.startsWith(\"I\")) {\n     \
  \           result += 1;\n            }\n        }\n        return result;"
- "        int numBoredoms = 0;\n        for (String sentence : S.split(\"\\\\.|\\\
  \\?|\\\\!\")) {\n            if (sentence.startsWith(\"I\")) {\n               \
  \ numBoredoms++;\n            }\n        }\n        return numBoredoms;"
- "        String[] ss = S.split(\"[.!?]\");\n        int boredoms = 0;\n        for\
  \ (String s : ss) {\n            s = s.trim();\n            if (s.startsWith(\"\
  I \")) {\n                boredoms++;\n            }\n        }\n        return\
  \ boredoms;"
- '        return S.replaceAll("[^I]I[^\\.?!]*[\\.?!]", "").split("I").length - 1;'
- "        String[] sentences = S.split(\"[.?!]\");\n        return (int)Arrays.stream(sentences).filter(s\
  \ -> s.trim().startsWith(\"I\")).count();"
- "        int count = 0;\n        char[] sChars = S.toCharArray();\n        boolean\
  \ isSentence = false;\n        boolean isBored = false;\n        int lastPeriod\
  \ = 0;\n        for (int i = 0; i < sChars.length; i++) {\n            char c =\
  \ sChars[i];\n            if (c == '.' || c == '?' || c == '!') {\n            \
  \    lastPeriod = i;\n                isSentence = true;\n            }\n      \
  \      if (isSentence && i > lastPeriod + 1 && sChars[i-1] == ' ' && c == 'I') {\n\
  \                isBored = true;\n            }\n            if (isSentence && (c\
  \ == '.' || c == '?' || c == '!')) {\n                if (isBored) {\n         \
  \           count++;\n                }\n                isSentence = false;\n \
  \               isBored = false;\n            }\n        }\n        return count;"
- "        String[] sentences = S.split(\"[.?!]\");\n        int boredoms = 0;\n \
  \       for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \\\\s+\");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n    \
  \            boredoms++;\n            }\n        }\n        return boredoms;"
- "        int count = 0;\n        String[] splitString = S.split(\"[.?!]\");\n  \
  \      for (String sentence : splitString) {\n            if (sentence.startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        int boredoms = 0;\n        // Split the sentence into a list of sentences\n\
  \        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence\
  \ : sentences) {\n            // Split the sentence into a list of words\n     \
  \       String[] words = sentence.split(\" \");\n            if (words.length >\
  \ 0 && words[0].equals(\"I\")) {\n                boredoms++;\n            }\n \
  \       }\n        return boredoms;"
- "        int count = 0;\n        for (String s : S.split(\"\\\\.|\\\\?|\\\\!\"))\
  \ {\n            if (s.trim().startsWith(\"I\")) {\n                count++;\n \
  \           }\n        }\n        return count;"
- '        return Stream.of(S.split("[\\.|\\?|!]")).map(s -> s.trim()).filter(s ->
  s.startsWith("I")).collect(Collectors.toList()).size();'
- "        if (S == null || S.isEmpty()) {\n            return 0;\n        }\n   \
  \     int boredoms = 0;\n        String[] sentences = S.split(\"[.?!]\");\n    \
  \    for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \\\\s+\");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n    \
  \            boredoms++;\n            }\n        }\n        return boredoms;"
- "        int count = 0;\n        for (String s : S.split(\"[.!?]\")) {\n       \
  \     if (s.startsWith(\"I\")) count++;\n        }\n        return count;"
- "        String[] sentences = S.split(\"[\\\\.\\\\?\\\\!]\");\n        int count\
  \ = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- '      return S.split("[?!.]").length;'
- "        int boredoms = 0;\n        for (String sentence : S.split(\"\\\\.|\\\\\
  ?|\\\\!\")) {\n            if (sentence.trim().startsWith(\"I\")) {\n          \
  \      boredoms++;\n            }\n        }\n        return boredoms;"
- "        String[] strings = S.split(\"[.?!]\");\n        int count = 0;\n      \
  \  for (String s : strings) {\n            if (s.trim().startsWith(\"I\")) {\n \
  \               count++;\n            }\n        }\n        return count;"
- "        String[] arr = S.split(\"\\\\.|\\\\?|\\\\!\");\n        int count = 0;\n\
  \        for (String str : arr) {\n            if (str.startsWith(\"I\")) {\n  \
  \              count++;\n            }\n        }\n        return count;"
- "        String[] words = S.split(\"[\\\\.\\\\?!]\");\n        int count = 0;\n\
  \        for (String word : words) {\n            if (word.trim().startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        int offset = 0;\n        while (true) {\n     \
  \       int i = S.indexOf(\"I\", offset);\n            if (i == -1) {\n        \
  \        break;\n            }\n            int j = S.indexOf('.', i);\n       \
  \     int k = S.indexOf('?', i);\n            int l = S.indexOf('!', i);\n     \
  \       int m = Math.min(Math.min(j, k), l);\n            if (m == -1) {\n     \
  \           break;\n            }\n            count++;\n            offset = m;\n\
  \        }\n        return count;"
- "        S = S.replace(\"?\", \".\");\n        S = S.replace(\"!\", \".\");\n  \
  \      return (int) Arrays.stream(S.split(\"\\\\.\")).filter(s -> s.contains(\"\
  I\")).count();"
- "        int count = 0;\n        String[] parts = S.split(\"[.?!]\");\n        for\
  \ (String part : parts) {\n            if (part.length() > 0 && part.charAt(0) ==\
  \ 'I')\n                count++;\n        }\n        return count;"
- "        return Arrays.stream(S.split(\"[.?!]\"))\n            .filter(x -> x.startsWith(\"\
  I\") || x.startsWith(\" i\"))\n            .toArray().length;"
- "        int boredoms = 0;\n        for (String sentence : S.split(\"[.?!]\")) {\n\
  \            if (sentence.trim().startsWith(\"I\"))\n                boredoms++;\n\
  \        }\n        return boredoms;"
- "        return (int) Stream.of(S.split(\"[.!?]\"))\n                          \
  \ .filter(s -> s.trim().startsWith(\"I\"))\n                           .count();"
- "        int count = 0;\n        for (String s : S.split(\"[.?!]\")) {\n       \
  \     if (s.startsWith(\"I\")) {\n                count++;\n            }\n    \
  \    }\n        return count;"
- "        int count = 0;\n        for (String s : S.split(\"[.?!]\")) {\n       \
  \     if (s.trim().startsWith(\"I\")) {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        int count = 0;\n        String[] split = S.split(\"\\\\.\");\n        for\
  \ (String e : split) {\n            if (e.trim().startsWith(\"I\"))\n          \
  \      count++;\n        }\n        return count;"
- "        return (int)Stream.of(S.split(\"[.!?]\"))\n            .filter(s -> s.startsWith(\"\
  I\"))\n            .count();"
- "        if (S == null || S.length() == 0) {\n            return 0;\n        }\n\
  \        String delims = \"[.?!]\";\n        int boredoms = 0;\n        String[]\
  \ sentences = S.split(delims);\n        for (String sentence : sentences) {\n  \
  \          if (sentence.startsWith(\"I\")) {\n                boredoms++;\n    \
  \        }\n        }\n        return boredoms;"
- "        return (int) Arrays.stream(S.split(\"[.?!]\"))\n                      \
  \     .filter(x -> x.matches(\"^(?i)i\\\\s.*$\"))\n                           .count();"
- "        String[] sentences = S.split(\"[.?!]\");\n        int boredoms = 0;\n \
  \       for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \\\\s+\");\n            if (words.length == 0) {\n                continue;\n  \
  \          }\n            if (words[0].equals(\"I\")) {\n                boredoms++;\n\
  \            }\n        }\n        return boredoms;"
- "        if (S == null || S.isEmpty()) {\n            return 0;\n        }\n   \
  \     int count = 0;\n        String[] split = S.split(\"\\\\.|\\\\?|\\\\!\");\n\
  \        for (String s : split) {\n            if (s.trim().startsWith(\"I\")) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        StringTokenizer st = new StringTokenizer(S, \"!?.\", true);\n        int\
  \ boredoms = 0;\n        boolean previousWasSentenceEnd = false;\n        while\
  \ (st.hasMoreTokens()) {\n            String token = st.nextToken();\n         \
  \   if (token.equals(\".\")) {\n                if (previousWasSentenceEnd) {\n\
  \                    previousWasSentenceEnd = false;\n                } else {\n\
  \                    previousWasSentenceEnd = true;\n                }\n       \
  \     } else if (token.equals(\"!\") || token.equals(\"?\")) {\n               \
  \ previousWasSentenceEnd = true;\n            } else if (token.equals(\"I\")) {\n\
  \                if (previousWasSentenceEnd) {\n                    boredoms++;\n\
  \                }\n            } else {\n                previousWasSentenceEnd\
  \ = false;\n            }\n        }\n        return boredoms;"
- "        return (int) Stream.of(S.split(\"[.?!]\"))\n                          \
  \ .filter(x -> x.startsWith(\"I\"))\n                           .count();"
- "        String[] bored = S.split(\"[.?!]\");\n        int boredness = 0;\n    \
  \    for (String s : bored) {\n            String[] words = s.split(\" \");\n  \
  \          if (words.length > 0 && words[0].equals(\"I\"))\n                boredness++;\n\
  \        }\n        return boredness;"
- "        S = S.replaceAll(\"\\\\?\", \".\");\n        S = S.replaceAll(\"!\", \"\
  .\");\n        String[] s = S.split(\"\\\\.\");\n        int result = 0;\n     \
  \   for (String sentence : s) {\n            String[] words = sentence.split(\"\
  \ \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n        \
  \        result++;\n            }\n        }\n        return result;"
- "        int count = 0;\n        S = S.replaceAll(\" \", \"\");\n        int start_of_sentence\
  \ = 0;\n        while (start_of_sentence < S.length()) {\n            int next_sentence\
  \ = S.indexOf('.', start_of_sentence);\n            if (next_sentence == -1) {\n\
  \                next_sentence = S.indexOf('?', start_of_sentence);\n          \
  \  }\n            if (next_sentence == -1) {\n                next_sentence = S.indexOf('!',\
  \ start_of_sentence);\n            }\n            if (next_sentence == -1) {\n \
  \               next_sentence = S.length();\n            }\n            if (S.substring(start_of_sentence,\
  \ start_of_sentence + 1).equals(\"I\")) {\n                count += 1;\n       \
  \     }\n            start_of_sentence = next_sentence + 1;\n        }\n       \
  \ return count;"
- "        String[] tokens = S.split(\"[.?!]\");\n        int count = 0;\n       \
  \ for (String str : tokens) {\n            if (str.startsWith(\"I\")) {\n      \
  \          count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        StringTokenizer st = new StringTokenizer(S, \"\
  \ .!?\\n\");\n        while (st.hasMoreTokens()) {\n            String tok = st.nextToken();\n\
  \            if (tok.equals(\"I\")) count++;\n        }\n        return count;"
- "        return (int)Arrays.stream(S.split(\"[\\\\.\\\\?!]\"))\n               \
  \           .filter(x -> x.startsWith(\"I\")).count();"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");"
- "        int boredoms = 0;\n        String[] sentences = S.split(\"[.?!]\");\n \
  \       for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \ \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n        \
  \        boredoms++;\n            }\n        }\n        return boredoms;"
- "        int count = 0;\n        int i = 0;\n        while (i < S.length()) {\n\
  \            while (i < S.length() && !Character.isUpperCase(S.charAt(i))) {\n \
  \               i++;\n            }\n            if (i < S.length() && S.charAt(i)\
  \ == 'I') {\n                count++;\n            }\n            while (i < S.length()\
  \ && S.charAt(i) != '.' && S.charAt(i) != '?' && S.charAt(i) != '!') {\n       \
  \         i++;\n            }\n            i++;\n        }\n        return count;"
- "        int count = 0;\n        int i = 0;\n        while (i < S.length()) {\n\
  \            while (i < S.length() && S.charAt(i) != 'I') i++;\n            while\
  \ (i < S.length() && S.charAt(i) != '.' && S.charAt(i) != '?' && S.charAt(i) !=\
  \ '!') i++;\n            count++;\n            i++;\n        }\n        return count;"
- '        return (int)Stream.of(S.split("[.?!]")).filter(s -> s.startsWith("I")).count();'
- "        int counter = 0;\n        String[] words = S.split(\"[.!?]\");\n      \
  \  for (String word : words) {\n            if (word.length() > 0 && word.charAt(0)\
  \ == 'I') {\n                counter++;\n            }\n        }\n        return\
  \ counter;"
- "        String[] sentences = S.split(\"[\\\\!\\\\.\\\\?]\");\n        int boredoms\
  \ = 0;\n        for (String sentence : sentences) {\n            if (sentence.startsWith(\"\
  I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        // TODO: Write your code here.\n        return 0;"
- '        return 0;'
- '        return Arrays.stream(S.split("[.?!]")).filter(sentence -> sentence.startsWith("I")).collect(Collectors.toList()).size();'
- "        String [] sent = S.split(\"[.?!]\");\n        int count = 0;\n        for\
  \ (String s : sent) {\n            s = s.trim();\n            if (s.startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        // S will be null, empty or only contain spaces.\n        String[] words\
  \ = S.split(\" \");\n        int num_bored = 0;\n        boolean bored = false;\n\
  \        for (String word : words) {\n            // I found another way of writing\
  \ this that's slightly better.\n            if (word.equals(\"I\")) {\n        \
  \        bored = true;\n            } else if (word.endsWith(\".\") || word.endsWith(\"\
  ?\") || word.endsWith(\"!\")) {\n                if (bored) {\n                \
  \    num_bored++;\n                }\n                bored = false;\n         \
  \   }\n        }\n        return num_bored;"
- "        int count = 0;\n        int c = 0;\n        for (int i = 0; i < S.length();\
  \ i++) {\n            if (S.charAt(i) == 'I') {\n                c++;\n        \
  \    }\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i)\
  \ == '!') {\n                count += c;\n                c = 0;\n            }\n\
  \        }\n        return count;"
- '        return (int) S.split("\\.|\\?|!").filter(s -> s.trim().startsWith("I")).count();'
- "        String[] str = S.split(\"(\\\\.|\\\\?|!)\");\n        int bored = 0;\n\
  \        for (String s : str) {\n            if (s.startsWith(\"I\"))\n        \
  \        bored++;\n        }\n        return bored;"
- '        return (int) S.split("\\.|\\?|!").length - 1;'
- "        S = S.replace(\".\", \"\").replace(\"?\", \"\").replace(\"!\", \"\");\n\
  \        int boredoms = 0;\n        String[] words = S.split(\" \");\n        for\
  \ (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\"))\
  \ {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        String[] s = S.split(\"\\\\.\");\n        int count = 0;\n        for (String\
  \ m : s) {\n            String[] f = m.split(\"\\\\?\");\n            for (String\
  \ n : f) {\n                String[] g = n.split(\"\\\\!\");\n                for\
  \ (String p : g) {\n                    String[] t = p.split(\" \");\n         \
  \           if (t[0].equals(\"I\")) {\n                        count++;\n      \
  \              }\n                }\n            }\n        }\n        return count;"
- "        int boredoms = 0;\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\
  \\!\");\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        int boredomCount = 0;\n        StringTokenizer tokenizer = new StringTokenizer(S,\
  \ \"!?.\");\n        while (tokenizer.hasMoreTokens()) {\n            String tempString\
  \ = tokenizer.nextToken();\n            if (tempString.startsWith(\"I\")) {\n  \
  \              boredomCount++;\n            }\n        }\n        return boredomCount;"
- "        int total = 0;\n        for (String sentence : S.split(\"[\\\\.\\\\?!]\"\
  )) {\n            if (sentence.matches(\"I .*\")) {\n                total++;\n\
  \            }\n        }\n        return total;"
- "        char[] arr = S.toCharArray();\n        int count = 0;\n        char last\
  \ = '.';\n        for (int i = 0; i < arr.length; i++) {\n            char ch =\
  \ arr[i];\n            if (last == '.' || last == '?' || last == '!') {\n      \
  \          if (ch == 'I') {\n                    count++;\n                }\n \
  \           }\n            last = ch;\n        }\n        return count;"
- "        // Your code here.\n        int count = 0;\n        String[] arr = S.split(\"\
  (?<=[!?.])\\\\s*\");\n        for (String s : arr) {\n            if (s.split(\"\
  \ \")[0].equals(\"I\")) {\n                count++;\n            }\n        }\n\
  \        return count;"
- "        String[] spl = S.split(\"[.?!]\");\n        int boredoms = 0;\n       \
  \ for (String s : spl) {\n            if (s.length() > 0 && s.charAt(0) == 'I')\
  \ {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        return (int) Arrays.stream(S.split(\"\\\\.\"))\n                      \
  \     .filter(s -> s.startsWith(\"I\"))\n                           .count();"
- "        int counter = 0;\n        int index = 0;\n        while (index < S.length())\
  \ {\n            if (S.charAt(index) == 'I') {\n                counter++;\n   \
  \         }\n            while (index < S.length() && S.charAt(index) != '.' &&\
  \ S.charAt(index) != '?' && S.charAt(index) != '!') {\n                index++;\n\
  \            }\n            index++;\n        }\n        return counter;"
- "        if (S == null || S.length() == 0) {\n            return 0;\n        }\n\
  \        String[] words = S.split(\"\\\\s+\");\n        int result = 0;\n      \
  \  boolean flag = false;\n        for (String word : words) {\n            if (word.equals(\"\
  I\")) {\n                flag = true;\n            }\n            if (word.equals(\"\
  .\") || word.equals(\"?\") || word.equals(\"!\")) {\n                result += flag\
  \ ? 1 : 0;\n                flag = false;\n            }\n        }\n        return\
  \ result;"
- "        int count = 0;\n        String[] strs = S.split(\"\\\\.|\\\\?|\\\\!\");\n\
  \        for (String s : strs) {\n            s = s.trim();\n            if (s.length()\
  \ > 0 && s.charAt(0) == 'I') {\n                count++;\n            }\n      \
  \  }\n        return count;"
- "        int boredoms = 0;\n        // Your code here.\n        return boredoms;"
- "        // Split the string by delimiters\n        String[] arr = S.split(\"[.?!]\"\
  );\n        // Initialize the boredoms to 0\n        int boredoms = 0;\n       \
  \ // For each sentence, check if the first word is I\n        for (String sentence\
  \ : arr) {\n            String[] words = sentence.split(\"\\\\s+\");\n         \
  \   if (words.length > 0 && words[0].equals(\"I\")) {\n                boredoms++;\n\
  \            }\n        }\n        return boredoms;"
- "        int boredoms = 0;\n        for (String sent : S.split(\"[.?!]\")) {\n \
  \           if (sent.trim().startsWith(\"I\")) {\n                boredoms++;\n\
  \            }\n        }\n        return boredoms;"
- '        return (int) Arrays.stream(S.split("[.!?]")).filter(x -> x.trim().startsWith("I")).count();'
- "        String[] sentences = S.split(\"[.?!]\");\n        return (int) Arrays.stream(sentences).filter(s\
  \ -> s.trim().startsWith(\"I\")).count();"
- "        int boredoms = 0;\n        String sentence[] = S.split(\"[.!?]\");\n  \
  \      for (String s : sentence) {\n            if (s.startsWith(\"I\")) {\n   \
  \             boredoms++;\n            }\n        }\n        return boredoms;"
- '        return 0;'
- "        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int count = 0;\n\
  \        for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \ \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n        \
  \        count++;\n            }\n        }\n        return count;"
- "        int boredoms = 0;\n        // You may assume that if 'I' is followed by\
  \ a space, it is the beginning\n        // of a sentence.\n        // You may also\
  \ assume that sentences are always ended by '.', '?' or '!'\n        // You may\
  \ assume that if 'I' is not followed by a space, it is not the\n        // beginning\
  \ of a sentence.\n        // You may assume that any '.', '?' or '!' that is not\
  \ preceded by a space\n        // is not a sentence delimiter.\n        // You may\
  \ assume that 'I' is not the last character in the string.\n        // Ignore case.\n\
  \n        // Begin your code here.\n        //\n        //\n        //\n       \
  \ //\n        //\n        // End your code here.\n        return boredoms;"
- "        int boredoms = 0;\n        String[] sentences = S.split(\"\\\\.\");\n \
  \       for (String sentence : sentences) {\n            String[] words = sentence.split(\"\
  \ \");\n            if (words.length > 0 && words[0].toLowerCase().equals(\"i\"\
  )) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- '        return (int) Arrays.stream(S.split("\\.")).map(i -> i.trim()).filter(i
  -> i.startsWith("I")).count();'
- "        // Split the string by the possible characters used to end a sentence.\n\
  \        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int boredoms\
  \ = 0;\n        for (String sentence : sentences) {\n            // The sentence\
  \ has a boredom if it starts with the word \"I\".\n            if (sentence.trim().startsWith(\"\
  I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- '        return 0;'
- '        // Your code here.'
- "        // Your code here\n        String[] split = S.split(\"[\\\\.\\\\?\\\\!]\"\
  );\n        int count = 0;\n        for (String str : split) {\n            String[]\
  \ words = str.split(\" \");\n            if (words.length > 0 && words[0].equals(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
language: java
name: HumanEval_91_is_bored
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
  \ blue. The sun is shining. I love this weather\")\n    // 1\n    public static\
  \ int isBored(String S) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(isBored((\"Hello\
  \ world\")) == (0));\n    assert(isBored((\"Is the sky blue?\")) == (0));\n    assert(isBored((\"\
  I love It !\")) == (1));\n    assert(isBored((\"bIt\")) == (0));\n    assert(isBored((\"\
  I feel good today. I will be productive. will kill It\")) == (2));\n    assert(isBored((\"\
  You and I are going for a walk\")) == (0));\n    }\n\n}\n"
