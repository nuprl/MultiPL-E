name: HumanEval_148_bf
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtw0icc9.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        HashSet<String> set = new HashSet<>();\n\
    \        ArrayList<String> res = new ArrayList<>();\n        if (planet1.equals(\"\
    Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"\
    Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"\
    Neptune\")){\n            set.add(planet1);\n        }\n        if (planet2.equals(\"\
    Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"\
    Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"\
    Neptune\")){\n            set.add(planet2);\n        }\n        if (set.contains(\"\
    Mercury\")){\n            res.add(\"Mercury\");\n        }\n        if (set.contains(\"\
    Venus\")){\n            res.add(\"Venus\");\n        }\n        if (set.contains(\"\
    Earth\")){\n            res.add(\"Earth\");\n        }\n        if (set.contains(\"\
    Mars\")){\n            res.add(\"Mars\");\n        }\n        if (set.contains(\"\
    Jupiter\")){\n            res.add(\"Jupiter\");\n        }\n        if (set.contains(\"\
    Saturn\")){\n            res.add(\"Saturn\");\n        }\n        if (set.contains(\"\
    Uranus\")){\n            res.add(\"Uranus\");\n        }\n        if (set.contains(\"\
    Neptune\")){\n            res.add(\"Neptune\");\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsqyafcxu.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        throw new UnsupportedOperationException(\"\
    You must implement this function.\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: You\
    \ must implement this function.\n\tat Problem.bf(tmpq3ii8zmv.java:23)\n\tat Problem.main(tmpq3ii8zmv.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        ArrayList<String> temp = new ArrayList<String>();\n     \
    \   if (planets.contains(planet1) && planets.contains(planet2)) {\n          \
    \  if (planets.indexOf(planet1) < planets.indexOf(planet2)) {\n              \
    \  temp = new ArrayList<String>(planets.subList(planets.indexOf(planet1) + 1,\
    \ planets.indexOf(planet2)));\n            } else {\n                temp = new\
    \ ArrayList<String>(planets.subList(planets.indexOf(planet2) + 1, planets.indexOf(planet1)));\n\
    \            }\n        }\n        return temp;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: fromIndex(3)\
    \ > toIndex(2)\n\tat java.util.ArrayList.subListRangeCheck(ArrayList.java:1014)\n\
    \tat java.util.ArrayList.subList(ArrayList.java:1004)\n\tat Problem.bf(tmpjvkwsr6_.java:37)\n\
    \tat Problem.main(tmpjvkwsr6_.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        boolean b1 = planets.contains(planet1);\n        boolean b2 = planets.contains(planet2);\n\
    \        if(b1 && b2) {\n            int p1 = planets.indexOf(planet1);\n    \
    \        int p2 = planets.indexOf(planet2);\n            if(p1 < p2) {\n     \
    \           while(p1 < p2) {\n                    res.add(planets.get(p1));\n\
    \                    p1++;\n                }\n            }\n            else\
    \ {\n                while(p2 < p1) {\n                    res.add(planets.get(p2));\n\
    \                    p2++;\n                }\n            }\n        }\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjskjaugo.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        Map<String,Integer> map = new HashMap<>();\n\
    \        map.put(\"Mercury\",1);\n        map.put(\"Venus\",2);\n        map.put(\"\
    Earth\",3);\n        map.put(\"Mars\",4);\n        map.put(\"Jupiter\",5);\n \
    \       map.put(\"Saturn\",6);\n        map.put(\"Uranus\",7);\n        map.put(\"\
    Neptune\",8);\n        if(!map.containsKey(planet1) || !map.containsKey(planet2))\
    \ return new ArrayList<>();\n        ArrayList<String> result = new ArrayList<>();\n\
    \        boolean min = map.get(planet1) < map.get(planet2);\n        for(Map.Entry<String,Integer>\
    \ el: map.entrySet()){\n            if(min && el.getValue() > map.get(planet1)\
    \ && el.getValue() < map.get(planet2))\n                result.add(el.getKey());\n\
    \            if(!min && el.getValue() > map.get(planet2) && el.getValue() < map.get(planet1))\n\
    \                result.add(el.getKey());\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpccpcrblf.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        return new ArrayList<String>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9tt6th8j.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        return new ArrayList<String>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3bwgp8fx.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>();\n\
    \        ArrayList<String> result = new ArrayList<>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n   \
    \         int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n\
    \            if(index1 > index2) {\n                for(int i = index2 + 1; i\
    \ < index1; i++) {\n                    result.add(planets.get(i));\n        \
    \        }\n            }\n            else {\n                for(int i = index1\
    \ + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n \
    \               }\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        ArrayList<String> planetsBetween = new ArrayList<>();\n \
    \       if(!planets.contains(planet1) || !planets.contains(planet2)) {\n     \
    \       return planetsBetween;\n        }\n        int start = Math.min(planets.indexOf(planet1),\
    \ planets.indexOf(planet2));\n        int end = Math.max(planets.indexOf(planet1),\
    \ planets.indexOf(planet2));\n        for(int i = start + 1; i < end; i++) {\n\
    \            planetsBetween.add(planets.get(i));\n        }\n        return planetsBetween;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> planetList = new ArrayList<String>();\n\
    \        for (Planet planet : Planet.values()) {\n            planetList.add(planet.name());\n\
    \        }\n        if (!planetList.contains(planet1) || !planetList.contains(planet2))\
    \ {\n            return new ArrayList<String>();\n        }\n        int planet1Order\
    \ = planetList.indexOf(planet1);\n        int planet2Order = planetList.indexOf(planet2);\n\
    \        int planet1OrderIndex = Math.min(planet1Order, planet2Order);\n     \
    \   int planet2OrderIndex = Math.max(planet1Order, planet2Order);\n        return\
    \ new ArrayList<String>(planetList.subList(planet1OrderIndex + 1, planet2OrderIndex));\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcsm_vvgf.java:24: error: cannot find symbol\n        for (Planet\
    \ planet : Planet.values()) {\n                             ^\n  symbol:   variable\
    \ Planet\n  location: class Problem\n/tmp/tmpcsm_vvgf.java:24: error: cannot find\
    \ symbol\n        for (Planet planet : Planet.values()) {\n             ^\n  symbol:\
    \   class Planet\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> ret = new ArrayList<String>();\n\
    \        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"};\n        boolean planet1B = false;\n \
    \       boolean planet2B = false;\n        int planet1I = 0;\n        int planet2I\
    \ = 0;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                planet1B = true;\n                planet1I = i;\n       \
    \     }\n            if (planets[i].equals(planet2)) {\n                planet2B\
    \ = true;\n                planet2I = i;\n            }\n        }\n        if\
    \ (planet1B && planet2B) {\n            int start = Math.min(planet1I, planet2I);\n\
    \            int end = Math.max(planet1I, planet2I);\n            for (int i =\
    \ start + 1; i < end; i++) {\n                ret.add(planets[i]);\n         \
    \   }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        // Write your code here.\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpycccbr3e.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        if (planet1.equals(\"\") || planet2.equals(\"\
    \")) return new ArrayList<String>();\n        ArrayList<String> planets = new\
    \ ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) return new ArrayList<String>();\n        if (planets.indexOf(planet1)\
    \ > planets.indexOf(planet2)) {\n            return new ArrayList<String>(planets.subList(planets.indexOf(planet2)\
    \ + 1, planets.indexOf(planet1)));\n        } else {\n            return new ArrayList<String>(planets.subList(planets.indexOf(planet1)\
    \ + 1, planets.indexOf(planet2)));\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: fromIndex(3)\
    \ > toIndex(2)\n\tat java.util.ArrayList.subListRangeCheck(ArrayList.java:1014)\n\
    \tat java.util.ArrayList.subList(ArrayList.java:1004)\n\tat Problem.bf(tmpzwds0gpo.java:29)\n\
    \tat Problem.main(tmpzwds0gpo.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> names = new ArrayList<String>();\n\
    \        if (orb.containsKey(planet1) && orb.containsKey(planet2)) {\n       \
    \     if (orb.get(planet1) < orb.get(planet2)) {\n                for (String\
    \ name : orb.keySet()) {\n                    if (orb.get(name) > orb.get(planet1)\
    \ && orb.get(name) < orb.get(planet2)) {\n                        names.add(name);\n\
    \                    }\n                }\n            } else {\n            \
    \    for (String name : orb.keySet()) {\n                    if (orb.get(name)\
    \ > orb.get(planet2) && orb.get(name) < orb.get(planet1)) {\n                \
    \        names.add(name);\n                    }\n                }\n        \
    \    }\n        }\n        Collections.sort(names, new Comparator<String>() {\n\
    \            @Override\n            public int compare(String s1, String s2) {\n\
    \                return orb.get(s1) - orb.get(s2);\n            }\n        });\n\
    \        return names;\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkedmdpx8.java:24: error: cannot find symbol\n        if (orb.containsKey(planet1)\
    \ && orb.containsKey(planet2)) {\n            ^\n  symbol:   variable orb\n  location:\
    \ class Problem\n/tmp/tmpkedmdpx8.java:24: error: cannot find symbol\n       \
    \ if (orb.containsKey(planet1) && orb.containsKey(planet2)) {\n              \
    \                          ^\n  symbol:   variable orb\n  location: class Problem\n\
    /tmp/tmpkedmdpx8.java:25: error: cannot find symbol\n            if (orb.get(planet1)\
    \ < orb.get(planet2)) {\n                ^\n  symbol:   variable orb\n  location:\
    \ class Problem\n/tmp/tmpkedmdpx8.java:25: error: cannot find symbol\n       \
    \     if (orb.get(planet1) < orb.get(planet2)) {\n                           \
    \        ^\n  symbol:   variable orb\n  location: class Problem\n/tmp/tmpkedmdpx8.java:26:\
    \ error: cannot find symbol\n                for (String name : orb.keySet())\
    \ {\n                                   ^\n  symbol:   variable orb\n  location:\
    \ class Problem\n/tmp/tmpkedmdpx8.java:27: error: cannot find symbol\n       \
    \             if (orb.get(name) > orb.get(planet1) && orb.get(name) < orb.get(planet2))\
    \ {\n                        ^\n  symbol:   variable orb\n  location: class Problem\n\
    /tmp/tmpkedmdpx8.java:27: error: cannot find symbol\n                    if (orb.get(name)\
    \ > orb.get(planet1) && orb.get(name) < orb.get(planet2)) {\n                \
    \                        ^\n  symbol:   variable orb\n  location: class Problem\n\
    /tmp/tmpkedmdpx8.java:27: error: cannot find symbol\n                    if (orb.get(name)\
    \ > orb.get(planet1) && orb.get(name) < orb.get(planet2)) {\n                \
    \                                            ^\n  symbol:   variable orb\n  location:\
    \ class Problem\n/tmp/tmpkedmdpx8.java:27: error: cannot find symbol\n       \
    \             if (orb.get(name) > orb.get(planet1) && orb.get(name) < orb.get(planet2))\
    \ {\n                                                                        \
    \    ^\n  symbol:   variable orb\n  location: class Problem\n/tmp/tmpkedmdpx8.java:32:\
    \ error: cannot find symbol\n                for (String name"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        Map<String, Integer> map = new HashMap<>();\n\
    \        map.put(\"Mercury\", 1);\n        map.put(\"Venus\", 2);\n        map.put(\"\
    Earth\", 3);\n        map.put(\"Mars\", 4);\n        map.put(\"Jupiter\", 5);\n\
    \        map.put(\"Saturn\", 6);\n        map.put(\"Uranus\", 7);\n        map.put(\"\
    Neptune\", 8);\n        ArrayList<String> res = new ArrayList<>();\n        if\
    \ (!map.containsKey(planet1) || !map.containsKey(planet2)) {\n            return\
    \ res;\n        }\n        if (map.get(planet1) > map.get(planet2)) {\n      \
    \      String tmp = planet1;\n            planet1 = planet2;\n            planet2\
    \ = tmp;\n        }\n        for (String key : map.keySet()) {\n            if\
    \ (map.get(key) > map.get(planet1) && map.get(key) < map.get(planet2)) {\n   \
    \             res.add(key);\n            }\n        }\n        return res;\n \
    \   }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
    , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjov6a8rc.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> r = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"\
    Venus\")) r.add(\"Venus\");\n            if (planet2.equals(\"Earth\")) r.add(\"\
    Venus\");\n            if (planet2.equals(\"Mars\")) r.add(\"Venus\");\n     \
    \       if (planet2.equals(\"Jupiter\")) r.add(\"Venus\");\n            if (planet2.equals(\"\
    Saturn\")) r.add(\"Venus\");\n            if (planet2.equals(\"Uranus\")) r.add(\"\
    Venus\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Venus\");\n  \
    \      }\n        if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"\
    Earth\")) r.add(\"Earth\");\n            if (planet2.equals(\"Mars\")) r.add(\"\
    Earth\");\n            if (planet2.equals(\"Jupiter\")) r.add(\"Earth\");\n  \
    \          if (planet2.equals(\"Saturn\")) r.add(\"Earth\");\n            if (planet2.equals(\"\
    Uranus\")) r.add(\"Earth\");\n            if (planet2.equals(\"Neptune\")) r.add(\"\
    Earth\");\n        }\n        if (planet1.equals(\"Earth\")) {\n            if\
    \ (planet2.equals(\"Mars\")) r.add(\"Mars\");\n            if (planet2.equals(\"\
    Jupiter\")) r.add(\"Mars\");\n            if (planet2.equals(\"Saturn\")) r.add(\"\
    Mars\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Mars\");\n     \
    \       if (planet2.equals(\"Neptune\")) r.add(\"Mars\");\n        }\n       \
    \ if (planet1.equals(\"Mars\")) {\n            if (planet2.equals(\"Jupiter\"\
    )) r.add(\"Jupiter\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Jupiter\"\
    );\n            if (planet2.equals(\"Uranus\")) r.add(\"Jupiter\");\n        \
    \    if (planet2.equals(\"Neptune\")) r.add(\"Jupiter\");\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpag839h05.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpag839h05.java:55: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpag839h05.java:55: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpag839h05.java:55: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpag839h05.java:55: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpag839h05.java:65:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        ArrayList<String> output = new ArrayList<String>();\n   \
    \     int p1Index = planets.indexOf(planet1);\n        int p2Index = planets.indexOf(planet2);\n\
    \        if(p1Index==-1 || p2Index==-1) {\n            return output;\n      \
    \  }\n        if(p1Index<p2Index) {\n            for(int i=p1Index+1;i<p2Index;i++)\
    \ {\n                output.add(planets.get(i));\n            }\n        } else\
    \ {\n            for(int i=p2Index+1;i<p1Index;i++) {\n                output.add(planets.get(i));\n\
    \            }\n        }\n        return output;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> planets = new ArrayList<String>();\n\
    \        ArrayList<String> betweenPlanets = new ArrayList<String>();\n       \
    \ planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2))\
    \ {\n            return betweenPlanets;\n        }\n        int j = planets.indexOf(planet1);\n\
    \        int k = planets.indexOf(planet2);\n        int start = j < k ? j : k;\n\
    \        int end = j < k ? k : j;\n        for (int i = start + 1; i < end; i++)\
    \ {\n            betweenPlanets.add(planets.get(i));\n        }\n        return\
    \ betweenPlanets;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    )))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String\
    \ planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return result;\n        }\n\
    \        int i = i1;\n        if (i2 < i1) {\n            i = i2;\n          \
    \  i2 = i1;\n            i1 = i;\n        }\n        for (; i <= i2; i++) {\n\
    \            if (i == i1) {\n                continue;\n            }\n      \
    \      result.add(planets.get(i));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk8cuozg5.java:45)\n"
  exit_code: 1
  status: Exception
