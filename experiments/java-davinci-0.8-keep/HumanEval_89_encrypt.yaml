completions:
- '        return "";'
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String result\
  \ = \"\";\n        String[] stringArr = s.split(\"\");\n        String[] alphabetArr\
  \ = alphabet.split(\"\");\n        for (int i = 0; i < stringArr.length; i++) {\n\
  \            int index = 0;\n            for (int j = 0; j < alphabetArr.length;\
  \ j++) {\n                if (stringArr[i].equals(alphabetArr[j])) {\n         \
  \           index = j;\n                }\n            }\n            if (index\
  \ == 25) {\n                result += alphabetArr[1];\n            } else if (index\
  \ == 24) {\n                result += alphabetArr[0];\n            } else {\n  \
  \              result += alphabetArr[index + 2];\n            }\n        }\n   \
  \     return result;"
- "        StringBuilder b = new StringBuilder();\n        String characters = \"\
  abcdefghijklmnopqrstuvwxyz\";\n        String encryption = \"cdefghijklmnopqrstuvwxyzab\"\
  ;\n        for (int i = 0; i < s.length(); i++) {\n            b.append(encryption.charAt(characters.indexOf(s.charAt(i))));\n\
  \        }\n        return b.toString();"
- "        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n     \
  \   char[] alphabetRotated = new char[alphabet.length];\n        int index = 2;\n\
  \        for (int i = 0; i < alphabet.length; i++) {\n            if (index < alphabet.length)\
  \ {\n                alphabetRotated[index] = alphabet[i];\n                index\
  \ += 2;\n            } else {\n                index = index - alphabet.length;\n\
  \                alphabetRotated[index] = alphabet[i];\n                index +=\
  \ 2;\n            }\n        }\n        char[] sChar = s.toCharArray();\n      \
  \  String encryptedString = \"\";\n        for (int i = 0; i < sChar.length; i++)\
  \ {\n            for (int j = 0; j < alphabet.length; j++) {\n                if\
  \ (sChar[i] == alphabet[j]) {\n                    encryptedString += alphabetRotated[j];\n\
  \                }\n            }\n        }\n        return encryptedString;"
- "        int len = s.length();\n        char[] ch = s.toCharArray();\n        char[]\
  \ chEnc = new char[len];\n        int shift = 2;\n        int offset = 'a' + shift;\n\
  \        for (int i = 0; i < len; i++) {\n            chEnc[i] = (char) ((ch[i]\
  \ - offset + 26) % 26 + offset);\n        }\n        return new String(chEnc);"
- "        String[] alpha = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
  , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
  t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] rotate = {\"c\"\
  , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
  o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
  , \"a\", \"b\"};\n        StringBuilder sb = new StringBuilder();\n        for (int\
  \ i = 0; i < s.length(); i++) {\n            for (int j = 0; j < alpha.length; j++)\
  \ {\n                if (s.substring(i, i + 1).equals(alpha[j])) {\n           \
  \         sb.append(rotate[j]);\n                }\n            }\n        }\n \
  \       return sb.toString();"
- "        char[] letters = s.toCharArray();\n        for (int i = 0; i < letters.length;\
  \ i++) {\n            letters[i] = (char) (((letters[i] - 'a' + 2) % 26) + 'a');\n\
  \        }\n        return new String(letters);"
- "        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length;\
  \ i++) {\n            char x = arr[i];\n            if (x == 'a' || x == 'b') {\n\
  \                arr[i] = 'e';\n            } else if (x == 'c' || x == 'd') {\n\
  \                arr[i] = 'f';\n            } else if (x == 'e' || x == 'f') {\n\
  \                arr[i] = 'g';\n            } else if (x == 'g' || x == 'h') {\n\
  \                arr[i] = 'i';\n            } else if (x == 'i' || x == 'j') {\n\
  \                arr[i] = 'l';\n            } else if (x == 'k' || x == 'l') {\n\
  \                arr[i] = 'm';\n            } else if (x == 'm' || x == 'n') {\n\
  \                arr[i] = 'o';\n            } else if (x == 'o' || x == 'p') {\n\
  \                arr[i] = 'q';\n            } else if (x == 'q' || x == 'r') {\n\
  \                arr[i] = 't';\n            } else if (x == 's' || x == 't') {\n\
  \                arr[i] = 'u';\n            } else if (x == 'u' || x == 'v') {\n\
  \                arr[i] = 'w';\n            } else if (x == 'w' || x == 'x') {\n\
  \                arr[i] = 'y';\n            } else if (x == 'y' || x == 'z') {\n\
  \                arr[i] = 'b';\n            }\n        }\n        return new String(arr);"
- "        StringBuilder sb = new StringBuilder();\n        int shift = (int) (2 *\
  \ Math.pow(2, 2));\n        for (int i = 0; i < s.length(); i++) {\n           \
  \ char c = s.charAt(i);\n            c = (char) (c + shift);\n            sb.append(c);\n\
  \        }\n        return sb.toString();"
- "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
  \ < s.length(); i++) {\n            char c = s.charAt(i);\n            int asc =\
  \ (int) c;\n            asc += (int) (c - 'a') * 2;\n            result.append((char)\
  \ asc);\n        }\n        return result.toString();"
- '        return null;'
- "        char[] str = s.toCharArray();\n        for (int i = 0; i < str.length;\
  \ i++) {\n            int letter = str[i];\n            int newLetter = (letter\
  \ -97 + 8) % 26 + 97;\n            str[i] = (char) newLetter;\n        }\n     \
  \   return new String(str);"
- '        return s.chars().map(x -> x + 2*2).mapToObj(x -> (char)x).map(x -> "" +
  x).collect(Collectors.joining());'
- '        return "";'
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String e = \"\
  \";\n        for (int i = 0; i < s.length(); i++) {\n            int p = alphabet.indexOf(s.charAt(i));\n\
  \            e += alphabet.charAt((p+20)%26);\n        }\n        return e;"
- "        String res = \"\";\n        int m = 2 * 2;\n        for (int i = 0; i <\
  \ s.length(); i++) {\n            res += (char)((s.charAt(i) - 97 + m) % 26 + 97);\n\
  \        }\n        return res;"
- "        String ans = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          ans += (char)(s.charAt(i) + (2 * (i+1)));\n        }\n        return\
  \ ans;"
- "        // Write your code here\n        return \"\";"
- "        String r = \"\";\n        for (int i = 0; i < s.length(); i++) {\n    \
  \        char ch = s.charAt(i);\n            ch = (char) (ch + 2 * 2);\n       \
  \     r += ch;\n        }\n        return r;"
- "        // Fill in your code here.\n        return null;"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            int val = (int) c;\n  \
  \          if (val >= 122 - 2*2) {\n                val = 97 + (val - 97 + 2*2)\
  \ % 26;\n            } else {\n                val += 2*2;\n            }\n    \
  \        sb.append((char) val);\n        }\n        return sb.toString();"
- '        // Your code here'
- '        return s.replaceAll("[a-z]", "") + s.replaceAll("[^a-z]", "");'
- "        String encoded = \"\";\n        int charNum;\n        for (int i = 0; i\
  \ < s.length(); i++) {\n            charNum = s.charAt(i);\n            if (charNum\
  \ < 69)\n                charNum += 24;\n            encoded += Character.toString((char)(charNum\
  \ - 2 * 2));\n        }\n        return encoded;"
- "        // use a for loop to loop through the string\n        // for each character,\
  \ add the 2 times 2 to the letter\n        // do toUpperCase because we don't want\
  \ lowercase letters\n        // store the answer in a new variable\n        // return\
  \ the new variable\n        char[] charArray = s.toCharArray();\n        for (int\
  \ i = 0; i < charArray.length; i++) {\n            charArray[i] += 4;\n        }\n\
  \        return new String(charArray);"
- "        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            char current = chars[i];\n            int idx = current +\
  \ (current - 'a') * 2;\n            if (idx > 'z') {\n                idx -= 26;\n\
  \            }\n            chars[i] = (char) idx;\n        }\n        return new\
  \ String(chars);"
- "        // define the alphabet as an array of characters\n        char[] alphabet\
  \ = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n        // define a new array\
  \ the same length as the string\n        char[] newString = new char[s.length()];\n\
  \        // Iterate through each character in the string\n        for (int i = 0;\
  \ i < s.length(); i++) {\n            // Iterate through each character in the alphabet\
  \ to determine\n            // where to insert the encrypted character\n       \
  \     for (int j = 0; j < alphabet.length; j++) {\n                // If the character\
  \ in the string is equal to the character in the alphabet\n                if (s.charAt(i)\
  \ == alphabet[j]) {\n                    // if the character is at the end of the\
  \ alphabet shift to the first character\n                    if (s.charAt(i) ==\
  \ alphabet[alphabet.length - 1]) {\n                        newString[i] = alphabet[0];\n\
  \                    }\n                    // else if the character is at the end\
  \ of the alphabet - 1 shift to the second character\n                    else if\
  \ (s.charAt(i) == alphabet[alphabet.length - 2]) {\n                        newString[i]\
  \ = alphabet[1];\n                    }\n                    // else shift the character\
  \ to the next two characters\n                    else {\n                     \
  \   newString[i] = alphabet[j + 2];\n                    }\n                }\n\
  \            }\n        }\n        // return the encrypted string\n        return\
  \ new String(newString);"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder\
  \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          int index = alphabet.indexOf(s.charAt(i));\n            index = (index\
  \ + (2 * 2)) % alphabet.length();\n            sb.append(alphabet.charAt(index));\n\
  \        }\n        return sb.toString();"
- "        // your code here\n        return \"\";"
- '        return "";'
- "        char[] array = s.toCharArray();\n        for (int i = 0; i < array.length;\
  \ i++) {\n            char c = array[i];\n            int index = c - 'a';\n   \
  \         index = (index + 2 * 2) % 26;\n            array[i] = (char) ('a' + index);\n\
  \        }\n        return new String(array);"
- "    \tStringBuilder sb = new StringBuilder();\n    \tint offset = (int) 'a';\n\
  \    \tfor (int i = 0; i < s.length(); i++) {\n    \t\tchar c = s.charAt(i);\n \
  \   \t\tif (c == 'z') c = 'a';\n    \t\telse if (c == 'y') c = 'z';\n    \t\telse\
  \ c = (char) (c + 4);\n    \t\tsb.append(c);\n    \t}\n    \treturn sb.toString();"
- "        // your code here\n        return \"\";"
- "        char[] cipher = new char[s.length()];\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char next = s.charAt(i);\n            int start = (int) next;\n\
  \            if (start >= 97 && start <= 122) {\n                start = start +\
  \ 4;\n                if (start > 122) {\n                    start = start - 26;\n\
  \                }\n            } else if (start >= 65 && start <= 90) {\n     \
  \           start = start + 4;\n                if (start > 90) {\n            \
  \        start = start - 26;\n                }\n            } else {\n        \
  \        start = start;\n            }\n            cipher[i] = (char) start;\n\
  \        }\n        return new String(cipher);"
- "        char[] ca = s.toCharArray();\n        int[] ia = new int[ca.length];\n\
  \        for (int i = 0; i < ca.length; i++) {\n            ia[i] = ca[i] - 'a';\n\
  \        }\n        return Arrays.stream(ia).map(x -> x + x + 2).mapToObj(x -> (char)\
  \ (x + 'a')).map(Object::toString).collect(Collectors.joining());"
- "    \tString input = s;\n    \tchar[] charArray = input.toCharArray();\n    \t\
  for (int i = 0; i < charArray.length; i++) {\n    \t\tint var = (int) charArray[i];\n\
  \    \t\tif (var <= 'z' && var >= 'a') {\n    \t\t\tcharArray[i] = (char) ((int)\
  \ charArray[i] + 2);\n    \t\t\tif (charArray[i] > 'z') {\n    \t\t\t\tcharArray[i]\
  \ = (char) ((int) charArray[i] - 26);\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn\
  \ new String(charArray);"
- "        int rotations = 2;\n        StringBuilder result = new StringBuilder();\n\
  \        for (int i = 0; i < s.length(); i++) {\n            result.append((char)\
  \ ('a' + (s.charAt(i) - 'a' + rotations * 2) % 26));\n        }\n        return\
  \ result.toString();"
- "        // Write your code below\n        //*******************************************\n\
  \        String cipher = \"\";\n        int offset = 4;\n\n        for (int i =\
  \ 0; i < s.length(); i++) {\n            int ascii = (int) s.charAt(i);\n      \
  \      int newascii = ascii + offset;\n            if (newascii > 122) {\n     \
  \           newascii = newascii - 26;\n            }\n            cipher += (char)\
  \ newascii;\n        }\n        return cipher;\n        //*******************************************"
- "        char [] ca = s.toCharArray();\n        int size = ca.length;\n        char\
  \ [] c = new char[size];\n        for (int i = 0; i < size; i++) {\n           \
  \ c[i] = (char)(((ca[i] - 97 + 2) % 26) + 97);\n        }\n        return new String(c);"
- "        return s.replaceAll(\"[a-y]\", \"$0\" + 'z')\n                 .replaceAll(\"\
  [A-Y]\", \"$0\" + 'Z')\n                 .replaceAll(\"[b-z]\", \"$0\" + 'a')\n\
  \                 .replaceAll(\"[B-Z]\", \"$0\" + 'A');"
- "        int L = (int)'a';\n        int R = (int)'z';\n        StringBuilder sb\
  \ = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n     \
  \       int ch = (int)s.charAt(i);\n            int tmp = ch + 2 * 2;\n        \
  \    if (tmp > R) {\n                tmp = (tmp - R) + L - 1;\n            }\n \
  \           sb.append((char)tmp);\n        }\n        return sb.toString();"
- "        // BEGIN SOLUTION\n        return null;\n        // END SOLUTION"
- "        StringBuilder sb = new StringBuilder();\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        for (int i = 0; i < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n\
  \            index = (index + ((index - 1) * 2)) % 26;\n            sb.append(alphabet.charAt(index));\n\
  \        }\n        return sb.toString();"
- "        StringBuffer temp = new StringBuffer(s);\n        StringBuffer result =\
  \ new StringBuffer();\n        for (int i = 0; i < temp.length(); i++) {\n     \
  \       int ascii = temp.charAt(i);\n            char c = temp.charAt(i);\n    \
  \        if (ascii < 97) {\n                ascii += 65;\n            } else {\n\
  \                ascii += 97;\n            }\n            int num = ascii + (2 *\
  \ 2);\n            char newChar = (char) num;\n            result.append(newChar);\n\
  \        }\n        return result.toString();"
- '        return null;'
- '        return null;'
- "        // write code here\n        return null;"
- '        return "";'
- "        String abc = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted\
  \ = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c =\
  \ s.charAt(i);\n            for (int j = 0; j < abc.length(); j++) {\n         \
  \       if (c == abc.charAt(j)) {\n                    int index = j;\n        \
  \            encrypted += abc.charAt((index + 2) % 26);\n                }\n   \
  \         }\n        }\n        return encrypted;"
- "        String a = \"abcdefghijklmnopqrstuvwxyz\";\n        String b = \"cdefghijklmnopqrstuvwxyzab\"\
  ;\n        return null;"
- "        \n        HashMap<Character, Character> map = new HashMap<Character, Character>();\n\
  \        int len = s.length();\n        // System.out.println(len);\n        char[]\
  \ alpha = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
  \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] test\
  \ = new char[len];\n        // System.out.println(test);\n        for (int i = 0;\
  \ i < 26; i++) {\n            map.put(alpha[i], alpha[i+2]);\n        }\n      \
  \  for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == 'y') {\n    \
  \            test[i] = 'a';\n            } else if (s.charAt(i) == 'z') {\n    \
  \            test[i] = 'b';\n            } else {\n                test[i] = map.get(s.charAt(i));\n\
  \            }\n        }\n        // System.out.println(test);\n        String\
  \ result = new String(test);\n        return result;"
- '        return "";'
- "        String unencrypted = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted\
  \ = \"cdefghijklmnopqrstuvwxyzab\";\n        String result = \"\";\n        for\
  \ (int i = 0; i < s.length(); i++) {\n            result += encrypted.charAt(unencrypted.indexOf(s.charAt(i)));\n\
  \        }\n        return result;"
- "        char[] start = new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
  \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
  \ 'z'};\n        char[] end = new char[]{'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
  \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
  \ 'a', 'b'};\n        HashMap<Character, Character> dict = new HashMap<Character,\
  \ Character>();\n        for (int i = 0; i < start.length; i++) {\n            dict.put(start[i],\
  \ end[i]);\n        }\n        String result = \"\";\n        for (int i = 0; i\
  \ < s.length(); i++) {\n            result += dict.get(s.charAt(i));\n        }\n\
  \        return result;"
- "        return Arrays.stream(s.split(\"\"))\n            .map(c -> {\n        \
  \        return new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
  h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
  , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}[\n                    new String[]{\"\
  e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
  , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"\
  b\", \"c\", \"d\"}\n                    .indexOf(c)\n                ];\n      \
  \      })\n            .collect(Collectors.joining());"
- "        String alph = \"abcdefghijklmnopqrstuvwxyz\";\n        Map<Character, Integer>\
  \ alph_map = new HashMap<>();\n        List<Character> char_list = new ArrayList<>();\n\
  \        for (int i = 0; i < alph.length(); i++) {\n            alph_map.put(alph.charAt(i),\
  \ i);\n            char_list.add(alph.charAt(i));\n        }\n        StringBuilder\
  \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          int curr_pos = alph_map.get(s.charAt(i));\n            sb.append(char_list.get((curr_pos\
  \ + 26 - 2*i - 2) % 26));\n        }\n        return sb.toString();"
- '        return null;'
- "        //NOTE: you can use the charAt method on a string\n        // you can use\
  \ the ascii value of a char using (int) character\n        String enc = \"\";\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                int shift = 2 * 2;\n\
  \                if (Character.isUpperCase(c)) {\n                    c = (char)\
  \ (((c - 'A' + shift) % 26) + 'A');\n                } else {\n                \
  \    c = (char) (((c - 'a' + shift) % 26) + 'a');\n                }\n         \
  \   }\n            enc += c;\n        }\n        return enc;"
- "        // your code here\n        return \"\";"
- '        return "";'
- "        char [] alphabet = {\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
  \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
  \ 'y', 'z'\n        };\n        int [] shift = {2, 2, 1, 2, 2, 2, 1};\n        int\
  \ index = 0;\n        String encrypted = \"\";\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char current = s.charAt(i);\n            if (i == 0) {\n \
  \               index = 0;\n            } else {\n                index += shift[i\
  \ % shift.length];\n            }\n            int alphaIndex = Arrays.binarySearch(alphabet,\
  \ current);\n            encrypted += alphabet[(alphaIndex + index) % alphabet.length];\n\
  \        }\n        return encrypted;"
- '        return s.chars().map(x -> (x - ''a'' + 2 * 2) % 26 + ''a'').mapToObj(x
  -> Character.toString((char) x)).collect(Collectors.joining());'
- "        // TODO\n        return \"lm\";"
- "        s = s.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (c == 'z')\n                c = 'b';\n            else if (c ==\
  \ 'y')\n                c = 'a';\n            else\n                c += 2;\n  \
  \          sb.append(c);\n        }\n        return sb.toString();"
- '        return "";'
- "        int i, x;\n        String a = \"abcdefghijklmnopqrstuvwxyz\";\n       \
  \ String b = \"\";\n        String res = \"\";\n        for (i = 0; i < s.length();\
  \ i++) {\n            x = a.indexOf(s.charAt(i));\n            b = a.substring(x);\n\
  \            res += b.substring(2, 3);\n        }\n        return res;"
- '        return "";'
- "        String allAlpha = \"abcdefghijklmnopqrstuvwxyz\";\n        String[] splitAlpha\
  \ = allAlpha.split(\"\");\n        String alpha = String.join(\"\", Arrays.copyOfRange(splitAlpha,\
  \ splitAlpha.length-2, splitAlpha.length));\n        String allRotation = alpha+allAlpha;\n\
  \        String[] splitRotation = allRotation.split(\"\");\n        String[] splitS\
  \ = s.split(\"\");\n        String[] result = new String[splitS.length];\n     \
  \   for (int i = 0; i < splitS.length; i++) {\n            for (int j = 0; j < splitAlpha.length;\
  \ j++) {\n                if (splitS[i].equals(splitAlpha[j])) {\n             \
  \       result[i] = splitRotation[j];\n                }\n            }\n      \
  \  }\n        return String.join(\"\", result);"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'y')\
  \ {\n                sb.append((char)(c + 2));\n            } else if (c == 'z')\
  \ {\n                sb.append('b');\n            } else if (c == 'A' && c <= 'Y')\
  \ {\n                sb.append((char)(c + 2));\n            } else if (c == 'Z')\
  \ {\n                sb.append('B');\n            } else {\n                sb.append(c);\n\
  \            }\n        }\n        return sb.toString();"
- "        // create a new string that will be the encrypted version of s\n      \
  \  String enc = \"\";\n        // for every letter in s, \n        for (int i =\
  \ 0; i < s.length(); i++) {\n            // declare a variable for storing the number\
  \ representation of a letter\n            int n = (int) s.charAt(i);\n         \
  \   // if n is either 90, 122, or a letter after 122 (ie, the one after z),\n  \
  \          if (n == 90 || n == 122 || n > 122) {\n                // set n to itself\
  \ minus 23\n                n -= 23;\n            }\n            // otherwise,\n\
  \            else {\n                // set n to itself plus 3\n               \
  \ n += 3;\n            }\n            // concatenate the letter of n to enc\n  \
  \          enc += (char) n;\n        }\n        // return enc\n        return enc;"
- "        // Write your code here.\n        return s;"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String newAlphabet\
  \ = \"cdefghijklmnopqrstuvwxyzab\";\n        String newString = \"\";\n        for\
  \ (int i = 0; i < s.length(); i++) {\n            int position = alphabet.indexOf(s.charAt(i));\n\
  \            char newChar = newAlphabet.charAt(position);\n            newString\
  \ += newChar;\n        }\n        return newString;"
- "        Map<Character, Character> encryption = new HashMap<>();\n        List<Character>\
  \ chars = new ArrayList<>();\n        for (char i = 'a'; i <= 'z'; i++) {\n    \
  \        chars.add(i);\n        }\n        for (int i = 0; i < chars.size(); i++)\
  \ {\n            int index = (i * 4) % 26;\n            encryption.put(chars.get(i),\
  \ chars.get(index));\n        }\n        StringBuilder encrypted = new StringBuilder();\n\
  \        for (int i = 0; i < s.length(); i++) {\n            encrypted.append(encryption.get(s.charAt(i)));\n\
  \        }\n        return encrypted.toString();"
- "        // Your code here.\n        // You may want to use the function encrypt\
  \ that\n        // you created in a previous problem, but you may\n        // not.\n\
  \        int shift = 2;\n        char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f',\
  \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
  \ 'w', 'x', 'y', 'z'};\n        char[] newString = new char[s.length()];\n     \
  \   for (int i = 0; i < s.length(); i++) {\n            int location = s.charAt(i)\
  \ - 'a';\n            int newLocation = (location + (shift * 2)) % 26;\n       \
  \     newString[i] = alphabet[newLocation];\n        }\n        return new String(newString);"
- "        char[] encrypted = new char[s.length()];\n        int c = 0;\n        for\
  \ (char l : s.toCharArray()) {\n            int lnum = (int) l;\n            int\
  \ nnum = lnum + 4;\n            encrypted[c] = (char) nnum;\n            c++;\n\
  \        }\n        return new String(encrypted);"
- "        return s.chars().map(i -> i + (i >= 'a' && i <= 'z' ? 2 : 0) > 'z' ?\n\
  \                i - 26 + (i >= 'a' && i <= 'z' ? 2 : 0) : i + (i >= 'a' && i <=\
  \ 'z' ? 2 : 0))\n                .mapToObj(Character::toString).collect(Collectors.joining());"
- "        // your code here\n        StringBuilder sb = new StringBuilder();\n  \
  \      String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder\
  \ rotatedAlphabet = new StringBuilder(alphabet);\n        String newAlphabet = rotatedAlphabet.delete(0,\
  \ 4).append(rotatedAlphabet.substring(0, 4)).toString();\n        char[] newAlphabetArr\
  \ = newAlphabet.toCharArray();\n        char[] sArr = s.toCharArray();\n       \
  \ for (int i = 0; i < sArr.length; i++) {\n            sb.append(newAlphabetArr[alphabet.indexOf(sArr[i])]);\n\
  \        }\n        return sb.toString();"
- "        // Write your code here.\n        return \"\";"
- '        // complete the function here'
- "        String newString = \"\";\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            // int ascii = (int) s.charAt(i);\n            // char newChar\
  \ = (char) (ascii + 2);\n            // newString += newChar;\n            int ascii\
  \ = (int) s.charAt(i);\n            char newChar = (char) (ascii + 2);\n       \
  \     newString += newChar;\n        }\n        return newString;"
- "        // Write your code here\n        return \"\";"
- "        String s2 = \"\";\n        for (int i = 0; i < s.length(); i++) {\n   \
  \         s2 += (char)(s.charAt(i) + ((s.charAt(i) - 'a') * 2));\n        }\n  \
  \      return s2;"
- "        StringBuilder sb = new StringBuilder();\n        String alpha = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (c == ' ') {\n                sb.append(' ');\n            } else\
  \ {\n                int index = alpha.indexOf(c);\n                index = (index\
  \ + (2 * (index + 1))) % 26;\n                sb.append(alpha.charAt(index));\n\
  \            }\n        }\n        return sb.toString();"
- "        String e = \"\";\n        for (int i = 0; i < s.length(); i++) {\n    \
  \        char c = s.charAt(i);\n            if (c < 'a' || c > 'z') throw new RuntimeException();\n\
  \            e += (char)((((c - 'a') * 2 + 2) % 26) + 'a');\n        }\n       \
  \ return e;"
- "        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            result += (char)(s.charAt(i) + (int)Math.pow(2,2));\n        }\n  \
  \      return result;"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            int offset = (s.charAt(i) - 'a') * 2;\n            sb.append((char)('a'\
  \ + (offset % 26)));\n        }\n        return sb.toString();"
- '        return "";'
- '        return "";'
- "        // TODO: create and return a string encrypted with the alphabet\n     \
  \   // being rotated by the amount of the first and last letters in the \n     \
  \   // input string.\n        char first = s.charAt(0);\n        char last = s.charAt(s.length()\
  \ - 1);\n        int shift = (int) last + (int) first;\n        char arr[] = s.toCharArray();\n\
  \        for (int i = 0; i < arr.length; i++) {\n            int ascii = (int) arr[i];\n\
  \            ascii += shift;\n            if (ascii > 122) {\n                ascii\
  \ -= 26;\n            }\n            arr[i] = (char) ascii;\n        }\n       \
  \ return new String(arr);"
- "        String enc = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          enc += (char)((int)s.charAt(i) + (2 * 2));\n        }\n        return\
  \ enc;"
- '        throw new UnsupportedOperationException("Delete this line and write your
  own implementation");'
- "        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n     \
  \   Map<Character, Integer> letterToPosition = new HashMap<>();\n        for (int\
  \ i = 0; i < alphabet.length; i++) {\n            letterToPosition.put(alphabet[i],\
  \ i);\n        }\n        char[] sChars = s.toCharArray();\n        char[] encrypted\
  \ = new char[sChars.length];\n        for (int i = 0; i < sChars.length; i++) {\n\
  \            int index = letterToPosition.get(sChars[i]);\n            encrypted[i]\
  \ = alphabet[(index + 2 * 2) % alphabet.length];\n        }\n        return new\
  \ String(encrypted);"
- '        return null;'
- '        //your code here'
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted\
  \ = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c =\
  \ s.charAt(i);\n            int idx = alphabet.indexOf(c);\n            encrypted\
  \ += alphabet.charAt((idx + (2 * i)) % 26);\n        }\n        return encrypted;"
- "        String out = \"\";\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        int rotation = 4;\n        for (int i = 0; i < s.length(); i++) {\n \
  \           char c = s.charAt(i);\n            char newC = alphabet.charAt((alphabet.indexOf(c)\
  \ + rotation) % 26);\n            out += newC;\n        }\n        return out;"
- "        int num = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
  \    int next = s.charAt(i) + 2 * (2 * num + 1);\n            if (next > 122) next\
  \ -= 26;\n            System.out.print((char) next);\n            num++;\n     \
  \   }\n        return \"\";"
- "        // Create a map that maps \n        Map<String, String> map = new HashMap<>();\n\
  \        map.put(\"a\", \"c\");\n        map.put(\"b\", \"d\");\n        map.put(\"\
  c\", \"e\");\n        map.put(\"d\", \"f\");\n        map.put(\"e\", \"g\");\n \
  \       map.put(\"f\", \"h\");\n        map.put(\"g\", \"i\");\n        map.put(\"\
  h\", \"j\");\n        map.put(\"i\", \"k\");\n        map.put(\"j\", \"l\");\n \
  \       map.put(\"k\", \"m\");\n        map.put(\"l\", \"n\");\n        map.put(\"\
  m\", \"o\");\n        map.put(\"n\", \"p\");\n        map.put(\"o\", \"q\");\n \
  \       map.put(\"p\", \"r\");\n        map.put(\"q\", \"s\");\n        map.put(\"\
  r\", \"t\");\n        map.put(\"s\", \"u\");\n        map.put(\"t\", \"v\");\n \
  \       map.put(\"u\", \"w\");\n        map.put(\"v\", \"x\");\n        map.put(\"\
  w\", \"y\");\n        map.put(\"x\", \"z\");\n        map.put(\"y\", \"a\");\n \
  \       map.put(\"z\", \"b\");\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < s.length(); i++) {\n            sb.append(map.get(s.substring(i,\
  \ i + 1)));\n        }\n        return sb.toString();"
- "        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            result += Character.toString((char) (s.charAt(i) + ((i + 1) * 2)));\n\
  \        }\n        return result;"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encryptedString\
  \ = \"\";\n        int alphLength = alphabet.length();\n        for (int i = 0;\
  \ i < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n\
  \            if (index < 2) {\n                encryptedString += alphabet.charAt(index\
  \ + alphLength - 2);\n            } else {\n                encryptedString += alphabet.charAt(index\
  \ - 2);\n            }\n        }\n        return encryptedString;"
- "        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            chars[i] += 2 * 2;\n        }\n        return new String(chars);"
- '        return s.chars().map(c -> c+2*2).mapToObj(c -> (char)c+"").collect(Collectors.joining());'
- "        int[] arr = new int[s.length()];\n        for (int i = 0; i < s.length();\
  \ i++) {\n            int n = (int)s.charAt(i);\n            n += 2*2;\n       \
  \     arr[i] = n;\n        }\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < arr.length; i++) {\n            sb.append((char)arr[i]);\n\
  \        }\n        return sb.toString();"
- "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
  \ < s.length(); i++) {\n            char currentChar = s.charAt(i);\n          \
  \  currentChar += 2 * 2;\n            result.append(currentChar);\n        }\n \
  \       return result.toString();"
- "        // TODO: write your code here.\n        return \"\";"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            char d = s.charAt(i);\n\
  \            if (c >= 'a' && c <= 'z') {\n                if (c == 'x') {\n    \
  \                d = 'a';\n                } else if (c == 'y') {\n            \
  \        d = 'b';\n                } else {\n                    d = (char) (c +\
  \ 2);\n                }\n            }\n            sb.append(d);\n        }\n\
  \        return sb.toString();"
- '        return "";'
- '        return "";'
- "        String s2 = \"\";\n        for (int i = 0; i < s.length(); i++) {\n   \
  \         int num = s.charAt(i) - 97;\n            num += (num * 2) % 26;\n    \
  \        num %= 26;\n            s2 += (char) (num + 97);\n        }\n        return\
  \ s2;"
- "        String new_str = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            int ascii = (int) s.charAt(i);\n            if (ascii == 122) {\n \
  \               new_str += \"b\";\n            } else if (ascii == 123) {\n    \
  \            new_str += \"c\";\n            } else {\n                ascii += 3;\n\
  \                new_str += Character.toString((char) ascii);\n            }\n \
  \       }\n        return new_str;"
- "        // TODO: Finish the function\n        return \"\";"
- "        // FILL THIS IN\n        return null;"
- '        return "";'
- '        return null;'
- '        // your code here'
- "        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            result += (char)(s.charAt(i) + (2 * (i + 1)));\n        }\n       \
  \ return result;"
- '        return "";'
- '        return null;'
- '        return "";'
- "        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            int a = (int)s.charAt(i);\n            encrypted += (char)((a +\
  \ 4) % 255);\n        }\n        return encrypted;"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String e = \"\
  \";\n        int shifts = 2;\n        for (int i = 0; i < s.length(); i++) {\n \
  \           char c = s.charAt(i);\n            int ind = alphabet.indexOf(c);\n\
  \            if (ind != -1) {\n                ind = ind + shifts * 2;\n       \
  \         if (ind > 25) {\n                    ind = ind - 26;\n               \
  \ }\n                e += alphabet.charAt(ind);\n            } else {\n        \
  \        e += c;\n            }\n        }\n        return e;"
- "        // YOUR CODE HERE\n        int len = s.length();\n        int[] ascii =\
  \ new int[len];\n        char[] newChar = new char[len];\n        int temp = 0;\n\
  \        int k = 0;\n        for(int i = 0; i < len; i++) {\n            temp =\
  \ s.charAt(i);\n            if((temp > 65 && temp < 90) || (temp > 97 && temp <\
  \ 122)) {\n                temp = temp + k;\n                if(temp > 90 && temp\
  \ < 97) {\n                    temp = temp - 26;\n                } else if(temp\
  \ > 122) {\n                    temp = temp - 26;\n                }\n         \
  \       newChar[i] = (char)temp;\n                k += 2;\n            } else {\n\
  \                newChar[i] = (char)temp;\n            }\n        }\n        String\
  \ result = new String(newChar);\n        return result;"
- "        String ret = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          int offset = s.charAt(i) - 'a';\n            int newoffset = (offset\
  \ + 2*2) % 26;\n            ret += (char)('a' + newoffset);\n        }\n       \
  \ return ret;"
- "        String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
  h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
  , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] sArr = s.split(\"\
  \");\n        String ret = \"\";\n        for (int i = 0; i < sArr.length; i++)\
  \ {\n            int index = java.util.Arrays.asList(alphabet).indexOf(sArr[i]);\n\
  \            if (index == 0) {\n                ret += alphabet[(index + 26 - 4)\
  \ % 26];\n            } else if (index == 1) {\n                ret += alphabet[(index\
  \ + 26 - 6) % 26];\n            } else {\n                ret += alphabet[(index\
  \ + 26 - (2 * (index - 1))) % 26];\n            }\n        }\n        return ret;"
- "        int alphabetLength = 26;\n        char[] alphabet = new char[alphabetLength];\n\
  \        int l = (int)'a';\n        for (int i = 0; i < alphabetLength; i++) {\n\
  \            alphabet[i] = (char)(l + i);\n        }\n        StringBuilder sb =\
  \ new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n       \
  \     char c = s.charAt(i);\n            int index = (((int)c - l) + (2 * 2)) %\
  \ alphabetLength;\n            sb.append(alphabet[index]);\n        }\n        return\
  \ sb.toString();"
- "        int len = s.length();\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        HashMap<Character, Character> map = new HashMap<>();\n        for (int\
  \ i = 0; i < alphabet.length(); i++) {\n            map.put(alphabet.charAt(i),\
  \ alphabet.charAt((i + (i*2) % alphabet.length()) % alphabet.length()));\n     \
  \   }\n        char[] ans = new char[len];\n        for (int i = 0; i < len; i++)\
  \ {\n            ans[i] = map.get(s.charAt(i));\n        }\n        return new String(ans);"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String alphabetRotated\
  \ = \"cdefghijklmnopqrstuvwxyzab\";\n        StringBuilder encrypted = new StringBuilder();\n\
  \        for (int i = 0; i < s.length(); i++) {\n            encrypted.append(alphabetRotated.charAt(alphabet.indexOf(s.charAt(i))));\n\
  \        }\n        return encrypted.toString();"
- '        return s.chars().map(c -> (char) (c + 2*2)).collect(StringBuilder::new,
  StringBuilder::appendCodePoint, StringBuilder::append).toString();'
- "        Map<Character, Character> orig = new HashMap<>();\n        char[] keys\
  \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
  \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] vals =\
  \ {'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
  \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x'};\n        for (int i = 0; i\
  \ < 26; i++) {\n            orig.put(keys[i], vals[i]);\n        }\n        StringBuffer\
  \ newString = new StringBuffer();\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            newString.append(orig.get(s.charAt(i)));\n        }\n        return\
  \ newString.toString();"
- '        return "";'
- "        StringBuilder ret = new StringBuilder();\n        int shift = 0;\n    \
  \    for (int i = 0; i < s.length(); i++) {\n            if (shift == 0) {\n   \
  \             shift = 2;\n            } else {\n                shift = 0;\n   \
  \         }\n            char ch = s.charAt(i);\n            char newCh = (char)\
  \ (ch + shift);\n            ret.append(newCh);\n        }\n        return ret.toString();"
- "        // your code here\n        return null;"
- "        char[] list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
  \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n     \
  \   String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n    \
  \        int count = 0;\n            for (int j = 0; j < list.length; j++) {\n \
  \               if (s.charAt(i) == list[j]) {\n                    if (j < 2) {\n\
  \                        count = j + 24;\n                    } else {\n       \
  \                 count = j - 2;\n                    }\n                }\n   \
  \         }\n            result += list[count];\n        }\n        return result;"
- "        // implement here\n        return \"\";"
- "      String encrypt_string = \"\";\n      char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
  .toCharArray();\n      StringBuilder builder = new StringBuilder();\n      // turn\
  \ the string into a character array\n      char[] char_arr = s.toCharArray();\n\
  \      // iterate through each character in the array\n      for (char c : char_arr)\
  \ {\n        // iterate through each letter in the alphabet\n        for (int i\
  \ = 0; i < alphabet.length; i++) {\n          // check if the letter matches the\
  \ character\n          if (alphabet[i] == c) {\n            // find the starting\
  \ index for the second half of the alphabet\n            int half = alphabet.length\
  \ / 2;\n            // check if the index is less than the starting index\n    \
  \        if (i < half) {\n              // add the index to the starting index\n\
  \              int new_i = i + half;\n              // if the index is less than\
  \ the starting index of the second half add the starting index\n              if\
  \ (new_i >= alphabet.length) {\n                new_i = new_i - alphabet.length;\n\
  \              }\n              builder.append(alphabet[new_i]);\n            }\
  \ else {\n              // add the index to the starting index\n              int\
  \ new_i = i - half;\n              // if the index is less than the starting index\
  \ of the second half add the starting index\n              if (new_i < 0) {\n  \
  \              new_i = new_i + alphabet.length;\n              }\n             \
  \ builder.append(alphabet[new_i]);\n            }\n          }\n        }\n    \
  \  }\n      encrypt_string = builder.toString();\n      return encrypt_string;"
- "        String output = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            int x = (int)s.charAt(i);\n            x += (x - 96)*2;\n         \
  \   if (x > 122) {\n                x -= 26;\n            }\n            output\
  \ += (char)x;\n        }\n        return output;"
- '        return null;'
- "        String alpha = \"abcdefghijklmnopqrstuvwxyz\";\n        String beta = \"\
  cdefghijklmnopqrstuvwxyzab\";\n        String result = \"\";\n        for (int i\
  \ = 0; i < s.length(); i++) {\n            int index = alpha.indexOf(s.charAt(i));\n\
  \            result += beta.charAt(index);\n        }\n        return result;"
- "        String x = \"\";\n        for (int i = 0; i < s.length(); i++) {\n    \
  \        if ((s.charAt(i) + (i + 1) * 2) > 122) {\n                x += (char) (s.charAt(i)\
  \ + (i + 1) * 2 - 26);\n            } else {\n                x += (char) (s.charAt(i)\
  \ + (i + 1) * 2);\n            }\n        }\n        return x;"
- "        StringBuilder result = new StringBuilder();\n        int len = s.length();\n\
  \        int ascii;\n        for (int i = 0; i < len; i++) {\n            ascii\
  \ = (int) s.charAt(i);\n            if (ascii == 57) {\n                ascii =\
  \ 97;\n            } else if (ascii == 122) {\n                ascii = 100;\n  \
  \          } else if (ascii == 90) {\n                ascii = 97;\n            }\
  \ else {\n                ascii += 2;\n            }\n            result.append((char)\
  \ ascii);\n        }\n        return result.toString();"
- '        return null;'
- '        return null;'
- "        // BEGIN SOLUTION\n        // [A-Za-z]\n        return s.replaceAll(\"\
  [A-Za-z]\", (Matcher matcher) -> {\n            Character c = matcher.group().charAt(0);\n\
  \            int ascii = (int) c;\n            ascii += 4;\n            if (ascii\
  \ > 122) {\n                ascii = ascii - 26;\n            }\n            if (ascii\
  \ > 90 && ascii < 97) {\n                ascii = ascii - 26;\n            }\n  \
  \          return ((char) ascii) + \"\";\n        });\n        // END SOLUTION"
- "        \n        return \"\";"
- "        int shift = 2;\n        for (int i = 0; i < s.length(); i++) {\n      \
  \      s.charAt(i) += shift * 2;\n        }\n        return s;"
- '        // Your code here'
- "        char[] c = s.toCharArray();\n        for (int i = 0; i < c.length; i++)\
  \ {\n            c[i] += (char) 2*2;\n        }\n        return new String(c);"
- "        // write your code here\n        String result = \"\";\n        for (int\
  \ i = 0; i < s.length(); i++) {\n            result += (char)(s.charAt(i) + 2*2);\n\
  \        }\n        return result;"
- "        String str = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          char a = s.charAt(i);\n            char b = (char) (a + (a - 'a') * 2);\n\
  \            if (b > 'z') {\n                b = (char) (b - 26);\n            }\n\
  \            str += b;\n        }\n        return str;"
- "        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n     \
  \   String ret = \"\";\n        for (int i = 0; i < s.length(); i++) {\n       \
  \     char x = s.charAt(i);\n            int j = 0;\n            for (; j < alphabet.length;\
  \ j++) {\n                if (x == alphabet[j]) {\n                    break;\n\
  \                }\n            }\n            ret += alphabet[(j + 26 - 2 * 2)\
  \ % 26];\n        }\n        return ret;"
- "        String answer = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            answer += shiftChar(s.charAt(i));\n        }\n        return answer;"
- "        StringBuilder toReturn = new StringBuilder();\n        char[] sarr = s.toCharArray();\n\
  \        for (char c : sarr) {\n            if (c >= 'a' && c <= 'z') {\n      \
  \          if (c >= 'w') {\n                    c -= 22;\n                } else\
  \ {\n                    c += 4;\n                }\n            }\n           \
  \ toReturn.append(c);\n        }\n        return toReturn.toString();"
- "        // write your code here\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        String res = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            int curr = alphabet.indexOf(s.charAt(i));\n            int newChar\
  \ = (curr + (2 * (curr + 1))) % 26;\n            res += alphabet.charAt(newChar);\n\
  \        }\n        return res;"
- "        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            encrypted += shiftByTwo(s.charAt(i));\n        }\n        return\
  \ encrypted;"
- '        return null;'
- "        return s.chars().map(\n            c -> {\n                c = c - 'a';\n\
  \                c += 2 * 2;\n                c %= 26;\n                c += 'a';\n\
  \                return c;\n            }\n        ).collect(StringBuilder::new,\
  \ StringBuilder::appendCodePoint, StringBuilder::append).toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            int cv = (int) c;\n   \
  \         int newv = cv + 4;\n            char newc = (char) newv;\n           \
  \ sb.append(newc);\n        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            int k = s.charAt(i) - 'a';\n            k += 2 * 2;\n    \
  \        k %= 26;\n            sb.append((char)(k + 'a'));\n        }\n        return\
  \ sb.toString();"
- '        // Code here'
- "        StringBuilder encrypted = new StringBuilder();\n        for (int i = 0;\
  \ i < s.length(); i++) {\n            int newLetter = (int) s.charAt(i) + 4;\n \
  \           if (newLetter > 122) {\n                newLetter = 96 + (newLetter\
  \ - 122);\n            }\n            encrypted.append((char) newLetter);\n    \
  \    }\n        return encrypted.toString();"
- "        // YOUR CODE HERE\n        return null;"
- '        return "";'
- "        String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
  h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
  , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] chr_arr =\
  \ s.split(\"\");\n        String encrypted_chr = \"\";\n        for (int i = 0;\
  \ i < chr_arr.length; i++) {\n            int chr_index = Arrays.asList(alphabet).indexOf(chr_arr[i]);\n\
  \            int new_index = chr_index - (chr_index * 2);\n            encrypted_chr\
  \ += alphabet[new_index];\n        }\n        return encrypted_chr;"
- '        return s.chars().map(c -> c + 4).mapToObj(i -> (char) i).map(Object::toString).collect(Collectors.joining());'
- "        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            char c = s.charAt(i);\n            int  n = c - 97;\n         \
  \   encrypted += (char) ((n + 4) % 26 + 97);\n        }\n        return encrypted;"
- "        // Your code here\n        String s1=\"abcdefghijklmnopqrstuvwxyz\";\n\
  \        String s2=\"cdefghijklmnopqrstuvwxyzab\";\n        HashMap<Character,Character>\
  \ h1=new HashMap<Character,Character>();\n        HashMap<Character,Character> h2=new\
  \ HashMap<Character,Character>();\n        StringBuilder sb=new StringBuilder();\n\
  \        int i=0;\n        while(i<s1.length())\n        {\n            h1.put(s1.charAt(i),s2.charAt(i));\n\
  \            h2.put(s2.charAt(i),s1.charAt(i));\n            i++;\n        }\n \
  \       i=0;\n        while(i<s.length())\n        {\n            sb.append(h1.get(s.charAt(i)));\n\
  \            i++;\n        }\n        return sb.toString();"
- "        String[] abc = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
  , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
  t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] encrypted = new\
  \ String[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n        \
  \    int j = 0;\n            for (; j < abc.length; j++) {\n                if (s.substring(i,\
  \ i + 1).equals(abc[j])) {\n                    encrypted[i] = abc[(j + 2 * 2) %\
  \ 26];\n                    break;\n                }\n            }\n        }\n\
  \        return String.join(\"\", encrypted);"
- "        // Your code here\n        char[] shifted = new char[s.length()];\n   \
  \     for (int i = 0; i < s.length(); i++) {\n            shifted[i] = (char) (s.charAt(i)\
  \ + 2 * (i + 1));\n        }\n        return new String(shifted);"
- "        // Write your code here\n        s = s.toLowerCase();\n        String encrypt\
  \ = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            encrypt +=\
  \ (char)((s.charAt(i) - 97 + 2*2) % 26 + 97);\n        }\n        return encrypt;"
- '        return s.chars().map(Problem::encryptLetter).collect(StringBuilder::new,
  StringBuilder::appendCodePoint, StringBuilder::append).toString();'
- "        String ret = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          ret += (char)(((s.charAt(i) - 'a' + 2) % 26) + 'a');\n        }\n   \
  \     return ret;"
- '        return s.chars().map(x -> x + 2 * 2).mapToObj(x -> (char) x).map(x -> x.toString()).collect(Collectors.joining());'
- "        return Arrays.stream(s.split(\"\"))\n                .mapToInt(i -> (i.charAt(0)\
  \ + (2 * 2)))\n                .mapToObj(i -> Character.toString((char) i))\n  \
  \              .collect(Collectors.joining());"
- '        return "";'
- "        String lc = s.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n\
  \        int len = lc.length();\n        char[] ca = lc.toCharArray();\n       \
  \ for (int i = 0; i < len; i++) {\n            if (ca[i] + 2 >= 'a' && ca[i] + 2\
  \ <= 'm') {\n                sb.append((char)(ca[i] + 2));\n            } else if\
  \ (ca[i] + 2 > 'm' && ca[i] + 2 <= 'z') {\n                sb.append((char)(ca[i]\
  \ + 2 - 26));\n            } else if (ca[i] + 2 > 'z') {\n                sb.append((char)(ca[i]\
  \ + 2 - 26 - 26));\n            }\n        }\n        return sb.toString();"
- '        return s.chars().map(i -> i + 2 * 2).mapToObj(i -> (char) i).map(Object::toString).collect(Collectors.joining());'
- "        String encrypt = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            encrypt += (char)(s.charAt(i) + 2 * (i + 1));\n        }\n        return\
  \ encrypt;"
- "        String res = \"\";\n        char[] letters = s.toCharArray();\n       \
  \ for (char c : letters) {\n            if (c >= 'a' && c <= 'z') {\n          \
  \      if (c >= 'u') {\n                    res += (char)(c - 'u' + 'a');\n    \
  \            } else if (c >= 't') {\n                    res += (char)(c - 't' +\
  \ 'g');\n                } else {\n                    res += (char)(c + 2);\n \
  \               }\n            } else {\n                res += c;\n           \
  \ }\n        }\n        return res;"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String newAlphabet\
  \ = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            newAlphabet\
  \ += String.valueOf(alphabet.charAt((alphabet.indexOf(s.charAt(i)) + (i + 1) * 2)\
  \ % 26));\n        }\n        return newAlphabet;"
- "        // First we need a new alphabet such that each letter gets shifted\n  \
  \      // two indexes down. We'll create an array of letters such that\n       \
  \ // each element is shifted down 2 indexes.\n        // Create an array of chars,\
  \ store them in a char array.\n        char[] alph = \"abcdefghijklmnopqrstuvwxyz\"\
  .toCharArray();\n        // Since we need to shift down by two indexes, we start\
  \ at index 2\n        for (int i = 2; i < alph.length; i++) {\n            // Our\
  \ second array is being used as a shift.\n            alph[i - 2] = alph[i];\n \
  \       }\n        // We need to add the shift to the end of the array\n       \
  \ alph[alph.length - 2] = 'c';\n        alph[alph.length - 1] = 'd';\n        //\
  \ Now we can create a new map to store each letter and a new encrypted letter\n\
  \        HashMap<Character, Character> map = new HashMap<>();\n        // We want\
  \ to load the key and value of our hashmap\n        for (int i = 0; i < alph.length;\
  \ i++) {\n            map.put(alph[i], s.charAt(i));\n        }\n        // Now\
  \ we can create a new stringbuilder to store our encrypted string\n        StringBuilder\
  \ sb = new StringBuilder();\n        // Now we want to loop through the string we\
  \ wish to encrypt and append it to the stringbuilder\n        for (int i = 0; i\
  \ < s.length(); i++) {\n            sb.append(map.get(s.charAt(i)));\n        }\n\
  \        // Finally we want to return our encrypted string\n        return sb.toString();"
- "        if (s.length() == 0) {\n            return \"\";\n        }\n        //\
  \ get the letter at the beginning of the string\n        char firstLetter = s.charAt(0);\n\
  \        // find it's index in the alphabet array\n        int index = findIndex(firstLetter);\n\
  \        // find the corresponding letter in the encrypted alphabet at that index\n\
  \        char encryptedLetter = encryptedAlphabet[index];\n        // encrypt the\
  \ rest of the string recursively\n        String encryptedRest = encrypt(s.substring(1));\n\
  \        // return the encrypted string\n        return encryptedLetter + encryptedRest;"
- "        HashMap<String, String> alphaMap = new HashMap<String, String>();\n   \
  \     String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
  , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
  t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        int alphaIndex = 0;\n \
  \       for (int i = 0; i < alphabet.length; i++) {\n            if (i < 2) {\n\
  \                alphaMap.put(alphabet[i], alphabet[alphabet.length - i - 2]);\n\
  \            } else {\n                alphaMap.put(alphabet[i], alphabet[i - 2]);\n\
  \            }\n        }\n        StringBuilder sb = new StringBuilder();\n   \
  \     for (int i = 0; i < s.length(); i++) {\n            String letter = s.substring(i,\
  \ i + 1);\n            String val = alphaMap.get(letter);\n            sb.append(val);\n\
  \        }\n        return sb.toString();"
- "        String ans = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          int pos = s.charAt(i) - 97;\n            if (pos < 24)\n            \
  \    ans += (char)((pos + 97 + 2 * 2) % 26 + 97);\n            else if (pos < 25)\n\
  \                ans += (char)((pos + 97 + 2 * 1) % 26 + 97);\n            else\n\
  \                ans += (char)((pos + 97 + 2 * 0) % 26 + 97);\n        }\n     \
  \   return ans;"
- "        String t = \"\";\n        int n = s.length();\n        for (int i = 0;\
  \ i < n; i++) {\n            int pos = s.charAt(i) - 'a';\n            t += (char)((pos\
  \ + 2*2) % 26 + 'a');\n        }\n        return t;"
- "        //Initiate mapping of ascii table characters to rotated characters\n  \
  \      List<Character> mapping = new ArrayList<Character>();\n        List<Integer>\
  \ asciiCodes = new ArrayList<Integer>();\n        for (int i = 32; i < 127; i++)\
  \ {\n            mapping.add((char)i);\n            asciiCodes.add(i);\n       \
  \ }\n        //Rotate mapping characters by two multiplied to two places\n     \
  \   for (int i = 0; i < 2; i++) {\n            Collections.rotate(mapping, -2);\n\
  \        }\n        //Create mapping from ascii code to rotated character\n    \
  \    Map<Integer, Character> mapped = new HashMap<Integer, Character>();\n     \
  \   for (int i = 0; i < asciiCodes.size(); i++) {\n            mapped.put(asciiCodes.get(i),\
  \ mapping.get(i));\n        }\n        //Encrypt input string and return\n     \
  \   String output = \"\";\n        for (int i = 0; i < s.length(); i++) {\n    \
  \        output += mapped.get((int)s.charAt(i));\n        }\n        return output;"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String shifted\
  \ = alphabet.substring(2) + alphabet.substring(0, 2);\n        StringBuilder sb\
  \ = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n     \
  \       sb.append(shifted.charAt(alphabet.indexOf(s.charAt(i))));\n        }\n \
  \       return sb.toString();"
- "        char[] shift = new char[26];\n        int k = 0;\n        for (int i =\
  \ 0; i < 26; i++){\n            shift[i] = (char)(97 + k);\n            k += 2;\n\
  \            if (k > 25) k -= 26;\n        }\n        String output = \"\";\n  \
  \      for (int i = 0; i < s.length(); i++){\n            int index = s.charAt(i)\
  \ - 97;\n            output += shift[index];\n        }\n        return output;"
- '        throw new UnsupportedOperationException("Waiting to be implemented.");'
- "        String ans = \"\";\n        int n = s.length();\n        for (int i = 0;\
  \ i < n; i++) {\n            char c = s.charAt(i);\n            int temp = (int)\
  \ c;\n            if (temp >= 97 && temp <= 119) {\n                ans += (char)\
  \ (temp + 2);\n            } else if (temp >= 120 && temp <= 122) {\n          \
  \      ans += (char) (temp - 20);\n            } else {\n                ans +=\
  \ c;\n            }\n        }\n        return ans;"
- '        return "";'
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String answer\
  \ = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int index\
  \ = alphabet.indexOf(s.charAt(i));\n            answer += alphabet.charAt((index\
  \ + 4) % 26);\n        }\n        return answer;"
- "        \n        return null;"
- "        String string = \"abcdefghijklmnopqrstuvwxyz\";\n        String newString\
  \ = \"\";\n        String newStringU = \"\";\n        String newStringF = \"\";\n\
  \        // create arrays to store the upper and lower case letters\n        char\
  \ [] upperCaseArray = new char[26];\n        char [] lowerCaseArray = new char[26];\n\
  \        // create counter and iterator to loop through the string\n        int\
  \ i = 0;\n        int j = 0;\n        // loop through the string and check if each\
  \ character is\n        // lower case or upper case and then store the character\n\
  \        // in the correct array\n        while (i < s.length()) {\n           \
  \ if (Character.isUpperCase(s.charAt(i))) {\n                upperCaseArray[j] =\
  \ s.charAt(i);\n                j += 1;\n            } else {\n                lowerCaseArray[j]\
  \ = s.charAt(i);\n                j += 1;\n            }\n            i += 1;\n\
  \        }\n        // create a substring that is the first 6 characters\n     \
  \   // and one that is the last 6 characters\n        String substring1 = string.substring(0,6);\n\
  \        String substring2 = string.substring(20,26);\n        // loop through the\
  \ two character arrays\n        // check if the current index of the array contains\n\
  \        // a character and check if that character is contained\n        // in\
  \ the new substring by searching for the index of\n        // the character in the\
  \ substring and then using the\n        // index to determine the character that\
  \ should be in the\n        // new string\n        for (int h = 0; h < upperCaseArray.length;\
  \ h++) {\n            if (Character.isLetter(upperCaseArray[h])) {\n           \
  \     if (substring1.indexOf(Character.toLowerCase(upperCaseArray[h])) >= 0) {\n\
  \                    newStringU += substring2.charAt(substring1.indexOf(Character.toLowerCase(upperCaseArray[h])));\n\
  \                } else {\n                    newStringU += substring1.charAt(substring2.indexOf(Character.toLowerCase(upperCaseArray[h])));\n\
  \                }\n"
- "        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            char c = chars[i];\n            if (c >= 'a' && c <= 'z')\
  \ {\n                char newChar = (char) (c + 2 * 2);\n                if (newChar\
  \ > 'z') {\n                    newChar = (char) ('a' + (newChar - 'z') - 1);\n\
  \                }\n                chars[i] = newChar;\n            }\n       \
  \ }\n        return new String(chars);"
- "        // Write your code below this line.\n        return null;"
- "        String output = \"\";\n        // Your Code Here\n        String [] alphabet\
  \ = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"\
  m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"\
  };\n        for(int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
  \            int indx = indexOf(alphabet, Character.toString(ch));\n           \
  \ int newIndex = (indx + 4) % alphabet.length;\n            output += alphabet[newIndex];\n\
  \        }\n        return output;"
- "        final int X = 2;\n        final int Y = 2;\n        final int A = 'a';\n\
  \        final int Z = 'z';\n        final int L = Z - A + 1;\n        final int\
  \ SHIFT = (X * Y) % L;\n        final int[] ENCRYPTED = new int[L];\n        for\
  \ (int i = 0; i < L; i++)\n            ENCRYPTED[i] = ((i + SHIFT) < L) ? i + SHIFT\
  \ : (i + SHIFT) - L;\n        final int[] DECRYPTED = new int[L];\n        for (int\
  \ i = 0; i < L; i++)\n            DECRYPTED[ENCRYPTED[i]] = i;\n        StringBuilder\
  \ sb = new StringBuilder();\n        s.chars().map(i -> (i >= A && i <= Z) ? ((char)ENCRYPTED[i\
  \ - A] + A) : i).forEach(i -> sb.append((char)i));\n        return sb.toString();"
- "        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            char c = s.charAt(i);\n            encrypted += (char)((c - 96\
  \ + 2*(i + 1)) % 26 + 96);\n        }\n        return encrypted;"
- "        String output = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
  \            int val = s.charAt(i) + (s.charAt(i) % 5) * 2;\n            output\
  \ += (char)val;\n        }\n        return output;"
- "        // YOUR CODE HERE\n        return null;"
language: java
name: HumanEval_89_encrypt
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function encrypt that takes a string as an argument\
  \ and\n    // returns a string encrypted with the alphabet being rotated. \n   \
  \ // The alphabet should be rotated in a manner such that the letters \n    // shift\
  \ down by two multiplied to two places.\n    // For example:\n    // encrypt('hi')\
  \ returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf')\
  \ returns 'kj'\n    // encrypt('et') returns 'ix'\n    public static String encrypt(String\
  \ s) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(encrypt((\"hi\"\
  )).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
  )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\"\
  )).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\"\
  )));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n  \
  \  assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
  hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"\
  e\")));\n    }\n\n}\n"
