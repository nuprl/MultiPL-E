name: HumanEval_142_sum_squares
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"\n    // This function will take a list of integers. For\
  \ all entries in the list, the function shall square the integer entry if its index\
  \ is a \n    // multiple of 3 and will cube the integer entry if its index is a\
  \ multiple of 4 and not a multiple of 3. The function will not \n    // change the\
  \ entries in the list whose indexes are not a multiple of 3 or 4. The function shall\
  \ then return the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3]\
  \ the output should be 6\n    // For lst = []  the output should be 0\n    // For\
  \ lst = [-1,-5,2,-1,-5]  the output should be -126\n    public static int sumSquares(ArrayList<Integer>\
  \ lst) {\n"
tests: "return 0;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3)))) == (6));\n    assert(sumSquares((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)4, (int)9)))) == (14));\n    assert(sumSquares((new\
  \ ArrayList<Integer>(Arrays.asList()))) == (0));\n    assert(sumSquares((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)1, (int)1, (int)1, (int)1, (int)1, (int)1, (int)1, (int)1)))) == (9));\n\
  \    assert(sumSquares((new ArrayList<Integer>(Arrays.asList((int)-1, (int)-1, (int)-1,\
  \ (int)-1, (int)-1, (int)-1, (int)-1, (int)-1, (int)-1)))) == (-3));\n    assert(sumSquares((new\
  \ ArrayList<Integer>(Arrays.asList((int)0)))) == (0));\n    assert(sumSquares((new\
  \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-5, (int)2, (int)-1, (int)-5))))\
  \ == (-126));\n    assert(sumSquares((new ArrayList<Integer>(Arrays.asList((int)-56,\
  \ (int)-99, (int)1, (int)0, (int)-2)))) == (3030));\n    assert(sumSquares((new\
  \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)0, (int)0, (int)0, (int)0,\
  \ (int)0, (int)0, (int)-1)))) == (0));\n    assert(sumSquares((new ArrayList<Integer>(Arrays.asList((int)-16,\
  \ (int)-9, (int)-2, (int)36, (int)36, (int)26, (int)-20, (int)25, (int)-40, (int)20,\
  \ (int)-4, (int)12, (int)-26, (int)35, (int)37)))) == (-14196));\n    assert(sumSquares((new\
  \ ArrayList<Integer>(Arrays.asList((int)-1, (int)-3, (int)17, (int)-1, (int)-15,\
  \ (int)13, (int)-1, (int)14, (int)-14, (int)-12, (int)-5, (int)14, (int)-14, (int)6,\
  \ (int)13, (int)11, (int)16, (int)16, (int)4, (int)10)))) == (-1448));\n    }\n\n\
  }\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
