completions:
- "        return string.chars()\n            .mapToObj(x -> {\n                if\
  \ (Character.isLowerCase(x)) {\n                    return Character.toUpperCase(x);\n\
  \                } else {\n                    return Character.toLowerCase(x);\n\
  \                }\n            })\n            .map(x -> x.toString())\n      \
  \      .collect(Collectors.joining());"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(Character.toUpperCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        char[] strArr = string.toCharArray();\n        for (int i = 0; i < strArr.length;\
  \ i++) {\n            if (Character.isLowerCase(strArr[i])) {\n                strArr[i]\
  \ = Character.toUpperCase(strArr[i]);\n            } else {\n                strArr[i]\
  \ = Character.toLowerCase(strArr[i]);\n            }\n        }\n        return\
  \ new String(strArr);"
- "        return string.chars()\n            .mapToObj(i -> (char) i)\n         \
  \   .map(Character::toLowerCase)\n            .map(Character::toUpperCase)\n   \
  \         .collect(Collectors.joining());"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                sb.append(Character.toLowerCase(c));\n            } else {\n\
  \                sb.append(Character.toUpperCase(c));\n            }\n        }\n\
  \        return sb.toString();"
- "        int size = string.length();\n        char[] result = new char[size];\n\
  \        for (int i = 0; i < size; i++) {\n            char c = string.charAt(i);\n\
  \            if (Character.isLowerCase(c)) {\n                result[i] = Character.toUpperCase(c);\n\
  \            } else {\n                result[i] = Character.toLowerCase(c);\n \
  \           }\n        }\n        return new String(result);"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(Character.toUpperCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- '        return null;'
- "        // TODO: Your code here\n        return null;"
- "        String rv = \"\";\n        char c;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            c = string.charAt(i);\n            if (Character.isUpperCase(c))\n\
  \                rv += Character.toLowerCase(c);\n            else\n           \
  \     rv += Character.toUpperCase(c);\n        }\n        return rv;"
- '        return "";'
- '        return new String(string.chars().map(i -> Character.isUpperCase(i) ? Character.toLowerCase(i)
  : Character.toUpperCase(i)).collect(StringBuilder::new, StringBuilder::appendCodePoint,
  StringBuilder::append).toString());'
- "        //TODO: Flip the cases\n        return null;"
- "        return string.chars()\n            .mapToObj(c -> (char) c)\n         \
  \   .map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
  \            .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
  \            .toString();"
- "        // Convert string to char array\n        char[] charArray = string.toCharArray();\n\
  \        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n\
  \            // Flip cases\n            if (Character.isUpperCase(c)) {\n      \
  \          charArray[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c))\
  \ {\n                charArray[i] = Character.toUpperCase(c);\n            }\n \
  \       }\n        return new String(charArray);"
- "        StringBuilder sb = new StringBuilder();\n        for (char ch : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
  \            } else {\n                sb.append(Character.toUpperCase(ch));\n \
  \           }\n        }\n        return sb.toString();"
- "        char[] result = new char[string.length()];\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            char c = string.charAt(i);\n            if\
  \ (Character.isLowerCase(c)) {\n                result[i] = Character.toUpperCase(c);\n\
  \            } else {\n                result[i] = Character.toLowerCase(c);\n \
  \           }\n        }\n        return new String(result);"
- "        // TODO: implement this method\n        return null;"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(Character.toUpperCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        return string.chars()\n                .mapToObj(n -> n > 96 ? n - 32 :\
  \ n < 91 ? n + 32 : n)\n                .map(n -> String.valueOf((char) n.intValue()))\n\
  \                .collect(Collectors.joining());"
- "      char[] chars = string.toCharArray();\n      for (int i = 0; i < chars.length;\
  \ i++) {\n        if (Character.isUpperCase(chars[i])) {\n          chars[i] = Character.toLowerCase(chars[i]);\n\
  \        } else {\n          chars[i] = Character.toUpperCase(chars[i]);\n     \
  \   }\n      }\n      return new String(chars);"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(Character.toUpperCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        // TODO: Implement me!\n        return null;"
- "      StringBuilder result = new StringBuilder();\n      for (int i = 0; i < string.length();\
  \ i++) {\n        char c = string.charAt(i);\n        if (Character.isUpperCase(c))\
  \ {\n          result.append(Character.toLowerCase(c));\n        } else {\n    \
  \      result.append(Character.toUpperCase(c));\n        }\n      }\n      return\
  \ result.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (char ch : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
  \            } else {\n                sb.append(Character.toUpperCase(ch));\n \
  \           }\n        }\n        return sb.toString();"
- "        char[] result = new char[string.length()];\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            char c = string.charAt(i);\n            if\
  \ (Character.isLowerCase(c)) {\n                result[i] = Character.toUpperCase(c);\n\
  \            } else {\n                result[i] = Character.toLowerCase(c);\n \
  \           }\n        }\n        return new String(result);"
- "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            char c = string.charAt(i);\n          \
  \  if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n\
  \            } else {\n                result.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return result.toString();"
- "        // write your code here\n        return null;"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n         \
  \       sb.append(Character.toUpperCase(string.charAt(i)));\n            } else\
  \ {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n     \
  \       }\n        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
  \ {\n                sb.append(Character.toUpperCase(c));\n            } else {\n\
  \                sb.append(Character.toLowerCase(c));\n            }\n        }\n\
  \        return sb.toString();"
- '        // Your code here.'
- "        return string.chars()\n                .mapToObj(c -> (char) c)\n     \
  \           .map(c -> {\n                    if (Character.isUpperCase(c)) {\n \
  \                       return Character.toLowerCase(c);\n                    }\
  \ else {\n                        return Character.toUpperCase(c);\n           \
  \         }\n                })\n                .collect(Collectors.joining());"
- "        return string.chars()\n            .mapToObj(i -> (char) i)\n         \
  \   .map(i -> {\n                if (Character.isLowerCase(i)) {\n             \
  \       return Character.toUpperCase(i);\n                } else {\n           \
  \         return Character.toLowerCase(i);\n                }\n            })\n\
  \            .collect(Collectors.joining());"
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
  \ {\n                chars[i] = Character.toLowerCase(c);\n            } else if\
  \ (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n\
  \            }\n        }\n        return new String(chars);"
- '        return null;'
- "        // Your solution goes here.\n        return string.chars()\n          \
  \      .mapToObj(c -> (char) c)\n                .map(c -> {\n                 \
  \   if (Character.isUpperCase(c)) {\n                        return Character.toLowerCase(c);\n\
  \                    } else {\n                        return Character.toUpperCase(c);\n\
  \                    }\n                })\n                .collect(Collectors.joining());"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(Character.toLowerCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        return string.chars()\n        .mapToObj(i -> {\n            if (Character.isUpperCase(i))\
  \ {\n                return Character.toLowerCase(i);\n            } else {\n  \
  \              return Character.toUpperCase(i);\n            }\n        })\n   \
  \     .map(Object::toString)\n        .collect(Collectors.joining());"
- "        return string.chars()\n                     .mapToObj(c -> (char) c)\n\
  \                     .map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
  \ : Character.toLowerCase(c))\n                     .collect(StringBuilder::new,\
  \ StringBuilder::append, StringBuilder::append)\n                     .toString();"
- "        return string.chars()\n            .mapToObj(c -> {\n                if\
  \ (Character.isUpperCase(c)) {\n                    return Character.toLowerCase(c);\n\
  \                } else {\n                    return Character.toUpperCase(c);\n\
  \                }\n            })\n            .map(c -> Character.toString((char)\
  \ c))\n            .collect(Collectors.joining());"
- "        return string.chars()\n            .mapToObj(c -> Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .map(c ->\
  \ Character.toString((char) c))\n            .collect(Collectors.joining());"
- '        return null;'
- "        String result = \"\";\n        for (char c : string.toCharArray()) {\n\
  \            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
  \            } else {\n                result += Character.toUpperCase(c);\n   \
  \         }\n        }\n        return result;"
- "        StringBuilder flipped = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n\
  \            } else {\n                flipped.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return flipped.toString();"
- "        return string.chars()\n                .mapToObj(i -> {\n             \
  \       char ch = (char) i;\n                    if (Character.isUpperCase(ch))\
  \ {\n                        return Character.toLowerCase(ch);\n               \
  \     } else {\n                        return Character.toUpperCase(ch);\n    \
  \                }\n                })\n                .collect(StringBuilder::new,\
  \ StringBuilder::append, StringBuilder::append)\n                .toString();"
- "        int size = string.length();\n        char[] chars = new char[size];\n \
  \       string.getChars(0, size, chars, 0);\n        for (int i = 0; i < size; i++)\
  \ {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i]\
  \ = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i]))\
  \ {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n\
  \        }\n        return new String(chars);"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char ch = string.charAt(i);\n            if (Character.isUpperCase(ch))\
  \ {\n                sb.append(Character.toLowerCase(ch));\n            } else {\n\
  \                sb.append(Character.toUpperCase(ch));\n            }\n        }\n\
  \        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(Character.toLowerCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "      StringBuilder sb = new StringBuilder();\n      for (char c : string.toCharArray())\
  \ {\n        sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
  \      }\n      return sb.toString();"
- "        // >>> Write your code here <<<\n        StringBuilder myString = new StringBuilder();\n\
  \        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i)))\
  \ {\n                myString.append(Character.toLowerCase(string.charAt(i)));\n\
  \            } else {\n                myString.append(Character.toUpperCase(string.charAt(i)));\n\
  \            }\n        }\n        return myString.toString();"
- "        // TODO: Implement\n        return null;"
- "        return string.chars()\n            .mapToObj(c -> (char) c)\n         \
  \   .map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
  \            .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
  \            .toString();"
- "        // >>> 'Hello'.swapcase()\n        // 'hELLO'\n        return string.swapcase();"
- '        return "";'
- '        return null;'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                sb.append(Character.toLowerCase(c));\n            } else {\n\
  \                sb.append(Character.toUpperCase(c));\n            }\n        }\n\
  \        return sb.toString();"
- "        String result = \"\";\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            if (Character.isUpperCase(string.charAt(i))) {\n              \
  \  result += Character.toLowerCase(string.charAt(i));\n            } else {\n  \
  \              result += Character.toUpperCase(string.charAt(i));\n            }\n\
  \        }\n        return result;"
- "        return string.chars()\n                     .mapToObj(c -> {\n        \
  \                return (char) c;\n                     })\n                   \
  \  .map(c -> {\n                        if (Character.isLowerCase(c)) {\n      \
  \                      return Character.toUpperCase(c);\n                      \
  \  } else {\n                            return Character.toLowerCase(c);\n    \
  \                    }\n                     })\n                     .collect(Collectors.joining());"
- "        // Don't forget to throw an IllegalArgumentException if the string is null.\n\
  \        if (string == null) {\n            throw new IllegalArgumentException(\"\
  Argument passed to flipCase cannot be null.\");\n        }\n        // Returns a\
  \ NEW string that has all the characters flipped.\n        String flipped = \"\"\
  ;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
  \            if (Character.isUpperCase(c)) {\n                flipped += Character.toLowerCase(c);\n\
  \            } else {\n                flipped += Character.toUpperCase(c);\n  \
  \          }\n        }\n        return flipped;"
- "        StringBuilder ret = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n         \
  \       ret.append(Character.toUpperCase(string.charAt(i)));\n            } else\
  \ {\n                ret.append(Character.toLowerCase(string.charAt(i)));\n    \
  \        }\n        }\n        return ret.toString();"
- "        return string.chars()\n            .mapToObj(c -> {\n                char\
  \ ch = (char) c;\n                if (Character.isUpperCase(ch)) {\n           \
  \         return Character.toLowerCase(ch);\n                } else {\n        \
  \            return Character.toUpperCase(ch);\n                }\n            })\n\
  \            .collect(Collectors.joining());"
- "        return string.chars()\n        .mapToObj(x -> {\n            if (Character.isUpperCase(x))\
  \ {\n                return Character.toLowerCase(x);\n            } else {\n  \
  \              return Character.toUpperCase(x);\n            }\n        })\n   \
  \     .map(x -> String.valueOf((char) x))\n        .collect(Collectors.joining());"
- "        String result = \"\";\n        for (char c : string.toCharArray()) {\n\
  \            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
  \            } else {\n                result += Character.toUpperCase(c);\n   \
  \         }\n        }\n        return result;"
- '        return string.toLowerCase();'
- '        return "Hello";'
- "        return string.chars()\n                     .mapToObj(c -> Character.isLowerCase(c)\
  \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n                     .map(c\
  \ -> \"\" + (char) c)\n                     .collect(Collectors.joining());"
- "        return string.chars()\n                .mapToObj(i -> (char) i)\n     \
  \           .map(c -> {\n                    if (Character.isUpperCase(c))\n   \
  \                     return Character.toLowerCase(c);\n                    else\n\
  \                        return Character.toUpperCase(c);\n                })\n\
  \                .collect(Collectors.joining());"
- '        return null;'
- '        return null;'
- "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            char c = string.charAt(i);\n          \
  \  if (Character.isUpperCase(c))\n                result.append(Character.toLowerCase(c));\n\
  \            else if (Character.isLowerCase(c))\n                result.append(Character.toUpperCase(c));\n\
  \            else\n                result.append(c);\n        }\n        return\
  \ result.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                sb.append(Character.toLowerCase(c));\n            } else {\n\
  \                sb.append(Character.toUpperCase(c));\n            }\n        }\n\
  \        return sb.toString();"
- "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            builder.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n        }\n        return builder.toString();"
- '        return null;'
- "        char[] chars = string.toCharArray();\n        int len = chars.length;\n\
  \        for (int i = 0; i < len; i++) {\n            char c = chars[i];\n     \
  \       if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n\
  \            } else if (Character.isUpperCase(c)) {\n                chars[i] =\
  \ Character.toLowerCase(c);\n            }\n        }\n        return new String(chars);"
- "        return new String(\n            string.chars()\n            .map(c -> Character.isLowerCase(c)\
  \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
  \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString()\n\
  \        );"
- "        StringBuilder result = new StringBuilder();\n        for (char ch : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n\
  \            } else {\n                result.append(Character.toUpperCase(ch));\n\
  \            }\n        }\n        return result.toString();"
- '        return null;'
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i])\
  \ : Character.toUpperCase(chars[i]);\n        }\n        return new String(chars);"
- "        // Solution code here...\n        return null;"
- "        StringBuilder stringBuilder = new StringBuilder();\n        for (char c\
  \ : string.toCharArray()) {\n            stringBuilder.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        }\n        return\
  \ stringBuilder.toString();"
- "        StringBuilder flipped = new StringBuilder();\n        for (char letter\
  \ : string.toCharArray()) {\n            if (Character.isUpperCase(letter)) {\n\
  \                flipped.append(Character.toLowerCase(letter));\n            } else\
  \ {\n                flipped.append(Character.toUpperCase(letter));\n          \
  \  }\n        }\n        return flipped.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            sb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        }\n        return\
  \ sb.toString();"
- "        // TODO: Implement me!\n        char[] input = string.toCharArray();\n\
  \        for (int i = 0; i < input.length; i++) {\n            if (Character.isLowerCase(input[i]))\
  \ {\n                input[i] = Character.toUpperCase(input[i]);\n            }\
  \ else {\n                input[i] = Character.toLowerCase(input[i]);\n        \
  \    }\n        }\n        return new String(input);"
- '        throw new UnsupportedOperationException("Not yet implemented");'
- '        return "";'
- "        var flip = new StringBuilder();\n        for (var c : string.toCharArray())\
  \ {\n            if (Character.isLowerCase(c)) {\n                flip.append(Character.toUpperCase(c));\n\
  \            } else {\n                flip.append(Character.toLowerCase(c));\n\
  \            }\n        }\n        return flip.toString();"
- "        String result = \"\";\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                result += Character.toLowerCase(c);\n            } else {\n\
  \                result += Character.toUpperCase(c);\n            }\n        }\n\
  \        return result;"
- '        return null;'
- '        return null;'
- "        StringBuilder flipedString = new StringBuilder();\n        for (char char_:\
  \ string.toCharArray()) {\n            if (Character.isLowerCase(char_)) {\n   \
  \             flipedString.append(Character.toUpperCase(char_));\n            }\
  \ else {\n                flipedString.append(Character.toLowerCase(char_));\n \
  \           }\n        }\n        return flipedString.toString();"
- "        String out_string = \"\";\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                out_string +=\
  \ Character.toLowerCase(c);\n            } else {\n                out_string +=\
  \ Character.toUpperCase(c);\n            }\n        }\n        return out_string;"
- '        throw new UnsupportedOperationException("Method flipCase is not implemented.");'
- '        throw new NotImplementedException();'
- "        StringBuilder stringBuilder = new StringBuilder();\n        string.chars().forEach(i\
  \ -> {\n            if (i >= 65 && i <= 90) {\n                stringBuilder.append((char)\
  \ i + 32);\n            } else if (i >= 97 && i <= 122) {\n                stringBuilder.append((char)\
  \ i - 32);\n            } else {\n                stringBuilder.append((char) i);\n\
  \            }\n        });\n        return stringBuilder.toString();"
- "        // INSERT CODE HERE\n        StringBuilder stringBuilder = new StringBuilder();\n\
  \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
  \            if (Character.isLowerCase(c)) {\n                stringBuilder.append(Character.toUpperCase(c));\n\
  \            } else {\n                stringBuilder.append(Character.toLowerCase(c));\n\
  \            }\n        }\n        return stringBuilder.toString();"
- '        return string.toLowerCase();'
- "        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char ch = string.charAt(i);\n            if (Character.isUpperCase(ch))\
  \ {\n                sb.append(Character.toLowerCase(ch));\n            } else {\n\
  \                sb.append(Character.toUpperCase(ch));\n            }\n        }\n\
  \        return sb.toString();"
- "        return string.chars()\n                .mapToObj(c -> (char) c)\n     \
  \           .map(c -> {\n                    if (Character.isUpperCase(c)) {\n \
  \                       return Character.toLowerCase(c);\n                    }\
  \ else {\n                        return Character.toUpperCase(c);\n           \
  \         }\n                })\n                .collect(Collectors.joining());"
- "        // Initialise answer.\n        String answer = \"\";\n        // Iterate\
  \ through string, and add the flipped character.\n        for (char character :\
  \ string.toCharArray()) {\n            if (Character.isUpperCase(character)) {\n\
  \                answer += Character.toLowerCase(character);\n            } else\
  \ {\n                answer += Character.toUpperCase(character);\n            }\n\
  \        }\n        // Return the answer.\n        return answer;"
- "        // write your code here\n        return null;"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(Character.toLowerCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        String ans = \"\";\n        for (int i = 0; i < string.length(); i++) {\n\
  \            if (Character.isUpperCase(string.charAt(i)))\n                ans +=\
  \ Character.toLowerCase(string.charAt(i));\n            else\n                ans\
  \ += Character.toUpperCase(string.charAt(i));\n        }\n        return ans;"
- "        return string.chars()\n                .mapToObj(x -> (char) x)\n     \
  \           .map(x -> Character.isLetter(x) && Character.isUpperCase(x) ?\n    \
  \                    Character.toLowerCase(x) :\n                        Character.toUpperCase(x))\n\
  \                .map(x -> x.toString())\n                .collect(Collectors.joining());"
- "        char[] output = new char[string.length()];\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            char c = string.charAt(i);\n            if\
  \ (Character.isUpperCase(c)) {\n                output[i] = Character.toLowerCase(c);\n\
  \            } else {\n                output[i] = Character.toUpperCase(c);\n \
  \           }\n        }\n        return new String(output);"
- "        // TODO: write your code here\n        return null;"
- "        return string.chars()\n                .mapToObj(value -> (char) value)\n\
  \                .map(ch -> Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
  \ : Character.toUpperCase(ch))\n                .map(ch -> Character.toString(ch))\n\
  \                .collect(Collectors.joining());"
- "        StringBuilder string_builder = new StringBuilder();\n        for (int i\
  \ = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n   \
  \         if (Character.isLowerCase(c)) {\n                string_builder.append(Character.toUpperCase(c));\n\
  \            } else {\n                string_builder.append(Character.toLowerCase(c));\n\
  \            }\n        }\n        return string_builder.toString();"
- "        // return null;\n        StringBuffer buffer = new StringBuffer();\n  \
  \      for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
  \            if (Character.isUpperCase(c)) {\n                buffer.append(Character.toLowerCase(c));\n\
  \            } else {\n                buffer.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return buffer.toString();"
- "        String result = \"\";\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                result += Character.toLowerCase(c);\n            } else {\n\
  \                result += Character.toUpperCase(c);\n            }\n        }\n\
  \        return result;"
- "      char[] chars = string.toCharArray();\n      for (int i = 0; i < chars.length;\
  \ i++) {\n        char c = chars[i];\n        if (Character.isLowerCase(c)) {\n\
  \          chars[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c))\
  \ {\n          chars[i] = Character.toLowerCase(c);\n        }\n      }\n      return\
  \ new String(chars);"
- "        String flipped = \"\";\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                flipped += Character.toLowerCase(c);\n            } else {\n\
  \                flipped += Character.toUpperCase(c);\n            }\n        }\n\
  \        return flipped;"
- "        return string.chars()\n            .mapToObj(i -> i > 96 ? (char) i - 32\
  \ : (char) i + 32)\n            .map(c -> Character.toString(c))\n            .collect(Collectors.joining());"
- "        // Convert the given string to a char array.\n        char[] chars = string.toCharArray();\n\
  \        // Iterate over each char in the array.\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            char currentChar = chars[i];\n            // If the current\
  \ char is upper case, convert it to lower case.\n            if (Character.isUpperCase(currentChar))\
  \ {\n                chars[i] = Character.toLowerCase(currentChar);\n          \
  \  }\n            // Else convert the current char to upper case.\n            else\
  \ {\n                chars[i] = Character.toUpperCase(currentChar);\n          \
  \  }\n        }\n        // Return the modified char array as a string.\n      \
  \  return new String(chars);"
- "        char[] strArr = string.toCharArray();\n        for (int i = 0; i < strArr.length;\
  \ i++) {\n            if (Character.isUpperCase(strArr[i])) {\n                strArr[i]\
  \ = Character.toLowerCase(strArr[i]);\n            } else {\n                strArr[i]\
  \ = Character.toUpperCase(strArr[i]);\n            }\n        }\n        return\
  \ new String(strArr);"
- "        StringBuilder builder = new StringBuilder();\n        for (char character\
  \ : string.toCharArray()) {\n            if (Character.isUpperCase(character)) {\n\
  \                builder.append(Character.toLowerCase(character));\n           \
  \ } else {\n                builder.append(Character.toUpperCase(character));\n\
  \            }\n        }\n        return builder.toString();"
- "        // Your code here\n        throw new NotImplementedException();"
- "        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            result.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n        }\n        return result.toString();"
- "        // TODO\n        return \"Hello\";"
- '        return new String(string.chars().map(i -> Character.isLowerCase(i) ? Character.toUpperCase(i)
  : Character.toLowerCase(i)).mapToObj(i -> (char) i).collect(Collectors.toList()).toString());'
- "        // Creates a new string buffer so we can edit it.\n        StringBuffer\
  \ stringBuffer = new StringBuffer(string);\n        // Applies the given function\
  \ to each character, and then sets the buffer to the modified version.\n       \
  \ stringBuffer.replace(0, stringBuffer.length(), stringBuffer.chars().mapToObj(c\
  \ -> ((char)c == Character.toUpperCase((char)c)) ? Character.toLowerCase((char)c)\
  \ : Character.toUpperCase((char)c)).collect(Collectors.joining()));\n        //\
  \ Returns the new string.\n        return stringBuffer.toString();"
- "        // Write your code here.\n        return string.chars()\n             \
  \   .mapToObj(ch ->\n                        (char)ch == Character.toUpperCase((char)ch)\
  \ ? Character.toLowerCase((char)ch) : Character.toUpperCase((char)ch))\n       \
  \         .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
  \                .toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n         \
  \       sb.append(Character.toLowerCase(string.charAt(i)));\n            } else\
  \ {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n     \
  \       }\n        }\n        return sb.toString();"
- "        return string.chars()\n            .mapToObj(c -> ((char) c))\n       \
  \     .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
  \            .map(c -> Character.toString(c))\n            .collect(Collectors.joining());"
- '        throw new RuntimeException("Implement me!");'
- "        // Your implementation here.\n        String res = \"\";\n        for (int\
  \ i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i)))\
  \ {\n                res += Character.toUpperCase(string.charAt(i));\n         \
  \   } else {\n                res += Character.toLowerCase(string.charAt(i));\n\
  \            }\n        }\n        return res;"
- "        String out = \"\";\n        for (int i = 0; i < string.length(); i++) {\n\
  \            if (Character.isLowerCase(string.charAt(i))) {\n                out\
  \ += Character.toUpperCase(string.charAt(i));\n            } else {\n          \
  \      out += Character.toLowerCase(string.charAt(i));\n            }\n        }\n\
  \        return out;"
- "        String result = \"\";\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                result += Character.toLowerCase(c);\n            } else {\n\
  \                result += Character.toUpperCase(c);\n            }\n        }\n\
  \        return result;"
- "        String flippedString = \"\";\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                flippedString\
  \ += Character.toLowerCase(c);\n            } else {\n                flippedString\
  \ += Character.toUpperCase(c);\n            }\n        }\n        return flippedString;"
- "        int len = string.length();\n        StringBuilder sb = new StringBuilder(len);\n\
  \        for (int i = 0; i < len; i++) {\n            char c = string.charAt(i);\n\
  \            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(Character.toUpperCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i]\
  \ = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i]\
  \ = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new\
  \ String(chars);"
- "        // Replace all lowercase letters with uppercase and vice versa\n      \
  \  // We convert to a list of characters because strings are immutable\n       \
  \ List<Character> chars = new ArrayList<>();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isLowerCase(c)) {\n                chars.add(Character.toUpperCase(c));\n\
  \            } else {\n                chars.add(Character.toLowerCase(c));\n  \
  \          }\n        }\n        // Convert the list of characters to a string\n\
  \        char[] charArray = new char[chars.size()];\n        for (int i = 0; i <\
  \ chars.size(); i++) {\n            charArray[i] = chars.get(i);\n        }\n  \
  \      return new String(charArray);"
- "        return string.chars()\n            .mapToObj(c -> {\n                if\
  \ (Character.isUpperCase(c)) {\n                    return Character.toLowerCase(c);\n\
  \                } else {\n                    return Character.toUpperCase(c);\n\
  \                }\n            })\n            .map(Character::toString)\n    \
  \        .collect(Collectors.joining());"
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c))\
  \ {\n                chars[i] = Character.toUpperCase(c);\n            } else if\
  \ (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n\
  \            }\n        }\n        return new String(chars);"
- "        char[] flipped = new char[string.length()];\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            char c = string.charAt(i);\n          \
  \  if (Character.isUpperCase(c)) {\n                flipped[i] = Character.toLowerCase(c);\n\
  \            } else {\n                flipped[i] = Character.toUpperCase(c);\n\
  \            }\n        }\n        return new String(flipped);"
- "        String result = \"\";\n        for (int i = 0; i < string.length(); i++)\
  \ {\n            char character = string.charAt(i);\n            if (Character.isUpperCase(character))\
  \ {\n                result += Character.toLowerCase(character);\n            }\
  \ else {\n                result += Character.toUpperCase(character);\n        \
  \    }\n        }\n        return result;"
- "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
  \ i++) {\n            if (Character.isUpperCase(charArray[i])) {\n             \
  \   charArray[i] = Character.toLowerCase(charArray[i]);\n            } else {\n\
  \                charArray[i] = Character.toUpperCase(charArray[i]);\n         \
  \   }\n        }\n        return new String(charArray);"
- "        return string.chars()\n                .mapToObj(i -> {\n             \
  \       char c = (char) i;\n                    if (Character.isLetter(c)) {\n \
  \                       return Character.isUpperCase(c) ?\n                    \
  \            Character.toLowerCase(c) :\n                                Character.toUpperCase(c);\n\
  \                    } else {\n                        return c;\n             \
  \       }\n                })\n                .map(Object::toString)\n        \
  \        .collect(Collectors.joining());"
- "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n\
  \            } else {\n                builder.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return builder.toString();"
- "        // <<<\n        return string.chars()\n            .mapToObj(i -> i > 90\
  \ ? (char) i - 32 : (char) i + 32)\n            .map(String::valueOf)\n        \
  \    .collect(Collectors.joining());\n        // >>>"
- "        //return string.chars().map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c)).collect(StringBuilder::new, StringBuilder::appendCodePoint,\
  \ StringBuilder::append).toString();\n        return string.chars().map(c -> c ^\
  \ 32).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();"
- "        // Fill this in.\n        char[] char_array = string.toCharArray();\n \
  \       for (int i = 0; i < char_array.length; i++) {\n            // If the character\
  \ is lowercase\n            if (Character.isLowerCase(char_array[i])) {\n      \
  \          // Convert to uppercase\n                char_array[i] = Character.toUpperCase(char_array[i]);\n\
  \            }\n            // If the character is uppercase\n            else if\
  \ (Character.isUpperCase(char_array[i])) {\n                // Convert to lowercase\n\
  \                char_array[i] = Character.toLowerCase(char_array[i]);\n       \
  \     }\n        }\n        return new String(char_array);"
- "        String returnString = \"\";\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n         \
  \       returnString += Character.toLowerCase(string.charAt(i));\n            }\
  \ else {\n                returnString += Character.toUpperCase(string.charAt(i));\n\
  \            }\n        }\n        return returnString;"
- "        // TODO: Implement this function\n        return null;"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
  \ {\n                sb.append(Character.toUpperCase(c));\n            } else {\n\
  \                sb.append(Character.toLowerCase(c));\n            }\n        }\n\
  \        return sb.toString();"
- "        // Implement me\n        return string;"
- "      StringBuilder result = new StringBuilder();\n      for (int i = 0; i < string.length();\
  \ i++) {\n        if (Character.isUpperCase(string.charAt(i))) {\n          result.append(Character.toLowerCase(string.charAt(i)));\n\
  \        } else {\n          result.append(Character.toUpperCase(string.charAt(i)));\n\
  \        }\n      }\n      return result.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c))\n                sb.append(Character.toLowerCase(c));\n\
  \            else\n                sb.append(Character.toUpperCase(c));\n      \
  \  }\n        return sb.toString();"
- '        return null;'
- '        return null;'
- "        String flipped = \"\";\n        for (char c : string.toCharArray()) {\n\
  \            if (Character.isUpperCase(c)) {\n                flipped += Character.toLowerCase(c);\n\
  \            } else {\n                flipped += Character.toUpperCase(c);\n  \
  \          }\n        }\n        return flipped;"
- "        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                sb.append(Character.toLowerCase(c));\n            } else {\n\
  \                sb.append(Character.toUpperCase(c));\n            }\n        }\n\
  \        return sb.toString();"
- '        return null;'
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i]\
  \ = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i]\
  \ = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new\
  \ String(chars);"
- "        StringBuilder sb = new StringBuilder();\n        for (char ch : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
  \            } else {\n                sb.append(Character.toUpperCase(ch));\n \
  \           }\n        }\n        return sb.toString();"
- '        // Your code here.'
- "        char[] chars = string.toCharArray();\n        String res = \"\";\n    \
  \    for (char c : chars) {\n            res += Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c);\n        }\n        return res;"
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i]\
  \ = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i]\
  \ = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new\
  \ String(chars);"
- '        return string.toLowerCase();'
- "        return string.replace(\"e\", \"u\")\n                .replace(\"E\", \"\
  U\")\n                .replace(\"u\", \"e\")\n                .replace(\"U\", \"\
  E\");"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(Character.toUpperCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        char[] array = string.toCharArray();\n        for (int i = 0; i < array.length;\
  \ i++) {\n            if (Character.isUpperCase(array[i])) {\n                array[i]\
  \ = Character.toLowerCase(array[i]);\n            } else {\n                array[i]\
  \ = Character.toUpperCase(array[i]);\n            }\n        }\n        return new\
  \ String(array);"
- '        return null;'
- "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
  \ i++) {\n            char c = charArray[i];\n            if (Character.isLowerCase(c))\
  \ {\n                charArray[i] = Character.toUpperCase(c);\n            } else\
  \ if (Character.isUpperCase(c)) {\n                charArray[i] = Character.toLowerCase(c);\n\
  \            }\n        }\n        return new String(charArray);"
- "        var result = new StringBuilder();\n        for (var c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n\
  \            } else {\n                result.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return result.toString();"
- '        return string.toLowerCase().replaceAll("([a-z])(?=\\1)", "");'
- '        throw new NotImplementedException();'
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i]\
  \ = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i]\
  \ = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new\
  \ String(chars);"
- '        // YOUR CODE HERE'
- "        StringBuffer newString = new StringBuffer();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            char c = string.charAt(i);\n          \
  \  if (Character.isUpperCase(c)) {\n                newString.append(Character.toLowerCase(c));\n\
  \            } else {\n                newString.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return newString.toString();"
- "        // Placeholder, just returns the same string for now.\n        return string;"
- "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            char c = string.charAt(i);\n          \
  \  if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n\
  \            } else {\n                result.append(Character.toLowerCase(c));\n\
  \            }\n        }\n        return result.toString();"
- '        return null;'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                sb.append(Character.toLowerCase(c));\n            } else {\n\
  \                sb.append(Character.toUpperCase(c));\n            }\n        }\n\
  \        return sb.toString();"
- "        // >>> string.toLowerCase()\n        // 'hello'\n        // >>> string.toUpperCase()\n\
  \        // 'HELLO'\n        // >>> \"hello\".toCharArray()\n        // {'h', 'e',\
  \ 'l', 'l', 'o'}\n        // >>> \"hello\".toCharArray()[0]\n        // 'h'\n  \
  \      // >>> \"hello\".toCharArray()[0].isUpperCase()\n        // false\n     \
  \   // >>> \"HELLO\".toCharArray()[0].isUpperCase()\n        // true\n        //\
  \ >>> Character.toLowerCase('H')\n        // 'h'\n        // >>> Character.toUpperCase('h')\n\
  \        // 'H'\n        // >>> new String(\"Hello\".toCharArray())\n        //\
  \ 'Hello'\n        return new String(\n            IntStream.range(0, string.length())\n\
  \            .mapToObj(\n                i -> string.toCharArray()[i].isUpperCase()\
  \ ?\n                Character.toLowerCase(string.toCharArray()[i]) :\n        \
  \        Character.toUpperCase(string.toCharArray()[i])\n            )\n       \
  \     .toArray()\n        );"
- "        String result = \"\";\n        for (char c : string.toCharArray()) {\n\
  \            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
  \            } else {\n                result += Character.toUpperCase(c);\n   \
  \         }\n        }\n        return result;"
- "        StringBuilder answer = new StringBuilder();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            char c = string.charAt(i);\n          \
  \  if (Character.isUpperCase(c)) {\n                answer.append(Character.toLowerCase(c));\n\
  \            } else {\n                answer.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return answer.toString();"
- '        return null;'
- '        // Your code here.'
- "        return string.chars()\n                     .mapToObj(\n              \
  \           e -> {\n                             if (Character.isLowerCase(e)) {\n\
  \                                 return Character.toUpperCase(e);\n           \
  \                  } else {\n                                 return Character.toLowerCase(e);\n\
  \                             }\n                         }\n                  \
  \   )\n                     .map(Character::toString)\n                     .collect(Collectors.joining());"
- "        return Stream.of(string)\n            .map(String::toCharArray)\n     \
  \       .flatMap(x -> Stream.of(x))\n            .map(x -> Character.isLowerCase(x)\
  \ ? Character.toUpperCase(x) : Character.toLowerCase(x))\n            .map(Object::toString)\n\
  \            .collect(Collectors.joining());"
- "        int len = string.length();\n        String str = \"\";\n        for (int\
  \ i = 0; i < len; i++) {\n            char c = string.charAt(i);\n            if\
  \ (Character.isUpperCase(c)) {\n                str += Character.toLowerCase(c);\n\
  \            } else {\n                str += Character.toUpperCase(c);\n      \
  \      }\n        }\n        return str;"
- '        return string.replace("a", "_").replace("A", "a").replace("_", "A").replace("b",
  "_").replace("B", "b").replace("_", "B").replace("c", "_").replace("C", "c").replace("_",
  "C").replace("d", "_").replace("D", "d").replace("_", "D").replace("e", "_").replace("E",
  "e").replace("_", "E").replace("f", "_").replace("F", "f").replace("_", "F").replace("g",
  "_").replace("G", "g").replace("_", "G").replace("h", "_").replace("H", "h").replace("_",
  "H").replace("i", "_").replace("I", "i").replace("_", "I").replace("j", "_").replace("J",
  "j").replace("_", "J").replace("k", "_").replace("K", "k").replace("_", "K").replace("l",
  "_").replace("L", "l").replace("_", "L").replace("m", "_").replace("M", "m").replace("_",
  "M").replace("n", "_").replace("N", "n").replace("_", "N").replace("o", "_").replace("O",
  "o").replace("_", "O").replace("p", "_").replace("P", "p").replace("_", "P").replace("q",
  "_").replace("Q", "q").replace("_", "Q").replace("r", "_").replace("R", "r").replace("_",
  "R").replace("s", "_").replace("S", "s").replace("_", "S").replace("t", "_").replace("T",
  "t").replace("_", "T").replace("u", "_").replace("U", "u").replace("_", "U").replace("v",
  "_").replace("V", "v").replace("_", "V").replace("w", "_").replace("W", "w").replace("_",
  "W").replace("x", "_").replace("X", "x").replace("_", "X").replace("y", "_").replace("Y",
  "y").replace("_", "Y").replace("z", "_").replace'
- "        var chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c))\
  \ {\n                chars[i] = Character.toUpperCase(c);\n            } else if\
  \ (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n\
  \            }\n        }\n        return new String(chars);"
- "        return string.chars()\n                .mapToObj(c -> (char) c)\n     \
  \           .map(Character::toLowerCase)\n                .map(c -> Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .collect(StringBuilder::new,\
  \ StringBuilder::append, StringBuilder::append)\n                .toString();"
- '        return string.replaceAll("[a-z]", "L").replaceAll("[A-Z]", "l");'
- "        return string.chars()\n            .mapToObj(c -> (char) c)\n         \
  \   .map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
  \            .collect(StringBuilder::new,\n                     StringBuilder::append,\n\
  \                     StringBuilder::append)\n            .toString();"
- "        return string.chars()\n            .mapToObj(i -> {\n                char\
  \ c = (char) i;\n                return Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c);\n            })\n            .collect(StringBuilder::new,\
  \ StringBuilder::append, StringBuilder::append)\n            .toString();"
- "        char[] chars = string.toCharArray();\n        int d = 'a' - 'A';\n    \
  \    for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' &&\
  \ chars[i] <= 'z') {\n                chars[i] -= d;\n            } else if (chars[i]\
  \ >= 'A' && chars[i] <= 'Z') {\n                chars[i] += d;\n            }\n\
  \        }\n        return new String(chars);"
- "        // write your code here\n        char[] chars = string.toCharArray();\n\
  \        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i]))\
  \ {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\
  \ else {\n                chars[i] = Character.toUpperCase(chars[i]);\n        \
  \    }\n        }\n        return new String(chars);"
- "        String result = \"\";\n        for (char c : string.toCharArray()) {\n\
  \            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
  \            } else {\n                result += Character.toUpperCase(c);\n   \
  \         }\n        }\n        return result;"
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i]\
  \ = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i]\
  \ = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new\
  \ String(chars);"
- "        return string.chars()\n                     .mapToObj(c -> Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                     .map(String::valueOf)\n\
  \                     .collect(Collectors.joining());"
- "        // >>> flip_case('Hello')\n        // 'hELLO'\n        StringBuffer sb\
  \ = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n \
  \           char ch = string.charAt(i);\n            if (Character.isUpperCase(ch))\
  \ {\n                sb.append(Character.toLowerCase(ch));\n            } else {\n\
  \                sb.append(Character.toUpperCase(ch));\n            }\n        }\n\
  \        return sb.toString();"
- "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
  \ < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i)))\
  \ {\n                result.append(Character.toLowerCase(string.charAt(i)));\n \
  \           } else {\n                result.append(Character.toUpperCase(string.charAt(i)));\n\
  \            }\n        }\n        return result.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(Character.toUpperCase(c));\n  \
  \          }\n        }\n        return sb.toString();"
- "        return string.chars()\n            .mapToObj(c ->\n                Character.isUpperCase(c)\
  \ ?\n                    Character.toLowerCase(c) :\n                    Character.toUpperCase(c))\n\
  \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
  \            .toString();"
- "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c))\
  \ {\n                chars[i] = Character.toUpperCase(c);\n            } else if\
  \ (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n\
  \            }\n        }\n        return new String(chars);"
- "        String flippedString = \"\";\n        for (int i = 0; i < string.length();\
  \ i++) {\n            char character = string.charAt(i);\n            if (Character.isUpperCase(character))\
  \ {\n                flippedString += Character.toLowerCase(character);\n      \
  \      } else {\n                flippedString += Character.toUpperCase(character);\n\
  \            }\n        }\n        return flippedString;"
- "        StringBuilder buffer = new StringBuilder();\n        for (char c : string.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                buffer.append(Character.toLowerCase(c));\n\
  \            } else {\n                buffer.append(Character.toUpperCase(c));\n\
  \            }\n        }\n        return buffer.toString();"
- "        return string.chars()\n        .mapToObj(c -> Character.isLetter(c) ? Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c) : String.valueOf((char)\
  \ c))\n        .collect(Collectors.joining());"
language: java
name: HumanEval_27_flip_case
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n \
  \   public static String flipCase(String string) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
  )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
