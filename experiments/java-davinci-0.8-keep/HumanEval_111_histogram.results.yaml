language: java
name: HumanEval_111_histogram
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        if (test.equals(\"\")) {\n            return res;\n        }\n      \
    \  String[] ar = test.split(\" \");\n        HashMap<String,Integer> freq = new\
    \ HashMap<String,Integer>();\n        int max = 0;\n        for (String i : ar)\
    \ {\n            if (freq.containsKey(i)) {\n                freq.put(i, freq.get(i)\
    \ + 1);\n            } else {\n                freq.put(i, 1);\n            }\n\
    \            if (freq.get(i) > max) {\n                max = freq.get(i);\n  \
    \          }\n        }\n        for (String i : ar) {\n            if (freq.get(i)\
    \ == max) {\n                res.put(i, max);\n            }\n        }\n    \
    \    return res;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> temp = new HashMap<String,Integer>();\n     \
    \   // Your code here!\n        int mostFrequentCount = 0;\n        String[] items\
    \ = test.split(\" \");\n        for (String item : items) {\n            if (temp.containsKey(item))\
    \ {\n                int count = temp.get(item);\n                temp.put(item,\
    \ count + 1);\n            } else {\n                temp.put(item, 1);\n    \
    \        }\n        }\n        for (String key : temp.keySet()) {\n          \
    \  if (temp.get(key) > mostFrequentCount) {\n                mostFrequentCount\
    \ = temp.get(key);\n            }\n        }\n        for (String key : temp.keySet())\
    \ {\n            if (temp.get(key) == mostFrequentCount) {\n                result.put(key,\
    \ temp.get(key));\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcs_uc36l.java:51)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> output = new HashMap<String,Integer>();\n\
    \        int c = 0;\n        String[] list = test.split(\" \");\n        for (int\
    \ i = 0; i < list.length; i++) {\n            if (output.containsKey(list[i]))\
    \ {\n                c = output.get(list[i]);\n                output.put(list[i],c+1);\n\
    \            } else {\n                output.put(list[i],1);\n            }\n\
    \        }\n        return output;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj1h44m5.java:34)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ans = new HashMap<String,Integer>();\n\
    \        int max = 0;\n        if(test.length()>0){\n            for(String s:\
    \ test.split(\" \")){\n                int count = ans.getOrDefault(s,0)+1;\n\
    \                ans.put(s,count);\n                max = Math.max(max,count);\n\
    \            }\n            Iterator<Map.Entry<String,Integer>> iter = ans.entrySet().iterator();\n\
    \            while(iter.hasNext()){\n                Map.Entry<String,Integer>\
    \ entry = iter.next();\n                if(entry.getValue()!=max){\n         \
    \           iter.remove();\n                }\n            }\n        }\n    \
    \    return ans;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> occurrences = new\
    \ HashMap<String,Integer>();\n        String[] list_of_letters = test.split(\"\
    \ \");\n        int max_occurrences = 0;\n        for (String letter : list_of_letters)\
    \ {\n            if (!occurrences.containsKey(letter)) {\n                occurrences.put(letter,1);\n\
    \            } else {\n                occurrences.put(letter,occurrences.get(letter)+1);\n\
    \            }\n            if (occurrences.get(letter) > max_occurrences) {\n\
    \                max_occurrences = occurrences.get(letter);\n            }\n \
    \       }\n        return occurrences;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw306zo9m.java:36)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        for (String c : test.split(\"\\\\s+\")) {\n            if (count.containsKey(c))\
    \ {\n                count.put(c, count.get(c) + 1);\n            } else {\n \
    \               count.put(c, 1);\n            }\n        }\n        Map.Entry<String,Integer>\
    \ max = Collections.max(count.entrySet(), new Comparator<Map.Entry<String,Integer>>()\
    \ {\n            @Override\n            public int compare(Map.Entry<String,Integer>\
    \ a, Map.Entry<String,Integer> b) {\n                return a.getValue().compareTo(b.getValue());\n\
    \            }\n        });\n        int maxval = max.getValue();\n        ArrayList<String>\
    \ maxchars = new ArrayList<String>();\n        for (Map.Entry<String,Integer>\
    \ e : count.entrySet()) {\n            if (e.getValue() == maxval) {\n       \
    \         maxchars.add(e.getKey());\n            }\n        }\n        HashMap<String,Integer>\
    \ result = new HashMap<String,Integer>();\n        for (String c : maxchars) {\n\
    \            result.put(c, maxval);\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6f5g9i9.java:53)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.length() == 0) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> count = new HashMap<String,Integer>();\n    \
    \    Arrays.stream(test.split(\" \")).forEach(x -> {\n            count.put(x,count.getOrDefault(x,0)+1);\n\
    \        });\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        int max = Collections.max(count.values());\n        for (Map.Entry<String,Integer>\
    \ e : count.entrySet()) {\n            if (e.getValue() == max) result.put(e.getKey(),e.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        int[] nums = new int[26];\n\
    \        for (int i = 0; i < letters.length; i++) {\n            nums[letters[i].charAt(0)\
    \ - 'a']++;\n        }\n        int max = 0;\n        for (int i = 0; i < nums.length;\
    \ i++) {\n            if (nums[i] > max) max = nums[i];\n        }\n        for\
    \ (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max) res.put(String.valueOf((char)(i\
    \ + 'a')), nums[i]);\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 0\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.histogram(tmp3n3g2oui.java:23)\n\
    \tat Problem.main(tmp3n3g2oui.java:41)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        var split = test.split(\" \");\n        var\
    \ dict = new HashMap<String,Integer>();\n        for (var i=0; i<split.length;\
    \ i++) {\n            var c = split[i];\n            if (dict.containsKey(c))\n\
    \                dict.put(c, dict.get(c) + 1);\n            else\n           \
    \     dict.put(c, 1);\n        }\n        var max = Arrays.stream(split).mapToInt(s\
    \ -> dict.get(s)).max().getAsInt();\n        var filtered = dict.entrySet().stream().filter(e\
    \ -> e.getValue() == max).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\
    \        return new HashMap<String,Integer>(filtered);\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm8dw5l78.java:39)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] testArr = test.split(\" \");\n        for (String t : testArr)\
    \ {\n            if (!result.containsKey(t)) {\n                result.put(t,1);\n\
    \            } else {\n                result.put(t,result.get(t)+1);\n      \
    \      }\n        }\n        HashMap<String,Integer> finalResult = new HashMap<String,Integer>();\n\
    \        HashMap<Integer,Integer> freq = new HashMap<Integer,Integer>();\n   \
    \     for (Map.Entry<String,Integer> entry : result.entrySet()) {\n          \
    \  if (!freq.containsKey(entry.getValue())) {\n                freq.put(entry.getValue(),1);\n\
    \            } else {\n                freq.put(entry.getValue(),freq.get(entry.getValue())+1);\n\
    \            }\n        }\n        int maxFreq = 0;\n        for (Map.Entry<Integer,Integer>\
    \ entry : freq.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n\
    \                maxFreq = entry.getValue();\n            }\n        }\n     \
    \   for (Map.Entry<String,Integer> entry : result.entrySet()) {\n            if\
    \ (freq.get(entry.getValue()) == maxFreq) {\n                finalResult.put(entry.getKey(),entry.getValue());\n\
    \            }\n        }\n        return finalResult;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5i32tokk.java:55)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> dict = new HashMap<String,Integer>();\n\
    \        String[] input = test.split(\" \");\n        for (String letter : input)\
    \ {\n            if (!dict.containsKey(letter)) {\n                dict.put(letter,\
    \ 1);\n            } else {\n                dict.put(letter, dict.get(letter)\
    \ + 1);\n            }\n        }\n        HashMap<String,Integer> output = new\
    \ HashMap<String,Integer>();\n        int max = 0;\n        for (String key :\
    \ dict.keySet()) {\n            if (dict.get(key) > max) {\n                max\
    \ = dict.get(key);\n            }\n        }\n        for (String key : dict.keySet())\
    \ {\n            if (dict.get(key) == max) {\n                output.put(key,\
    \ dict.get(key));\n            }\n        }\n        return output;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qn7mzbl.java:49)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      HashMap<String,Integer> occurences = new HashMap<String,Integer>();\n\
    \      if (test.length() == 0) return occurences;\n      HashMap<String, Integer>\
    \ counts = new HashMap<String, Integer>();\n      Arrays.stream(test.split(\"\
    \ \")).forEach(c -> counts.put(c, 1 + counts.getOrDefault(c, 0)));\n      int\
    \ max = counts.values().stream().mapToInt(v -> v).max().getAsInt();\n      counts.entrySet().stream().filter(x\
    \ -> x.getValue() == max).forEach(x -> occurences.put(x.getKey(), x.getValue()));\n\
    \      return occurences;\n}\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] arr = test.split(\" \");\n      \
    \  HashMap<String,Integer> dic = new HashMap<String,Integer>();\n        for (String\
    \ i : arr) {\n            if (dic.containsKey(i)){\n                dic.put(i,\
    \ dic.get(i) + 1);\n            } else {\n                dic.put(i, 1);\n   \
    \         }\n        }\n        return dic;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpodeyyqft.java:32)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] spaceSplit = test.split(\" \");\n        HashMap<String, Integer>\
    \ counts = new HashMap<String, Integer>();\n        for (String s : spaceSplit)\
    \ {\n            if (!s.equals(\"\")) {\n                counts.put(s, counts.getOrDefault(s,\
    \ 0) + 1);\n            }\n        }\n        int maxCount = 0;\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            maxCount = Math.max(maxCount,\
    \ entry.getValue());\n        }\n        for (Map.Entry<String, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              result.put(entry.getKey(), entry.getValue());\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> output = new HashMap<String,Integer>();\n\
    \        String[] split = test.split(\" \");\n        for (String word : split)\
    \ {\n            Integer value = output.get(word);\n            if (value == null)\
    \ {\n                output.put(word, 1);\n            } else {\n            \
    \    output.put(word, value + 1);\n            }\n        }\n        return output;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73haqu_q.java:33)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        //split letters on space and add each to a\
    \ map\n        HashMap<String,Integer> letters = new HashMap<String,Integer>();\n\
    \        String[] wordArray = test.split(\" \");\n        for(String word : wordArray){\n\
    \            if(letters.containsKey(word)){\n                letters.put(word,\
    \ letters.get(word) + 1);\n            }\n            else{\n                letters.put(word,\
    \ 1);\n            }\n        }\n        //find the max occurrence in a map\n\
    \        int max = Collections.max(letters.values());\n        //filter map to\
    \ only those keys with the max occurrence\n        HashMap<String,Integer> results\
    \ = new HashMap<String,Integer>();\n        for(Map.Entry<String,Integer> entry\
    \ : letters.entrySet()){\n            if(entry.getValue() == max){\n         \
    \       results.put(entry.getKey(), entry.getValue());\n            }\n      \
    \  }\n        return results;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq132tv1i.java:48)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> h = new HashMap<String,Integer>();\n\
    \        h.put(\"a\", 0);\n        h.put(\"b\", 0);\n        h.put(\"c\", 0);\n\
    \        if (test.length() < 1) return h;\n        for (int i = 0; i < test.length();\
    \ i++) {\n            if (test.charAt(i) == 'a') {\n                h.put(\"a\"\
    , h.get(\"a\") + 1);\n            } else if (test.charAt(i) == 'b') {\n      \
    \          h.put(\"b\", h.get(\"b\") + 1);\n            } else if (test.charAt(i)\
    \ == 'c') {\n                h.put(\"c\", h.get(\"c\") + 1);\n            }\n\
    \        }\n        return h;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzmksj8ua.java:36)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        String[] stringArray = test.split(\" \");\n        if (stringArray.length\
    \ == 0) {\n            return count;\n        }\n        for (String letter :\
    \ stringArray) {\n            if (count.containsKey(letter)) {\n             \
    \   count.put(letter, count.get(letter) + 1);\n            } else {\n        \
    \        count.put(letter, 1);\n            }\n        }\n        HashMap<String,Integer>\
    \ result = new HashMap<String,Integer>();\n        int max = Collections.max(count.values());\n\
    \        for (String letter : count.keySet()) {\n            if (count.get(letter)\
    \ == max) {\n                result.put(letter, count.get(letter));\n        \
    \    }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfsf00qu9.java:47)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Your code here\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpdwl2uxr0.java:23)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Remove the following line, and replace\
    \ it with your code.\n        return new HashMap<String,Integer>();\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_5j7xeg3.java:23)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> counter = new HashMap<String,Integer>();\n\
    \        // Split the string into strings containing a single letter\n       \
    \ String[] split = test.split(\" \");\n        // Loop through each letter\n \
    \       for (String letter : split) {\n            // If the letter is already\
    \ in the dictionary, increment the counter\n            if (counter.containsKey(letter))\
    \ {\n                counter.put(letter, counter.get(letter) + 1);\n         \
    \   }\n            // Otherwise, initialize it with a count of 1\n           \
    \ else {\n                counter.put(letter, 1);\n            }\n        }\n\
    \        return counter;\n}\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nevbdjp.java:37)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Insert your code here...\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpgk99wvms.java:23)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        List<String> list = new ArrayList<String>(Arrays.asList(test.split(\"\
    \ \")));\n        for (String str : list) {\n            if (map.containsKey(str))\n\
    \                map.put(str, map.get(str) + 1);\n            else\n         \
    \       map.put(str, 1);\n        }\n        return map;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_8qq6o5.java:31)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String s : letters)\
    \ {\n            int tmp = result.getOrDefault(s, 0);\n            result.put(s,\
    \ tmp + 1);\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6x0sxz1.java:29)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n\
    \        if (test.length() > 0) {\n            HashMap<String,Integer> hm = new\
    \ HashMap<String,Integer>();\n            int idx = test.indexOf(' ');\n     \
    \       if (idx < 0) {\n                hm.put(test, 1);\n            } else {\n\
    \                String key = test.substring(0, idx);\n                if (hm.containsKey(key))\
    \ {\n                    hm.put(key, hm.get(key) + 1);\n                } else\
    \ {\n                    hm.put(key, 1);\n                }\n                hm.putAll(histogram(test.substring(idx\
    \ + 1)));\n            }\n            int max = 0;\n            for (Map.Entry<String,Integer>\
    \ me : hm.entrySet()) {\n                if (me.getValue() > max) {\n        \
    \            max = me.getValue();\n                }\n            }\n        \
    \    for (Map.Entry<String,Integer> me : hm.entrySet()) {\n                if\
    \ (me.getValue() == max) {\n                    ret.put(me.getKey(), me.getValue());\n\
    \                }\n            }\n        }\n        return ret;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnov8mysu.java:49)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] letters = test.split(\" \");\n  \
    \      HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n  \
    \      for (String letter : letters) {\n            if (histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, histogram.get(letter) + 1);\n     \
    \       } else {\n                histogram.put(letter, 1);\n            }\n \
    \       }\n        return histogram;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqg8wj8cf.java:32)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> h = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            Integer n = h.get(s);\n\
    \            if (n == null) n = 0;\n            h.put(s, n + 1);\n        }\n\
    \        return h;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d619uiq.java:29)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        // parse the input string into a token list\n        String[] tokens\
    \ = test.split(\"\\\\s+\");\n        // now iterate through the token list\n \
    \       for (String token : tokens) {\n            // and add to the result set\n\
    \            result.merge(token, 1, Integer::sum);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0vfd7_pi.java:31)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<String,Integer>();\n\
    \        if (test.equals(\"\")) {\n            return hm;\n        }\n       \
    \ String[] strs = test.split(\" \");\n        HashMap<String,Integer> helper =\
    \ new HashMap<String,Integer>();\n        for (String str : strs) {\n        \
    \    if (helper.containsKey(str)) {\n                int val = helper.get(str);\n\
    \                helper.put(str, val + 1);\n            } else {\n           \
    \     helper.put(str, 1);\n            }\n        }\n        int max_val = Integer.MIN_VALUE;\n\
    \        for (int val : helper.values()) {\n            max_val = Math.max(max_val,\
    \ val);\n        }\n        for (String key : helper.keySet()) {\n           \
    \ if (helper.get(key) == max_val) {\n                hm.put(key, max_val);\n \
    \           }\n        }\n        return hm;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if(test.length() == 0) {\n            return result;\n        }\n   \
    \     String[] arr = test.split(\" \");\n        int max = 0;\n        for(int\
    \ i = 0; i < arr.length; i++) {\n            if(result.containsKey(arr[i])) {\n\
    \                int temp = result.get(arr[i]);\n                result.put(arr[i],temp+1);\n\
    \                if(temp+1 > max) {\n                    max = temp+1;\n     \
    \           }\n            } else {\n                result.put(arr[i],1);\n \
    \               if(1 > max) {\n                    max = 1;\n                }\n\
    \            }\n        }\n        List<String> keys = new ArrayList<String>();\n\
    \        result.forEach((k,v) -> {\n            if(v == max) {\n             \
    \   keys.add(k);\n            }\n        });\n        HashMap<String,Integer>\
    \ finalResult = new HashMap<String,Integer>();\n        for(int i = 0; i < keys.size();\
    \ i++) {\n            finalResult.put(keys.get(i),max);\n        }\n        return\
    \ finalResult;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppc43mqzr.java:41: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            if(v == max) {\n\
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> result = new HashMap<String,Integer>();\n   \
    \     int max_count = 0;\n        String[] parts = test.split(\" \");\n      \
    \  for (String part : parts) {\n            int count = result.getOrDefault(part,\
    \ 0);\n            result.put(part, count + 1);\n            max_count = Math.max(max_count,\
    \ count + 1);\n        }\n        HashMap<String,Integer> result2 = new HashMap<String,Integer>();\n\
    \        for (String part : parts) {\n            if (result.get(part) == max_count)\
    \ result2.put(part, max_count);\n        }\n        return result2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011584
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        if (test.length() == 0) return hist;\n        for (String s : test.split(\"\
    \ \")) {\n            if (hist.containsKey(s)) {\n                hist.put(s,\
    \ hist.get(s) + 1);\n            } else {\n                hist.put(s, 1);\n \
    \           }\n        }\n        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n\
    \        int max = 0;\n        for (String s : hist.keySet()) {\n            if\
    \ (hist.get(s) > max) {\n                max = hist.get(s);\n                ret.clear();\n\
    \                ret.put(s, max);\n            } else if (hist.get(s) == max)\
    \ {\n                ret.put(s, max);\n            }\n        }\n        return\
    \ ret;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011584
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test.length() > 0) {\n            int maxKeyCount = 0;\n        \
    \    ArrayList<String> stringArray = new ArrayList<String>(Arrays.asList(test.split(\"\
    \ \")));\n            Map<String,Long> map = stringArray.stream().collect(Collectors.groupingBy(String::toString,\
    \ Collectors.counting()));\n            ArrayList<String> distinctKeys = new ArrayList<String>(map.keySet());\n\
    \            for (String key : distinctKeys) {\n                if (map.get(key)\
    \ > maxKeyCount) {\n                    maxKeyCount = map.get(key).intValue();\n\
    \                }\n            }\n            for (String key : distinctKeys)\
    \ {\n                if (map.get(key) == maxKeyCount) {\n                    result.put(key,\
    \ map.get(key).intValue());\n                }\n            }\n        }\n   \
    \     return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.length() == 0) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n      \
    \  int max = 1;\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            Integer c = count.get(letter);\n\
    \            if (c == null) {\n                count.put(letter, 1);\n       \
    \     } else {\n                count.put(letter, c + 1);\n                if\
    \ (c + 1 > max) max = c + 1;\n            }\n        }\n        count.forEach((k,v)\
    \ -> { if (v == max) ret.put(k, v); });\n        return ret;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpppo8vqmn.java:32: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n        count.forEach((k,v) ->\
    \ { if (v == max) ret.put(k, v); });\n                                       \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] parts = test.split(\" \");\n        for (String part : parts)\
    \ {\n            map.put(part, map.getOrDefault(part, 0) + 1);\n        }\n  \
    \      return map;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcy2rib76.java:28)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] words = test.split(\" \");\n    \
    \    HashMap<String,Integer> counts = new HashMap<String,Integer>();\n       \
    \ for (String word : words) {\n            if (counts.containsKey(word)) {\n \
    \               counts.put(word,counts.get(word)+1);\n            } else {\n \
    \               counts.put(word,1);\n            }\n        }\n        int max\
    \ = 0;\n        for (String word : counts.keySet()) {\n            max = Math.max(max,counts.get(word));\n\
    \        }\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == max) {\n                result.put(word,max);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8bz74zz.java:47)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        throw new UnsupportedOperationException(\"\
    Not implemented.\");\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented.\n\tat Problem.histogram(tmpskgol5_8.java:19)\n\tat Problem.main(tmpskgol5_8.java:22)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> output = new HashMap<String,Integer>();\n\
    \        String[] split = test.split(\" \");\n        int highest = 1;\n     \
    \   for (String letter : split) {\n            Integer current = output.get(letter);\n\
    \            if (current == null) {\n                output.put(letter, 1);\n\
    \            } else {\n                output.put(letter, current + 1);\n    \
    \            if (current + 1 > highest) {\n                    highest = current\
    \ + 1;\n                }\n            }\n        }\n        HashMap<String,Integer>\
    \ output2 = new HashMap<String,Integer>();\n        for (String letter : output.keySet())\
    \ {\n            Integer current = output.get(letter);\n            if (current\
    \ == highest) {\n                output2.put(letter, current);\n            }\n\
    \        }\n        return output2;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1vyosx8.java:49)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        String[] st = test.split(\" \");\n        for(String s : st) {\n    \
    \        if(res.containsKey(s)) {\n                res.put(s, res.get(s) + 1);\n\
    \            } else {\n                res.put(s, 1);\n            }\n       \
    \ }\n        return res;\n}\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvbg35i8.java:32)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] temp = test.split(\" \");\n        for(int i = 0; i < temp.length;\
    \ i++) {\n            if(map.containsKey(temp[i])) {\n                map.put(temp[i],\
    \ map.get(temp[i]) + 1);\n            } else {\n                map.put(temp[i],\
    \ 1);\n            }\n        }\n        return map;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3a8xaalr.java:32)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            hist.put(s, 0);\n \
    \       }\n        for (String s : test.split(\" \")) {\n            hist.put(s,\
    \ hist.get(s) + 1);\n        }\n        return hist;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexl66pai.java:30)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Do not modify or remove the line below!\n\
    \        test = test.trim();\n        // Write your code below.\n\n\n\n\n\n\n\n\
    \n\n        // Do not modify or remove the line below!\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpbvs2k4a7.java:35)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return new HashMap<String,Integer>();\n}\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyne8gcv.java:22)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> temp = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for(String letter : letters)\
    \ {\n            if(temp.containsKey(letter)) {\n                temp.put(letter,\
    \ temp.get(letter) + 1);\n            } else {\n                temp.put(letter,\
    \ 1);\n            }\n        }\n        return temp;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0x9ncrdf.java:32)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        StringTokenizer st = new StringTokenizer(test);\n\
    \        HashMap<String,Integer> result = new HashMap<String,Integer>();\n   \
    \     while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n\
    \            if (result.containsKey(token)) {\n                result.put(token,\
    \ result.get(token) + 1);\n            } else {\n                result.put(token,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprz1ein4n.java:33)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test.length() > 0) {\n            String[] str_arr = test.split(\"\
    \ \");\n            // Use a hashmap to store key:value pairs of str_arr elements:count\n\
    \            HashMap<String,Integer> map = new HashMap<String,Integer>();\n  \
    \          // Loop through the array and add the count to map\n            for\
    \ (String e : str_arr) {\n                if (map.containsKey(e)) {\n        \
    \            map.put(e, map.get(e) + 1);\n                } else {\n         \
    \           map.put(e, 1);\n                }\n            }\n            // Set\
    \ the max_count\n            int max_count = 0;\n            for (String e : map.keySet())\
    \ {\n                int val = map.get(e);\n                if (val > max_count)\
    \ {\n                    max_count = val;\n                }\n            }\n\
    \            // System.out.println(max_count);\n            // Loop through the\
    \ map again and populate result\n            for (String e : map.keySet()) {\n\
    \                int val = map.get(e);\n                if (val == max_count)\
    \ {\n                    result.put(e, val);\n                }\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011585
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> output = new HashMap<String,Integer>();\n\
    \        if(test.length()==0) {\n            return output;\n        }\n     \
    \   else {\n            int max = 0;\n            String[] input = test.split(\"\
    \ \");\n            for(int i=0;i<input.length;i++) {\n                if(output.containsKey(input[i]))\
    \ {\n                    output.put(input[i],output.get(input[i])+1);\n      \
    \          }\n                else {\n                    output.put(input[i],1);\n\
    \                }\n                if(output.get(input[i])>max) {\n         \
    \           max = output.get(input[i]);\n                }\n            }\n  \
    \          HashMap<String,Integer> result = new HashMap<String,Integer>();\n \
    \           for(String key:output.keySet()) {\n                if(output.get(key)==max)\
    \ {\n                    result.put(key,max);\n                }\n           \
    \ }\n            return result;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        for (String key : test.split(\" \")) {\n            if (!hist.containsKey(key))\
    \ {\n                hist.put(key, 1);\n            } else {\n               \
    \ hist.put(key, hist.get(key) + 1);\n            }\n        }\n        return\
    \ hist;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjrp8m52.java:31)\n"
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // TODO\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_qf0i31q.java:23)\n"
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        throw new UnsupportedOperationException(\"\
    Implement me!\");\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Implement\
    \ me!\n\tat Problem.histogram(tmpcv4ve6z1.java:19)\n\tat Problem.main(tmpcv4ve6z1.java:22)\n"
  stdout: ''
  timestamp: 1660011585
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        if (test.length() == 0) return count;\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            if (count.containsKey(word))\
    \ {\n                count.put(word, count.get(word) + 1);\n            } else\
    \ {\n                count.put(word, 1);\n            }\n        }\n        HashMap<String,Integer>\
    \ max = new HashMap<String,Integer>();\n        Integer maxCount = 0;\n      \
    \  for (Map.Entry<String,Integer> entry : count.entrySet()) {\n            String\
    \ key = entry.getKey();\n            Integer val = entry.getValue();\n       \
    \     if (val == maxCount) {\n                max.put(key, val);\n           \
    \ } else if (val > maxCount) {\n                max.clear();\n               \
    \ max.put(key, val);\n                maxCount = val;\n            }\n       \
    \ }\n        return max;\n}\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] letters = test.split(\" \");\n  \
    \      HashMap<String,Integer> result = new HashMap<String,Integer>();\n     \
    \   for (String letter : letters) {\n            if (result.containsKey(letter))\
    \ {\n                result.put(letter, result.get(letter) + 1);\n           \
    \ } else {\n                result.put(letter, 1);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdrgtxebo.java:32)\n"
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> tally = new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> result = new HashMap<String,Integer>();\n   \
    \     Integer max = 0;\n        String[] letters = test.split(\" \");\n      \
    \  for (String letter : letters) {\n            if (tally.containsKey(letter))\
    \ {\n                tally.put(letter, tally.get(letter) + 1);\n            }\
    \ else {\n                tally.put(letter, 1);\n            }\n        }\n  \
    \      for (Map.Entry<String,Integer> entry : tally.entrySet()) {\n          \
    \  if (entry.getValue() > max) {\n                max = entry.getValue();\n  \
    \          }\n        }\n        for (Map.Entry<String,Integer> entry : tally.entrySet())\
    \ {\n            if (entry.getValue() == max) {\n                result.put(entry.getKey(),\
    \ entry.getValue());\n            }\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm5zp1n3c.java:49)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if(test.length() == 0) return result;\n        String[] letters = test.split(\"\
    \ \");\n        HashMap<String,Integer> temp = new HashMap<String,Integer>();\n\
    \        int max = 0;\n        for(String letter : letters) {\n            if(temp.containsKey(letter))\
    \ {\n                int count = temp.get(letter) + 1;\n                temp.put(letter,\
    \ count);\n                if(count > max) max = count;\n            } else {\n\
    \                temp.put(letter, 1);\n                if(1 > max) max = 1;\n\
    \            }\n        }\n        for(Map.Entry<String,Integer> entry : temp.entrySet())\
    \ {\n            if(entry.getValue() == max) result.put(entry.getKey(), entry.getValue());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        String[] testList = test.split(\" \");\n        // Implement algorithm\
    \ here\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsi652o6s.java:25)\n"
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] words = test.split(\" \");\n    \
    \    Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                int val = map.get(word);\n\
    \                map.put(word, val + 1);\n            } else {\n             \
    \   map.put(word, 1);\n            }\n        }\n        Set<Integer> values =\
    \ new HashSet<>();\n        for (String key : map.keySet()) {\n            values.add(map.get(key));\n\
    \        }\n        int max = Collections.max(values);\n        HashMap<String,Integer>\
    \ map_new = new HashMap<>();\n        for (String key : map.keySet()) {\n    \
    \        if (map.get(key) == max) {\n                map_new.put(key, map.get(key));\n\
    \            }\n        }\n        return map_new;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv77rhmu4.java:49)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            histogram.put(word, histogram.getOrDefault(word, 0) + 1);\n \
    \       }\n        int most = histogram.values().stream().max(Integer::compare).get();\n\
    \        ArrayList<String> letters = new ArrayList<String>();\n        for (String\
    \ key : histogram.keySet()) {\n            if (histogram.get(key) == most) {\n\
    \                letters.add(key);\n            }\n        }\n        HashMap<String,Integer>\
    \ result = new HashMap<String,Integer>();\n        for (String letter : letters)\
    \ {\n            result.put(letter, most);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp66g_5k6b.java:44)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        if (words.length > 0) {\n\
    \            HashMap<String,Integer> hist = new HashMap<String,Integer>();\n \
    \           for (String word : words) {\n                if (hist.containsKey(word))\
    \ {\n                    int value = hist.get(word) + 1;\n                   \
    \ hist.put(word, value);\n                } else {\n                    hist.put(word,\
    \ 1);\n                }\n            }\n            int max = 0;\n          \
    \  for (String key : hist.keySet()) {\n                if (hist.get(key) > max)\
    \ {\n                    max = hist.get(key);\n                }\n           \
    \ }\n            for (String key : hist.keySet()) {\n                if (hist.get(key)\
    \ == max) {\n                    result.put(key, max);\n                }\n  \
    \          }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkat3dfbu.java:52)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] tokens = test.split(\" \");\n   \
    \     HashMap<String,Integer> answer = new HashMap<String,Integer>();\n      \
    \  for (String token : tokens) {\n            Integer count = answer.get(token);\n\
    \            if (count == null) count = 0;\n            answer.put(token, count\
    \ + 1);\n        }\n        return answer;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpny5ti4h7.java:30)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Please implement me.\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpay80768_.java:23)\n"
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // TODO: add your code here\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpkk7orugk.java:23)\n"
  stdout: ''
  timestamp: 1660011585
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> occurences = new HashMap<String,Integer>();\n\
    \        String[] testArr = test.split(\" \");\n        for (String s : testArr)\
    \ {\n            Integer count = occurences.get(s);\n            if (count ==\
    \ null) {\n                occurences.put(s, 1);\n            } else {\n     \
    \           occurences.put(s, count + 1);\n            }\n        }\n        if\
    \ (occurences.size() == 0) {\n            return result;\n        }\n        Integer\
    \ max = Collections.max(occurences.values());\n        for (String s : occurences.keySet())\
    \ {\n            if (occurences.get(s) == max) {\n                result.put(s,\
    \ max);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5b4k38r0.java:48)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) {\n            return\
    \ new HashMap<String,Integer>();\n        }\n        HashMap<String,Integer> hmap\
    \ = new HashMap<String,Integer>();\n        String[] arr = test.split(\" \");\n\
    \        for (String s : arr) {\n            if (hmap.containsKey(s)) {\n    \
    \            hmap.put(s, hmap.get(s) + 1);\n            } else {\n           \
    \     hmap.put(s, 1);\n            }\n        }\n        HashMap<String,Integer>\
    \ hmap1 = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer>\
    \ entry : hmap.entrySet()) {\n            int value = entry.getValue();\n    \
    \        if (hmap1.containsKey(Integer.toString(value))) {\n                hmap1.put(Integer.toString(value),\
    \ hmap1.get(Integer.toString(value)) + 1);\n            } else {\n           \
    \     hmap1.put(Integer.toString(value), 1);\n            }\n        }\n     \
    \   int max_count = 0;\n        for (Map.Entry<String,Integer> entry : hmap1.entrySet())\
    \ {\n            int key = Integer.parseInt(entry.getKey());\n            int\
    \ value = entry.getValue();\n            if (value > max_count) {\n          \
    \      max_count = value;\n            }\n        }\n        HashMap<String,Integer>\
    \ result = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer>\
    \ entry : hmap.entrySet()) {\n            String key = entry.getKey();\n     \
    \       int value = entry.getValue();\n            if (value == max_count) {\n\
    \                result.put(key, value);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaaq8oi0w.java:61)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test.length() == 0) return result;\n        String[] letters = test.split(\"\
    \ \");\n        for (String letter : letters) {\n            if (result.containsKey(letter))\
    \ {\n                result.put(letter, result.get(letter) + 1);\n           \
    \ } else {\n                result.put(letter, 1);\n            }\n        }\n\
    \        Set<String> keys = result.keySet();\n        Integer maxCount = Collections.max(result.values());\n\
    \        result.keySet().removeIf(key -> !result.get(key).equals(maxCount));\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      HashMap<String,Integer> hm = new HashMap<String,Integer>();\n\
    \      String[] arr = test.split(\" \");\n      for(String i : arr){\n       \
    \ if(hm.containsKey(i)){\n          hm.put(i, hm.get(i) + 1);\n        }else{\n\
    \          hm.put(i, 1);\n        }\n      }\n      return hm;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsxww9xjx.java:32)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        int max = 0;\n        for (String i : test.split(\" \")) {\n        \
    \    if (result.containsKey(i)) {\n                int j = result.get(i);\n  \
    \              result.put(i,j+1);\n                if (j+1 > max) {\n        \
    \            max = j+1;\n                }\n            } else {\n           \
    \     result.put(i,1);\n                if (1 > max) {\n                    max\
    \ = 1;\n                }\n            }\n        }\n        HashMap<String,Integer>\
    \ finalResult = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer>\
    \ k : result.entrySet()) {\n            if (k.getValue() == max) {\n         \
    \       finalResult.put(k.getKey(),k.getValue());\n            }\n        }\n\
    \        return finalResult;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwv65cw6e.java:50)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        int max = 0;\n       \
    \ for (String letter : letters) {\n            if (!map.containsKey(letter)) {\n\
    \                map.put(letter, 1);\n            } else {\n                map.put(letter,\
    \ map.get(letter) + 1);\n            }\n            max = Math.max(max, map.get(letter));\n\
    \        }\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        for (String letter : map.keySet()) {\n            if (map.get(letter)\
    \ == max) {\n                res.put(letter, max);\n            }\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34cye60a.java:45)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] tokens = test.split(\" \");\n        for (String token : tokens)\
    \ {\n            if (map.containsKey(token)) {\n                map.put(token,\
    \ map.get(token) + 1);\n            } else {\n                map.put(token, 1);\n\
    \            }\n        }\n        int maxCount = 0;\n        Set<String> keys\
    \ = map.keySet();\n        for (String key : keys) {\n            if (map.get(key)\
    \ > maxCount) {\n                maxCount = map.get(key);\n            }\n   \
    \     }\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String key : keys) {\n            if (map.get(key) == maxCount)\
    \ {\n                result.put(key, maxCount);\n            }\n        }\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ykl2tu6.java:50)\n"
  stdout: ''
  timestamp: 1660011586
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] letters = test.split(\" \");\n  \
    \      HashMap<String,Integer> counts = new HashMap<String,Integer>();\n     \
    \   for (String let : letters) {\n            if (counts.containsKey(let)) {\n\
    \                counts.put(let, counts.get(let) + 1);\n            } else {\n\
    \                counts.put(let, 1);\n            }\n        }\n        int maxCount\
    \ = 0;\n        for (int count : counts.values()) {\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n            }\n        }\n        HashMap<String,Integer>\
    \ result = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer>\
    \ entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                result.put(entry.getKey(), entry.getValue());\n         \
    \   }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpszst0uks.java:49)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Implement the solution\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpgnzn3695.java:23)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        String[] split = test.split(\" \");\n        for (String s : split) {\n\
    \            if (hist.containsKey(s)) {\n                hist.put(s, hist.get(s)\
    \ + 1);\n            } else {\n                hist.put(s, 1);\n            }\n\
    \        }\n        HashMap<String,Integer> out = new HashMap<String,Integer>();\n\
    \        int max = 0;\n        for (Map.Entry<String,Integer> entry : hist.entrySet())\
    \ {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n\
    \            }\n        }\n        for (Map.Entry<String,Integer> entry : hist.entrySet())\
    \ {\n            if (entry.getValue() == max) {\n                out.put(entry.getKey(),\
    \ entry.getValue());\n            }\n        }\n        return out;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi7hmvffv.java:49)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        Map<String, Integer> hash = new HashMap<String,\
    \ Integer>();\n        if(test.length() != 0) {\n            String[] arr = test.split(\"\
    \ \");\n            for(int i = 0; i < arr.length; i++) {\n                if(hash.containsKey(arr[i]))\
    \ {\n                    hash.put(arr[i], hash.get(arr[i]) + 1);\n           \
    \     } else {\n                    hash.put(arr[i], 1);\n                }\n\
    \            }\n        }\n        int max = Collections.max(hash.values());\n\
    \        HashMap<String,Integer> result = new HashMap<String,Integer>();\n   \
    \     for(String s : hash.keySet()) {\n            if(hash.get(s) == max)\n  \
    \              result.put(s, max);\n        }\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1599)\n\
    \tat java.base/java.util.HashMap$ValueIterator.next(HashMap.java:1625)\n\tat java.base/java.util.Collections.max(Collections.java:674)\n\
    \tat Problem.histogram(tmpfi0quf6x.java:30)\n\tat Problem.main(tmpfi0quf6x.java:45)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> m = new HashMap<String,Integer>();\n\
    \        if (test.length() > 0) {\n            String[] parts = test.split(\"\
    \ \");\n            int max = 0;\n            for (String s : parts) {\n     \
    \           if (m.containsKey(s)) {\n                    int v = m.get(s);\n \
    \                   m.put(s,v+1);\n                    if (v+1 > max) {\n    \
    \                    max = v+1;\n                    }\n                } else\
    \ {\n                    m.put(s,1);\n                    if (1 > max) {\n   \
    \                     max = 1;\n                    }\n                }\n   \
    \         }\n            HashMap<String,Integer> m_ret = new HashMap<String,Integer>();\n\
    \            for (String s : m.keySet()) {\n                if (m.get(s) == max)\
    \ {\n                    m_ret.put(s,m.get(s));\n                }\n         \
    \   }\n            return m_ret;\n        } else {\n            return m;\n  \
    \      }\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpu96wmoux.java:22)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> dict = new HashMap<String,Integer>();\n\
    \        String[] test_array = test.split(\" \");\n        for (String i : test_array)\
    \ {\n            int count = 0;\n            for (String j : test_array) {\n \
    \               if (i.equals(j)) {\n                    count++;\n           \
    \     }\n            }\n            dict.put(i, count);\n        }\n        return\
    \ dict;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbekpjpu_.java:34)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        int max_value = 0;\n        String[] items = test.split(\" \");\n   \
    \     int count = 0;\n        if (items.length == 0) {\n            return map;\n\
    \        }\n        for (int i = 0; i < items.length; i++) {\n            if (map.containsKey(items[i]))\
    \ {\n                count = map.get(items[i]);\n                map.put(items[i],\
    \ count + 1);\n            } else {\n                map.put(items[i], 1);\n \
    \           }\n        }\n        for (Map.Entry<String, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > max_value) {\n                max_value\
    \ = entry.getValue();\n            }\n        }\n        HashMap<String,Integer>\
    \ result = new HashMap<String,Integer>();\n        for (Map.Entry<String, Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() == max_value) {\n\
    \                result.put(entry.getKey(), entry.getValue());\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2lkamdvy.java:54)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Your code goes here\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp3ytkg87w.java:23)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            if (result.containsKey(letter))\
    \ {\n                result.put(letter, result.get(letter) + 1);\n           \
    \ } else {\n                result.put(letter, 1);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcrrt4c3.java:31)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> dic = new HashMap<String,Integer>();\n\
    \        test.chars().mapToObj(x -> (char)x).map(x -> x.toString()).forEach(x\
    \ -> {\n            Integer curVal = dic.get(x);\n            if (curVal == null)\
    \ {\n                dic.put(x,1);\n            } else {\n                dic.put(x,curVal+1);\n\
    \            }\n        });\n        return dic;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_c_09x6h.java:31)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1);\n            } else {\n                result.put(letter,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr862kxy7.java:32)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return new HashMap<String,Integer>();\n}\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyne8gcv.java:22)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> result = new HashMap<String,Integer>();\n   \
    \     String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            result.put(letter, 1 + result.getOrDefault(letter, 0));\n   \
    \     }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73y5l_5u.java:29)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        int maxKey = 0;\n      \
    \  HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for\
    \ (String word : words) {\n            if (hm.containsKey(word)) {\n         \
    \       int value = hm.get(word);\n                hm.put(word, ++value);\n  \
    \          } else {\n                hm.put(word, 1);\n            }\n       \
    \ }\n        for (Map.Entry<String,Integer> entry : hm.entrySet()) {\n       \
    \     if (entry.getValue() > maxKey) {\n                maxKey = entry.getValue();\n\
    \            }\n        }\n        for (Map.Entry<String,Integer> entry : hm.entrySet())\
    \ {\n            if (entry.getValue() == maxKey) {\n                result.put(entry.getKey(),\
    \ entry.getValue());\n            }\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13cl30rq.java:50)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] splitTest = test.split(\" \");\n\
    \        HashMap<String,Integer> letterMap = new HashMap<String,Integer>();\n\
    \        for (String letter : splitTest) {\n            if (letterMap.containsKey(letter))\
    \ {\n                int count = letterMap.get(letter);\n                letterMap.put(letter,count+1);\n\
    \            } else {\n                letterMap.put(letter,1);\n            }\n\
    \        }\n        return letterMap;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp891l1wam.java:33)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] split = test.split(\" \");\n        // Iterate through all of\
    \ the characters\n        for (String c : split) {\n            Integer currentCount\
    \ = result.get(c);\n            // If the character does not exist, set its count\
    \ to 1\n            if (currentCount == null) {\n                result.put(c,\
    \ 1);\n            } else {\n                // Else, increment the character's\
    \ count by 1\n                result.put(c, currentCount + 1);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_36pn40j.java:36)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] values = test.split(\" \");\n        Arrays.sort(values);\n\
    \        int currCount = 1;\n        int highestCount = 1;\n        for (int i\
    \ = 0; i < values.length - 1; i++) {\n            if (values[i].equals(values[i\
    \ + 1])) {\n                currCount++;\n            } else {\n             \
    \   if (currCount > highestCount) {\n                    highestCount = currCount;\n\
    \                    result.clear();\n                    result.put(values[i],\
    \ currCount);\n                } else if (currCount == highestCount) {\n     \
    \               result.put(values[i], currCount);\n                }\n       \
    \         currCount = 1;\n            }\n        }\n        if (currCount > highestCount)\
    \ {\n            highestCount = currCount;\n            result.clear();\n    \
    \        result.put(values[values.length - 1], currCount);\n        } else if\
    \ (currCount == highestCount) {\n            result.put(values[values.length -\
    \ 1], currCount);\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7zighe7m.java:54)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Your code here\n        HashMap<String,Integer>\
    \ map = new HashMap<String,Integer>();\n        List<String> list = Arrays.asList(test.split(\"\
    \ \"));\n        for(String s : list){\n            if(map.containsKey(s)){\n\
    \                map.put(s,map.get(s)+1);\n            }else{\n              \
    \  map.put(s,1);\n            }\n        }\n        return map;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxc3fcuxq.java:33)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> h = new HashMap<String,Integer>();\n\
    \        String[] elements = test.split(\" \");\n        // Build histogram\n\
    \        for (String e : elements) {\n            if (h.containsKey(e)) {\n  \
    \              h.put(e,h.get(e)+1);\n            } else {\n                h.put(e,1);\n\
    \            }\n        }\n        // Find most common\n        int max = Collections.max(h.values());\n\
    \        // Build result\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String key : h.keySet()) {\n            if (h.get(key) == max) {\n\
    \                result.put(key,h.get(key));\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpry24p7xu.java:47)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (!hm.containsKey(s))\
    \ {\n                hm.put(s, 1);\n            } else {\n                hm.put(s,\
    \ hm.get(s) + 1);\n            }\n        }\n        return hm;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_igngru.java:31)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n\
    \        if (test == null || test.equals(\"\")) {\n            return ret;\n \
    \       }\n        String[] ss = test.split(\" \");\n        for (String s : ss)\
    \ {\n            Integer cur = ret.get(s);\n            if (cur == null) {\n \
    \               ret.put(s, 1);\n            } else {\n                ret.put(s,\
    \ cur + 1);\n            }\n        }\n        return ret;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h04ytf2.java:36)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // your code here\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpt0un2mb0.java:23)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return new HashMap<String,Integer>();\n}\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyne8gcv.java:22)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        Map<String,Integer> letterCounts = new HashMap<String,Integer>();\n\
    \        List<String> letters = Arrays.asList(test.split(\" \"));\n        for\
    \ (String letter : letters) {\n            if (letterCounts.containsKey(letter))\
    \ {\n                letterCounts.put(letter, letterCounts.get(letter) + 1);\n\
    \            } else {\n                letterCounts.put(letter, 1);\n        \
    \    }\n        }\n        Integer largestCount = 0;\n        Map<String,Integer>\
    \ histogram = new HashMap<String,Integer>();\n        for (String letter : letterCounts.keySet())\
    \ {\n            if (largestCount <= letterCounts.get(letter)) {\n           \
    \     histogram.put(letter, letterCounts.get(letter));\n                largestCount\
    \ = letterCounts.get(letter);\n            }\n        }\n        return (HashMap<String,Integer>)histogram;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7gdin_j.java:43)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> dict = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            int count = dict.containsKey(s)\
    \ ? dict.get(s) : 0;\n            dict.put(s, count + 1);\n        }\n       \
    \ HashMap<String,Integer> rtn = new HashMap<String,Integer>();\n        int max\
    \ = dict.values().stream().max(Integer::compare).get();\n        dict.forEach((k,v)\
    \ -> {\n            if (v == max) {\n                rtn.put(k, v);\n        \
    \    }\n        });\n        return rtn;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq_z64m9u.java:40)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        test = test.replaceAll(\"\\\\s+\",\"\");\n        for (int i = 0; i <\
    \ test.length(); i++) {\n            result.put(test.substring(i,i+1),result.getOrDefault(test.substring(i,i+1),0)+1);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpse2gaw1j.java:28)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> dict = new HashMap<String,Integer>();\n\
    \        for (String item : test.split(\" \")) {\n            if (dict.containsKey(item))\
    \ {\n                dict.put(item, dict.get(item) + 1);\n            } else {\n\
    \                dict.put(item, 1);\n            }\n        }\n        int largest\
    \ = 0;\n        for (String key : dict.keySet()) {\n            if (dict.get(key)\
    \ > largest) {\n                largest = dict.get(key);\n            }\n    \
    \    }\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String key : dict.keySet()) {\n            if (dict.get(key) ==\
    \ largest) {\n                result.put(key, dict.get(key));\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrg4zb_h.java:48)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n\
    \        String [] strarr = test.split(\" \");\n        ArrayList<String> arList\
    \ = new ArrayList<String>(Arrays.asList(strarr));\n        HashMap<String,ArrayList<String>>\
    \ map = new HashMap<String,ArrayList<String>>();\n        for(String s : arList)\
    \ {\n            if(map.containsKey(s)) {\n                ArrayList<String> newArr\
    \ = map.get(s);\n                newArr.add(s);\n                map.put(s,newArr);\n\
    \            } else {\n                ArrayList<String> newArr = new ArrayList<String>();\n\
    \                newArr.add(s);\n                map.put(s,newArr);\n        \
    \    }\n        }\n        for(Map.Entry<String,ArrayList<String>> entry : map.entrySet())\
    \ {\n            ret.put(entry.getKey(),entry.getValue().size());\n        }\n\
    \        return ret;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprj9o0b6g.java:41)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> results = new HashMap<String,Integer>();\n\
    \        int lastCount = 0;\n        // Fill in your solution below\n        String[]\
    \ words = test.split(\" \");\n        ArrayList<String> largest = new ArrayList<String>();\n\
    \        largest.add(words[0]);\n        int count = 1;\n        for (int i =\
    \ 1; i < words.length; i++) {\n            if (words[i].equals(words[i-1])) {\n\
    \                count++;\n            } else {\n                if (count > lastCount)\
    \ {\n                    largest.clear();\n                    largest.add(words[i-1]);\n\
    \                    lastCount = count;\n                } else if (count == lastCount)\
    \ {\n                    largest.add(words[i-1]);\n                }\n       \
    \         count = 1;\n            }\n        }\n        if (count > lastCount)\
    \ {\n            largest.clear();\n            largest.add(words[words.length-1]);\n\
    \            lastCount = count;\n        } else if (count == lastCount) {\n  \
    \          largest.add(words[words.length-1]);\n        }\n        if (largest.size()\
    \ == 0) {\n            results.put(words[0], 1);\n        } else {\n         \
    \   for (String s : largest) {\n                results.put(s, lastCount);\n \
    \           }\n        }\n        return results;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_337dcg.java:57)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        var res = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        Arrays.stream(words).forEach(word\
    \ -> {\n            if(res.containsKey(word)) {\n                res.put(word,\
    \ res.get(word) + 1);\n            } else {\n                res.put(word, 1);\n\
    \            }\n        });\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcvs3tmu.java:32)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> allKeys = new HashMap<String,Integer>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String current\
    \ = test.substring(i, i+1);\n            if (allKeys.containsKey(current)) {\n\
    \                allKeys.put(current, allKeys.get(current) + 1);\n           \
    \ } else {\n                allKeys.put(current, 1);\n            }\n        }\n\
    \        HashMap<String,Integer> mostKeys = new HashMap<String,Integer>();\n \
    \       int max = 0;\n        for (Map.Entry<String,Integer> entry : allKeys.entrySet())\
    \ {\n            String key = entry.getKey();\n            Integer value = entry.getValue();\n\
    \            if (value > max) {\n                max = value;\n              \
    \  mostKeys.clear();\n                mostKeys.put(key, value);\n            }\
    \ else if (value == max) {\n                mostKeys.put(key, value);\n      \
    \      }\n        }\n        return mostKeys;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgaz5tb1l.java:44)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] items = test.split(\" \");\n        for (String s : items) {\n\
    \            if (result.containsKey(s)) {\n                result.put(s, result.get(s)\
    \ + 1);\n            } else {\n                result.put(s, 1);\n           \
    \ }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgr81njs1.java:32)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        Integer max = 0;\n        for (String c : test.split(\" \")) {\n    \
    \        if (map.containsKey(c)) {\n                Integer val = map.get(c);\n\
    \                if (val > max) max = val;\n                map.put(c,val+1);\n\
    \            } else {\n                map.put(c,1);\n            }\n        }\n\
    \        HashMap<String,Integer> maxMap = new HashMap<String,Integer>();\n   \
    \     for (String c : map.keySet()) {\n            if (map.get(c) == max) maxMap.put(c,max);\n\
    \        }\n        return maxMap;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowb4c3gq.java:37)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        // fill-in here\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdydw2toy.java:24)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if(test.isEmpty()) return result;\n        HashMap<String,Integer> map\
    \ = new HashMap<String,Integer>();\n        for(String each: test.split(\" \"\
    )){\n            if(map.containsKey(each)){\n                map.put(each,map.get(each)+1);\n\
    \            }\n            else{\n                map.put(each,1);\n        \
    \    }\n        }\n        int max = 0;\n        for(String key: map.keySet()){\n\
    \            if(map.get(key) > max){\n                max = map.get(key);\n  \
    \          }\n        }\n        for(String key: map.keySet()){\n            if(map.get(key)\
    \ == max){\n                result.put(key,max);\n            }\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] t = test.split(\" \");\n        for(int i = 0; i < t.length;\
    \ i++) {\n            if(map.containsKey(t[i])) {\n                map.put(t[i],\
    \ map.get(t[i]) + 1);\n            } else {\n                map.put(t[i], 1);\n\
    \            }\n        }\n        return map;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6toosmb.java:32)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histo = new HashMap<String,Integer>();\n\
    \        for (String character : test.split(\" \")){\n            if (histo.containsKey(character)){\n\
    \                int count = histo.get(character);\n                histo.put(character,\
    \ ++count);\n            } else {\n                histo.put(character, 1);\n\
    \            }\n        }\n        return histo;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_k7ekzv.java:32)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        String[] testArr = test.split(\" \");\n        int count = 0;\n     \
    \   int max_count = 0;\n        String max_key = \"\";\n        int flag = 0;\n\
    \        String key = \"\";\n        for (int i = 0; i < testArr.length; i++)\
    \ {\n            key = testArr[i];\n            count = hist.getOrDefault(key,\
    \ 0);\n            hist.put(key, count + 1);\n            if (hist.get(key) >\
    \ max_count) {\n                max_count = hist.get(key);\n                max_key\
    \ = key;\n                flag = 1;\n            } else if (hist.get(key) == max_count)\
    \ {\n                flag = 0;\n            }\n        }\n        if (flag ==\
    \ 1) {\n            for (Map.Entry<String, Integer> entry : hist.entrySet()) {\n\
    \                if (entry.getValue() != max_count) {\n                    hist.remove(entry.getKey());\n\
    \                }\n            }\n        }\n        return hist;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpano2412s.java:49)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        throw new NotImplementedError();\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8lmtgx0.java:19: error: cannot find symbol\n        throw new\
    \ NotImplementedError();\n                  ^\n  symbol:   class NotImplementedError\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvug5jtlr.java:23)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (result.containsKey(s))\
    \ {\n                result.put(s, result.get(s) + 1);\n            } else {\n\
    \                result.put(s, 1);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1_r5onso.java:31)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      HashMap<String,Integer> answer = new HashMap<String,Integer>();\n\
    \      String[] letters = test.split(\" \");\n      for (String letter : letters)\
    \ {\n        answer.put(letter, answer.getOrDefault(letter, 0) + 1);\n      }\n\
    \      return answer;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpugkh1t8_.java:28)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1);\n            } else {\n                result.put(letter,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr862kxy7.java:32)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return new HashMap<String,Integer>();\n}\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyne8gcv.java:22)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        throw new UnsupportedOperationException(\"\
    Please implement the histogram() method\");\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement the histogram() method\n\tat Problem.histogram(tmpcoucco_2.java:19)\n\
    \tat Problem.main(tmpcoucco_2.java:22)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        if (test.equals(\"\")) {\n            return map;\n        }\n      \
    \  String[] test_split = test.split(\" \");\n        for (String i : test_split)\
    \ {\n            Integer freq = map.get(i);\n            map.put(i, (freq == null)\
    \ ? 1 : freq + 1);\n        }\n        Integer max = Collections.max(map.values());\n\
    \        ArrayList<String> max_keys = new ArrayList<String>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() == max)\
    \ {\n                max_keys.add(entry.getKey());\n            }\n        }\n\
    \        HashMap<String,Integer> map_max = new HashMap<String,Integer>();\n  \
    \      for (String i : max_keys) {\n            map_max.put(i, max);\n       \
    \ }\n        return map_max;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // YOUR CODE HERE\n        Map<String, Integer>\
    \ stringToCount = new HashMap<>();\n        // Split the string into an array\
    \ of words\n        String[] splits = test.split(\" \");\n        // Iterate through\
    \ the array\n        for (String split : splits) {\n            // If the word\
    \ exists in the map\n            if (stringToCount.containsKey(split)) {\n   \
    \             // Add one to the count\n                int count = stringToCount.get(split);\n\
    \                stringToCount.put(split, count + 1);\n            } else {\n\
    \                // Add the word and count one\n                stringToCount.put(split,\
    \ 1);\n            }\n        }\n        // Sort the map by value\n        Map<String,\
    \ Integer> sortedMap = stringToCount.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n\
    \                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n\
    \                        (e1, e2) -> e1, LinkedHashMap::new));\n        // Get\
    \ the first value\n        int highestValue = (int) sortedMap.values().toArray()[0];\n\
    \        // Filter the map to only letters with the highest value\n        Map<String,\
    \ Integer> mostCountedMap = sortedMap.entrySet().stream()\n                .filter(e\
    \ -> e.getValue() == highestValue)\n                .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue));\n        // Create a new HashMap to return\n        HashMap<String,\
    \ Integer> toReturn = new HashMap<>(mostCountedMap);\n        return toReturn;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqv8pn_4_.java:57)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] words = test.split(\" \");\n    \
    \    HashMap<String,Integer> hist = new HashMap<String,Integer>();\n        for\
    \ (String word : words) {\n            if (!word.equals(\"\")) {\n           \
    \     if (hist.containsKey(word)) {\n                    int count = hist.get(word);\n\
    \                    hist.put(word, count + 1);\n                } else {\n  \
    \                  hist.put(word, 1);\n                }\n            }\n    \
    \    }\n        return hist;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpasbtelgj.java:35)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            result.merge(letter,\
    \ 1, Integer::sum);\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7nat49nu.java:27)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n\
    \        test = test.trim();\n        String[] split = test.split(\" \");\n  \
    \      for (String s : split) {\n            if (ret.containsKey(s)) {\n     \
    \           ret.put(s, ret.get(s) + 1);\n            } else {\n              \
    \  ret.put(s, 1);\n            }\n        }\n        HashMap<String,Integer> ret2\
    \ = new HashMap<String,Integer>();\n        int max = 0;\n        for (String\
    \ s : ret.keySet()) {\n            if (ret.get(s) > max) {\n                max\
    \ = ret.get(s);\n            }\n        }\n        for (String s : ret.keySet())\
    \ {\n            if (ret.get(s) == max) {\n                ret2.put(s, ret.get(s));\n\
    \            }\n        }\n        return ret2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn1_ia58.java:50)\n"
  stdout: ''
  timestamp: 1660011590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<String,Integer>();\n\
    \        // Write your code here.\n        return hm;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcfqwtexy.java:24)\n"
  stdout: ''
  timestamp: 1660011590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n\
    \        String[] parts = test.split(\" \");\n        for (String part : parts)\
    \ {\n            Integer count = ret.get(part);\n            if (count == null)\
    \ {\n                ret.put(part,1);\n            } else {\n                ret.put(part,count+1);\n\
    \            }\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76ow4k59.java:33)\n"
  stdout: ''
  timestamp: 1660011590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (hm.containsKey(word)) {\n                hm.put(word, hm.get(word)\
    \ + 1);\n            } else {\n                hm.put(word, 1);\n            }\n\
    \        }\n        return hm;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ixhe6gs.java:32)\n"
  stdout: ''
  timestamp: 1660011590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] letters = test.split(\" \");\n  \
    \      HashMap<String,Integer> result = new HashMap<String,Integer>();\n     \
    \   int max_count = 0;\n        int count = 0;\n        for (int i = 0; i < letters.length;\
    \ i++) {\n            if (result.containsKey(letters[i])) {\n                count\
    \ = result.get(letters[i]);\n                result.put(letters[i], count + 1);\n\
    \            } else {\n                result.put(letters[i], 1);\n          \
    \  }\n            if (result.get(letters[i]) > max_count) {\n                max_count\
    \ = result.get(letters[i]);\n            }\n        }\n        Iterator it = result.entrySet().iterator();\n\
    \        while (it.hasNext()) {\n            Map.Entry pair = (Map.Entry)it.next();\n\
    \            if ((int)pair.getValue() != max_count) {\n                it.remove();\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp603vd7t8.java:50)\n"
  stdout: ''
  timestamp: 1660011590
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            if (map.containsKey(letter))\
    \ {\n                map.put(letter, map.get(letter) + 1);\n            } else\
    \ {\n                map.put(letter, 1);\n            }\n        }\n        return\
    \ map;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3h7_ktxj.java:31)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] str = test.split(\" \");\n      \
    \  HashMap<String,Integer> map = new HashMap<String,Integer>();\n        for(int\
    \ i = 0; i < str.length; i++) {\n            if(map.containsKey(str[i])) {\n \
    \               map.put(str[i], map.get(str[i]) + 1);\n            }\n       \
    \     else {\n                map.put(str[i], 1);\n            }\n        }\n\
    \        return map;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9pl_aig.java:33)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvug5jtlr.java:23)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        for (String c : test.split(\" \")) {\n            if (count.containsKey(c))\
    \ {\n                count.put(c, count.get(c) + 1);\n            } else {\n \
    \               count.put(c, 1);\n            }\n        }\n        HashMap<String,Integer>\
    \ maxLetter = new HashMap<String,Integer>();\n        int max = 0;\n        for\
    \ (String key : count.keySet()) {\n            if (count.get(key) > max) {\n \
    \               max = count.get(key);\n                maxLetter.clear();\n  \
    \              maxLetter.put(key, max);\n            } else if (count.get(key)\
    \ == max) {\n                maxLetter.put(key, max);\n            }\n       \
    \ }\n        return maxLetter;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpza2fvy57.java:47)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        List<String> letters = Arrays.asList(test.split(\"\\\\s+\"));\n     \
    \   return letters.stream().collect(Collectors.groupingBy(s -> s, Collectors.summingInt(s\
    \ -> 1)));\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp207qgb72.java:21: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return letters.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.summingInt(s -> 1)));\n                                   \
    \    ^\n    equality constraints: Map<K,D>\n    lower bounds: HashMap<String,Integer>,Object\n\
    \  where R,A#1,T#1,K,T#2,A#2,D are type-variables:\n    R extends Object declared\
    \ in method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n    A#1 extends Object\
    \ declared in method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n    T#1 extends\
    \ Object declared in interface Stream\n    K extends Object declared in method\
    \ <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<? super\
    \ T#2,A#2,D>)\n    T#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    A#2 extends Object\
    \ declared in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    D extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n1 error\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hashMap = new HashMap<>();\n\
    \        for (String e : test.split(\" \")) {\n            hashMap.put(e,hashMap.getOrDefault(e,0)+1);\n\
    \        }\n        return hashMap;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinpoh7v_.java:27)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return new HashMap<String,Integer>();\n}\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyne8gcv.java:22)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        Integer temp;\n        if (test.length() > 0) {\n            String[]\
    \ letters = test.split(\" \");\n            for (String letter : letters) {\n\
    \                temp = map.get(letter);\n                if (temp == null) {\n\
    \                    map.put(letter, 1);\n                } else {\n         \
    \           map.put(letter, temp + 1);\n                }\n            }\n   \
    \     }\n        return map;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzafojvet.java:36)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // your code here\n        String[] letters\
    \ = test.split(\" \");\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String letter : letters) {\n            if (result.containsKey(letter))\
    \ {\n                result.put(letter, result.get(letter) + 1);\n           \
    \ } else {\n                result.put(letter, 1);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmzakxf55.java:33)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] input = test.split(\" \");\n        for (String s : input) {\n\
    \            if (!result.containsKey(s)) {\n                result.put(s, 1);\n\
    \            } else {\n                result.put(s, result.get(s) + 1);\n   \
    \         }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpji6hen6l.java:32)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        ArrayList<String> characters = new ArrayList<String>(Arrays.asList(test.split(\"\
    \ \")));\n        if (characters.size() == 0) {\n            return result;\n\
    \        }\n        HashMap<String,Integer> currentHash = new HashMap<String,Integer>();\n\
    \        int current = 1;\n        int saved = 1;\n        for (int i = 0; i <\
    \ characters.size(); i++) {\n            if (currentHash.containsKey(characters.get(i)))\
    \ {\n                current = currentHash.get(characters.get(i)) + 1;\n     \
    \           currentHash.put(characters.get(i), current);\n            } else {\n\
    \                currentHash.put(characters.get(i), 1);\n            }\n     \
    \       if (current > saved) {\n                saved = current;\n           \
    \ }\n        }\n        for (Map.Entry<String,Integer> e : currentHash.entrySet())\
    \ {\n            if (e.getValue() == saved) {\n                result.put(e.getKey(),\
    \ e.getValue());\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_52uz7ai.java:52)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String l : letters)\
    \ {\n            histogram.put(l, histogram.getOrDefault(l, 0) + 1);\n       \
    \ }\n        return histogram;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhms6crg.java:28)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test.equals(\"\")) return result;\n        String[] test_array =\
    \ test.split(\" \");\n        for (String element : test_array) {\n          \
    \  if (result.containsKey(element)) {\n                result.put(element, result.get(element)\
    \ + 1);\n            } else {\n                result.put(element, 1);\n     \
    \       }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq436wd7o.java:33)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Implement here:\n        throw new RuntimeException(\"\
    Not implemented\");\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.histogram(tmpwaj3p9mx.java:20)\n\tat Problem.main(tmpwaj3p9mx.java:23)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        if (test.equals(\"\")) return res;\n        HashMap<String,Integer> h\
    \ = new HashMap<String,Integer>();\n        for (String letter : test.split(\"\
    \ \")){\n            if (!h.containsKey(letter)){\n                h.put(letter,1);\n\
    \            }\n            else{\n                int count = h.get(letter);\n\
    \                h.put(letter, count+1);\n            }\n        }\n        int\
    \ max = Collections.max(h.values());\n        for (Map.Entry<String,Integer> entry\
    \ : h.entrySet()){\n            if (entry.getValue() == max){\n              \
    \  res.put(entry.getKey(),entry.getValue());\n            }\n        }\n     \
    \   return res;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            if (ret.containsKey(letter))\
    \ {\n                ret.put(letter, ret.get(letter) + 1);\n            } else\
    \ {\n                ret.put(letter, 1);\n            }\n        }\n        return\
    \ ret;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvcaymybi.java:31)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] str = test.split(\" \");\n      \
    \  HashMap<String,Integer> map = new HashMap<String,Integer>();\n        for(int\
    \ i = 0; i < str.length; i++) {\n            if(!map.containsKey(str[i])) {\n\
    \                map.put(str[i], 1);\n            }\n            else {\n    \
    \            map.put(str[i], map.get(str[i]) + 1);\n            }\n        }\n\
    \        return map;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnemp0lsx.java:33)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpu96wmoux.java:22)\n"
  stdout: ''
  timestamp: 1660011587
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test.length() == 0) {\n            return result;\n        }\n  \
    \      String[] letters = test.split(\" \");\n        for (String s : letters)\
    \ {\n            if (result.containsKey(s)) {\n                result.put(s,result.get(s)\
    \ + 1);\n            } else {\n                result.put(s,1);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72fu7o0y.java:35)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> count = new HashMap<String,Integer>();\n    \
    \    String[] array = test.split(\" \");\n        for (String str : array) {\n\
    \            if (result.containsKey(str)) {\n                count.put(str,result.get(str)+1);\n\
    \            } else {\n                count.put(str,1);\n            }\n    \
    \    }\n        int max = Collections.max(count.values());\n        for (Map.Entry<String,Integer>\
    \ entry : count.entrySet()) {\n            if (entry.getValue() == max) {\n  \
    \              result.put(entry.getKey(),entry.getValue());\n            }\n \
    \       }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2qa0ljsu.java:38)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<String,Integer>();\n\
    \        if (test.length() == 0) {\n            return hist;\n        }\n    \
    \    String[] words = test.split(\" \");\n        for (String word : words) {\n\
    \            if (hist.containsKey(word)) {\n                hist.put(word, hist.get(word)\
    \ + 1);\n            } else {\n                hist.put(word, 1);\n          \
    \  }\n        }\n        return hist;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp16cy00tl.java:35)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> mapMax = new HashMap<String,Integer>();\n   \
    \     int max = 0;\n        for (String word : test.split(\" \")) {\n        \
    \    if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            } else {\n                map.put(word, 1);\n           \
    \ }\n            if (map.get(word) > max) {\n                max = map.get(word);\n\
    \            }\n        }\n        for (String key : map.keySet()) {\n       \
    \     if (map.get(key) == max) {\n                mapMax.put(key, max);\n    \
    \        }\n        }\n        return mapMax;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvjbvxp1h.java:46)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return Arrays.stream(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(s -> s,\n                () -> new\
    \ HashMap<String,Integer>(),\n                Collectors.reducing(0, e -> 1, Integer::sum)));\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3pl_ug4.java:26)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] testArr = test.split(\" \");\n        for (String letter : testArr)\
    \ {\n            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1);\n            } else {\n                result.put(letter,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mvr91gq.java:32)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // TODO: Implement me\n        HashMap<String,Integer>\
    \ answer = new HashMap<String,Integer>();\n        String[] splitStr = test.split(\"\
    \ \");\n        if(splitStr.length == 0) {\n            return answer;\n     \
    \   }\n        int maximum = 0;\n        List<String> maxList = new ArrayList<String>();\n\
    \        for(int i = 0; i < splitStr.length; i++) {\n            int count = 0;\n\
    \            for(int j = 0; j < splitStr.length; j++) {\n                if(splitStr[i].equals(splitStr[j]))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if(count > maximum) {\n                maximum = count;\n               \
    \ maxList.clear();\n                maxList.add(splitStr[i]);\n            } else\
    \ if(count == maximum) {\n                maxList.add(splitStr[i]);\n        \
    \    }\n        }\n        for(int i = 0; i < maxList.size(); i++) {\n       \
    \     answer.put(maxList.get(i), maximum);\n        }\n        return answer;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjdf__d32.java:54)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] letters = test.split(\" \");\n  \
    \      HashMap<String,Integer> letterCount = new HashMap<String,Integer>();\n\
    \        for (String letter : letters) {\n            if (letterCount.containsKey(letter))\
    \ {\n                letterCount.put(letter, letterCount.get(letter) + 1);\n \
    \           } else {\n                letterCount.put(letter, 1);\n          \
    \  }\n        }\n        int most = 0;\n        for (Integer number : letterCount.values())\
    \ {\n            if (number > most) {\n                most = number;\n      \
    \      }\n        }\n        HashMap<String,Integer> ans = new HashMap<String,Integer>();\n\
    \        for (Map.Entry<String,Integer> entry : letterCount.entrySet()) {\n  \
    \          if (entry.getValue() == most) {\n                ans.put(entry.getKey(),\
    \ entry.getValue());\n            }\n        }\n        return ans;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnos45pud.java:49)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (map.containsKey(letter)) {\n                int count = map.get(letter);\n\
    \                map.put(letter, count + 1);\n            } else {\n         \
    \       map.put(letter, 1);\n            }\n        }\n        return map;\n}\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcpvi0ooh.java:33)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        if (test.length() == 0) return map;\n        String[] vals = test.split(\"\
    \ \");\n        for (String str : vals) {\n            if (map.containsKey(str))\
    \ map.put(str, map.get(str) + 1);\n            else map.put(str, 1);\n       \
    \ }\n        // System.out.println(map);\n        int max = 0;\n        for (int\
    \ val : map.values()) max = Math.max(max, val);\n        // System.out.println(max);\n\
    \        HashMap<String,Integer> ret = new HashMap<String,Integer>();\n      \
    \  for (String key : map.keySet()) {\n            if (map.get(key) == max) ret.put(key,\
    \ max);\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] tokens = test.split(\" \");\n   \
    \     HashMap<String,Integer> hist = new HashMap<String,Integer>();\n        Integer\
    \ max = 0;\n        for (String token : tokens) {\n            if (hist.containsKey(token))\
    \ {\n                Integer value = hist.get(token);\n                hist.put(token,\
    \ value + 1);\n                if (value + 1 > max) {\n                    max\
    \ = value + 1;\n                }\n            } else {\n                hist.put(token,\
    \ 1);\n                if (1 > max) {\n                    max = 1;\n        \
    \        }\n            }\n        }\n        HashMap<String,Integer> answer =\
    \ new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer> entry\
    \ : hist.entrySet()) {\n            if (entry.getValue() == max) {\n         \
    \       answer.put(entry.getKey(), entry.getValue());\n            }\n       \
    \ }\n        return answer;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf1d1w_z6.java:51)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Your code here\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpdwl2uxr0.java:23)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        //TODO Implement this function\n        HashMap<String,Integer>\
    \ ret = new HashMap<String,Integer>();\n        String[] in = test.split(\" \"\
    );\n        for(String s : in){\n            if(ret.containsKey(s)){\n       \
    \         ret.put(s,ret.get(s)+1);\n            }else{\n                ret.put(s,1);\n\
    \            }\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp05twqq47.java:33)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        if(test.length() == 0) {\n            return map;\n        }\n      \
    \  String[] strings = test.split(\" \");\n        for(String str : strings) {\n\
    \            if(map.containsKey(str)) {\n                map.put(str, map.get(str)\
    \ + 1);\n            } else {\n                map.put(str, 1);\n            }\n\
    \        }\n        return map;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgx7s2gg.java:35)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      HashMap<String,Integer> letters = new HashMap<String,Integer>();\n\
    \      test = test.trim();\n      if (test.length() == 0) return letters;\n  \
    \    String[] letterArray = test.split(\" \");\n      for (String letter : letterArray)\
    \ {\n        if (letters.containsKey(letter)) {\n          letters.put(letter,letters.get(letter)+1);\n\
    \        } else {\n          letters.put(letter,1);\n        }\n      }\n    \
    \  return letters;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa91geb73.java:34)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // TODO: implement this.\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp21e_tyfz.java:23)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> counts = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            int count = counts.getOrDefault(letter, 0);\n            counts.put(letter,\
    \ count + 1);\n        }\n        return counts;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphjru5ydm.java:29)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String word : test.split(\" \")) {\n            if (result.containsKey(word))\
    \ {\n                result.put(word,result.get(word)+1);\n            } else\
    \ {\n                result.put(word,1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_9gcjfp.java:31)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test == null || test.isEmpty()) return result;\n        int max =\
    \ 0;\n        for (String s : test.split(\" \")) {\n            if (result.containsKey(s))\
    \ {\n                result.put(s, result.get(s) + 1);\n            } else {\n\
    \                result.put(s, 1);\n            }\n            max = Math.max(max,\
    \ result.get(s));\n        }\n        HashMap<String,Integer> maxResult = new\
    \ HashMap<String,Integer>();\n        for (String s : result.keySet()) {\n   \
    \         if (result.get(s) == max) {\n                maxResult.put(s, max);\n\
    \            }\n        }\n        return maxResult;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> h = new HashMap<String,Integer>();\n\
    \        String[] tokens = test.split(\" \");\n        for (String word : tokens)\
    \ {\n            if (!h.containsKey(word)) {\n                h.put(word,1);\n\
    \            } else {\n                int c = h.get(word);\n                h.put(word,c+1);\n\
    \            }\n        }\n        return h;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf1ax4i70.java:33)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> freq = new HashMap<String,Integer>();\n     \
    \   HashMap<Integer,ArrayList<String>> freq_to_key = new HashMap<Integer,ArrayList<String>>();\n\
    \        int max = -1;\n        if (test == null || test.length() == 0) return\
    \ res;\n        String[] words = test.split(\" \");\n        for (String w : words)\
    \ {\n            if (freq.containsKey(w)) {\n                freq.put(w, freq.get(w)\
    \ + 1);\n            } else {\n                freq.put(w, 1);\n            }\n\
    \            if (freq.get(w) > max) {\n                max = freq.get(w);\n  \
    \          }\n        }\n        for (String key : freq.keySet()) {\n        \
    \    int value = freq.get(key);\n            if (freq_to_key.containsKey(value))\
    \ {\n                freq_to_key.get(value).add(key);\n            } else {\n\
    \                ArrayList<String> newlist = new ArrayList<String>();\n      \
    \          newlist.add(key);\n                freq_to_key.put(value, newlist);\n\
    \            }\n        }\n        if (freq_to_key.containsKey(max)) {\n     \
    \       for (String key : freq_to_key.get(max)) {\n                res.put(key,\
    \ max);\n            }\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.equals(\"\"))\n            return\
    \ new HashMap<String,Integer>();\n        String[] testArray = test.split(\" \"\
    );\n        ArrayList<String> letters = new ArrayList<String>();\n        ArrayList<Integer>\
    \ occurrences = new ArrayList<Integer>();\n        int i = 0;\n        boolean\
    \ exists = false;\n        for (String s : testArray) {\n            exists =\
    \ false;\n            for (int j = 0; j < letters.size(); j++) {\n           \
    \     if (s.equals(letters.get(j))) {\n                    occurrences.set(j,occurrences.get(j)+1);\n\
    \                    exists = true;\n                    break;\n            \
    \    }\n            }\n            if (!exists) {\n                letters.add(s);\n\
    \                occurrences.add(1);\n            }\n        }\n        int max\
    \ = Collections.max(occurrences);\n        HashMap<String,Integer> answer = new\
    \ HashMap<String,Integer>();\n        for (int j = 0; j < letters.size(); j++)\
    \ {\n            if (occurrences.get(j) == max)\n                answer.put(letters.get(j),max);\n\
    \        }\n        return answer;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> toReturn = new HashMap<String,Integer>();\n\
    \        // TODO: Implement this function\n        return toReturn;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6rd6p7gy.java:24)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] list = test.split(\" \");\n        for (String string : list)\
    \ {\n            if (result.containsKey(string)) {\n                result.put(string,result.get(string)+1);\n\
    \            } else {\n                result.put(string,1);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfxpfq024.java:32)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> out = new HashMap<String,Integer>();\n\
    \        Arrays.stream(test.split(\" \")).forEach(s -> {\n            out.put(s,\
    \ out.getOrDefault(s, 0) + 1);\n        });\n        return out;\n}\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9zpqhv6d.java:27)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> answer = new HashMap<String,Integer>();\n\
    \        if(test.length()==0)\n            return answer;\n        String[] tokens\
    \ = test.split(\" \");\n        for(String t:tokens){\n            if(answer.containsKey(t))\n\
    \                answer.put(t,answer.get(t)+1);\n            else\n          \
    \      answer.put(t,1);\n        }\n        return answer;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4qxyzfu.java:33)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        throw new UnsupportedOperationException(\"\
    Please implement the histogram() method\");\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement the histogram() method\n\tat Problem.histogram(tmpcoucco_2.java:19)\n\
    \tat Problem.main(tmpcoucco_2.java:22)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] arr = test.split(\" \");\n      \
    \  HashMap<String,Integer> hist = new HashMap<String,Integer>();\n        int\
    \ counter = 0;\n        int rep = 0;\n        String letter = \"\";\n        if\
    \ (arr.length != 0) {\n            for (int i = 0; i < arr.length; i++) {\n  \
    \              letter = arr[i];\n                counter = Collections.frequency(Arrays.asList(arr),\
    \ letter);\n                if (counter > rep) {\n                    rep = counter;\n\
    \                }\n            }\n            for (int i = 0; i < arr.length;\
    \ i++) {\n                letter = arr[i];\n                counter = Collections.frequency(Arrays.asList(arr),\
    \ letter);\n                if (counter == rep) {\n                    hist.put(letter,\
    \ counter);\n                }\n            }\n        }\n        return hist;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwtyxy2z.java:49)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (result.containsKey(s))\
    \ {\n                result.put(s, result.get(s) + 1);\n            } else {\n\
    \                result.put(s, 1);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1_r5onso.java:31)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvug5jtlr.java:23)\n"
  stdout: ''
  timestamp: 1660011589
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if(test.length()==0)\n            return result;\n        if(test.length()==1){\n\
    \            result.put(test,1);\n            return result;\n        }\n    \
    \    List<String> ar = new ArrayList<String>(Arrays.asList(test.split(\" \")));\n\
    \        int max_index = 0;\n        int max_occurrence = 1;\n        for(int\
    \ i=0;i<ar.size();i++){\n            int count = Collections.frequency(ar,ar.get(i));\n\
    \            if(count>max_occurrence){\n                max_occurrence = count;\n\
    \                max_index = i;\n            }\n        }\n        result.put(ar.get(max_index),max_occurrence);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpce_7j4vh.java:40)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (String x : test.split(\" \")) {\n            if (map.containsKey(x))\n\
    \                map.put(x, map.get(x) + 1);\n            else\n             \
    \   map.put(x, 1);\n        }\n        int max = 0;\n        HashMap<String,Integer>\
    \ hist = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() == max)\n      \
    \          hist.put(entry.getKey(), entry.getValue());\n            else if (entry.getValue()\
    \ > max) {\n                hist.clear();\n                hist.put(entry.getKey(),\
    \ entry.getValue());\n                max = entry.getValue();\n            }\n\
    \        }\n        return hist;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprb5krgg5.java:46)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test.isEmpty()) {\n            return result;\n        }\n      \
    \  String[] words = test.split(\" \");\n        for (String word : words) {\n\
    \            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            } else {\n                result.put(word,\
    \ 1);\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9h2cv5v.java:35)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] words = test.split(\" \");\n    \
    \    HashMap<String,Integer> letters = new HashMap<String,Integer>();\n      \
    \  for (String word : words) {\n            if (letters.containsKey(word)) {\n\
    \                letters.put(word, letters.get(word) + 1);\n            } else\
    \ {\n                letters.put(word, 1);\n            }\n        }\n       \
    \ // HashMap<String,Integer> result = new HashMap<String,Integer>();\n       \
    \ // int max = 0;\n        // for (Map.Entry<String,Integer> entry : letters.entrySet())\
    \ {\n        //     if (entry.getValue() > max) {\n        //         max = entry.getValue();\n\
    \        //     }\n        // }\n        // for (Map.Entry<String,Integer> entry\
    \ : letters.entrySet()) {\n        //     if (entry.getValue() == max) {\n   \
    \     //         result.put(entry.getKey(), entry.getValue());\n        //   \
    \  }\n        // }\n        // return result;\n        return letters;\n}\n  \
    \  public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp616f7fxy.java:45)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Return a dictionary, as explained in the\
    \ problem description.\n        HashMap<String,Integer> counts = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (counts.containsKey(s))\
    \ {\n                counts.put(s, counts.get(s) + 1);\n            } else {\n\
    \                counts.put(s, 1);\n            }\n        }\n        HashMap<String,Integer>\
    \ counts2 = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer>\
    \ e : counts.entrySet()) {\n            if (counts2.containsKey(e.getValue().toString()))\
    \ {\n                counts2.put(e.getValue().toString(), counts2.get(e.getValue().toString())\
    \ + 1);\n            } else {\n                counts2.put(e.getValue().toString(),\
    \ 1);\n            }\n        }\n        HashMap<String,Integer> counts3 = new\
    \ HashMap<String,Integer>();\n        Integer max_count = 0;\n        for (Map.Entry<String,Integer>\
    \ e : counts2.entrySet()) {\n            if (e.getValue() >= max_count) {\n  \
    \              max_count = e.getValue();\n            }\n        }\n        for\
    \ (Map.Entry<String,Integer> e : counts.entrySet()) {\n            if (e.getValue()\
    \ == max_count) {\n                counts3.put(e.getKey(), e.getValue());\n  \
    \          }\n        }\n        return counts3;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflotruya.java:53)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        Integer count = 0;\n        for (String letter : test.split(\" \")) {\n\
    \            if (histogram.containsKey(letter)) {\n                count = histogram.get(letter);\n\
    \                histogram.put(letter, ++count);\n            } else {\n     \
    \           histogram.put(letter, 1);\n            }\n        }\n        return\
    \ histogram;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqgga80a.java:33)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.length() == 0) return new HashMap<String,Integer>();\n\
    \        String[] strArr = test.split(\" \");\n        HashMap<String,Integer>\
    \ ans = new HashMap<String,Integer>();\n        int pos = 0;\n        for (String\
    \ s : strArr) {\n            if (ans.containsKey(s)) {\n                int old\
    \ = ans.get(s);\n                ans.put(s, old + 1);\n            } else {\n\
    \                ans.put(s, 1);\n            }\n        }\n        List<Integer>\
    \ ansList = new ArrayList<Integer>(ans.values());\n        Collections.sort(ansList);\n\
    \        Integer max = ansList.get(ansList.size() - 1);\n        HashMap<String,Integer>\
    \ map = new HashMap<String,Integer>();\n        for (Map.Entry<String,Integer>\
    \ entry : ans.entrySet()) {\n            if (entry.getValue() == max) {\n    \
    \            map.put(entry.getKey(), entry.getValue());\n            }\n     \
    \   }\n        return map;\n}\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return new HashMap<String,Integer>();\n}\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgyne8gcv.java:22)\n"
  stdout: ''
  timestamp: 1660011584
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\
    \        // Your code here\n        if(test.length() == 0)\n        {\n      \
    \      return hmap;\n        }\n        else if(test.length() == 1)\n        {\n\
    \            hmap.put(test,1);\n            return hmap;\n        }\n        int\
    \ i = 0;\n        int j = 0;\n        String[] sa = test.split(\" \");\n     \
    \   while(i < sa.length)\n        {\n            hmap.put(sa[i],0);\n        \
    \    j = 0;\n            while(j < sa.length)\n            {\n               \
    \ if(sa[i].equals(sa[j]))\n                {\n                    hmap.put(sa[i],hmap.get(sa[i])+1);\n\
    \                }\n                j++;\n            }\n            i++;\n  \
    \      }\n        return hmap;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps242mar6.java:51)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Your code here\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(histogram((\"a b b\
    \ a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpdwl2uxr0.java:23)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (map.containsKey(letter)) {\n                map.put(letter,\
    \ map.get(letter) + 1);\n            } else {\n                map.put(letter,\
    \ 1);\n            }\n        }\n        return map;\n}\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82i2ksbs.java:32)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \")) {\n            if (!result.containsKey(s))\
    \ {\n                result.put(s, 1);\n            } else {\n               \
    \ result.put(s, result.get(s) + 1);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8dv72e70.java:31)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> res = new HashMap<String,Integer>();\n\
    \        String[] testArr = test.split(\" \");\n        for (String elem : testArr)\
    \ {\n            if (res.containsKey(elem)) {\n                res.put(elem, res.get(elem)\
    \ + 1);\n            } else {\n                res.put(elem, 1);\n           \
    \ }\n        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjz9lwuj5.java:32)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")){\n            if (!map.containsKey(letter)){\n\
    \                map.put(letter, 1);\n            }\n            else{\n     \
    \           map.put(letter, map.get(letter) + 1);\n            }\n        }\n\
    \        return map;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplx2czin4.java:32)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> freq = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \")) {\n            if (freq.containsKey(letter))\
    \ {\n                freq.put(letter, freq.get(letter) + 1);\n            } else\
    \ {\n                freq.put(letter, 1);\n            }\n        }\n        return\
    \ freq;\n}\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps56fvs28.java:31)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp_yimiqqt.java:22)\n"
  stdout: ''
  timestamp: 1660011582
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Write your code here\n        HashMap<String,Integer>\
    \ counts = new HashMap<String,Integer>();\n        for (String s : test.split(\"\
    \ \")) {\n            if (counts.containsKey(s))\n                counts.put(s,\
    \ counts.get(s) + 1);\n            else\n                counts.put(s, 1);\n \
    \       }\n        return counts;\n}\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pl0ke_1.java:31)\n"
  stdout: ''
  timestamp: 1660011594
