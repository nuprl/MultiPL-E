completions:
- '        return 1;'
- '        return 0;'
- "        // write your code here\n        // Hint: use ArrayList.remove(int index)\n\
  \        // Hint: use switch to determine which operator to use\n        int result\
  \ = operand.get(0);\n        operand.remove(0);\n        while(operand.size() >\
  \ 0){\n            switch(op.get(0)){\n                case \"+\":\n           \
  \         result += operand.get(0);\n                    break;\n              \
  \  case \"-\":\n                    result -= operand.get(0);\n                \
  \    break;\n                case \"*\":\n                    result *= operand.get(0);\n\
  \                    break;\n                case \"//\":\n                    result\
  \ /= operand.get(0);\n                    break;\n                case \"**\":\n\
  \                    result = (int)Math.pow(result, operand.get(0));\n         \
  \           break;\n            }\n            operand.remove(0);\n            op.remove(0);\n\
  \        }\n        return result;"
- "        int op_1 = operand.get(0);\n        int op_2 = operand.get(1);\n      \
  \  for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n   \
  \             case \"+\":\n                    op_1 = op_1 + op_2;\n           \
  \         break;\n                case \"-\":\n                    op_1 = op_1 -\
  \ op_2;\n                    break;\n                case \"*\":\n             \
  \       op_1 = op_1 * op_2;\n                    break;\n                case \"\
  //\":\n                    op_1 = op_1 / op_2;\n                    break;\n   \
  \             case \"**\":\n                    op_1 = (int) Math.pow(op_1, op_2);\n\
  \                    break;\n            }\n            op_2 = operand.get(i + 2);\n\
  \        }\n        return op_1;"
- "        // Write your code here.\n        ArrayList<String> expr = new ArrayList<>();\n\
  \        for (int i = 0; i < operand.size(); i++) {\n            if (i == 0) expr.add(String.valueOf(operand.get(i)));\n\
  \            else {\n                expr.add(op.get(i - 1));\n                expr.add(String.valueOf(operand.get(i)));\n\
  \            }\n        }\n        int i = 0;\n        while (i < expr.size()) {\n\
  \            if (expr.get(i).equals(\"**\")) {\n                int left = Integer.parseInt(expr.get(i\
  \ - 1));\n                int right = Integer.parseInt(expr.get(i + 1));\n     \
  \           expr.set(i - 1, String.valueOf(left ** right));\n                expr.remove(i);\n\
  \                expr.remove(i);\n                i -= 1;\n            }\n     \
  \       i += 1;\n        }\n        i = 0;\n        while (i < expr.size()) {\n\
  \            if (expr.get(i).equals(\"*\")) {\n                int left = Integer.parseInt(expr.get(i\
  \ - 1));\n                int right = Integer.parseInt(expr.get(i + 1));\n     \
  \           expr.set(i - 1, String.valueOf(left * right));\n                expr.remove(i);\n\
  \                expr.remove(i);\n                i -= 1;\n            }\n     \
  \       i += 1;\n        }\n        i = 0;\n        while (i < expr.size()) {\n\
  \            if (expr.get(i).equals(\"//\")) {\n                int left = Integer.parseInt(expr.get(i\
  \ - 1));\n                int right = Integer.parseInt(expr.get(i + 1));\n     \
  \           expr.set(i - 1, String.valueOf(left // right));\n                expr.remove(i);\n\
  \                expr.remove(i);\n                i -= 1;\n            }\n     \
  \       i += 1;\n        }\n        i = 0;\n        while (i < expr.size()) {\n\
  \            if (expr.get(i).equals(\"+\")) {\n               "
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String x = op.get(i);\n            int y = operand.get(i + 1);\n\
  \            if (x.equals(\"+\")) {\n                result += y;\n            }\
  \ else if (x.equals(\"-\")) {\n                result -= y;\n            } else\
  \ if (x.equals(\"*\")) {\n                result *= y;\n            } else if (x.equals(\"\
  /\")) {\n                result /= y;\n            } else if (x.equals(\"^\")) {\n\
  \                result = (int) Math.pow(result, y);\n            }\n        }\n\
  \        return result;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String curOp = op.get(i);\n            if (curOp.equals(\"+\"))\
  \ {\n                res += operand.get(i + 1);\n            } else if (curOp.equals(\"\
  -\")) {\n                res -= operand.get(i + 1);\n            } else if (curOp.equals(\"\
  *\")) {\n                res *= operand.get(i + 1);\n            } else if (curOp.equals(\"\
  //\")) {\n                res /= operand.get(i + 1);\n            } else if (curOp.equals(\"\
  **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n     \
  \       }\n        }\n        return res;"
- "        if (op.size() == 0 || operand.size() == 0) return 0;\n        ArrayList<Integer>\
  \ tmpOperand = new ArrayList<Integer>();\n        ArrayList<String> tmpOp = new\
  \ ArrayList<String>();\n        int ans = 0;\n        for (int i = 0; i < op.size();\
  \ i++) {\n            if (op.get(i).equals(\"+\") || op.get(i).equals(\"-\")) {\n\
  \                tmpOperand.add(operand.get(i));\n                tmpOp.add(op.get(i));\n\
  \            } else if (op.get(i).equals(\"*\")) {\n                int t = operand.get(i)*operand.get(i+1);\n\
  \                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n   \
  \         } else if (op.get(i).equals(\"//\")) {\n                int t = operand.get(i)/operand.get(i+1);\n\
  \                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n   \
  \         } else if (op.get(i).equals(\"**\")) {\n                int t = (int)Math.pow(operand.get(i),\
  \ operand.get(i+1));\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n\
  \            }\n        }\n        if (tmpOperand.size() == 1) return tmpOperand.get(0);\n\
  \        ans = tmpOperand.get(0);\n        for (int i = 0; i < tmpOp.size(); i++)\
  \ {\n            if (tmpOp.get(i).equals(\"+\")) {\n                ans += tmpOperand.get(i+1);\n\
  \            } else if (tmpOp.get(i).equals(\"-\")) {\n                ans -= tmpOperand.get(i+1);\n\
  \            }\n        }\n        return ans;"
- "        Integer result = operand.get(0);\n        for (int i = 0; i < op.size();\
  \ i++) {\n            if (op.get(i).equals(\"+\")) {\n                result +=\
  \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n     \
  \           result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  /\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  ^\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                res += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                res\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n     \
  \       }\n        }\n        return res;"
- "        // Write your code here\n        int result = operand.get(0);\n       \
  \ for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\"\
  )) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  -\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  /\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int l = op.size();\n        int total = operand.get(0);\n\
  \        for (int i = 0; i < l; i++) {\n            switch (op.get(i)) {\n     \
  \           case \"+\":\n                    total += operand.get(i + 1);\n    \
  \                break;\n                case \"-\":\n                    total\
  \ -= operand.get(i + 1);\n                    break;\n                case \"*\"\
  :\n                    total *= operand.get(i + 1);\n                    break;\n\
  \                case \"//\":\n                    total /= operand.get(i + 1);\n\
  \                    break;\n                case \"**\":\n                    total\
  \ = (int) Math.pow(total, operand.get(i + 1));\n                    break;\n   \
  \         }\n        }\n        return total;"
- '        return 0;'
- "        if (op.size() != operand.size() - 1) return 0;\n        if (op.size() ==\
  \ 0 || operand.size() < 2) return 0;\n        // create queue of operands and operators\n\
  \        ArrayDeque<Integer> operands = new ArrayDeque<>();\n        ArrayDeque<String>\
  \ operators = new ArrayDeque<>();\n        // fill up queue with operands and operators\n\
  \        for (Integer i : operand) operands.add(i);\n        for (String s : op)\
  \ operators.add(s);\n        // get initial operators\n        int operand1 = operands.poll();\n\
  \        int operand2 = operands.poll();\n        String operator = operators.poll();\n\
  \        // create operand result\n        int result = 0;\n        switch (operator)\
  \ {\n            case \"+\":\n                result = operand1 + operand2;\n  \
  \              break;\n            case \"-\":\n                result = operand1\
  \ - operand2;\n                break;\n            case \"*\":\n               \
  \ result = operand1 * operand2;\n                break;\n            case \"//\"\
  :\n                result = operand1 / operand2;\n                break;\n     \
  \       case \"**\":\n                result = (int) Math.pow(operand1, operand2);\n\
  \                break;\n        }\n        // add result back to queue\n      \
  \  operands.add(result);\n        // build on expression\n        while (!operators.isEmpty())\
  \ {\n            operand1 = operands.poll();\n            operand2 = operands.poll();\n\
  \            operator = operators.poll();\n            result = 0;\n           \
  \ switch (operator) {\n                case \"+\":\n                    result =\
  \ operand1 + operand2;\n                    break;\n                case \"-\":\n\
  \                    result = operand1 - operand2;\n                    break;\n\
  \                case \"*\":\n                    result = operand1 * operand2;\n\
  \                    break;\n                case \"//\":\n                    result\
  \ = operand1 / operand2;\n                    break;\n                case \"**\"\
  :\n                    result = (int) Math.pow(operand1, operand2);\n          \
  \          break;\n            }\n            operands.add("
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String opr = op.get(i);\n            if (opr.equals(\"+\")) {\n\
  \                result += operand.get(i + 1);\n            } else if (opr.equals(\"\
  -\")) {\n                result -= operand.get(i + 1);\n            } else if (opr.equals(\"\
  *\")) {\n                result *= operand.get(i + 1);\n            } else if (opr.equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (opr.equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) result += operand.get(i + 1);\n  \
  \          else if (op.get(i).equals(\"-\")) result -= operand.get(i + 1);\n   \
  \         else if (op.get(i).equals(\"*\")) result *= operand.get(i + 1);\n    \
  \        else if (op.get(i).equals(\"/\")) result /= operand.get(i + 1);\n     \
  \       else if (op.get(i).equals(\"**\")) result = (int) Math.pow(result, operand.get(i\
  \ + 1));\n        }\n        return result;"
- '        return 0;'
- "        if (op.size() == 0 || operand.size() == 0) {\n            return 0;\n \
  \       }\n        Stack<Integer> operandStack = new Stack<>();\n        operandStack.push(operand.get(0));\n\
  \        for (int i = 0; i < op.size(); i++) {\n            operandStack.push(operand.get(i\
  \ + 1));\n            int secondOperand = operandStack.pop();\n            int firstOperand\
  \ = operandStack.pop();\n            switch (op.get(i)) {\n                case\
  \ \"+\":\n                    operandStack.push(firstOperand + secondOperand);\n\
  \                    break;\n                case \"-\":\n                    operandStack.push(firstOperand\
  \ - secondOperand);\n                    break;\n                case \"*\":\n \
  \                   operandStack.push(firstOperand * secondOperand);\n         \
  \           break;\n                case \"//\":\n                    operandStack.push(firstOperand\
  \ / secondOperand);\n                    break;\n                case \"**\":\n\
  \                    operandStack.push((int) Math.pow(firstOperand, secondOperand));\n\
  \                    break;\n            }\n        }\n        return operandStack.pop();"
- "        if (op.size() != operand.size() - 1) return 0;\n        List<String> ops\
  \ = Arrays.asList(\"+\", \"-\", \"*\", \"//\", \"**\");\n        if (op.stream().filter(x\
  \ -> !ops.contains(x)).count() > 0) return 0;\n        String expression = String.join(\"\
  \ \", op);\n        for (int n : operand) {\n            expression = expression.replaceFirst(\"\
  \ \", n + \"\");\n        }\n        expression = expression.substring(1);\n   \
  \     Expression e = new Expression(expression);\n        return (int)e.eval();"
- '        return 0;'
- "        int result = operand.get(0);\n        int i = 0;\n        while (i < op.size())\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n            i++;\n\
  \        }\n        return result;"
- "        // code here\n        return 0;"
- "        if (op.size() == 0 || operand.size() == 0)\n            return 0;\n   \
  \     if (op.size() != operand.size() - 1)\n            return 0;\n        int res\
  \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n           \
  \ String s = op.get(i);\n            if (s.equals(\"+\"))\n                res +=\
  \ operand.get(i + 1);\n            else if (s.equals(\"-\"))\n                res\
  \ -= operand.get(i + 1);\n            else if (s.equals(\"*\"))\n              \
  \  res *= operand.get(i + 1);\n            else if (s.equals(\"/\"))\n         \
  \       res /= operand.get(i + 1);\n            else if (s.equals(\"**\"))\n   \
  \             res = (int)Math.pow(res, operand.get(i + 1));\n        }\n       \
  \ return res;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         res += operand.get(i + 1);\n                    break;\n             \
  \   case \"-\":\n                    res -= operand.get(i + 1);\n              \
  \      break;\n                case \"*\":\n                    res *= operand.get(i\
  \ + 1);\n                    break;\n                case \"//\":\n            \
  \        res /= operand.get(i + 1);\n                    break;\n              \
  \  case \"**\":\n                    res = (int) Math.pow(res, operand.get(i + 1));\n\
  \                    break;\n            }\n        }\n        return res;"
- '        return 0;'
- "        int ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                ans += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                ans\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n     \
  \       }\n        }\n        return ans;"
- "        // please write your code here\n        int result = operand.get(0);\n\
  \        int j = 0;\n        for(int i = 1; i < operand.size(); i++) {\n       \
  \     switch(op.get(j)) {\n                case \"+\":\n                    result\
  \ += operand.get(i);\n                    break;\n                case \"-\":\n\
  \                    result -= operand.get(i);\n                    break;\n   \
  \             case \"*\":\n                    result *= operand.get(i);\n     \
  \               break;\n                case \"//\":\n                    result\
  \ /= operand.get(i);\n                    break;\n                case \"**\":\n\
  \                    result = (int)Math.pow(result, operand.get(i));\n         \
  \           break;\n            }\n            j++;\n        }\n        return result;"
- "        if (op.size() + 1 != operand.size()) {\n            throw new IllegalArgumentException(\"\
  operator size + 1 != operand size\");\n        }\n        for (int i = 1; i < operand.size();\
  \ i++) {\n            if (op.get(i - 1).equals(\"+\")) {\n                operand.set(i,\
  \ operand.get(i - 1) + operand.get(i));\n            } else if (op.get(i - 1).equals(\"\
  -\")) {\n                operand.set(i, operand.get(i - 1) - operand.get(i));\n\
  \            } else if (op.get(i - 1).equals(\"*\")) {\n                operand.set(i,\
  \ operand.get(i - 1) * operand.get(i));\n            } else if (op.get(i - 1).equals(\"\
  //\")) {\n                operand.set(i, operand.get(i - 1) / operand.get(i));\n\
  \            } else if (op.get(i - 1).equals(\"**\")) {\n                operand.set(i,\
  \ (int) Math.pow(operand.get(i - 1), operand.get(i)));\n            } else {\n \
  \               throw new IllegalArgumentException(\"unknown operator\");\n    \
  \        }\n        }\n        return operand.get(operand.size() - 1);"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String o = op.get(i);\n            int o1 = operand.get(i);\n \
  \           int o2 = operand.get(i + 1);\n            if (o.equals(\"+\")) {\n \
  \               result = o1 + o2;\n            } else if (o.equals(\"-\")) {\n \
  \               result = o1 - o2;\n            } else if (o.equals(\"*\")) {\n \
  \               result = o1 * o2;\n            } else if (o.equals(\"//\")) {\n\
  \                result = o1 / o2;\n            } else if (o.equals(\"**\")) {\n\
  \                result = (int) Math.pow(o1, o2);\n            }\n        }\n  \
  \      return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  /\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  ^\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String operator = op.get(i);\n            Integer operand1 = operand.get(i);\n\
  \            Integer operand2 = operand.get(i + 1);\n            if (operator.equals(\"\
  +\")) {\n                result = operand1 + operand2;\n            } else if (operator.equals(\"\
  -\")) {\n                result = operand1 - operand2;\n            } else if (operator.equals(\"\
  *\")) {\n                result = operand1 * operand2;\n            } else if (operator.equals(\"\
  /\")) {\n                result = operand1 / operand2;\n            } else if (operator.equals(\"\
  **\")) {\n                result = (int) Math.pow(operand1, operand2);\n       \
  \     }\n        }\n        return result;"
- "        int ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                ans += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                ans\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n     \
  \       }\n        }\n        return ans;"
- '        return 0;'
- "        // code here\n        // Operator symbol and corresponding char\n     \
  \   final HashMap<String, Character> osc = new HashMap<String, Character>();\n \
  \       osc.put(\"+\", '+');\n        osc.put(\"-\", '-');\n        osc.put(\"*\"\
  , '*');\n        osc.put(\"/\", '/');\n        osc.put(\"^\", '^');\n        //\
  \ declare and initialize the equation string\n        String eq = operand.get(0).toString();\n\
  \        // iterate through the operator list\n        for (int i = 0; i < op.size();\
  \ i++) {\n            // append the operator and the next operand to the string\n\
  \            eq += osc.get(op.get(i)) + operand.get(i + 1).toString();\n       \
  \ }\n        // evaluate the equation, return the result\n        return new ScriptEngineManager().getEngineByName(\"\
  js\").eval(eq).toString().equals(\"Infinity\") ? 1 : Integer.parseInt(new ScriptEngineManager().getEngineByName(\"\
  js\").eval(eq).toString());"
- "      int val = operand.get(0);\n      for (int i = 0; i < op.size(); i++) {\n\
  \        switch (op.get(i)) {\n          case \"+\":\n            val += operand.get(i\
  \ + 1);\n            break;\n          case \"-\":\n            val -= operand.get(i\
  \ + 1);\n            break;\n          case \"*\":\n            val *= operand.get(i\
  \ + 1);\n            break;\n          case \"//\":\n            val /= operand.get(i\
  \ + 1);\n            break;\n          case \"**\":\n            val = (int) Math.pow(val,\
  \ operand.get(i + 1));\n            break;\n        }\n      }\n      return val;"
- "        StringBuilder sb = new StringBuilder();\n        sb.append(operand.get(0));\n\
  \        for (int i = 0; i < op.size(); i++) {\n            sb.append(op.get(i));\n\
  \            sb.append(operand.get(i + 1));\n        }\n        return ExpressionEvaluator.eval(sb.toString());"
- "        String temp = String.valueOf(operand.get(0));\n        for (int i = 0;\
  \ i < op.size(); i++) {\n            temp += op.get(i) + operand.get(i + 1);\n \
  \       }\n        return eval(temp);"
- "        int i = 1;\n        int result = operand.get(0);\n        for (String s\
  \ : op) {\n            int temp = operand.get(i);\n            switch (s) {\n  \
  \              case \"+\":\n                    result += temp;\n              \
  \      break;\n                case \"-\":\n                    result -= temp;\n\
  \                    break;\n                case \"*\":\n                    result\
  \ *= temp;\n                    break;\n                case \"//\":\n         \
  \           result /= temp;\n                    break;\n                case \"\
  **\":\n                    result = (int) Math.pow(result, temp);\n            \
  \        break;\n            }\n            i++;\n        }\n        return result;"
- '        throw new UnsupportedOperationException("You must implement this function!");'
- "        // code starts here.\n        int sum = operand.get(0);\n        for(int\
  \ i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n     \
  \       if(operator.equals(\"+\")) {\n                sum += operand.get(i+1);\n\
  \            }\n            else if(operator.equals(\"-\")) {\n                sum\
  \ -= operand.get(i+1);\n            }\n            else if(operator.equals(\"*\"\
  )) {\n                sum *= operand.get(i+1);\n            }\n            else\
  \ if(operator.equals(\"//\")) {\n                sum /= operand.get(i+1);\n    \
  \        }\n            else if(operator.equals(\"**\")) {\n                sum\
  \ = (int)Math.pow(sum, operand.get(i+1));\n            }\n        }\n        return\
  \ sum;\n        // code ends here."
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        int l = op.size();\n        int r = operand.get(0);\n        for (int i\
  \ = 0; i < l; i++) {\n            int o = operand.get(i + 1);\n            if (op.get(i).equals(\"\
  +\")) r += o;\n            else if (op.get(i).equals(\"-\")) r -= o;\n         \
  \   else if (op.get(i).equals(\"*\")) r *= o;\n            else if (op.get(i).equals(\"\
  //\")) r /= o;\n            else if (op.get(i).equals(\"**\")) r = (int)Math.pow(r,\
  \ o);\n        }\n        return r;"
- '        return evalExpression(buildExpression(op, operand), op.size() + 1);'
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String expr = op.get(i);\n            int n1 = operand.get(i);\n\
  \            int n2 = operand.get(i + 1);\n            switch (expr) {\n       \
  \         case \"+\":\n                    result = n1 + n2;\n                 \
  \   break;\n                case \"-\":\n                    result = n1 - n2;\n\
  \                    break;\n                case \"*\":\n                    result\
  \ = n1 * n2;\n                    break;\n                case \"//\":\n       \
  \             result = n1 / n2;\n                    break;\n                case\
  \ \"**\":\n                    result = (int) Math.pow(n1, n2);\n              \
  \      break;\n            }\n        }\n        return result;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        Integer result = operand.get(0);\n        for (int i = 0;\
  \ i < op.size(); i++) {\n            switch (op.get(i)) {\n                case\
  \ \"+\":\n                    result += operand.get(i + 1);\n                  \
  \  break;\n                case \"-\":\n                    result -= operand.get(i\
  \ + 1);\n                    break;\n                case \"*\":\n             \
  \       result *= operand.get(i + 1);\n                    break;\n            \
  \    case \"//\":\n                    result /= operand.get(i + 1);\n         \
  \           break;\n                case \"**\":\n                    result = (int)\
  \ Math.pow(result, operand.get(i + 1));\n                    break;\n          \
  \  }\n        }\n        return result;"
- "        if (op.size() == 0) {\n            return 0;\n        } else if (op.size()\
  \ == 1) {\n            return operand.get(0);\n        } else {\n            Integer\
  \ result = operand.get(0);\n            for (int i = 0; i < op.size(); i++) {\n\
  \                if (op.get(i).equals(\"+\")) {\n                    result += operand.get(i\
  \ + 1);\n                } else if (op.get(i).equals(\"-\")) {\n               \
  \     result -= operand.get(i + 1);\n                } else if (op.get(i).equals(\"\
  *\")) {\n                    result *= operand.get(i + 1);\n                } else\
  \ if (op.get(i).equals(\"//\")) {\n                    result /= operand.get(i +\
  \ 1);\n                } else if (op.get(i).equals(\"**\")) {\n                \
  \    result = (int) Math.pow(result, operand.get(i + 1));\n                }\n \
  \           }\n            return result;\n        }"
- '        return 0;'
- "        //return 0;\n        // Your code here\n        int n = op.size();\n  \
  \      int ans = operand.get(0);\n        for(int i = 0; i < n; i++) {\n       \
  \     if(op.get(i).equals(\"+\")) {\n                ans += operand.get(i+1);\n\
  \            } else if(op.get(i).equals(\"-\")) {\n                ans -= operand.get(i+1);\n\
  \            } else if(op.get(i).equals(\"*\")) {\n                ans *= operand.get(i+1);\n\
  \            } else if(op.get(i).equals(\"/\")) {\n                ans /= operand.get(i+1);\n\
  \            } else if(op.get(i).equals(\"**\")) {\n                ans = (int)Math.pow(ans,\
  \ operand.get(i+1));\n            }\n        }\n        return ans;"
- "      int result = operand.get(0);\n      int i = 1;\n      for (String operator\
  \ : op) {\n        switch (operator) {\n          case \"+\": result += operand.get(i);\n\
  \                    break;\n          case \"-\": result -= operand.get(i);\n \
  \                   break;\n          case \"*\": result *= operand.get(i);\n  \
  \                  break;\n          case \"//\": result /= operand.get(i);\n  \
  \                  break;\n          case \"**\": result = (int)Math.pow(result,\
  \ operand.get(i));\n                    break;\n        }\n        i++;\n      }\n\
  \      return result;"
- "        int curr = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         curr += operand.get(i + 1);\n                    break;\n            \
  \    case \"-\":\n                    curr -= operand.get(i + 1);\n            \
  \        break;\n                case \"*\":\n                    curr *= operand.get(i\
  \ + 1);\n                    break;\n                case \"//\":\n            \
  \        curr /= operand.get(i + 1);\n                    break;\n             \
  \   case \"**\":\n                    curr = (int) Math.pow(curr, operand.get(i\
  \ + 1));\n                    break;\n            }\n        }\n        return curr;"
- '        return 0;'
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        // Given `op`, an array of operators, and `operand`, an array of operands\n\
  \        // (2, 3, 4, 5), evaluate the operation 2 + 3 * 4 - 5.\n        // Hint:\
  \ this question is a little tricky. \n        // Note: The length of operator list\
  \ is equal to the length of operand list minus one.\n        // Operand is a list\
  \ of of non-negative integers.\n        // Operator list has at least one operator,\
  \ and operand list has at least two operands.\n        return 0;"
- '        // write your code here and return the result.'
- "        if (op.size() == 0 || operand.size() == 0) return 0;\n        int result\
  \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n           \
  \ String o = op.get(i);\n            int operand2 = operand.get(i + 1);\n      \
  \      if (o.equals(\"+\")) {\n                result += operand2;\n           \
  \ } else if (o.equals(\"-\")) {\n                result -= operand2;\n         \
  \   } else if (o.equals(\"*\")) {\n                result *= operand2;\n       \
  \     } else if (o.equals(\"/\")) {\n                result /= operand2;\n     \
  \       } else if (o.equals(\"**\")) {\n                result = result ^ operand2;\n\
  \            }\n        }\n        return result;"
- '        throw new RuntimeException("Not Implemented");'
- "        if (op.size() == 0 || operand.size() == 0) return 0;\n        if (op.size()\
  \ + 1 != operand.size()) return 0;\n        int result = operand.get(0);\n     \
  \   for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\"\
  )) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  -\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- '        return 0;'
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String str = op.get(i);\n            switch (str) {\n         \
  \       case \"+\":\n                    result += operand.get(i + 1);\n       \
  \             break;\n                case \"-\":\n                    result -=\
  \ operand.get(i + 1);\n                    break;\n                case \"*\":\n\
  \                    result *= operand.get(i + 1);\n                    break;\n\
  \                case \"//\":\n                    result /= operand.get(i + 1);\n\
  \                    break;\n                case \"**\":\n                    result\
  \ = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n  \
  \          }\n        }\n        return result;"
- "        int ret = 0;\n        return ret;"
- "        ArrayList<Integer> opd = new ArrayList<Integer>();\n        ArrayList<String>\
  \ ops = new ArrayList<String>();\n        String[] operators = {\"**\", \"//\",\
  \ \"*\", \"-\", \"+\"};\n        for (int i = 0; i < op.size(); i++) {\n       \
  \     if (ops.size() == 0) {\n                ops.add(op.get(i));\n            \
  \    continue;\n            }\n            for (int j = 0; j < operators.length;\
  \ j++) {\n                if (ops.get(ops.size() - 1).equals(operators[j])) {\n\
  \                    if (j < operators.length - 1 && operators[j + 1].equals(op.get(i)))\
  \ {\n                        continue;\n                    }\n                \
  \    else {\n                        ops.add(op.get(i));\n                     \
  \   break;\n                    }\n                }\n                else if (j\
  \ == operators.length - 1) {\n                    ops.add(op.get(i));\n        \
  \            break;\n                }\n            }\n        }\n        System.out.println(ops);\n\
  \        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"\
  **\")) {\n                int exp = operand.get(i + 1);\n                int base\
  \ = operand.get(i);\n                int result = 0;\n                for (int j\
  \ = 0; j < exp; j++) {\n                    result += base;\n                }\n\
  \                opd.add(result);\n            }\n            else if (ops.get(i).equals(\"\
  //\")) {\n                int val = operand.get(i);\n                int div = operand.get(i\
  \ + 1);\n                int quotient = 0;\n                while (val >= div) {\n\
  \                    val -= div;\n                    quotient++;\n            \
  \    }\n                opd.add(quotient);\n            }\n            else {\n\
  \                opd.add(operand.get(i));\n            }\n        }\n        System.out.println(opd);\n\
  \        int counter = 0;\n        while (counter < ops.size()) {\n            if\
  \ (ops.get(counter).equals"
- "        // write your code here\n        // please return the result of the evaluation\n\
  \        int temp = 0;\n        ArrayList<Integer> op1 = new ArrayList<Integer>();\n\
  \        ArrayList<String> op2 = new ArrayList<String>();\n        for(int i = 0;\
  \ i < op.size(); i++){\n            if(op.get(i).equals(\"*\") || op.get(i).equals(\"\
  /\")){\n                op1.add(operand.get(i));\n                op2.add(op.get(i));\n\
  \            }\n            else{\n                if(op1.size() > 0){\n       \
  \             if(op2.get(op2.size() - 1).equals(\"*\")){\n                     \
  \   operand.set(i, op1.get(op1.size() - 1) * operand.get(i));\n                \
  \        op1.remove(op1.size() - 1);\n                        op2.remove(op2.size()\
  \ - 1);\n                    }\n                    else{\n                    \
  \    operand.set(i, op1.get(op1.size() - 1) / operand.get(i));\n               \
  \         op1.remove(op1.size() - 1);\n                        op2.remove(op2.size()\
  \ - 1);\n                    }\n                }\n            }\n        }\n  \
  \      for(int i = 0; i < op.size(); i++){\n            switch(op.get(i)){\n   \
  \             case \"+\":\n                    temp += operand.get(i + 1);\n   \
  \                 break;\n                case \"-\":\n                    temp\
  \ -= operand.get(i + 1);\n                    break;\n                case \"*\"\
  :\n                    temp *= operand.get(i + 1);\n                    break;\n\
  \                case \"/\":\n                    temp /= operand.get(i + 1);\n\
  \                    break;\n                case \"^\":\n                    temp\
  \ = (int)Math.pow(temp, operand.get(i + 1));\n                    break;\n     \
  \       }\n        }\n        return temp;"
- "        // Write your code here!\n        return 0;"
- "        // Start with the first operand.\n        int res = operand.get(0);\n \
  \       // Start the operator index at zero, and the operand index at one.\n   \
  \     int opIndex = 0;\n        int opdIndex = 1;\n        // Loop as long as there\
  \ are operators.\n        while (opIndex < op.size()) {\n            // Perform\
  \ the operation.\n            String operation = op.get(opIndex);\n            int\
  \ operand2 = operand.get(opdIndex);\n            switch (operation) {\n        \
  \        case \"+\":\n                    res += operand2;\n                   \
  \ break;\n                case \"-\":\n                    res -= operand2;\n  \
  \                  break;\n                case \"*\":\n                    res\
  \ *= operand2;\n                    break;\n                case \"//\":\n     \
  \               res /= operand2;\n                    break;\n                case\
  \ \"**\":\n                    res = (int)Math.pow(res, operand2);\n           \
  \         break;\n            }\n            // Advance the operator and operand\
  \ index.\n            opIndex++;\n            opdIndex++;\n        }\n        return\
  \ res;"
- "        // Remove the -ve test cases\n        if (operand.stream().filter(c ->\
  \ c < 0).count() > 0) {\n            return -1;\n        }\n        // int rep =\
  \ operand.get(0);\n        // for (int i = 0; i < op.size(); i++) {\n        //\
  \     int o = operand.get(i + 1);\n        //     switch (op.get(i)) {\n       \
  \ //         case \"+\":\n        //             rep += o;\n        //         \
  \    break;\n        //         case \"-\":\n        //             rep -= o;\n\
  \        //             break;\n        //         case \"*\":\n        //     \
  \        rep *= o;\n        //             break;\n        //         case \"//\"\
  :\n        //             rep /= o;\n        //             break;\n        // \
  \        case \"**\":\n        //             rep = (int) Math.pow(rep, o);\n  \
  \      //             break;\n        //     }\n        // }\n        // return\
  \ rep;\n        return operand.stream().reduce(0, (acc, ele) -> acc + ele);"
- '        return 0;'
- "        // write code here\n        // the first operator\n        int i = 0;\n\
  \        int j = 0;\n        int result = 0;\n        int first = operand.get(i);\n\
  \        int second = operand.get(i + 1);\n        if(op.get(j).equals(\"+\")) {\n\
  \            result = first + second;\n        } else if(op.get(j).equals(\"-\"\
  )) {\n            result = first - second;\n        } else if(op.get(j).equals(\"\
  *\")) {\n            result = first * second;\n        } else if(op.get(j).equals(\"\
  //\")) {\n            result = first / second;\n        } else if(op.get(j).equals(\"\
  **\")) {\n            result = (int)Math.pow(first, second);\n        }\n      \
  \  j++;\n        // the rest operators\n        while(j < op.size()) {\n       \
  \     int tmp = operand.get(i + 2);\n            if(op.get(j).equals(\"+\")) {\n\
  \                result += tmp;\n            } else if(op.get(j).equals(\"-\"))\
  \ {\n                result -= tmp;\n            } else if(op.get(j).equals(\"*\"\
  )) {\n                result *= tmp;\n            } else if(op.get(j).equals(\"\
  //\")) {\n                result /= tmp;\n            } else if(op.get(j).equals(\"\
  **\")) {\n                result = (int)Math.pow(result, tmp);\n            }\n\
  \            j++;\n        }\n        return result;"
- "        // Enter your code here.\n        // Build your algebraic expression using\
  \ the operator and operand lists, then evaluate \n        // the expression and\
  \ return its value.\n        // This is very easy in JavaScript. However in Java\
  \ you should use reflection.\n        // Hint: https://docs.oracle.com/javase/tutorial/reflect/member/methodInvocation.html\n\
  \        // Hint: https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html\n\
  \        // Note: You may assume that all operators are of one char length and are\
  \ only: +, -, *, /, **.\n        // Note: All operators have standard priorities\
  \ (like the school).\n        // Note: a ** b is equal to Math.pow(a, b) in Java.\n\
  \        // Note: All inputs are valid.\n        // Note: ** has the highest priority.\n\
  \        // Note: *, / and // has equal priorities which is higher than +, -.\n\
  \        // Note: / is not floor division (It's normal division).\n        // Note:\
  \ // is floor division.\n        BigInteger x = BigInteger.valueOf(operand.get(0));\n\
  \        BigInteger y = BigInteger.valueOf(operand.get(1));\n        ArrayList<String>\
  \ newOp = new ArrayList<>();\n        ArrayList<Integer> newOpd = new ArrayList<>();\n\
  \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
  **\")) {\n                x = BigInteger.valueOf(Math.pow(x.doubleValue(), y.doubleValue()));\n\
  \                if (i == op.size() - 1) {\n                    return x.intValue();\n\
  \                }\n                else {\n                    y = BigInteger.valueOf(operand.get(i\
  \ + 2));\n                }\n            }\n            else {\n               \
  \ newOp.add(op.get(i));\n                newOpd.add(x.intValue());\n           \
  \     x = y;\n                y = BigInteger.valueOf(operand.get(i + 2));\n    \
  \        }\n        }\n        for (int i = 0; i < newOp."
- "        // FILL IN CODE\n        int result = operand.get(0);\n        for (int\
  \ i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n   \
  \             result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  -\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        if (op.size() == 1) {\n            int left = operand.get(0);\n       \
  \     int right = operand.get(1);\n            switch (op.get(0)) {\n          \
  \      case \"+\":\n                    return left + right;\n                case\
  \ \"-\":\n                    return left - right;\n                case \"*\":\n\
  \                    return left * right;\n                case \"//\":\n      \
  \              return left / right;\n                case \"**\":\n            \
  \        return (int) Math.pow(left, right);\n            }\n        }\n       \
  \ return -1;"
- '        return 0;'
- "        // This is a classic problem of converting infix expression to postfix\
  \ expression and \n        // then evaluating the postfix expression.\n        //\
  \ 1. Infix to postfix conversion: https://www.geeksforgeeks.org/stack-set-2-infix-to-postfix/\n\
  \        // 2. Postfix evaluation: https://www.geeksforgeeks.org/stack-set-4-evaluation-postfix-expression/\n\
  \        // Note:\n        // See cpp solution for detailed implementation.\n  \
  \      // Time complexity: O(N)\n        // Space complexity: O(N)\n        int\
  \ size = op.size();\n        int len = size + 1;\n        ArrayList<String> postfix\
  \ = new ArrayList<String>();\n        Stack<String> s = new Stack<String>();\n \
  \       for (int i = 0; i < len; i++) {\n            if (i < size) {\n         \
  \       if (s.isEmpty()) {\n                    s.push(op.get(i));\n           \
  \     } else {\n                    String op1 = op.get(i);\n                  \
  \  String op2 = s.peek();\n                    int prec1 = getPrecedence(op1);\n\
  \                    int prec2 = getPrecedence(op2);\n                    if (prec1\
  \ > prec2) {\n                        s.push(op1);\n                    } else {\n\
  \                        while (!s.isEmpty() && prec1 <= prec2) {\n            \
  \                postfix.add(s.pop());\n                            if (!s.isEmpty())\
  \ {\n                                op2 = s.peek();\n                         \
  \       prec2 = getPrecedence(op2);\n                            }\n           \
  \             }\n                        s.push(op1);\n                    }\n \
  \               }\n            } else {\n                postfix.add(String.valueOf(operand.get(i)));\n\
  \            }\n        }\n        while (!s.isEmpty()) {\n            postfix.add(s.pop());\n\
  \        }\n        Stack<Integer> nums = new Stack<Integer>();\n        for (String\
  \ p : postfix) {\n            if (isOperator(p)) {\n                int num2 = nums.pop();\n\
  \                int num1 = nums"
- "        Stack<Integer> st = new Stack<>();\n        for (int i = 0; i < op.size();\
  \ i++) {\n            switch (op.get(i)) {\n                case \"+\":\n      \
  \              st.push(operand.get(i) + operand.get(i + 1));\n                 \
  \   break;\n                case \"-\":\n                    st.push(operand.get(i)\
  \ - operand.get(i + 1));\n                    break;\n                case \"*\"\
  :\n                    st.push(operand.get(i) * operand.get(i + 1));\n         \
  \           break;\n                case \"//\":\n                    st.push(operand.get(i)\
  \ / operand.get(i + 1));\n                    break;\n                case \"**\"\
  :\n                    st.push((int) Math.pow(operand.get(i), operand.get(i + 1)));\n\
  \                    break;\n            }\n        }\n        return st.pop();"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\": res += operand.get(i\
  \ + 1); break;\n                case \"-\": res -= operand.get(i + 1); break;\n\
  \                case \"*\": res *= operand.get(i + 1); break;\n               \
  \ case \"//\": res /= operand.get(i + 1); break;\n                case \"**\": res\
  \ = (int)Math.pow(res, operand.get(i + 1)); break;\n            }\n        }\n \
  \       return res;"
- "        int s = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
  \            if (op.get(i).equals(\"+\")) {\n                s += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                s -=\
  \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n     \
  \           s *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                s /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                s = (int) Math.pow(s, operand.get(i + 1));\n         \
  \   }\n        }\n        return s;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String o = op.get(i);\n            if (o.equals(\"+\")) result\
  \ += operand.get(i + 1);\n            else if (o.equals(\"-\")) result -= operand.get(i\
  \ + 1);\n            else if (o.equals(\"*\")) result *= operand.get(i + 1);\n \
  \           else if (o.equals(\"//\")) result /= operand.get(i + 1);\n         \
  \   else if (o.equals(\"**\")) result = (int) Math.pow(result, operand.get(i + 1));\n\
  \        }\n        return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- '        return -1;'
- '        return 1;'
- '        return _doAlgebra(op, operand, 0, operand.size() - 1);'
- "        // This is a method that uses List Iterator.\n        Iterator<String>\
  \ opIter = op.iterator();\n        Iterator<Integer> operandIter = operand.iterator();\n\
  \        int prevOperand = operandIter.next();\n        int result = prevOperand;\n\
  \        while (opIter.hasNext()) {\n            String operator = opIter.next();\n\
  \            int operand1 = operandIter.next();\n            switch (operator) {\n\
  \                case \"+\":\n                    result = prevOperand + operand1;\n\
  \                    break;\n                case \"-\":\n                    result\
  \ = prevOperand - operand1;\n                    break;\n                case \"\
  *\":\n                    result = prevOperand * operand1;\n                   \
  \ break;\n                case \"//\":\n                    result = prevOperand\
  \ / operand1;\n                    break;\n                case \"**\":\n      \
  \              result = (int) Math.pow(prevOperand, operand1);\n               \
  \     break;\n            }\n            prevOperand = result;\n        }\n    \
  \    return result;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int r = operand.get(0);\n        for (int i = 0; i < op.size();\
  \ i++) {\n            switch (op.get(i)) {\n                case \"+\":\n      \
  \              r += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    r -= operand.get(i + 1);\n             \
  \       break;\n                case \"*\":\n                    r *= operand.get(i\
  \ + 1);\n                    break;\n                case \"//\":\n            \
  \        r /= operand.get(i + 1);\n                    break;\n                case\
  \ \"**\":\n                    r = (int) Math.pow(r, operand.get(i + 1));\n    \
  \                break;\n            }\n        }\n        return r;"
- "        Stack<Integer> s = new Stack<>();\n        for (int i = 0; i < op.size();\
  \ i++) {\n            int r = operand.get(i+1);\n            String t = op.get(i);\n\
  \            if (t.equals(\"+\"))\n                r = s.pop() + r;\n          \
  \  else if (t.equals(\"-\"))\n                r = s.pop() - r;\n            else\
  \ if (t.equals(\"*\"))\n                r = s.pop() * r;\n            else if (t.equals(\"\
  /\"))\n                r = s.pop() / r;\n            else if (t.equals(\"^\"))\n\
  \                r = (int)Math.pow(s.pop(), r);\n            s.push(r);\n      \
  \  }\n        return s.pop();"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\": result += operand.get(i\
  \ + 1); break;\n                case \"-\": result -= operand.get(i + 1); break;\n\
  \                case \"*\": result *= operand.get(i + 1); break;\n            \
  \    case \"//\": result /= operand.get(i + 1); break;\n                case \"\
  **\": result = (int)Math.pow(result, operand.get(i + 1)); break;\n            }\n\
  \        }\n        return result;"
- "        int a = operand.get(0);\n        int b = operand.get(1);\n        int c\
  \ = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
  +\")) {\n                c = a + b;\n            } else if (op.get(i).equals(\"\
  -\")) {\n                c = a - b;\n            } else if (op.get(i).equals(\"\
  *\")) {\n                c = a * b;\n            } else if (op.get(i).equals(\"\
  //\")) {\n                c = a / b;\n            } else if (op.get(i).equals(\"\
  **\")) {\n                c = (int) Math.pow(a, b);\n            }\n           \
  \ a = c;\n            b = operand.get(i + 2);\n        }\n        return c;"
- '        return -1;'
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- '        // Your code here'
- "        for (int i = 1; i < op.size(); i++) {\n            String operation = op.get(i);\n\
  \            Integer op2 = operand.get(i + 1);\n            Integer op1 = operand.get(i);\n\
  \            if (operation.equals(\"//\")) {\n                operand.set(i, op1\
  \ / op2);\n            } else if (operation.equals(\"*\")) {\n                operand.set(i,\
  \ op1 * op2);\n            } else if (operation.equals(\"+\")) {\n             \
  \   operand.set(i, op1 + op2);\n            } else if (operation.equals(\"-\"))\
  \ {\n                operand.set(i, op1 - op2);\n            } else if (operation.equals(\"\
  **\")) {\n                operand.set(i, (int) Math.pow(op1, op2));\n          \
  \  }\n            operand.remove(i + 1);\n            op.remove(i);\n          \
  \  i--;\n        }\n        return operand.get(0);"
- '        return 0;'
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            result = doAlgebra(result, op.get(i), operand.get(i + 1));\n  \
  \      }\n        return result;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int result = operand.get(0);\n        for (int i = 0; i <\
  \ op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n              \
  \  result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\"\
  )) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        // Implement your code here.\n        return 0;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- "        // write code here\n        String ops = op.toString();\n        String[]\
  \ opers = ops.split(\",\");\n        String operands = operand.toString();\n   \
  \     String[] operandsArr = operands.split(\",\");\n        int[] oper = new int[operandsArr.length];\n\
  \        for(int i = 0; i < operandsArr.length; i++) {\n            oper[i] = Integer.parseInt(operandsArr[i]);\n\
  \        }\n        String out = \"\";\n        for(int i = 0; i < opers.length;\
  \ i++) {\n            out += String.valueOf(oper[i]) + opers[i];\n        }\n  \
  \      out += String.valueOf(oper[oper.length - 1]);\n        int result = 0;\n\
  \        try {\n            result = (int) Integer.parseInt(out);\n        } catch(Exception\
  \ e) {\n            result = (int) Math.floor(eval(out));\n        }\n        return\
  \ result;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int cur = operand.get(i + 1);\n            if (op.get(i).equals(\"\
  +\")) {\n                res += cur;\n            } else if (op.get(i).equals(\"\
  -\")) {\n                res -= cur;\n            } else if (op.get(i).equals(\"\
  *\")) {\n                res *= cur;\n            } else if (op.get(i).equals(\"\
  //\")) {\n                res /= cur;\n            } else if (op.get(i).equals(\"\
  **\")) {\n                res = (int) Math.pow(res, cur);\n            }\n     \
  \   }\n        return res;"
- "        int n = op.size();\n        int j = 0;\n        int i = 1;\n        while\
  \ (n-- > 0) {\n            if (op.get(j).equals(\"*\")) {\n                operand.set(j,\
  \ operand.get(j) * operand.get(i));\n                operand.remove(i);\n      \
  \          op.remove(j);\n            } else if (op.get(j).equals(\"/\")) {\n  \
  \              operand.set(j, operand.get(j) / operand.get(i));\n              \
  \  operand.remove(i);\n                op.remove(j);\n            } else if (op.get(j).equals(\"\
  +\")) {\n                operand.set(j, operand.get(j) + operand.get(i));\n    \
  \            operand.remove(i);\n                op.remove(j);\n            } else\
  \ if (op.get(j).equals(\"-\")) {\n                operand.set(j, operand.get(j)\
  \ - operand.get(i));\n                operand.remove(i);\n                op.remove(j);\n\
  \            } else if (op.get(j).equals(\"^\")) {\n                operand.set(j,\
  \ (int) Math.pow(operand.get(j), operand.get(i)));\n                operand.remove(i);\n\
  \                op.remove(j);\n            }\n        }\n        return operand.get(0);"
- "      int res = operand.get(0);\n      for (int i = 0; i < op.size(); i++) {\n\
  \        int a = operand.get(i);\n        int b = operand.get(i + 1);\n        if\
  \ (op.get(i).equals(\"+\")) {\n          res = a + b;\n        } else if (op.get(i).equals(\"\
  -\")) {\n          res = a - b;\n        } else if (op.get(i).equals(\"*\")) {\n\
  \          res = a * b;\n        } else if (op.get(i).equals(\"//\")) {\n      \
  \    res = a / b;\n        } else if (op.get(i).equals(\"**\")) {\n          res\
  \ = (int) Math.pow(a, b);\n        }\n      }\n      return res;"
- "        int ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) ans += operand.get(i + 1);\n     \
  \       else if (op.get(i).equals(\"-\")) ans -= operand.get(i + 1);\n         \
  \   else if (op.get(i).equals(\"*\")) ans *= operand.get(i + 1);\n            else\
  \ if (op.get(i).equals(\"//\")) ans /= operand.get(i + 1);\n            else if\
  \ (op.get(i).equals(\"**\")) ans = (int) Math.pow(ans, operand.get(i + 1));\n  \
  \      }\n        return ans;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int op2 = operand.get(i + 1);\n            if (op.get(i).equals(\"\
  +\")) {\n                result += op2;\n            } else if (op.get(i).equals(\"\
  -\")) {\n                result -= op2;\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= op2;\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= op2;\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, op2);\n            }\n\
  \        }\n        return result;"
- "\t\tint ans = operand.get(0);\n\t\tfor(int i = 0; i < op.size(); i++) {\n\t\t\t\
  switch(op.get(i)) {\n\t\t\t\tcase \"+\": ans += operand.get(i+1); break;\n\t\t\t\
  \tcase \"-\": ans -= operand.get(i+1); break;\n\t\t\t\tcase \"*\": ans *= operand.get(i+1);\
  \ break;\n\t\t\t\tcase \"//\": ans /= operand.get(i+1); break;\n\t\t\t\tcase \"\
  **\": ans = (int)Math.pow(ans, operand.get(i+1)); break;\n\t\t\t}\n\t\t}\n\t\treturn\
  \ ans;"
- '        return 0;'
- "        // write your code here\n        return 0;"
- "        int ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                ans += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                ans\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n     \
  \       }\n        }\n        return ans;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int exp = 0;\n        while(op.size() > 0) {\n           \
  \ if(exp == 0) {\n                exp = operate(operand.get(0), operand.get(1),\
  \ op.get(0));\n                operand.remove(0);\n                operand.remove(0);\n\
  \                op.remove(0);\n            } else {\n                exp = operate(exp,\
  \ operand.get(0), op.get(0));\n                operand.remove(0);\n            \
  \    op.remove(0);\n            }\n        }\n        return exp;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        // fill in your code\n        int result = operand.get(0);\n        operand.remove(0);\n\
  \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
  +\")) {\n                result += operand.get(i);\n            } else if (op.get(i).equals(\"\
  -\")) {\n                result -= operand.get(i);\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= operand.get(i);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i));\n   \
  \         }\n        }\n        return result;"
- "        // Write your code here\n        return 2;"
- "        // write your code here\n        Stack<Integer> stack = new Stack<>();\n\
  \        stack.push(operand.get(0));\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int first = stack.pop();\n            int second = operand.get(i\
  \ + 1);\n            String operator = op.get(i);\n            switch (operator)\
  \ {\n                case \"+\":\n                    stack.push(first + second);\n\
  \                    break;\n                case \"-\":\n                    stack.push(first\
  \ - second);\n                    break;\n                case \"*\":\n        \
  \            stack.push(first * second);\n                    break;\n         \
  \       case \"//\":\n                    stack.push(first / second);\n        \
  \            break;\n                case \"**\":\n                    stack.push((int)\
  \ Math.pow(first, second));\n                    break;\n            }\n       \
  \ }\n        return stack.pop();"
- "        if (op.size() == 0)\n            return operand.get(0);\n        int j\
  \ = 0;\n        int res = operand.get(0);\n        for (int i = 0; i < op.size();\
  \ i++) {\n            if (op.get(i).equals(\"+\")) {\n                res += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                res\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n     \
  \       }\n        }\n        return res;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  /\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- '        return 0;'
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int nextOperand = operand.get(i + 1);\n            switch (op.get(i))\
  \ {\n                case \"+\":\n                    result += nextOperand;\n \
  \                   break;\n                case \"-\":\n                    result\
  \ -= nextOperand;\n                    break;\n                case \"*\":\n   \
  \                 result *= nextOperand;\n                    break;\n         \
  \       case \"//\":\n                    result /= nextOperand;\n             \
  \       break;\n                case \"**\":\n                    result = (int)\
  \ Math.pow(result, nextOperand);\n                    break;\n            }\n  \
  \      }\n        return result;"
- '        return 0;'
- "        String operation = String.join(\"\", op);\n        String[] strArr = Stream.concat(Stream.of(String.valueOf(operand.get(0))),\
  \ Stream.of(operation.split(\"\"))).toArray(String[]::new);\n        operand.remove(0);\n\
  \        int result = Integer.parseInt(String.join(\"\", strArr));\n        for\
  \ (int i = 0; i < operand.size(); i++) {\n            int temp = operand.get(i);\n\
  \            char c = op.get(i).charAt(0);\n            switch (c) {\n         \
  \       case '+':\n                    result += temp;\n                    break;\n\
  \                case '-':\n                    result -= temp;\n              \
  \      break;\n                case '*':\n                    result *= temp;\n\
  \                    break;\n                case '/':\n                    result\
  \ /= temp;\n                    break;\n                case '^':\n            \
  \        result = (int) Math.pow(result, temp);\n                    break;\n  \
  \          }\n        }\n        return result;"
- "        // Implement here\n        return 0;"
- "\t\tint res = operand.get(0);\n\t\tint iter = 1;\n\t\twhile (iter < operand.size())\
  \ {\n\t\t\tswitch (op.get(iter - 1)) {\n\t\t\t\tcase \"+\":\n\t\t\t\t\tres += operand.get(iter);\n\
  \t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\tres -= operand.get(iter);\n\t\t\
  \t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\tres *= operand.get(iter);\n\t\t\t\t\
  \tbreak;\n\t\t\t\tcase \"//\":\n\t\t\t\t\tres /= operand.get(iter);\n\t\t\t\t\t\
  break;\n\t\t\t\tcase \"**\":\n\t\t\t\t\tres = (int) Math.pow(res, operand.get(iter));\n\
  \t\t\t\t\tbreak;\n\t\t\t}\n\t\t\titer++;\n\t\t}\n\t\treturn res;"
- '        return 0;'
- "        if (op.size() == 0)\n            return operand.get(0);\n        int ret\
  \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n           \
  \ if (op.get(i).equals(\"+\"))\n                ret += operand.get(i + 1);\n   \
  \         else if (op.get(i).equals(\"-\"))\n                ret -= operand.get(i\
  \ + 1);\n            else if (op.get(i).equals(\"*\"))\n                ret *= operand.get(i\
  \ + 1);\n            else if (op.get(i).equals(\"//\"))\n                ret /=\
  \ operand.get(i + 1);\n            else if (op.get(i).equals(\"**\"))\n        \
  \        ret = (int) Math.pow(ret, operand.get(i + 1));\n        }\n        return\
  \ ret;"
- "        //i need to write a recursive method for this\n        int len = op.size();\n\
  \        if(op.size() == 1) {\n            switch(op.get(0)) {\n               \
  \ case \"+\": return operand.get(0) + operand.get(1);\n                case \"-\"\
  : return operand.get(0) - operand.get(1);\n                case \"*\": return operand.get(0)\
  \ * operand.get(1);\n                case \"//\": return operand.get(0) / operand.get(1);\n\
  \                case \"**\": return (int)Math.pow(operand.get(0), operand.get(1));\n\
  \            }\n        }\n        else {\n            for(int i = 0; i < len; i++)\
  \ {\n                String s = op.get(i);\n                int oper = operand.get(i\
  \ + 1);\n                switch(s) {\n                    case \"+\": operand.set(i,\
  \ operand.get(i) + oper); break;\n                    case \"-\": operand.set(i,\
  \ operand.get(i) - oper); break;\n                    case \"*\": operand.set(i,\
  \ operand.get(i) * oper); break;\n                    case \"//\": operand.set(i,\
  \ operand.get(i) / oper); break;\n                    case \"**\": operand.set(i,\
  \ (int)Math.pow(operand.get(i), oper)); break;\n                }\n            \
  \    operand.remove(i + 1);\n                op.remove(i);\n                return\
  \ doAlgebra(op, operand);\n            }\n        }\n        return 0;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int num = operand.get(i + 1);\n            if (op.get(i).equals(\"\
  +\")) {\n                result += num;\n            } else if (op.get(i).equals(\"\
  -\")) {\n                result -= num;\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= num;\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= num;\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, num);\n            }\n\
  \        }\n        return result;"
- "        // Iterate through the operator list and do the operator on operand list.\n\
  \        // If the op is '+', '-', '*', '/', '%', then just do the operation.\n\
  \        // If the op is '**', then do the ** operation.\n        int result = operand.get(0);\n\
  \        for (int i = 0; i < op.size(); i++) {\n            String op_ = op.get(i);\n\
  \            int operand_ = operand.get(i + 1);\n            if (op_.equals(\"+\"\
  )) {\n                result += operand_;\n            } else if (op_.equals(\"\
  -\")) {\n                result -= operand_;\n            } else if (op_.equals(\"\
  *\")) {\n                result *= operand_;\n            } else if (op_.equals(\"\
  /\")) {\n                result /= operand_;\n            } else if (op_.equals(\"\
  %\")) {\n                result %= operand_;\n            } else if (op_.equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand_);\n         \
  \   }\n        }\n        return result;"
- "        // Your code goes here\n        int result = operand.get(0);\n        for\
  \ (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n\
  \                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  -\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  *\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        if (op.size() != operand.size() - 1) return 0;\n        int\
  \ l = op.size();\n        int[] stack = new int[l + 1];\n        int i = 0;\n  \
  \      int p = 0;\n        while (i < l) {\n            String v = op.get(i);\n\
  \            switch (v) {\n                case \"+\":\n                    stack[p\
  \ - 1] = stack[p - 1] + stack[p];\n                    --p;\n                  \
  \  break;\n                case \"-\":\n                    stack[p - 1] = stack[p\
  \ - 1] - stack[p];\n                    --p;\n                    break;\n     \
  \           case \"*\":\n                    stack[p - 1] = stack[p - 1] * stack[p];\n\
  \                    --p;\n                    break;\n                case \"//\"\
  :\n                    stack[p - 1] = stack[p - 1] / stack[p];\n               \
  \     --p;\n                    break;\n                case \"**\":\n         \
  \           stack[p - 1] = (int)Math.pow(stack[p - 1], stack[p]);\n            \
  \        --p;\n                    break;\n                default:\n          \
  \          stack[p] = operand.get(i);\n                    ++p;\n              \
  \      break;\n            }\n            ++i;\n        }\n        return stack[0];"
- "        int a = operand.get(0);\n        int b = operand.get(1);\n        for (int\
  \ i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n   \
  \             a += b;\n            } else if (op.get(i).equals(\"-\")) {\n     \
  \           a -= b;\n            } else if (op.get(i).equals(\"*\")) {\n       \
  \         a *= b;\n            } else if (op.get(i).equals(\"/\")) {\n         \
  \       a /= b;\n            } else if (op.get(i).equals(\"%\")) {\n           \
  \     a %= b;\n            } else if (op.get(i).equals(\"**\")) {\n            \
  \    a = (int) Math.pow(a, b);\n            }\n            b = operand.get(i + 2);\n\
  \        }\n        return a;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         res += operand.get(i + 1);\n                    break;\n             \
  \   case \"-\":\n                    res -= operand.get(i + 1);\n              \
  \      break;\n                case \"*\":\n                    res *= operand.get(i\
  \ + 1);\n                    break;\n                case \"//\":\n            \
  \        res /= operand.get(i + 1);\n                    break;\n              \
  \  case \"**\":\n                    res = (int) Math.pow(res, operand.get(i + 1));\n\
  \                    break;\n            }\n        }\n        return res;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- '        return 0;'
- "        // enter your code here\n        return 0;"
- "        // Write your code here\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n\
  \            int x = operand.get(i);\n            int y = operand.get(i+1);\n  \
  \          if(operator.equals(\"+\")) {\n                res.add(x+y);\n       \
  \     } else if(operator.equals(\"-\")) {\n                res.add(x-y);\n     \
  \       } else if(operator.equals(\"*\")) {\n                res.add(x*y);\n   \
  \         } else if(operator.equals(\"/\")) {\n                res.add(x/y);\n \
  \           } else if(operator.equals(\"**\")) {\n                res.add((int)Math.pow(x,y));\n\
  \            }\n        }\n        return res.get(res.size()-1);"
- "        if (op.size() != operand.size() - 1) {\n            return -1;\n      \
  \  }\n        int result = operand.get(0);\n        for (int i = 0; i < op.size();\
  \ i++) {\n            String s = op.get(i);\n            int op1 = operand.get(i);\n\
  \            int op2 = operand.get(i + 1);\n            switch (s) {\n         \
  \       case \"+\":\n                    result = result + op2;\n              \
  \      break;\n                case \"-\":\n                    result = result\
  \ - op2;\n                    break;\n                case \"*\":\n            \
  \        result = result * op2;\n                    break;\n                case\
  \ \"//\":\n                    result = result / op2;\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ op2);\n                    break;\n                default:\n                \
  \    break;\n            }\n        }\n        return result;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String o = op.get(i);\n            if (o.equals(\"+\")) res +=\
  \ operand.get(i + 1);\n            else if (o.equals(\"-\")) res -= operand.get(i\
  \ + 1);\n            else if (o.equals(\"*\")) res *= operand.get(i + 1);\n    \
  \        else if (o.equals(\"//\")) res /= operand.get(i + 1);\n            else\
  \ if (o.equals(\"**\")) res = (int) Math.pow(res, operand.get(i + 1));\n       \
  \ }\n        return res;"
- "        if (op.size() != operand.size() - 1) return -1;\n        var it = operand.iterator();\n\
  \        int prev = it.next();\n        while (it.hasNext()) {\n            int\
  \ next = it.next();\n            var operator = op.remove(0);\n            switch\
  \ (operator) {\n                case \"+\":\n                    prev += next;\n\
  \                    break;\n                case \"-\":\n                    prev\
  \ -= next;\n                    break;\n                case \"*\":\n          \
  \          prev *= next;\n                    break;\n                case \"//\"\
  :\n                    prev /= next;\n                    break;\n             \
  \   case \"**\":\n                    prev = (int)Math.pow(prev, next);\n      \
  \              break;\n                default:\n                    return -1;\n\
  \            }\n        }\n        return prev;"
- "        int ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int operand2 = operand.get(i + 1);\n            String operator\
  \ = op.get(i);\n            if (operator.equals(\"+\")) {\n                ans +=\
  \ operand2;\n            } else if (operator.equals(\"-\")) {\n                ans\
  \ -= operand2;\n            } else if (operator.equals(\"*\")) {\n             \
  \   ans *= operand2;\n            } else if (operator.equals(\"//\")) {\n      \
  \          ans /= operand2;\n            } else if (operator.equals(\"**\")) {\n\
  \                ans = (int) Math.pow(ans, operand2);\n            }\n        }\n\
  \        return ans;"
- "        if (op.size() == 0) {\n            return operand.get(0);\n        }\n\
  \        if (op.size() == 1) {\n            return operand.get(0) + operand.get(1);\n\
  \        }\n        Stack<Integer> stack = new Stack<>();\n        for (int i =\
  \ op.size() - 1; i >= 0; i--) {\n            switch (op.get(i)) {\n            \
  \    case \"//\":\n                    stack.push(operand.get(i) / operand.get(i\
  \ + 1));\n                    break;\n                case \"**\":\n           \
  \         stack.push((int) Math.pow(operand.get(i), operand.get(i + 1)));\n    \
  \                break;\n                case \"*\":\n                    stack.push(operand.get(i)\
  \ * operand.get(i + 1));\n                    break;\n                case \"-\"\
  :\n                    stack.push(operand.get(i) - operand.get(i + 1));\n      \
  \              break;\n                case \"+\":\n                    stack.push(operand.get(i)\
  \ + operand.get(i + 1));\n                    break;\n            }\n        }\n\
  \        int result = 0;\n        while (!stack.isEmpty()) {\n            result\
  \ += stack.pop();\n        }\n        return result;"
- '        return 0;'
- "        int acc = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int n1 = acc;\n            int n2 = operand.get(i + 1);\n     \
  \       switch (op.get(i)) {\n                case \"+\":\n                    acc\
  \ = n1 + n2;\n                    break;\n                case \"-\":\n        \
  \            acc = n1 - n2;\n                    break;\n                case \"\
  *\":\n                    acc = n1 * n2;\n                    break;\n         \
  \       case \"//\":\n                    acc = n1 / n2;\n                    break;\n\
  \                case \"**\":\n                    acc = (int) Math.pow(n1, n2);\n\
  \                    break;\n            }\n        }\n        return acc;"
- "        int index = 0;\n        while (index < op.size()) {\n            if (op.get(index).equals(\"\
  *\")) {\n                operand.set(index, operand.get(index) * operand.get(index\
  \ + 1));\n                operand.remove(index + 1);\n                op.remove(index);\n\
  \            } else if (op.get(index).equals(\"/\")) {\n                operand.set(index,\
  \ operand.get(index) / operand.get(index + 1));\n                operand.remove(index\
  \ + 1);\n                op.remove(index);\n            } else if (op.get(index).equals(\"\
  +\")) {\n                operand.set(index, operand.get(index) + operand.get(index\
  \ + 1));\n                operand.remove(index + 1);\n                op.remove(index);\n\
  \            } else if (op.get(index).equals(\"-\")) {\n                operand.set(index,\
  \ operand.get(index) - operand.get(index + 1));\n                operand.remove(index\
  \ + 1);\n                op.remove(index);\n            } else if (op.get(index).equals(\"\
  ^\")) {\n                operand.set(index, (int) Math.pow(operand.get(index), operand.get(index\
  \ + 1)));\n                operand.remove(index + 1);\n                op.remove(index);\n\
  \            } else {\n                index++;\n            }\n        }\n    \
  \    return operand.get(0);"
- "        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
  +\")) {\n                int result = operand.get(i) + operand.get(i + 1);\n   \
  \             operand.set(i, result);\n                operand.remove(i + 1);\n\
  \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
  -\")) {\n                int result = operand.get(i) - operand.get(i + 1);\n   \
  \             operand.set(i, result);\n                operand.remove(i + 1);\n\
  \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
  *\")) {\n                int result = operand.get(i) * operand.get(i + 1);\n   \
  \             operand.set(i, result);\n                operand.remove(i + 1);\n\
  \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
  /\")) {\n                int result = operand.get(i) / operand.get(i + 1);\n   \
  \             operand.set(i, result);\n                operand.remove(i + 1);\n\
  \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
  **\")) {\n                int result = (int) Math.pow(operand.get(i), operand.get(i\
  \ + 1));\n                operand.set(i, result);\n                operand.remove(i\
  \ + 1);\n                op.remove(i);\n                i--;\n            }\n  \
  \      }\n        return operand.get(0);"
- "        // Write your code here\n        return 0;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- "        ArrayList<Integer> temp = new ArrayList<Integer>();\n        int l = op.size();\n\
  \        int k = 0;\n        temp.add(operand.get(0));\n        for(int i = 0; i\
  \ < l; i++) {\n            if(op.get(i).equals(\"**\")) {\n                temp.set(k,(int)Math.pow(temp.get(k),operand.get(i+1)));\n\
  \            }\n            else {\n                temp.add(operand.get(i+1));\n\
  \                k += 1;\n            }\n        }\n        int ans = temp.get(0);\n\
  \        k = 1;\n        for(int i = 0; i < l; i++) {\n            if(op.get(i).equals(\"\
  +\")) {\n                ans += temp.get(k);\n            }\n            else if(op.get(i).equals(\"\
  -\")) {\n                ans -= temp.get(k);\n            }\n            else if(op.get(i).equals(\"\
  *\")) {\n                ans *= temp.get(k);\n            }\n            else if(op.get(i).equals(\"\
  //\")) {\n                ans /= temp.get(k);\n            }\n            k += 1;\n\
  \        }\n        return ans;"
- "        // your code here\n        System.out.println(op);\n        System.out.println(operand);\n\
  \        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- "        Integer ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                ans += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                ans\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n     \
  \       }\n        }\n        return ans;"
- "        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n\
  \        stack.push(operand.get(0));\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int b = operand.get(i + 1);\n            switch (op.get(i)) {\n\
  \                case \"+\":\n                    stack.push(stack.pop() + b);\n\
  \                    break;\n                case \"-\":\n                    stack.push(stack.pop()\
  \ - b);\n                    break;\n                case \"*\":\n             \
  \       stack.push(stack.pop() * b);\n                    break;\n             \
  \   case \"//\":\n                    stack.push(stack.pop() / b);\n           \
  \         break;\n                case \"**\":\n                    stack.push((int)\
  \ Math.pow(stack.pop(), b));\n                    break;\n            }\n      \
  \  }\n        return stack.pop();"
- "        if (op.size() != operand.size() - 1) return -1;\n        Stack<Integer>\
  \ s = new Stack<>();\n        for (int i = 0; i < op.size(); i++) {\n          \
  \  int a = operand.get(i);\n            int b = operand.get(i + 1);\n          \
  \  String op_i = op.get(i);\n            if (op_i.equals(\"+\")) s.push(a + b);\n\
  \            else if (op_i.equals(\"-\")) s.push(a - b);\n            else if (op_i.equals(\"\
  *\")) s.push(a * b);\n            else if (op_i.equals(\"/\")) s.push(a / b);\n\
  \            else if (op_i.equals(\"**\")) s.push((int)Math.pow(a, b));\n      \
  \  }\n        return s.pop();"
- "        ArrayList<String> operator = new ArrayList<String>();\n        operator.add(\"\
  +\");\n        operator.add(\"-\");\n        operator.add(\"*\");\n        operator.add(\"\
  /\");\n        int res = operand.get(0);\n        int index = 0;\n        while\
  \ (operand.size() > index + 1) {\n            String op_str = op.get(index);\n \
  \           if (operator.contains(op_str)) {\n                switch (op_str) {\n\
  \                    case \"+\":\n                        res += operand.get(index\
  \ + 1);\n                        break;\n                    case \"-\":\n     \
  \                   res -= operand.get(index + 1);\n                        break;\n\
  \                    case \"*\":\n                        res *= operand.get(index\
  \ + 1);\n                        break;\n                    case \"/\":\n     \
  \                   res /= operand.get(index + 1);\n                        break;\n\
  \                }\n            }\n            index++;\n        }\n        return\
  \ res;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        // push op\n        Stack<String> stack = new Stack<>();\n        for (String\
  \ o : op) stack.push(o);\n        Stack<Integer> number = new Stack<>();\n     \
  \   for (Integer i : operand) number.push(i);\n        while (stack.size() > 0)\
  \ {\n            String op1 = stack.pop();\n            Integer op2 = number.pop();\n\
  \            Integer op3 = number.pop();\n            switch (op1) {\n         \
  \       case \"+\":\n                    number.push(op2 + op3);\n             \
  \       break;\n                case \"-\":\n                    number.push(op2\
  \ - op3);\n                    break;\n                case \"*\":\n           \
  \         number.push(op2 * op3);\n                    break;\n                case\
  \ \"//\":\n                    number.push(op2 / op3);\n                    break;\n\
  \                case \"**\":\n                    number.push((int)Math.pow(op2,\
  \ op3));\n                    break;\n            }\n        }\n        return number.pop();"
- "        // The array of operators.\n        String operators[] = op.toArray(new\
  \ String[op.size()]);\n        // The array of operands.\n        Integer operands[]\
  \ = operand.toArray(new Integer[operand.size()]);\n        // The result of the\
  \ operation.\n        int result = 0;\n        // Check if there is any operators.\n\
  \        if (operators.length != 0) {\n            // Get the first operator.\n\
  \            String operator = operators[0];\n            // Perform the operation\
  \ on the first number and second number.\n            switch (operator) {\n    \
  \            case \"+\":\n                    result = operands[0] + operands[1];\n\
  \                    break;\n                case \"-\":\n                    result\
  \ = operands[0] - operands[1];\n                    break;\n                case\
  \ \"*\":\n                    result = operands[0] * operands[1];\n            \
  \        break;\n                case \"//\":\n                    result = operands[0]\
  \ / operands[1];\n                    break;\n                case \"**\":\n   \
  \                 result = (int) Math.pow(operands[0], operands[1]);\n         \
  \           break;\n            }\n            // Remove the first operator and\
  \ first number in the list.\n            operators = Arrays.copyOfRange(operators,\
  \ 1, operators.length);\n            operands = Arrays.copyOfRange(operands, 1,\
  \ operands.length);\n            // Create the new operator list.\n            ArrayList<String>\
  \ tmpOperators = new ArrayList<String>(Arrays.asList(operators));\n            //\
  \ Create the new operand list.\n            ArrayList<Integer> tmpOperands = new\
  \ ArrayList<Integer>(Arrays.asList(operands));\n            // Prepend the first\
  \ result to the operand list.\n            tmpOperands.add(0, result);\n       \
  \     // Return the result of the operation.\n            return doAlgebra(tmpOperators,\
  \ tmpOperands);\n        }\n        // Return the last result of the operation.\n\
  \        return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int second = operand.get(i + 1);\n            String curr_operator\
  \ = op.get(i);\n            switch (curr_operator) {\n                case \"+\"\
  :\n                    result += second;\n                    break;\n         \
  \       case \"-\":\n                    result -= second;\n                   \
  \ break;\n                case \"*\":\n                    result *= second;\n \
  \                   break;\n                case \"//\":\n                    result\
  \ /= second;\n                    break;\n                case \"**\":\n       \
  \             result = (int) Math.pow(result, second);\n                    break;\n\
  \            }\n        }\n        return result;"
- '        return 0;'
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- "        // Fill this in.\n        int res = operand.get(0);\n        int index\
  \ = 0;\n        for(int i = 1; i < operand.size(); i++) {\n            switch(op.get(index))\
  \ {\n                case \"+\":\n                    res += operand.get(i);\n \
  \                   break;\n                case \"-\":\n                    res\
  \ -= operand.get(i);\n                    break;\n                case \"*\":\n\
  \                    res *= operand.get(i);\n                    break;\n      \
  \          case \"//\":\n                    res /= operand.get(i);\n          \
  \          break;\n                case \"**\":\n                    res = (int)Math.pow(res,\
  \ operand.get(i));\n                    break;\n            }\n            index++;\n\
  \        }\n        return res;"
- "        // create a new list that has the same elements as op, but with first element\
  \ prepended\n        ArrayList<String> newOp = new ArrayList<String>();\n      \
  \  newOp.add(\"+\");\n        newOp.addAll(op);\n        // create a new list that\
  \ has the same elements as operand, but with first element prepended\n        ArrayList<Integer>\
  \ newOperand = new ArrayList<Integer>();\n        newOperand.add(0);\n        newOperand.addAll(operand);\n\
  \        // recursively evaluate the result\n        return doAlgebra_(newOp, newOperand);"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) result += operand.get(i + 1);\n  \
  \          else if (op.get(i).equals(\"-\")) result -= operand.get(i + 1);\n   \
  \         else if (op.get(i).equals(\"*\")) result *= operand.get(i + 1);\n    \
  \        else if (op.get(i).equals(\"//\")) result /= operand.get(i + 1);\n    \
  \        else if (op.get(i).equals(\"**\")) result = (int) Math.pow(result, operand.get(i\
  \ + 1));\n        }\n        return result;"
- '        return -1;'
- "        ArrayList<String> op2 = new ArrayList<String>();\n        // Use the two\
  \ given lists to build the algebric expression, and return the evaluation of this\
  \ expression.\n        // Write your code here...\n        \n        // If you find\
  \ it hard to write the whole program, try to write a function that only take two\
  \ parameters \n        // (for example, 'a' and 'b') and returns the result of an\
  \ operation: a 'operator' b, where operator can be \n        // one of the following:\
  \ '+', '-', '*', '//', '**'.\n        // For example, the function call might look\
  \ like this:\n        // int result = calculate('+', 2, 3);\n        // if '+' is\
  \ passed in as an argument, then the function should return 2 + 3 = 5.\n       \
  \ // Use this function and your knowledge of arrays to write doAlgebra.\n\n    \
  \    // One solution to this problem is to use a stack. We can push operands onto\
  \ the stack as we encounter them,\n        // and push operators onto a separate\
  \ stack. When we encounter a closing parenthesis, we pop two operands and \n   \
  \     // one operator and evaluate them. Finally, we evaluate the expression left\
  \ in the stack. \n        int[] arr = new int[operand.size()];\n        for (int\
  \ i = 0; i < operand.size(); i++) {\n            arr[i] = operand.get(i);\n    \
  \    }\n        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
  \ {\n                case \"**\":\n                    arr[i + 1] = (int) Math.pow(arr[i],\
  \ arr[i + 1]);\n                    arr[i] = 0;\n                    break;\n  \
  \              case \"//\":\n                    arr[i + 1] = arr[i] / arr[i + 1];\n\
  \                    arr[i] = 0;\n                    break;\n                case\
  \ \"*\":\n                    arr[i + 1] = arr[i] * arr[i + 1];\n              \
  \      arr[i] = 0;\n                    break;\n                case \"-\":\n  \
  \                  arr[i + 1] = arr[i] - arr[i + 1];\n                    arr[i]"
- "        System.out.println(op);\n        System.out.println(operand);\n       \
  \ int operandSize = operand.size();\n        int operatorSize = op.size();\n   \
  \     Stack<Integer> stack = new Stack<>();\n        stack.push(operand.get(0));\n\
  \        int i = 1;\n        int j = 0;\n        while (i < operandSize) {\n   \
  \         int b = operand.get(i);\n            int a = stack.pop();\n          \
  \  int result = 0;\n            switch (op.get(j)) {\n                case \"+\"\
  :\n                    result = a + b;\n                    break;\n           \
  \     case \"-\":\n                    result = a - b;\n                    break;\n\
  \                case \"*\":\n                    result = a * b;\n            \
  \        break;\n                case \"//\":\n                    result = a /\
  \ b;\n                    break;\n                case \"**\":\n               \
  \     result = (int) Math.pow(a, b);\n                    break;\n            }\n\
  \            i++;\n            j++;\n            stack.push(result);\n        }\n\
  \        return stack.pop();"
- "        int answer = operand.get(0);\n        int i = 0;\n        for (Integer\
  \ o : operand) {\n            if (i++ == 0) continue;\n            if (op.get(i\
  \ - 1).equals(\"+\")) answer += o;\n            else if (op.get(i - 1).equals(\"\
  -\")) answer -= o;\n            else if (op.get(i - 1).equals(\"*\")) answer *=\
  \ o;\n            else if (op.get(i - 1).equals(\"/\")) answer /= o;\n         \
  \   else if (op.get(i - 1).equals(\"^\")) answer = (int) Math.pow(answer, o);\n\
  \        }\n        return answer;"
- "        StringBuilder sb = new StringBuilder();\n        int len = op.size();\n\
  \        for (int i = 0; i < len; i++) {\n            sb.append(operand.get(i));\n\
  \            sb.append(op.get(i));\n        }\n        sb.append(operand.get(len));\n\
  \        String expression = sb.toString();\n        // long result = 0;\n     \
  \   // ScriptEngineManager mgr = new ScriptEngineManager();\n        // ScriptEngine\
  \ engine = mgr.getEngineByName(\"JavaScript\");\n        // try {\n        //  \
  \   result = (long) engine.eval(expression);\n        // } catch (ScriptException\
  \ e) {\n        //     System.out.println(\"exception: \" + e);\n        // }\n\
  \        // return (int) result;\n        return (int) ScriptEngineUtils.evalJs(expression);"
- "        // Insert your code here\n        return 0;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- '        return 0;'
- "        int num = 0;\n        ArrayList<String> tmpOp = new ArrayList<>();\n  \
  \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
  **\")) {\n                operand.set(i + 1, (int) Math.pow(operand.get(i), operand.get(i\
  \ + 1)));\n                operand.remove(i);\n                op.remove(i);\n \
  \               i--;\n            }\n        }\n        for (int i = 0; i < op.size();\
  \ i++) {\n            if (op.get(i).equals(\"*\")) {\n                operand.set(i\
  \ + 1, operand.get(i) * operand.get(i + 1));\n                operand.remove(i);\n\
  \                op.remove(i);\n                i--;\n            }\n        }\n\
  \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
  /\")) {\n                operand.set(i + 1, operand.get(i) / operand.get(i + 1));\n\
  \                operand.remove(i);\n                op.remove(i);\n           \
  \     i--;\n            }\n        }\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                operand.set(i +\
  \ 1, operand.get(i) + operand.get(i + 1));\n                operand.remove(i);\n\
  \                op.remove(i);\n                i--;\n            }\n        }\n\
  \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
  -\")) {\n                operand.set(i + 1, operand.get(i) - operand.get(i + 1));\n\
  \                operand.remove(i);\n                op.remove(i);\n           \
  \     i--;\n            }\n        }\n        return operand.get(0);"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            result = solve(result, operand.get(i + 1), op.get(i));\n      \
  \  }\n        return result;"
- "        Stack<Integer> s = new Stack<>();\n        for (int i = 0; i < op.size();\
  \ i++) {\n            String op_ = op.get(i);\n            Integer operand2 = operand.get(i\
  \ + 1);\n            Integer operand1 = s.pop();\n            if (op_.equals(\"\
  +\")) {\n                s.push(operand1 + operand2);\n            } else if (op_.equals(\"\
  -\")) {\n                s.push(operand1 - operand2);\n            } else if (op_.equals(\"\
  *\")) {\n                s.push(operand1 * operand2);\n            } else if (op_.equals(\"\
  /\")) {\n                s.push(operand1 / operand2);\n            } else if (op_.equals(\"\
  ^\")) {\n                s.push((int) Math.pow(operand1, operand2));\n         \
  \   }\n        }\n        return s.pop();"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String opr = op.get(i);\n            int a = operand.get(i);\n\
  \            int b = operand.get(i + 1);\n            result = doOperation(opr,\
  \ a, b);\n        }\n        return result;"
- '        return 0;'
- "        int result = operand.get(0);\n        int length = op.size();\n       \
  \ for (int i = 0; i < length; i++) {\n            switch (op.get(i)) {\n       \
  \         case \"+\":\n                    result += operand.get(i + 1);\n     \
  \               break;\n                case \"-\":\n                    result\
  \ -= operand.get(i + 1);\n                    break;\n                case \"*\"\
  :\n                    result *= operand.get(i + 1);\n                    break;\n\
  \                case \"//\":\n                    result /= operand.get(i + 1);\n\
  \                    break;\n                case \"**\":\n                    result\
  \ = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n  \
  \          }\n        }\n        return result;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                res += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                res\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  /\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n     \
  \       }\n        }\n        return res;"
- "        // Write your code here...\n        int length = op.size();\n        int[]\
  \ arr = new int[length + 1];\n        int i = 0;\n        for (Integer x : operand)\
  \ {\n            arr[i] = x;\n            i++;\n        }\n        int res = arr[0];\n\
  \        i = 0;\n        for (String o : op) {\n            switch (o) {\n     \
  \           case \"+\":\n                    res += arr[i + 1];\n              \
  \      break;\n                case \"-\":\n                    res -= arr[i + 1];\n\
  \                    break;\n                case \"*\":\n                    res\
  \ *= arr[i + 1];\n                    break;\n                case \"//\":\n   \
  \                 res /= arr[i + 1];\n                    break;\n             \
  \   case \"**\":\n                    res = (int) Math.pow(res, arr[i + 1]);\n \
  \                   break;\n            }\n            i++;\n        }\n       \
  \ return res;"
- '        return 0;'
- "        // your code goes here\n        int answer = operand.get(0);\n        for(int\
  \ i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
  \  case \"+\": answer += operand.get(i+1);\n                break;\n           \
  \     case \"-\": answer -= operand.get(i+1);\n                break;\n        \
  \        case \"*\": answer *= operand.get(i+1);\n                break;\n     \
  \           case \"//\": answer /= operand.get(i+1);\n                break;\n \
  \               case \"**\": answer = (int)Math.pow(answer, operand.get(i+1));\n\
  \                break;\n            }\n        }\n        return answer;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String o = op.get(i);\n            int r = operand.get(i + 1);\n\
  \            switch (o) {\n                case \"+\":\n                    result\
  \ += r;\n                    break;\n                case \"-\":\n             \
  \       result -= r;\n                    break;\n                case \"*\":\n\
  \                    result *= r;\n                    break;\n                case\
  \ \"//\":\n                    result /= r;\n                    break;\n      \
  \          case \"**\":\n                    result = (int) Math.pow(result, r);\n\
  \                    break;\n            }\n        }\n        return result;"
- "        // Write your code here\n        int result = operand.get(0);\n       \
  \ for (int i = 0; i < op.size(); i++) {\n            String currentOp = op.get(i);\n\
  \            int nextOperand = operand.get(i + 1);\n            switch (currentOp)\
  \ {\n                case \"+\":\n                    result += nextOperand;\n \
  \                   break;\n                case \"-\":\n                    result\
  \ -= nextOperand;\n                    break;\n                case \"*\":\n   \
  \                 result *= nextOperand;\n                    break;\n         \
  \       case \"//\":\n                    result /= nextOperand;\n             \
  \       break;\n                case \"**\":\n                    result = (int)\
  \ Math.pow(result, nextOperand);\n                    break;\n            }\n  \
  \      }\n        return result;"
- "        Deque<Object> q = new ArrayDeque<>();\n        for (int i = 0; i < op.size();\
  \ i++) {\n            q.offer(operand.get(i));\n            q.offer(op.get(i));\n\
  \        }\n        q.offer(operand.get(operand.size() - 1));\n        ArrayList<String>\
  \ op1 = new ArrayList<>(Arrays.asList(\"*\", \"/\", \"%\"));\n        ArrayList<String>\
  \ op2 = new ArrayList<>(Arrays.asList(\"+\", \"-\"));\n        while (q.size() >\
  \ 1) {\n            if (op1.contains(q.peekLast())) {\n                int c = (int)\
  \ q.pollLast();\n                int b = (int) q.pollLast();\n                String\
  \ opr = (String) q.pollLast();\n                int a = 0;\n                if (q.peekLast()\
  \ instanceof Integer) {\n                    a = (int) q.pollLast();\n         \
  \       }\n                if (opr.equals(\"*\")) {\n                    q.offer(a\
  \ * b);\n                } else if (opr.equals(\"/\")) {\n                    q.offer(a\
  \ / b);\n                } else {\n                    q.offer(a % b);\n       \
  \         }\n            } else if (op2.contains(q.peekLast())) {\n            \
  \    int c = (int) q.pollLast();\n                int b = (int) q.pollLast();\n\
  \                String opr = (String) q.pollLast();\n                int a = 0;\n\
  \                if (q.peekLast() instanceof Integer) {\n                    a =\
  \ (int) q.pollLast();\n                }\n                if (opr.equals(\"+\"))\
  \ {\n                    q.offer(a + b);\n                } else {\n           \
  \         q.offer(a - b);\n                }\n            }\n        }\n       \
  \ return (int) q.pollLast();"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String o = op.get(i);\n            int a = operand.get(i);\n  \
  \          int b = operand.get(i + 1);\n            result = doOperation(result,\
  \ o, b);\n        }\n        return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            switch (op.get(i)) {\n                case \"+\":\n           \
  \         result += operand.get(i + 1);\n                    break;\n          \
  \      case \"-\":\n                    result -= operand.get(i + 1);\n        \
  \            break;\n                case \"*\":\n                    result *=\
  \ operand.get(i + 1);\n                    break;\n                case \"//\":\n\
  \                    result /= operand.get(i + 1);\n                    break;\n\
  \                case \"**\":\n                    result = (int) Math.pow(result,\
  \ operand.get(i + 1));\n                    break;\n            }\n        }\n \
  \       return result;"
- "        // Algebra logic here\n        int result = operand.get(0);\n        for\
  \ (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n        \
  \        case \"+\": result += operand.get(i + 1); break;\n                case\
  \ \"-\": result -= operand.get(i + 1); break;\n                case \"*\": result\
  \ *= operand.get(i + 1); break;\n                case \"//\": result /= operand.get(i\
  \ + 1); break;\n                case \"**\": result = (int) Math.pow(result, operand.get(i\
  \ + 1)); break;\n            }\n        }\n        return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String curOp = op.get(i);\n            int op2 = operand.get(i\
  \ + 1);\n            if (curOp.equals(\"+\")) result += op2;\n            else if\
  \ (curOp.equals(\"-\")) result -= op2;\n            else if (curOp.equals(\"*\"\
  )) result *= op2;\n            else if (curOp.equals(\"//\")) result /= op2;\n \
  \           else if (curOp.equals(\"**\")) result = (int) Math.pow(result, op2);\n\
  \        }\n        return result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String o = op.get(i);\n            int v = operand.get(i + 1);\n\
  \            switch (o) {\n                case \"+\":\n                    result\
  \ += v;\n                    break;\n                case \"-\":\n             \
  \       result -= v;\n                    break;\n                case \"*\":\n\
  \                    result *= v;\n                    break;\n                case\
  \ \"//\":\n                    result /= v;\n                    break;\n      \
  \          case \"**\":\n                    result = (int) Math.pow(result, v);\n\
  \                    break;\n            }\n        }\n        return result;"
- '        return 0;'
- "        // Write your code here!\n        int total = operand.get(0);\n       \
  \ for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n      \
  \          case \"+\":\n                    total += operand.get(i+1);\n       \
  \             break;\n                case \"-\":\n                    total -=\
  \ operand.get(i+1);\n                    break;\n                case \"*\":\n \
  \                   total *= operand.get(i+1);\n                    break;\n   \
  \             case \"//\":\n                    total /= operand.get(i+1);\n   \
  \                 break;\n                case \"**\":\n                    total\
  \ = (int)Math.pow(total, operand.get(i+1));\n                    break;\n      \
  \      }\n        }\n        return total;"
- "        int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            String c = op.get(i);\n            if (c.equals(\"+\")) res +=\
  \ operand.get(i + 1);\n            else if (c.equals(\"-\")) res -= operand.get(i\
  \ + 1);\n            else if (c.equals(\"*\")) res *= operand.get(i + 1);\n    \
  \        else if (c.equals(\"/\")) res /= operand.get(i + 1);\n            else\
  \ if (c.equals(\"^\")) res = (int) Math.pow(res, operand.get(i + 1));\n        }\n\
  \        return res;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        // Return the answer\n        return 0;"
- "        // Write your code here!\n        int result = operand.get(0);\n      \
  \  for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n  \
  \          if (o.equals(\"+\")) {\n                result += operand.get(i + 1);\n\
  \            } else if (o.equals(\"-\")) {\n                result -= operand.get(i\
  \ + 1);\n            } else if (o.equals(\"*\")) {\n                result *= operand.get(i\
  \ + 1);\n            } else if (o.equals(\"//\")) {\n                result /= operand.get(i\
  \ + 1);\n            } else if (o.equals(\"**\")) {\n                result = (int)\
  \ Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return\
  \ result;"
- "        if (op.size() != operand.size() - 1) return -1;\n        for (int i = 0;\
  \ i < op.size(); i++) {\n            int operand1 = operand.get(i);\n          \
  \  int operand2 = operand.get(i + 1);\n            String operator = op.get(i);\n\
  \            if (operator.equals(\"+\")) operand.set(i + 1, operand1 + operand2);\n\
  \            else if (operator.equals(\"-\")) operand.set(i + 1, operand1 - operand2);\n\
  \            else if (operator.equals(\"*\")) operand.set(i + 1, operand1 * operand2);\n\
  \            else if (operator.equals(\"//\")) operand.set(i + 1, operand1 / operand2);\n\
  \            else if (operator.equals(\"**\")) operand.set(i + 1, (int) Math.pow(operand1,\
  \ operand2));\n            else return -1;\n        }\n        return operand.get(operand.size()\
  \ - 1);"
- "        // use two stacks to hold the operands and operators respectively.\n  \
  \      // always pop two operands and one operator\n        // check the operator\
  \ and apply the corresponding math operation\n        // push the result to the\
  \ operand stack\n        Stack<Integer> num = new Stack<>();\n        Stack<String>\
  \ opp = new Stack<>();\n        for (int i = operand.size() - 1; i >= 0; i--) {\n\
  \            num.push(operand.get(i));\n        }\n        for (int i = op.size()\
  \ - 1; i >= 0; i--) {\n            opp.push(op.get(i));\n        }\n        while\
  \ (!opp.isEmpty()) {\n            String curr = opp.pop();\n            int a =\
  \ num.pop();\n            int b = num.pop();\n            if (curr.equals(\"+\"\
  )) {\n                num.push(a + b);\n            } else if (curr.equals(\"-\"\
  )) {\n                num.push(a - b);\n            } else if (curr.equals(\"*\"\
  )) {\n                num.push(a * b);\n            } else if (curr.equals(\"//\"\
  )) {\n                num.push(a / b);\n            } else if (curr.equals(\"**\"\
  )) {\n                num.push((int) Math.pow(a, b));\n            }\n        }\n\
  \        return num.pop();"
- "        String operator = String.join(\"\", op);\n        String operands = String.join(\"\
  \", operand.stream().map(String::valueOf).collect(Collectors.toList()));\n     \
  \   String expression = operands.substring(0,1);\n        for (int i = 0; i < operator.length();\
  \ i++) {\n            expression += operator.substring(i, i+1) + operands.substring(i+1,\
  \ i+2);\n        }\n        int result = 0;\n        try {\n            ScriptEngineManager\
  \ mgr = new ScriptEngineManager();\n            ScriptEngine engine = mgr.getEngineByName(\"\
  JavaScript\");\n            result = (int)engine.eval(expression);\n        } catch\
  \ (ScriptException e) {\n            e.printStackTrace();\n        }\n        return\
  \ result;"
- "        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
  \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
  \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n  \
  \              result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  //\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
  **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
  \            }\n        }\n        return result;"
- "        int ret = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
  \ {\n            int x = operand.get(i);\n            int y = operand.get(i + 1);\n\
  \            String s = op.get(i);\n            if (s.equals(\"+\")) {\n       \
  \         ret += y;\n            } else if (s.equals(\"-\")) {\n               \
  \ ret -= y;\n            } else if (s.equals(\"*\")) {\n                ret *= y;\n\
  \            } else if (s.equals(\"//\")) {\n                ret /= y;\n       \
  \     } else if (s.equals(\"**\")) {\n                ret = (int) Math.pow(ret,\
  \ y);\n            }\n        }\n        return ret;"
- '        return -1;'
- '        return 0;'
- "        int num1 = operand.get(0);\n        int num2 = operand.get(1);\n      \
  \  int total = 0;\n        if (op.get(0).equals(\"+\")){\n            total = num1\
  \ + num2;\n        }\n        else if (op.get(0).equals(\"-\")){\n            total\
  \ = num1 - num2;\n        }\n        else if (op.get(0).equals(\"*\")){\n      \
  \      total = num1 * num2;\n        }\n        else if (op.get(0).equals(\"//\"\
  )){\n            total = num1 / num2;\n        }\n        else if (op.get(0).equals(\"\
  **\")){\n            total = (int) Math.pow(num1, num2);\n        }\n        return\
  \ total;"
- "        // Insert your code here\n        int result = operand.get(0);\n      \
  \  for (int i = 0; i < op.size(); i++) {\n            String opStr = op.get(i);\n\
  \            int operand1 = operand.get(i);\n            int operand2 = operand.get(i\
  \ + 1);\n            result = doOperation(opStr, operand1, operand2);\n        }\n\
  \        return result;"
- "        // Write your code here\n        return 0;"
language: java
name: HumanEval_160_do_algebra
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given two lists operator, and operand. The first list has\
  \ basic algebra operations, and \n    // the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n    // expression and return the\
  \ evaluation of this expression.\n    // The basic algebra operations:\n    // Addition\
  \ ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
  \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
  \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
  \ => result = 9\n    // Note:\n    // The length of operator list is equal to the\
  \ length of operand list minus one.\n    // Operand is a list of of non-negative\
  \ integers.\n    // Operator list has at least one operator, and operand list has\
  \ at least two operands.\n    public static int doAlgebra(ArrayList<String> op,\
  \ ArrayList<Integer> operand) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
  \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))),\
  \ (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5)))) == (37));\n\
  \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"\
  *\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
  \ (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
  //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3, (int)4))))\
  \ == (8));\n    }\n\n}\n"
