completions:
- "        char [] s = message.toCharArray();\n        String vowels = \"aeiou\";\n\
  \        String upperVowels = vowels.toUpperCase();\n        String rest = \"bcdfghjklmnpqrstvwxyz\"\
  ;\n        String upperRest = rest.toUpperCase();\n        char [] restChars = rest.toCharArray();\n\
  \        char [] upperRestChars = upperRest.toCharArray();\n        char [] vowelsChars\
  \ = vowels.toCharArray();\n        char [] upperVowelsChars = upperVowels.toCharArray();\n\
  \        for (int i = 0; i < s.length; i++) {\n            if (s[i] == ' ') {\n\
  \                continue;\n            }\n            if (Character.isUpperCase(s[i]))\
  \ {\n                s[i] = Character.toLowerCase(s[i]);\n            }\n      \
  \      if (vowels.indexOf(s[i]) != -1) {\n                s[i] = restChars[(vowels.indexOf(s[i])\
  \ + 2) % 5];\n            } else {\n                s[i] = vowelsChars[(rest.indexOf(s[i])\
  \ + 2) % 19];\n            }\n            if (Character.isUpperCase(message.charAt(i)))\
  \ {\n                s[i] = Character.toUpperCase(s[i]);\n            }\n      \
  \  }\n        return new String(s);"
- "        if (message == null) {\n            return null;\n        }\n        if\
  \ (message.isEmpty()) {\n            return \"\";\n        }\n        StringBuilder\
  \ sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++)\
  \ {\n            char ch = message.charAt(i);\n            if (Character.isLetter(ch))\
  \ {\n                if (Character.isUpperCase(ch)) {\n                    sb.append(Character.toLowerCase(ch));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(ch));\n\
  \                }\n            } else {\n                sb.append(ch);\n     \
  \       }\n        }\n        System.out.println(sb.toString());\n        String\
  \ encoded = new String(sb);\n        return encoded;"
- "        StringBuilder result = new StringBuilder();\n        String vowels = \"\
  aeiou\";\n        String vowels2 = \"cdfghjklmnpqrstvwxyz\";\n        for (int i\
  \ = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n \
  \           if (vowels.indexOf(c) > -1) {\n                result.append(vowels2.charAt(vowels.indexOf(c)));\n\
  \            } else if (vowels2.indexOf(c) > -1) {\n                result.append(vowels.charAt(vowels2.indexOf(c)));\n\
  \            } else {\n                result.append(c);\n            }\n      \
  \  }\n        return result.toString();"
- "        int[] shifted = new int[message.length()];\n        int[] enc = new int[message.length()];\n\
  \        int[] vowels = {65, 69, 73, 79, 85};\n        int[] vowelTrans = {67, 71,\
  \ 75, 81, 85};\n        for (int i = 0; i < message.length(); i++) {\n         \
  \   shifted[i] = (int) message.charAt(i);\n            if (shifted[i] >= 65 && shifted[i]\
  \ <= 90) {\n                shifted[i] += 32;\n            }\n            if (Arrays.binarySearch(vowels,\
  \ shifted[i]) > -1) {\n                enc[i] = vowelTrans[Arrays.binarySearch(vowels,\
  \ shifted[i])];\n            } else {\n                enc[i] = shifted[i];\n  \
  \          }\n        }\n        String ans = new String(enc, 0, enc.length);\n\
  \        return ans;"
- "        char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length;\
  \ i++) {\n            if (Character.isLetter(letters[i])) {\n                char\
  \ letter = letters[i];\n                if (Character.isUpperCase(letter)) {\n \
  \                   letters[i] = Character.toLowerCase(letter);\n              \
  \  } else {\n                    letters[i] = Character.toUpperCase(letter);\n \
  \               }\n                switch (letter) {\n                    case 'a':\n\
  \                        letters[i] = 'c';\n                        break;\n   \
  \                 case 'e':\n                        letters[i] = 'g';\n       \
  \                 break;\n                    case 'i':\n                      \
  \  letters[i] = 'k';\n                        break;\n                    case 'o':\n\
  \                        letters[i] = 'q';\n                        break;\n   \
  \                 case 'u':\n                        letters[i] = 's';\n       \
  \                 break;\n                    case 'A':\n                      \
  \  letters[i] = 'C';\n                        break;\n                    case 'E':\n\
  \                        letters[i] = 'G';\n                        break;\n   \
  \                 case 'I':\n                        letters[i] = 'K';\n       \
  \                 break;\n                    case 'O':\n                      \
  \  letters[i] = 'Q';\n                        break;\n                    case 'U':\n\
  \                        letters[i] = 'S';\n                        break;\n   \
  \             }\n            }\n        }\n        return new String(letters);"
- "        return message.chars()\n            .mapToObj(c -> (char) c)\n        \
  \    .map(c -> c.toString())\n            .map(s -> encodeLetter(s))\n         \
  \   .reduce(\"\", (s1, s2) -> s1 + s2);"
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String\
  \ newMessage = \"\";\n        String lowerCase = message.toLowerCase();\n      \
  \  String upperCase = message.toUpperCase();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            if (!(Character.isLetter(message.charAt(i)))) {\n        \
  \        newMessage += message.charAt(i);\n            } else if (lowerCase.charAt(i)\
  \ == message.charAt(i)) {\n                newMessage += upperCase.charAt(i);\n\
  \            } else {\n                newMessage += lowerCase.charAt(i);\n    \
  \        }\n        }\n        for (int i = 0; i < newMessage.length(); i++) {\n\
  \            if (vowels.length == 5) {\n                if (newMessage.charAt(i)\
  \ == 'a') {\n                    newMessage = newMessage.substring(0, i) + \"c\"\
  \ + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i)\
  \ == 'e') {\n                    newMessage = newMessage.substring(0, i) + \"g\"\
  \ + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i)\
  \ == 'i') {\n                    newMessage = newMessage.substring(0, i) + \"k\"\
  \ + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i)\
  \ == 'o') {\n                    newMessage = newMessage.substring(0, i) + \"m\"\
  \ + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i)\
  \ == 'u') {\n                    newMessage = newMessage.substring(0, i) + \"q\"\
  \ + newMessage.substring(i + 1);\n                }\n            }\n        }\n\
  \        return newMessage;"
- '        throw new UnsupportedOperationException("Not supported yet.");'
- "        return message.chars()\n            .mapToObj(c -> (char) c)\n        \
  \    .map(c -> getEncodedCharacter(c))\n            .map(c -> c.toString())\n  \
  \          .collect(Collectors.joining());"
- "        StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiou\"\
  ;\n        for (char c : message.toCharArray()) {\n            if (vowels.indexOf(c)\
  \ > -1) {\n                sb.append(vowels.charAt((vowels.indexOf(c) + 2) % 5));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString().toUpperCase();"
- "        HashMap<Character,Character> table = new HashMap<Character,Character>();\n\
  \        char[] vowels = new char[]{'a','e','i','o','u'};\n        for(int i = 0;\
  \ i < vowels.length; ++i) {\n            char c = vowels[i];\n            int index\
  \ = i+2;\n            if(index >= vowels.length) {\n                index -= vowels.length;\n\
  \            }\n            table.put(c,vowels[index]);\n        }\n        char[]\
  \ encoded = new char[message.length()];\n        for(int i = 0; i < message.length();\
  \ ++i) {\n            char c = message.charAt(i);\n            if(Character.isLowerCase(c))\
  \ {\n                c = Character.toUpperCase(c);\n            } else {\n     \
  \           c = Character.toLowerCase(c);\n            }\n            if(table.containsKey(c))\
  \ {\n                c = table.get(c);\n            }\n            encoded[i] =\
  \ c;\n        }\n        return new String(encoded);"
- "        StringBuilder result = new StringBuilder();\n        char [] alphabet =\
  \ \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n        char [] alphabet_upper\
  \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n        StringBuilder vowels\
  \ = new StringBuilder();\n        StringBuilder vowels_upper = new StringBuilder();\n\
  \        int length = alphabet.length;\n        for (int i = 0; i < length; i++)\
  \ {\n            if (i == 0 || i == 4 || i == 8 || i == 14 || i == 20) {\n     \
  \           vowels.append(alphabet[i]);\n                vowels_upper.append(alphabet_upper[i]);\n\
  \            }\n        }\n        for (int i = 0; i < message.length(); i++) {\n\
  \            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                if (vowels_upper.indexOf(c+\"\") >= 0) {\n                \
  \    int index = vowels_upper.indexOf(c+\"\");\n                    if (index ==\
  \ 4) {\n                        result.append(vowels_upper.charAt(0));\n       \
  \             } else {\n                        result.append(vowels_upper.charAt(index+1));\n\
  \                    }\n                } else {\n                    result.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                if (vowels.indexOf(c+\"\
  \") >= 0) {\n                    int index = vowels.indexOf(c+\"\");\n         \
  \           if (index == 4) {\n                        result.append(vowels.charAt(0));\n\
  \                    } else {\n                        result.append(vowels.charAt(index+1));\n\
  \                    }\n                } else {\n                    result.append(Character.toLowerCase(c));\n\
  \                }\n            }\n        }\n        return result.toString();"
- '        return message;'
- '        return null;'
- "        return message.chars()\n        .mapToObj(i -> (char)i)\n        .map(c\
  \ -> (c >= 'a' && c <= 'z') ? ((char)((((c - 'a') + 2) % 26) + 'a')) : c)\n    \
  \    .map(c -> (c >= 'A' && c <= 'Z') ? ((char)((((c - 'A') + 2) % 26) + 'A')) :\
  \ c)\n        .map(c -> (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
  \ ? ((char)((((c - 'a') + 2) % 26) + 'a')) : c)\n        .map(c -> (c == 'A' ||\
  \ c == 'E' || c == 'I' || c == 'O' || c == 'U') ? ((char)((((c - 'A') + 2) % 26)\
  \ + 'A')) : c)\n        .map(String::valueOf)\n        .collect(Collectors.joining());"
- "        // TODO: implement me!\n        return \"\";"
- "        String encoded = \"\";\n        String[] vowels = {\"a\", \"e\", \"i\"\
  , \"o\", \"u\"};\n        char[] messageChars = message.toCharArray();\n       \
  \ for (int i = 0; i < messageChars.length; i++) {\n            char c = messageChars[i];\n\
  \            char cUpper = Character.toUpperCase(c);\n            if (cUpper >=\
  \ 'A' && cUpper <= 'Z') {\n                char encodedChar = cUpper;\n        \
  \        // Flip the case.\n                if (cUpper >= 'A' && cUpper <= 'Z')\
  \ {\n                    encodedChar = Character.toLowerCase(cUpper);\n        \
  \        } else {\n                    encodedChar = Character.toUpperCase(cUpper);\n\
  \                }\n                if (Arrays.asList(vowels).contains(cUpper +\
  \ \"\")) {\n                    int shift = 2;\n                    char nextChar\
  \ = (char) (cUpper + shift);\n                    if (nextChar > 'Z') {\n      \
  \                  nextChar = (char) (nextChar - 'Z' + 'A' - 1);\n             \
  \       }\n                    encodedChar = nextChar;\n                }\n    \
  \            encoded += encodedChar;\n            } else {\n                encoded\
  \ += c;\n            }\n        }\n        return encoded;"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char ch = message.charAt(i);\n            if (Character.isLowerCase(ch))\
  \ {\n                sb.append(Character.toUpperCase(ch));\n            } else if\
  \ (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
  \            } else {\n                sb.append(ch);\n            }\n        }\n\
  \        char[] chars = sb.toString().toCharArray();\n        for (int i = 0; i\
  \ < chars.length; i++) {\n            char ch = chars[i];\n            switch (ch)\
  \ {\n                case 'A':\n                    chars[i] = 'C';\n          \
  \          break;\n                case 'E':\n                    chars[i] = 'G';\n\
  \                    break;\n                case 'I':\n                    chars[i]\
  \ = 'K';\n                    break;\n                case 'O':\n              \
  \      chars[i] = 'Q';\n                    break;\n                case 'U':\n\
  \                    chars[i] = 'S';\n                    break;\n             \
  \   case 'Y':\n                    chars[i] = 'A';\n                    break;\n\
  \                case 'C':\n                    chars[i] = 'E';\n              \
  \      break;\n                case 'G':\n                    chars[i] = 'I';\n\
  \                    break;\n                case 'K':\n                    chars[i]\
  \ = 'O';\n                    break;\n                case 'Q':\n              \
  \      chars[i] = 'U';\n                    break;\n                case 'S':\n\
  \                    chars[i] = 'Y';\n                    break;\n             \
  \   case 'a':\n                    chars[i] = 'c';\n                    break;\n\
  \                case 'e':\n                    chars[i] = 'g';\n              \
  \      break;\n                case 'i':\n                    chars[i] = 'k';\n\
  \                    break;\n                case 'o':\n                    chars[i]\
  \ = 'q';\n                    break;\n                case 'u':\n              \
  \      chars[i] = 's';\n                    break;\n                case 'y':\n\
  \                    chars[i] = 'a';\n                    break;\n"
- "        String res = \"\";\n        String vowels = \"aeiou\";\n        String\
  \ mapping = \"cdfghjklmnpqrstvwxyzab\";\n\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                c = Character.toLowerCase(c);\n                res += Character.toUpperCase(encodeChar(c,\
  \ vowels, mapping));\n            } else {\n                res += encodeChar(c,\
  \ vowels, mapping);\n            }\n        }\n        return res;"
- "        StringBuilder builder = new StringBuilder();\n        String lowerCase\
  \ = message.toLowerCase();\n        String upperCase = message.toUpperCase();\n\
  \        for (int i = 0; i < message.length(); i++) {\n            if (vowels.contains(lowerCase.charAt(i)))\
  \ {\n                char vowel = upperCase.charAt(i);\n                if (vowel\
  \ == 'A') {\n                    builder.append('C');\n                } else if\
  \ (vowel == 'E') {\n                    builder.append('G');\n                }\
  \ else if (vowel == 'I') {\n                    builder.append('K');\n         \
  \       } else if (vowel == 'O') {\n                    builder.append('M');\n \
  \               } else if (vowel == 'U') {\n                    builder.append('Q');\n\
  \                } else if (vowel == 'Y') {\n                    builder.append('S');\n\
  \                }\n            } else {\n                builder.append(upperCase.charAt(i));\n\
  \            }\n        }\n        return builder.toString();"
- "        // Type your code here\n        // Hint:\n        // char[] theChar = message.toCharArray();\n\
  \        // to swap case\n        // theChar[i] = Character.toUpperCase(theChar[i]);\n\
  \        // to get the index of a vowel\n        // i = Arrays.asList('a', 'e',\
  \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').indexOf(theChar[i]);\n        // to get\
  \ the letter at i+2 index\n        // String vowel = String.valueOf(Arrays.asList('a',\
  \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').get(i+2));\n        // to get the\
  \ next char\n        // theChar[i] = vowel.charAt(0);\n        char[] theChar =\
  \ message.toCharArray();\n        for (int i = 0; i < theChar.length; i++) {\n \
  \           if (Character.isUpperCase(theChar[i])) {\n                theChar[i]\
  \ = Character.toLowerCase(theChar[i]);\n            } else {\n                theChar[i]\
  \ = Character.toUpperCase(theChar[i]);\n            }\n            int index = Arrays.asList('a',\
  \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').indexOf(theChar[i]);\n          \
  \  if (index != -1) {\n                int vowelIndex = (index + 2) % 10;\n    \
  \            String vowel = String.valueOf(Arrays.asList('a', 'e', 'i', 'o', 'u',\
  \ 'A', 'E', 'I', 'O', 'U').get(vowelIndex));\n                theChar[i] = vowel.charAt(0);\n\
  \            }\n        }\n        return String.valueOf(theChar);"
- '        throw new RuntimeException("Not Implemented");'
- '        return "TGST";'
- '        return new StringBuilder(message).reverse().toString();'
- "        StringBuilder sb = new StringBuilder();\n        String swapcase = message.toUpperCase();\n\
  \        String lowercase = message.toLowerCase();\n        String[] alphabets =\
  \ {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\",\
  \ \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
  w\", \"x\", \"y\", \"z\"};\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\"\
  , \"u\"};\n        String[] swap_encoding = {\"c\", \"f\", \"i\", \"l\", \"o\"};\n\
  \        for (int i = 0; i < message.length(); i++) {\n            char lower =\
  \ lowercase.charAt(i);\n            char upper = swapcase.charAt(i);\n         \
  \   if (Arrays.asList(alphabets).contains(Character.toString(lower))) {\n      \
  \          if (Arrays.asList(vowels).contains(Character.toString(lower))) {\n  \
  \                  int index = Arrays.asList(vowels).indexOf(Character.toString(lower));\n\
  \                    sb.append(swap_encoding[index]);\n                } else {\n\
  \                    sb.append(upper);\n                }\n            } else {\n\
  \                sb.append(message.charAt(i));\n            }\n        }\n     \
  \   return sb.toString();"
- '        return null;'
- '        return "";'
- "        char[] charArray = message.toCharArray();\n        for (int i = 0; i <\
  \ charArray.length; i++) {\n            charArray[i] = swapCase(charArray[i]);\n\
  \            charArray[i] = replaceVowel(charArray[i]);\n        }\n        return\
  \ new String(charArray);"
- "        // YOUR CODE HERE\n        return null;"
- "        String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String vowels =\
  \ \"AEIOU\";\n        String lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n     \
  \   StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            int index = alpha.indexOf(message.charAt(i));\n          \
  \  if (index == -1) {\n                index = lowercase.indexOf(message.charAt(i));\n\
  \                if (index == -1) {\n                    sb.append(message.charAt(i));\n\
  \                } else {\n                    if (vowels.indexOf(lowercase.charAt(index))\
  \ == -1) {\n                        sb.append(lowercase.charAt(index - 1));\n  \
  \                  } else {\n                        sb.append(lowercase.charAt(index\
  \ - 1));\n                    }\n                }\n            } else {\n     \
  \           if (vowels.indexOf(alpha.charAt(index)) == -1) {\n                 \
  \   sb.append(alpha.charAt(index + 1));\n                } else {\n            \
  \        sb.append(alpha.charAt(index + 1));\n                }\n            }\n\
  \        }\n        return sb.toString();"
- "    \tint i = 0;\n    \tString[] words = message.split(\" \");\n    \tStringBuilder\
  \ result = new StringBuilder();\n    \twhile (i < words.length) {\n    \t\tString\
  \ currentWord = words[i];\n    \t\tfor (int j = 0; j < currentWord.length(); j++)\
  \ {\n    \t\t\tchar currentLetter = currentWord.charAt(j);\n    \t\t\tif (Character.isUpperCase(currentLetter))\
  \ {\n    \t\t\t\tchar newLetter = currentLetter;\n    \t\t\t\tif (currentLetter\
  \ >= 65 && currentLetter <= 67) {\n    \t\t\t\t\tnewLetter = (char) (currentLetter\
  \ + 24);\n    \t\t\t\t} else if (currentLetter >= 69 && currentLetter <= 70) {\n\
  \    \t\t\t\t\tnewLetter = (char) (currentLetter + 16);\n    \t\t\t\t} else if (currentLetter\
  \ >= 72 && currentLetter <= 74) {\n    \t\t\t\t\tnewLetter = (char) (currentLetter\
  \ + 8);\n    \t\t\t\t} else if (currentLetter >= 76 && currentLetter <= 81) {\n\
  \    \t\t\t\t\tnewLetter = (char) (currentLetter - 8);\n    \t\t\t\t} else if (currentLetter\
  \ >= 83 && currentLetter <= 84) {\n    \t\t\t\t\tnewLetter = (char) (currentLetter\
  \ - 16);\n    \t\t\t\t} else if (currentLetter >= 86 && currentLetter <= 90) {\n\
  \    \t\t\t\t\tnewLetter = (char) (currentLetter - 24);\n    \t\t\t\t}\n    \t\t\
  \t\tresult.append(newLetter);\n    \t\t\t} else {\n    \t\t\t\tchar newLetter =\
  \ currentLetter;\n    \t\t\t\tif (currentLetter >= 97 && currentLetter <= 99) {\n\
  \    \t\t\t\t\tnewLetter = (char) (currentLetter + 24);\n    \t\t\t\t} else if (currentLetter\
  \ >= 101 && currentLetter <= 102) {\n    \t\t\t\t\tnewLetter = (char) (currentLetter\
  \ + 16);\n    \t\t\t\t} else if (currentLetter >= 104 && currentLetter <= 106) {\n\
  \    \t\t\t\t\tnewLetter"
- "        String ans = \"\";\n        for (int i = 0; i < message.length(); i++)\
  \ {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z')\
  \ {\n                ans += (char)('A' + (c - 'a'));\n            } else if (c >=\
  \ 'A' && c <= 'Z') {\n                ans += (char)('a' + (c - 'A'));\n        \
  \    } else {\n                ans += c;\n            }\n        }\n        return\
  \ ans;"
- '        return null;'
- "        // return new StringBuilder(message).reverse().toString();\n        return\
  \ \"\";"
- "        String vowels = \"aeiou\";\n        String encoded = \"\";\n        for\
  \ (int i = 0; i < message.length(); i++) {\n            char l = message.charAt(i);\n\
  \            if (Character.isLetter(l)) {\n                if (vowels.indexOf(Character.toLowerCase(l))\
  \ != -1) {\n                    int v = vowels.indexOf(Character.toLowerCase(l));\n\
  \                    v = (v + 2) % 5;\n                    if (Character.isUpperCase(l))\
  \ {\n                        encoded += Character.toUpperCase(vowels.charAt(v));\n\
  \                    } else {\n                        encoded += vowels.charAt(v);\n\
  \                    }\n                } else {\n                    if (Character.isUpperCase(l))\
  \ {\n                        encoded += Character.toLowerCase(l);\n            \
  \        } else {\n                        encoded += Character.toUpperCase(l);\n\
  \                    }\n                }\n            } else {\n              \
  \  encoded += l;\n            }\n        }\n        return encoded;"
- "        String chars = \"abcdefghijklmnopqrstuvwxyz\";\n        char[] vowels =\
  \ {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
  \            boolean isUpper = Character.isUpperCase(c);\n            c = Character.toLowerCase(c);\n\
  \            int index = chars.indexOf(c);\n            if (index >= 0) {\n    \
  \            if (isUpper) {\n                    sb.append(Character.toUpperCase(chars.charAt(index)));\n\
  \                } else {\n                    sb.append(chars.charAt(index));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        System.out.println(sb.toString());\n        sb = new\
  \ StringBuilder();\n        int len = vowels.length;\n        for (int i = 0; i\
  \ < message.length(); i++) {\n            char c = message.charAt(i);\n        \
  \    boolean isUpper = Character.isUpperCase(c);\n            c = Character.toLowerCase(c);\n\
  \            int index = chars.indexOf(c);\n            if (index >= 0) {\n    \
  \            for (int j = 0; j < len; j++) {\n                    if (c == vowels[j])\
  \ {\n                        if (j + 2 > len - 1) {\n                          \
  \  sb.append(chars.charAt(j + 2 - len));\n                        } else {\n   \
  \                         sb.append(chars.charAt(j + 2));\n                    \
  \    }\n                    }\n                }\n            } else {\n       \
  \         sb.append(c);\n            }\n        }\n        return sb.toString();"
- "        // Here's a start\n        String result = \"\";\n        for (int i =\
  \ 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n   \
  \         if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
  \            } else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n\
  \            }\n            if (c == 'a') {\n                c = 'c';\n        \
  \    } else if (c == 'e') {\n                c = 'g';\n            } else if (c\
  \ == 'i') {\n                c = 'k';\n            } else if (c == 'o') {\n    \
  \            c = 'q';\n            } else if (c == 'u') {\n                c = 'y';\n\
  \            }\n            result += c;\n        }\n        return result;"
- '        return null;'
- "        int idx = 0;\n        String res = \"\";\n        Map<Character, Character>\
  \ dict = new HashMap<>();\n        dict.put('A', 'C');\n        dict.put('E', 'G');\n\
  \        dict.put('I', 'K');\n        dict.put('O', 'Q');\n        dict.put('U',\
  \ 'W');\n        dict.put('a', 'c');\n        dict.put('e', 'g');\n        dict.put('i',\
  \ 'k');\n        dict.put('o', 'q');\n        dict.put('u', 'w');\n        for (char\
  \ letter : message.toCharArray()) {\n            if (Character.isLetter(letter))\
  \ {\n                if (dict.containsKey(letter))\n                    res += dict.get(letter);\n\
  \                else {\n                    res += Character.isUpperCase(letter)\
  \ ? Character.toLowerCase(letter) : Character.toUpperCase(letter);\n           \
  \     }\n            } else {\n                res += letter;\n            }\n \
  \       }\n        return res;"
- "        StringBuilder ret = new StringBuilder();\n        String lowercase = \"\
  abcdefghijklmnopqrstuvwxyz\";\n        String uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
  ;\n        int n = lowercase.length();\n        int shift = 2;\n        for (int\
  \ i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
  \            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch))\
  \ {\n                    int idx = uppercase.indexOf(ch);\n                    int\
  \ new_idx = (idx + shift) % n;\n                    char new_ch = lowercase.charAt(new_idx);\n\
  \                    ret.append(new_ch);\n                } else {\n           \
  \         int idx = lowercase.indexOf(ch);\n                    int new_idx = (idx\
  \ + shift) % n;\n                    char new_ch = uppercase.charAt(new_idx);\n\
  \                    ret.append(new_ch);\n                }\n            } else\
  \ {\n                ret.append(ch);\n            }\n        }\n        return ret.toString();"
- '        throw new RuntimeException("Unimplemented");'
- "        String input = message.toLowerCase();\n        // write your code below\n\
  \        return null;"
- "        StringBuilder messageSb = new StringBuilder(message);\n        StringBuilder\
  \ alphabetSb = new StringBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        StringBuilder\
  \ vowelsSb = new StringBuilder(\"aeiou\");\n        String alphabet = alphabetSb.toString();\n\
  \        String vowels = vowelsSb.toString();\n        for (int i = 0; i < messageSb.length();\
  \ i++) {\n            char character = messageSb.charAt(i);\n            if (vowels.indexOf(character)\
  \ != -1) {\n                character = alphabet.charAt((vowels.indexOf(character)\
  \ + 2) % 5);\n            }\n            messageSb.setCharAt(i, character);\n  \
  \      }\n        return messageSb.toString();"
- '        return null;'
- "        String encoded = \"\";\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        for (int i = 0; i < message.length(); i++) {\n            if (alphabet.indexOf(message.charAt(i))\
  \ != -1) {\n                if (alphabet.indexOf(message.charAt(i)) == 24) {\n \
  \                   encoded += alphabet.charAt(0);\n                } else if (alphabet.indexOf(message.charAt(i))\
  \ == 25) {\n                    encoded += alphabet.charAt(1);\n               \
  \ } else {\n                    encoded += alphabet.charAt(alphabet.indexOf(message.charAt(i))\
  \ + 2);\n                }\n            } else {\n                encoded += Character.toUpperCase(message.charAt(i));\n\
  \            }\n        }\n        return encoded;"
- "        // YOUR CODE HERE\n        return \"\";"
- "        // TODO\n        return \"\";"
- '        return "";'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            if (Character.isUpperCase(message.charAt(i))) {\n        \
  \        sb.append(Character.toLowerCase(message.charAt(i)));\n            } else\
  \ {\n                sb.append(Character.toUpperCase(message.charAt(i)));\n    \
  \        }\n        }\n        return sb.toString();"
- "        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray())\
  \ {\n            if (c == ' ') {\n                result.append(' ');\n        \
  \    } else {\n                result.append(Character.isUpperCase(c) ? encode(Character.toLowerCase(c))\
  \ : encode(c));\n            }\n        }\n        return result.toString();"
- "        HashMap<Character, Character> map = new HashMap<>();\n        ArrayList<Character>\
  \ alphabet = new ArrayList<>(Arrays.asList('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
  \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
  \ 'y', 'z'));\n        for (int i = 0; i < alphabet.size(); i++) {\n           \
  \ if (i + 2 < alphabet.size()) {\n                map.put(alphabet.get(i), alphabet.get(i\
  \ + 2));\n            } else {\n                map.put(alphabet.get(i), alphabet.get(i\
  \ + 2 - alphabet.size()));\n            }\n        }\n        String res = \"\"\
  ;\n        for (int i = 0; i < message.length(); i++) {\n            char temp =\
  \ message.charAt(i);\n            if (Character.isUpperCase(temp)) {\n         \
  \       temp = Character.toLowerCase(temp);\n                res += Character.toUpperCase(map.get(temp));\n\
  \            } else {\n                res += map.get(temp);\n            }\n  \
  \      }\n        return res;"
- "        String vowels = \"aeiou\";\n        String encoded_message = message.toLowerCase();\n\
  \        StringBuilder encoded_message_builder = new StringBuilder(encoded_message);\n\
  \        for (int i = 0; i < encoded_message.length(); i++) {\n            if (vowels.contains(Character.toString(encoded_message.charAt(i))))\
  \ {\n                int index = vowels.indexOf(encoded_message.charAt(i));\n  \
  \              if (index < 3) {\n                    index += 23;\n            \
  \    } else {\n                    index -= 3;\n                }\n            \
  \    encoded_message_builder.setCharAt(i, vowels.charAt(index));\n            }\n\
  \        }\n        return encoded_message_builder.toString().toUpperCase();"
- "        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray())\
  \ {\n            int base = Character.isUpperCase(c) ? 'A' : 'a';\n            int\
  \ index = c - base;\n            index = (index + 2) % 26;\n            result.append((char)\
  \ (base + index));\n        }\n        return result.toString();"
- '        return "";'
- "        StringBuilder sb = new StringBuilder();\n        String vowels = \"AEIOUaeiou\"\
  ;\n        String lower = \"abcdefghijklmnopqrstuvwxyz\";\n        String upper\
  \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        for (int i = 0; i < message.length();\
  \ i++) {\n            if (vowels.indexOf(message.charAt(i)) > -1) {\n          \
  \      int idx = vowels.indexOf(message.charAt(i));\n                sb.append(vowels.charAt((idx\
  \ + 2) % 10));\n            } else if (lower.indexOf(message.charAt(i)) > -1) {\n\
  \                int idx = lower.indexOf(message.charAt(i));\n                sb.append(upper.charAt(idx));\n\
  \            } else if (upper.indexOf(message.charAt(i)) > -1) {\n             \
  \   int idx = upper.indexOf(message.charAt(i));\n                sb.append(lower.charAt(idx));\n\
  \            } else {\n                sb.append(message.charAt(i));\n         \
  \   }\n        }\n        return sb.toString();"
- "        if (message == null) {\n            return null;\n        }\n        if\
  \ (message.length() == 0) {\n            return \"\";\n        }\n        StringBuilder\
  \ sb = new StringBuilder();\n        char[] chars = message.toCharArray();\n   \
  \     for (char c : chars) {\n            int idx = (int) c;\n            if (c\
  \ >= 'a' && c <= 'z') {\n                if (c == 'a' || c == 'e' || c == 'i' ||\
  \ c == 'o' || c == 'u') {\n                    idx += 5;\n                } else\
  \ {\n                    idx -= 32;\n                }\n            } else if (c\
  \ >= 'A' && c <= 'Z') {\n                if (c == 'A' || c == 'E' || c == 'I' ||\
  \ c == 'O' || c == 'U') {\n                    idx += 5;\n                } else\
  \ {\n                    idx += 32;\n                }\n            }\n        \
  \    sb.append((char) idx);\n        }\n        return sb.toString();"
- '        return null;'
- "        StringBuilder builder = new StringBuilder();\n        List<Character> vowels\
  \ = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char cur = message.charAt(i);\n            if (Character.isLetter(cur))\
  \ {\n                if (Character.isUpperCase(cur)) {\n                    cur\
  \ = Character.toLowerCase(cur);\n                } else {\n                    cur\
  \ = Character.toUpperCase(cur);\n                }\n                if (vowels.contains(cur))\
  \ {\n                    int index = vowels.indexOf(cur);\n                    index\
  \ = (index + 2) % vowels.size();\n                    cur = vowels.get(index);\n\
  \                }\n            }\n            builder.append(cur);\n        }\n\
  \        return builder.toString();"
- "        StringBuffer sb = new StringBuffer();\n        String[] list = new String[]{\"\
  A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"\
  , \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
  X\", \"Y\", \"Z\"};\n        for (int i = 0; i < message.length(); i++) {\n    \
  \        if (message.charAt(i) >= 65 && message.charAt(i) <= 90) {\n           \
  \     int pos = Arrays.asList(list).indexOf(message.substring(i, i + 1));\n    \
  \            sb.append(list[(pos + 2) % 26].toLowerCase());\n            } else\
  \ if (message.charAt(i) >= 97 && message.charAt(i) <= 122) {\n                int\
  \ pos = Arrays.asList(list).indexOf(message.substring(i, i + 1).toUpperCase());\n\
  \                sb.append(list[(pos + 2) % 26]);\n            } else {\n      \
  \          sb.append(message.charAt(i));\n            }\n        }\n        return\
  \ sb.toString();"
- "        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray())\
  \ {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n\
  \            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n\
  \            } else {\n                result.append(c);\n            }\n      \
  \  }\n        return result.toString();"
- "        char[] m = message.toCharArray();\n        char[] c = new char[m.length];\n\
  \        char[] v = {'a', 'e', 'i', 'o', 'u'};\n        for (int i = 0; i < m.length;\
  \ i++) {\n            if (Character.isUpperCase(m[i])) {\n                c[i] =\
  \ Character.toLowerCase(m[i]);\n            } else {\n                c[i] = Character.toUpperCase(m[i]);\n\
  \            }\n            for (int j = 0; j < v.length; j++) {\n             \
  \   if (c[i] == v[j]) {\n                    c[i] = v[(j + 2) % v.length];\n   \
  \             }\n            }\n        }\n        return new String(c);"
- "\t\t"
- "        // TODO: Implement this\n        return \"\";"
- '        return null;'
- "\treturn \"\";"
- '        return "";'
- "        StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiou\"\
  ;\n        //loop through each character\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char curr = message.charAt(i);\n            //if the current\
  \ char is a letter, swap case and add to the stringbuilder\n            if (Character.isLetter(curr))\
  \ {\n                char c = Character.isUpperCase(curr) ? Character.toLowerCase(curr)\
  \ : Character.toUpperCase(curr);\n                //if the current char is a vowel,\
  \ encode it and add to the stringbuilder\n                if (vowels.indexOf(c)\
  \ != -1) {\n                    //get the index of the current char in the vowels\
  \ string\n                    int index = vowels.indexOf(c);\n                 \
  \   //get the next two indices, mod by the length of the string so that we can wrap\
  \ around\n                    int nextIndex = (index + 2) % vowels.length();\n \
  \                   int nextNextIndex = (index + 4) % vowels.length();\n       \
  \             //get the character at the next two indices, swap case and add to\
  \ the stringbuilder\n                    char nextChar = Character.isUpperCase(c)\
  \ ? Character.toUpperCase(vowels.charAt(nextIndex)) : Character.toLowerCase(vowels.charAt(nextIndex));\n\
  \                    char nextNextChar = Character.isUpperCase(c) ? Character.toUpperCase(vowels.charAt(nextNextIndex))\
  \ : Character.toLowerCase(vowels.charAt(nextNextIndex));\n                    sb.append(nextChar);\n\
  \                    sb.append(nextNextChar);\n                } else {\n      \
  \              sb.append(c);\n                }\n            } else {\n        \
  \        sb.append(curr);\n            }\n        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                c = Character.toLowerCase(c);\n            } else {\n     \
  \           c = Character.toUpperCase(c);\n            }\n            if (c == 'a')\
  \ {\n                c = 'c';\n            } else if (c == 'e') {\n            \
  \    c = 'g';\n            } else if (c == 'i') {\n                c = 'k';\n  \
  \          } else if (c == 'o') {\n                c = 'q';\n            } else\
  \ if (c == 'u') {\n                c = 'y';\n            }\n            sb.append(c);\n\
  \        }\n        return sb.toString();"
- "        StringBuilder ret = new StringBuilder();\n        String vowels = \"aeiou\"\
  ;\n        int vowelslen = vowels.length();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char letter = message.charAt(i);\n            int letteridx\
  \ = letter - 'a';\n            if (letteridx >= 0 && letteridx < 26) {\n       \
  \         int newidx = letteridx + 2;\n                if (newidx > 25) {\n    \
  \                newidx -= 26;\n                }\n                ret.append((char)(newidx\
  \ + 'a'));\n            } else {\n                ret.append(letter);\n        \
  \    }\n        }\n        return ret.toString();"
- "        StringBuilder sb = new StringBuilder();\n        int vowelCounter = 0;\n\
  \        for (int i = 0; i < message.length(); i++) {\n            if (i == message.length()\
  \ - 1) {\n                char c = message.charAt(i);\n                if (Character.isLetter(c))\
  \ {\n                    sb.append(Character.isUpperCase(c) ? \n               \
  \         Character.toLowerCase(c) : \n                        Character.toUpperCase(c));\n\
  \                } else {\n                    sb.append(c);\n                }\n\
  \            } else {\n                char c = message.charAt(i);\n           \
  \     char n = message.charAt(i + 1);\n                if (Character.isLetter(c))\
  \ {\n                    char x = c;\n                    if (Character.isUpperCase(c))\
  \ {\n                        x = Character.toLowerCase(c);\n                   \
  \ } else if (Character.isLowerCase(c)) {\n                        x = Character.toUpperCase(c);\n\
  \                    }\n                    switch (x) {\n                     \
  \   case 'a':\n                            sb.append('c');\n                   \
  \         vowelCounter++;\n                            break;\n                \
  \        case 'e':\n                            sb.append('g');\n              \
  \              vowelCounter++;\n                            break;\n           \
  \             case 'i':\n                            sb.append('k');\n         \
  \                   vowelCounter++;\n                            break;\n      \
  \                  case 'o':\n                            sb.append('m');\n    \
  \                        vowelCounter++;\n                            break;\n \
  \                       case 'u':\n                            sb.append('w');\n\
  \                            vowelCounter++;\n                            break;\n\
  \                        default:\n                            sb.append(x);\n \
  \                           break;\n                    }\n                } else\
  \ {\n                    sb.append(c);\n                }\n            }\n     \
  \   }\n        // return sb.toString() + \"-\" + Integer.toString(vowelCounter);\n\
  \        return sb.toString();"
- '        return null;'
- '        return null;'
- "        return message.chars()\n            .mapToObj(c -> (char) c)\n        \
  \    .map(c -> c.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
  \            .map(c -> List.of('a', 'e', 'i', 'o', 'u').contains(c) ? shiftTwo(c)\
  \ : c)\n            .map(c -> String.valueOf(c))\n            .collect(Collectors.joining());"
- "        StringBuilder encoded = new StringBuilder();\n        List<Character> vowels\
  \ = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        for (char c : message.toCharArray())\
  \ {\n            int charValue = c;\n            if (vowels.contains(c)) {\n   \
  \             encoded.append((char) (charValue + 2));\n            } else {\n  \
  \              encoded.append((char) (charValue));\n            }\n        }\n \
  \       return encoded.toString();"
- "        StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiou\"\
  ;\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c))\
  \ {\n                sb.append(Character.toLowerCase(c));\n            } else if\
  \ (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        for (int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
  \            if (vowels.indexOf(c) >= 0) {\n                sb.setCharAt(i, (char)\
  \ ((c - 'a' + 2) % 26 + 'a'));\n            }\n        }\n        return sb.toString();"
- "        HashMap<Character, Character> map = new HashMap<>();\n        map.put('A',\
  \ 'C');\n        map.put('E', 'G');\n        map.put('I', 'K');\n        map.put('O',\
  \ 'Q');\n        map.put('U', 'W');\n        map.put('a', 'c');\n        map.put('e',\
  \ 'g');\n        map.put('i', 'k');\n        map.put('o', 'q');\n        map.put('u',\
  \ 'w');\n        char[] messageChars = message.toCharArray();\n        for (int\
  \ i = 0; i < messageChars.length; i++) {\n            Character c = messageChars[i];\n\
  \            if (Character.isAlphabetic(c)) {\n                messageChars[i] =\
  \ map.getOrDefault(c, c);\n            }\n        }\n        return new String(messageChars);"
- '        return null;'
- "        // let's start with a little helper function\n        // that can convert\
  \ a single character\n        Function<Character, Character> convertLetter = (Character\
  \ c) -> {\n            char letter = Character.toLowerCase(c);\n            if (letter\
  \ == 'a') { return 'c'; }\n            if (letter == 'e') { return 'g'; }\n    \
  \        if (letter == 'i') { return 'k'; }\n            if (letter == 'o') { return\
  \ 'q'; }\n            if (letter == 'u') { return 'y'; }\n            if (letter\
  \ == 'y') { return 'b'; }\n            return letter;\n        };\n        // now\
  \ let's call that helper function on every\n        // character in the message\n\
  \        return message.chars()\n            .mapToObj(c -> (char) c)\n        \
  \    .map(convertLetter)\n            .map(c -> { \n                // then we'll\
  \ swap the case if it's a letter\n                if (Character.isLowerCase(c))\
  \ {\n                    return Character.toUpperCase(c);\n                } else\
  \ {\n                    return Character.toLowerCase(c);\n                }\n \
  \           })\n            .map(c -> \"\" + c)\n            .collect(Collectors.joining());"
- "        // Your code here\n        return \"\";"
- "        // Solution\n        // Take the string message and convert it to lowercase.\n\
  \        String lower = message.toLowerCase();\n        String[] alphabet = {\"\
  a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
  , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
  x\", \"y\", \"z\"};\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"\
  };\n        HashMap<String, String> mapping = new HashMap<String, String>();\n \
  \       for (int i = 0; i < alphabet.length; i++) {\n            // For the current\
  \ letter in alphabet, see if it's a vowel.\n            boolean is_vowel = Arrays.asList(vowels).contains(alphabet[i]);\n\
  \            // If it's a vowel, find its replacement.\n            if (is_vowel)\
  \ {\n                // Use modulo to find replacement.\n                int replacement_index\
  \ = (i + 2) % alphabet.length;\n                mapping.put(alphabet[i], alphabet[replacement_index]);\n\
  \            }\n        }\n        StringBuilder result = new StringBuilder();\n\
  \        // For each character in the message, check if it's a vowel.\n        for\
  \ (int i = 0; i < lower.length(); i++) {\n            char current_char = lower.charAt(i);\n\
  \            // If it's a vowel, do the mapping.\n            if (mapping.containsKey(String.valueOf(current_char)))\
  \ {\n                result.append(mapping.get(String.valueOf(current_char)));\n\
  \            } else {\n                // If it's not a vowel, just append it.\n\
  \                result.append(current_char);\n            }\n        }\n      \
  \  // Return the encoded string.\n        return result.toString();"
- "        String ret = \"\";\n        for (int i = 0; i < message.length(); i++)\
  \ {\n            if (message.charAt(i) == ' ') {\n                ret += ' ';\n\
  \            } else {\n                int ascii = (int)message.charAt(i);\n   \
  \             if (Character.isUpperCase(message.charAt(i))) {\n                \
  \    if (ascii < 90) {\n                        ret += (char)(ascii + 1);\n    \
  \                } else {\n                        ret += (char)(65);\n        \
  \            }\n                } else {\n                    if (ascii < 122) {\n\
  \                        ret += (char)(ascii + 1);\n                    } else {\n\
  \                        ret += (char)(97);\n                    }\n           \
  \     }\n            }\n        }\n        for (int i = 0; i < ret.length(); i++)\
  \ {\n            if (ret.charAt(i) == ' ') {\n                continue;\n      \
  \      }\n            if (ret.charAt(i) == 'a' || ret.charAt(i) == 'e' || ret.charAt(i)\
  \ == 'i' || ret.charAt(i) == 'o' || ret.charAt(i) == 'u') {\n                ret\
  \ = ret.substring(0, i) + (char)((int)ret.charAt(i) + 2) + ret.substring(i + 1);\n\
  \            }\n        }\n        return ret;"
- "        HashMap<Character, Character> translation = new HashMap<Character, Character>();\n\
  \        Character c = 'a';\n        for (int i = 0; i < 26; i++) {\n          \
  \  if (i % 5 == 0 && i != 0) {\n                c = (char) (c + 3);\n          \
  \  } else {\n                c = (char) (c + 1);\n            }\n            translation.put((char)\
  \ (i + 97), c);\n        }\n        char[] messageArray = message.toCharArray();\n\
  \        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i]\
  \ >= 'a' && messageArray[i] <= 'z') {\n                messageArray[i] = translation.get(messageArray[i]);\n\
  \            } else if (messageArray[i] >= 'A' && messageArray[i] <= 'Z') {\n  \
  \              messageArray[i] = Character.toUpperCase(translation.get(Character.toLowerCase(messageArray[i])));\n\
  \            }\n        }\n        return new String(messageArray);"
- "        StringBuilder encodedMessage = new StringBuilder();\n        for (char\
  \ c : message.toCharArray()) {\n            char upperC = Character.toUpperCase(c);\n\
  \            int index = ((upperC - 'A') + 2) % 26;\n            char encodedChar\
  \ = (char) ('A' + index);\n            encodedMessage.append(encodedChar);\n   \
  \     }\n        return encodedMessage.toString();"
- '        return "";'
- "        StringBuilder encoded = new StringBuilder();\n        for (char c : message.toCharArray())\
  \ {\n            if (c >= 65 && c <= 90) {\n                encoded.append((char)\
  \ (c + 32));\n            } else if (c >= 97 && c <= 122) {\n                encoded.append((char)\
  \ (c - 32));\n            } else {\n                encoded.append(c);\n       \
  \     }\n        }\n        return encoded.toString();"
- "        String newMessage = \"\";\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            if (isVowel(c)) {\n\
  \                int index = vowels.indexOf(c);\n                newMessage += vowels.charAt((index\
  \ + 2) % 5);\n            } else {\n                newMessage += c;\n         \
  \   }\n        }\n        return newMessage.toUpperCase();"
- '        return null;'
- "        String vowelString = \"AEIOU\";\n        String result = \"\";\n      \
  \  for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
  \            if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n\
  \            } else if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n\
  \            }\n            result += ch;\n        }\n        StringBuffer buf =\
  \ new StringBuffer(result);\n        for (int i = 0; i < result.length(); i++) {\n\
  \            char ch = result.charAt(i);\n            if (vowelString.indexOf(ch)\
  \ != -1) {\n                buf.setCharAt(i, vowelString.charAt((vowelString.indexOf(ch)\
  \ + 2) % 5));\n            }\n        }\n        return buf.toString();"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        String[] chars = message.split(\"\
  \");\n        String result = \"\";\n        for (String c : chars) {\n        \
  \    if (Arrays.asList(vowels).contains(c.toLowerCase())) {\n                String\
  \ vowel = c.toLowerCase();\n                if (vowel.equals(\"u\")) {\n       \
  \             result += \"a\";\n                } else {\n                    String\
  \ newVowel = String.valueOf((char)(vowel.charAt(0) + 2));\n                    if\
  \ (vowel.equals(newVowel)) {\n                        result += newVowel.toUpperCase();\n\
  \                    } else {\n                        result += newVowel;\n   \
  \                 }\n                }\n            } else {\n                if\
  \ (c.equals(c.toUpperCase())) {\n                    result += c.toLowerCase();\n\
  \                } else {\n                    result += c.toUpperCase();\n    \
  \            }\n            }\n        }\n        return result;"
- "        return message.chars()\n            .mapToObj(c -> (char) c)\n        \
  \    .map(c -> {\n                if (Character.isUpperCase(c))\n              \
  \      return Character.toLowerCase(c);\n                else\n                \
  \    return Character.toUpperCase(c);\n            })\n            .map(c -> {\n\
  \                String vowels = \"aeiou\";\n                if (vowels.indexOf(c)\
  \ != -1) {\n                    int index = (vowels.indexOf(c) + 2) % vowels.length();\n\
  \                    return vowels.charAt(index);\n                } else {\n  \
  \                  return c;\n                }\n            })\n            .map(Object::toString)\n\
  \            .collect(Collectors.joining());"
- "        //fill in here\n        return null;"
- "        String vowels = \"AEIOUaeiou\";\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
  \            if (vowels.indexOf(c) == -1) {\n                sb.append(c);\n   \
  \         } else {\n                int index = vowels.indexOf(c);\n           \
  \     sb.append(vowels.charAt((index + 2) % vowels.length()));\n            }\n\
  \        }\n        return sb.toString();"
- "        message = message.toUpperCase();\n        char[] arr = message.toCharArray();\n\
  \        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n\
  \            if (c >= 'A' && c <= 'Z') {\n                c = (char) (\n       \
  \                 (c + 2 - 'A') % 26\n                        + 'A'\n          \
  \      );\n            }\n            arr[i] = c;\n        }\n        return new\
  \ String(arr);"
- '        return null;'
- "        return message.chars()\n        .mapToObj(i -> (char)i)\n        .map(letter\
  \ -> {\n            if(letter.isUpperCase()) {\n                return letter.toLowerCase();\n\
  \            }\n            else if(letter.isLowerCase()) {\n                return\
  \ letter.toUpperCase();\n            }\n            else {\n                return\
  \ letter;\n            }\n        })\n        .map(letter -> {\n            char[]\
  \ vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n            return (letter.isLowerCase()\
  \ && Arrays.binarySearch(vowels, letter) >= 0) ?\n                (char)((letter\
  \ + 2 - 'a') % 5 + 'a') : letter;\n        })\n        .map(letter -> letter.toString())\n\
  \        .collect(Collectors.joining());"
- '        return "";'
- "        // TODO: write your code here\n        return null;"
- "        // TODO\n        return null;"
- "    \tif (message == null) {\n    \t\treturn null;\n    \t}\n    \tStringBuilder\
  \ output = new StringBuilder();\n    \tString vowels = \"aeiou\";\n    \tfor (char\
  \ c : message.toCharArray()) {\n    \t\tif (Character.isUpperCase(c)) {\n    \t\t\
  \toutput.append(Character.toLowerCase(c));\n    \t\t} else if (Character.isLowerCase(c))\
  \ {\n    \t\t\toutput.append(Character.toUpperCase(c));\n    \t\t} else {\n    \t\
  \t\toutput.append(c);\n    \t\t}\n    \t}\n    \tchar[] ans = output.toString().toCharArray();\n\
  \    \tfor (int i = 0; i < ans.length; i++) {\n    \t\tchar c = ans[i];\n    \t\t\
  if (vowels.indexOf(c) != -1) {\n    \t\t\tint index = vowels.indexOf(c);\n    \t\
  \t\tindex = (index + 2) % 5;\n    \t\t\tans[i] = vowels.charAt(index);\n    \t\t\
  }\n    \t}\n    \treturn new String(ans);"
- '        return null;'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                sb.append(Character.toLowerCase(c));\n            } else if\
  \ (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        String answer = \"\";\n\
  \        String lowerCase = message.toLowerCase();\n        String upperCase = message.toUpperCase();\n\
  \        for (int i = 0; i < message.length(); i++) {\n            if (lowerCase.charAt(i)\
  \ == 'a') {\n                if (upperCase.charAt(i) == 'A') {\n               \
  \     sb.append('C');\n                } else {\n                    sb.append('c');\n\
  \                }\n            } else if (lowerCase.charAt(i) == 'e') {\n     \
  \           if (upperCase.charAt(i) == 'E') {\n                    sb.append('G');\n\
  \                } else {\n                    sb.append('g');\n               \
  \ }\n            } else if (lowerCase.charAt(i) == 'i') {\n                if (upperCase.charAt(i)\
  \ == 'I') {\n                    sb.append('K');\n                } else {\n   \
  \                 sb.append('k');\n                }\n            } else if (lowerCase.charAt(i)\
  \ == 'o') {\n                if (upperCase.charAt(i) == 'O') {\n               \
  \     sb.append('M');\n                } else {\n                    sb.append('m');\n\
  \                }\n            } else if (lowerCase.charAt(i) == 'u') {\n     \
  \           if (upperCase.charAt(i) == 'U') {\n                    sb.append('O');\n\
  \                } else {\n                    sb.append('o');\n               \
  \ }\n            } else if (upperCase.charAt(i) == message.charAt(i)) {\n      \
  \          sb.append(lowerCase.charAt(i));\n            } else {\n             \
  \   sb.append(upperCase.charAt(i));\n            }\n        }\n        answer =\
  \ sb.toString();\n        return answer;"
- "        char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length;\
  \ i++) {\n            if (Character.isUpperCase(letters[i])) {\n               \
  \ letters[i] = Character.toLowerCase(letters[i]);\n            } else {\n      \
  \          letters[i] = Character.toUpperCase(letters[i]);\n            }\n    \
  \        if (letters[i] == 'a') {\n                letters[i] = 'c';\n         \
  \   } else if (letters[i] == 'e') {\n                letters[i] = 'g';\n       \
  \     } else if (letters[i] == 'i') {\n                letters[i] = 'k';\n     \
  \       } else if (letters[i] == 'o') {\n                letters[i] = 'm';\n   \
  \         } else if (letters[i] == 'u') {\n                letters[i] = 'w';\n \
  \           }\n        }\n        return new String(letters);"
- '        throw new UnsupportedOperationException("not implemented");'
- '        return null;'
- '        return "";'
- '        return "";'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            char enc = Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            if (enc ==\
  \ 'a') {\n                enc = 'c';\n            } else if (enc == 'e') {\n   \
  \             enc = 'g';\n            } else if (enc == 'i') {\n               \
  \ enc = 'k';\n            } else if (enc == 'o') {\n                enc = 'q';\n\
  \            } else if (enc == 'u') {\n                enc = 'y';\n            }\n\
  \            sb.append(enc);\n        }\n        return sb.toString();"
- "        return message.chars()\n            .mapToObj(c -> (char) c)\n        \
  \    .map(c -> {\n                if (Character.isUpperCase(c)) {\n            \
  \        return Character.toLowerCase(c);\n                } else if (Character.isLowerCase(c))\
  \ {\n                    return Character.toUpperCase(c);\n                } else\
  \ {\n                    return c;\n                }\n            })\n        \
  \    .map(c -> (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ? (char)\
  \ (c + 2) : c)\n            .map(c -> (c == 'y' || c == 'z') ? (char) (c - 24) :\
  \ c)\n            .map(c -> (c == ' ') ? (char) (c - 5) : c)\n            .map(Object::toString)\n\
  \            .collect(Collectors.joining());"
- "        String vowels = \"aeiou\";\n        StringBuilder encoded = new StringBuilder();\n\
  \        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
  \            if (vowels.indexOf(c) != -1) {\n                c = vowels.charAt((vowels.indexOf(c)\
  \ + 2) % vowels.length());\n            }\n            encoded.append(Character.isUpperCase(message.charAt(i))\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        }\n        return\
  \ encoded.toString();"
- '        return "";'
- "        String result = \"\";\n        for (int i = 0; i < message.length(); i++)\
  \ {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
  \ {\n                result += Character.toLowerCase(c);\n            } else if\
  \ (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n\
  \            } else {\n                result += c;\n            }\n        }\n\
  \        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        char[]\
  \ alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n        for (int i =\
  \ 0; i < result.length(); i++) {\n            char c = result.charAt(i);\n     \
  \       if (Arrays.asList(vowels).contains(Character.toString(c))) {\n         \
  \       c = alphabet[(Arrays.asList(alphabet).indexOf(c) + 2) % 26];\n         \
  \       result = result.substring(0, i) + c + result.substring(i + 1);\n       \
  \     }\n        }\n        return result;"
- "        // TODO: implement me\n        return null;"
- '        return "";'
- "        StringBuilder result = new StringBuilder();\n        String messageInLowerCase\
  \ = message.toLowerCase();\n        String[] vowels = new String[]{\"a\", \"e\"\
  , \"i\", \"o\", \"u\"};\n        int count = 0;\n        while (count < messageInLowerCase.length())\
  \ {\n            String currentLetter = messageInLowerCase.substring(count, count\
  \ + 1);\n            if (currentLetter.equals(\" \")) {\n                result.append(\"\
  \ \");\n            } else if (currentLetter.equals(\"z\")) {\n                result.append(\"\
  b\");\n            } else if (currentLetter.equals(\"y\")) {\n                result.append(\"\
  a\");\n            } else if (currentLetter.equals(\"x\")) {\n                result.append(\"\
  z\");\n            } else if (currentLetter.equals(\"w\")) {\n                result.append(\"\
  y\");\n            } else if (Arrays.asList(vowels).contains(currentLetter)) {\n\
  \                int currentIndex = Arrays.asList(vowels).indexOf(currentLetter);\n\
  \                int newIndex = (currentIndex + 2) % 5;\n                result.append(vowels[newIndex]);\n\
  \            } else {\n                result.append(currentLetter);\n         \
  \   }\n            count++;\n        }\n        return result.toString();"
- "        char[] output = new char[message.length()];\n        for (int i = 0; i\
  \ < message.length(); i++) {\n            char curr = message.charAt(i);\n     \
  \       if (Character.isUpperCase(curr)) {\n                curr = Character.toLowerCase(curr);\n\
  \            } else {\n                curr = Character.toUpperCase(curr);\n   \
  \         }\n            output[i] = curr;\n        }\n        System.out.println(new\
  \ String(output));\n        return new String(output);"
- '        return "";'
- '        return null;'
- '        return "";'
- '        return message.toUpperCase().replace("T", "G").replace("I", "K").replace("A",
  "C");'
- '        throw new UnsupportedOperationException("Not implemented.");'
- '        return "";'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            if (c == ' ') {\n\
  \                sb.append(' ');\n            } else if (Character.isLetter(c))\
  \ {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            }\n        }\n        return sb.toString();"
- "        char[] msg = message.toCharArray();\n        for (int i = 0; i < msg.length;\
  \ i++) {\n            if (msg[i] >= 'a' && msg[i] <= 'z') {\n                msg[i]\
  \ -= 32;\n            } else if (msg[i] >= 'A' && msg[i] <= 'Z') {\n           \
  \     msg[i] += 32;\n            }\n        }\n        int diff = 'e' - 'a';\n \
  \       for (int i = 0; i < msg.length; i++) {\n            if (msg[i] >= 'a' &&\
  \ msg[i] <= 'z') {\n                if (msg[i] + diff >= 'z') {\n              \
  \      msg[i] = (char) ('a' + msg[i] + diff - 'z' - 1);\n                } else\
  \ {\n                    msg[i] += diff;\n                }\n            } else\
  \ if (msg[i] >= 'A' && msg[i] <= 'Z') {\n                if (msg[i] + diff >= 'Z')\
  \ {\n                    msg[i] = (char) ('A' + msg[i] + diff - 'Z' - 1);\n    \
  \            } else {\n                    msg[i] += diff;\n                }\n\
  \            }\n        }\n        return new String(msg);"
- "        // Fill in this function\n        return \"\";"
- "        final String abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String encoded\
  \ = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char\
  \ current = message.charAt(i);\n            if (abc.indexOf(current) > -1) {\n \
  \               if (abc.indexOf(current) < 13) {\n                    int index\
  \ = abc.indexOf(current) + 13;\n                    encoded += abc.charAt(index);\n\
  \                } else {\n                    int index = abc.indexOf(current)\
  \ - 13;\n                    encoded += abc.charAt(index);\n                }\n\
  \            } else {\n                encoded += current;\n            }\n    \
  \    }\n        return encoded;"
- '        // Your code here'
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String vowels\
  \ = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n        for (int\
  \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
  \            int k = alphabet.indexOf(c);\n            if (k < 0) {\n          \
  \      sb.append(c);\n            } else {\n                boolean isUpper = Character.isUpperCase(c);\n\
  \                c = alphabet.charAt(k);\n                if (vowels.indexOf(c)\
  \ >= 0) {\n                    c = alphabet.charAt((k + 2) % alphabet.length());\n\
  \                }\n                c = (isUpper) ? Character.toUpperCase(c) : c;\n\
  \                sb.append(c);\n            }\n        }\n        return sb.toString();"
- "        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            if (Character.isLowerCase(c))\
  \ {\n                sb.append(Character.toUpperCase(c));\n            } else if\
  \ (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString();"
- "    \tStringBuilder encodedMessage = new StringBuilder();\n    \tfor (int i = 0;\
  \ i < message.length(); i++) {\n    \t\tencodedMessage.append(swap(encodedMessage.append(message.charAt(i))));\n\
  \    \t}\n    \treturn encodedMessage.toString();"
- "        Map<Character, Character> map = new HashMap<>();\n        for (int i =\
  \ 0; i < 26; i++) {\n            map.put((char)('a' + i), (char)('a' + (i + 2) %\
  \ 26));\n            map.put((char)('A' + i), (char)('A' + (i + 2) % 26));\n   \
  \     }\n        map.put('a', 'c');\n        map.put('A', 'C');\n        map.put('e',\
  \ 'g');\n        map.put('E', 'G');\n        map.put('i', 'k');\n        map.put('I',\
  \ 'K');\n        map.put('o', 'q');\n        map.put('O', 'Q');\n        map.put('u',\
  \ 'w');\n        map.put('U', 'W');\n        map.put('y', 'a');\n        map.put('Y',\
  \ 'A');\n        StringBuilder ans = new StringBuilder();\n        for (int i =\
  \ 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n   \
  \         if (map.containsKey(c)) {\n                ans.append(map.get(c));\n \
  \           } else {\n                ans.append(c);\n            }\n        }\n\
  \        return ans.toString();"
- "        // Your code here\n        return null;"
- "    \tchar[] letters = message.toCharArray();\n    \tchar[] results = new char[letters.length];\n\
  \    \tint[] offsets = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1,\
  \ 1, 1, 1, 1, 1, 1, 1};\n    \tfor (int i = 0; i < letters.length; i++) {\n    \t\
  \tif (letters[i] >= 'a' && letters[i] <= 'z') {\n    \t\t\tresults[i] = (char)(letters[i]\
  \ - ('a' - 'A'));\n    \t\t} else if (letters[i] >= 'A' && letters[i] <= 'Z') {\n\
  \    \t\t\tresults[i] = (char)(letters[i] + ('a' - 'A'));\n    \t\t} else {\n  \
  \  \t\t\tresults[i] = letters[i];\n    \t\t}\n    \t}\n    \tfor (int i = 0; i <\
  \ letters.length; i++) {\n    \t\tif (letters[i] >= 'a' && letters[i] <= 'z') {\n\
  \    \t\t\tresults[i] = (char)(letters[i] + offsets[letters[i] - 'a']);\n    \t\t\
  \tif (results[i] > 'z') {\n    \t\t\t\tresults[i] = (char)('a' + (results[i] - 'z')\
  \ - 1);\n    \t\t\t}\n    \t\t} else if (letters[i] >= 'A' && letters[i] <= 'Z')\
  \ {\n    \t\t\tresults[i] = (char)(letters[i] + offsets[letters[i] - 'A']);\n  \
  \  \t\t\tif (results[i] > 'Z') {\n    \t\t\t\tresults[i] = (char)('A' + (results[i]\
  \ - 'Z') - 1);\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn new String(results);"
- "        // Your code here\n        return \"\";"
- "        HashMap<Character, Character> charMap = new HashMap<Character, Character>();\n\
  \        charMap.put('a', 'c');\n        charMap.put('e', 'g');\n        charMap.put('i',\
  \ 'k');\n        charMap.put('o', 'q');\n        charMap.put('u', 'w');\n      \
  \  charMap.put('A', 'C');\n        charMap.put('E', 'G');\n        charMap.put('I',\
  \ 'K');\n        charMap.put('O', 'Q');\n        charMap.put('U', 'W');\n      \
  \  StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            if (charMap.containsKey(message.charAt(i))) {\n          \
  \      sb.append(charMap.get(message.charAt(i)));\n            } else {\n      \
  \          sb.append(message.charAt(i));\n            }\n        }\n        return\
  \ sb.toString();"
- "        char[] arr = message.toCharArray();\n        for (int i = 0; i < arr.length;\
  \ i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i]\
  \ = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i]\
  \ = Character.toUpperCase(arr[i]);\n            }\n            if (arr[i] == 'a')\
  \ {\n                arr[i] = 'c';\n            } else if (arr[i] == 'e') {\n  \
  \              arr[i] = 'g';\n            } else if (arr[i] == 'i') {\n        \
  \        arr[i] = 'k';\n            } else if (arr[i] == 'o') {\n              \
  \  arr[i] = 'q';\n            } else if (arr[i] == 'u') {\n                arr[i]\
  \ = 'y';\n            }\n        }\n        return new String(arr);"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char curr = message.charAt(i);\n            if (Character.isUpperCase(curr))\
  \ {\n                sb.append(Character.toLowerCase(curr));\n            } else\
  \ if (Character.isLowerCase(curr)) {\n                sb.append(Character.toUpperCase(curr));\n\
  \            } else {\n                sb.append(curr);\n            }\n       \
  \ }\n        System.out.println(sb.toString());\n        char[] vowels = {'a', 'e',\
  \ 'i', 'o', 'u'};\n        HashMap<Character, Character> map = new HashMap<>();\n\
  \        for (int i = 0; i < vowels.length; i++) {\n            char next = vowels[(i\
  \ + 2) % vowels.length];\n            map.put(vowels[i], next);\n        }\n   \
  \     StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i < sb.length();\
  \ i++) {\n            char curr = sb.charAt(i);\n            if (map.containsKey(curr))\
  \ {\n                sb2.append(map.get(curr));\n            } else {\n        \
  \        sb2.append(curr);\n            }\n        }\n        return sb2.toString();"
- "        char[] word = message.toCharArray();\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
  .toCharArray();\n        int[] vowelIndexes = new int[word.length];\n        int\
  \ vowels = 0;\n        for (int i = 0; i < word.length; i++) {\n            char\
  \ letter = word[i];\n            char encoded = Character.isUpperCase(letter) ?\
  \ Character.toLowerCase(letter) : Character.toUpperCase(letter);\n            if\
  \ (Arrays.asList('a', 'e', 'i', 'o', 'u').contains(encoded)) {\n               \
  \ vowelIndexes[vowels] = i;\n                vowels++;\n            }\n        \
  \    word[i] = encoded;\n        }\n        for (int i = 0; i < vowels; i++) {\n\
  \            char encoded = word[vowelIndexes[i]];\n            char[] match = Arrays.stream(alphabet).filter(x\
  \ -> x == encoded).toArray(Character[]::new);\n            int index = Arrays.asList(alphabet).indexOf(match[0]);\n\
  \            word[vowelIndexes[i]] = index + 3 < alphabet.length ? alphabet[index\
  \ + 3] : alphabet[index + 3 - alphabet.length];\n        }\n        return new String(word);"
- "        char[] messageChars = message.toCharArray();\n        for (int i = 0; i\
  \ < messageChars.length; i++) {\n            char c = messageChars[i];\n       \
  \     if (Character.isUpperCase(c)) {\n                messageChars[i] = Character.toLowerCase(c);\n\
  \            } else if (Character.isLowerCase(c)) {\n                messageChars[i]\
  \ = Character.toUpperCase(c);\n            }\n        }\n        return new String(messageChars);"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] res = new char[message.length()];\n\
  \        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
  \            if (isVowel(ch, vowels)) {\n                res[i] = (char) (ch + 2);\n\
  \            } else {\n                res[i] = ch;\n            }\n        }\n\
  \        return String.valueOf(res);"
- "        char[] m = message.toCharArray();\n        String abc = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        String ABC = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        // encode swapping\
  \ case\n        for (int i = 0; i < m.length; i++) {\n            int a = abc.indexOf(m[i]);\n\
  \            int A = ABC.indexOf(m[i]);\n            if (a != -1) {\n          \
  \      m[i] = ABC.charAt(a);\n            } else if (A != -1) {\n              \
  \  m[i] = abc.charAt(A);\n            }\n        }\n        String res = String.valueOf(m);\n\
  \        // encode swap vowels\n        String[] s = res.split(\"\");\n        String[]\
  \ toSwap = \"aeiou\".split(\"\");\n        String[] swapped = \"cdfgjklmnpqrstvwxz\"\
  .split(\"\");\n        for (int i = 0; i < toSwap.length; i++) {\n            res\
  \ = res.replaceAll(toSwap[i], swapped[i]);\n        }\n        return res;"
- '        return "";'
- "        // Your code here\n        return \"\";"
- "        message = message.toUpperCase();\n        message = message.replaceAll(\"\
  [AEIOU]\", \"X\");\n        char[] chars = message.toCharArray();\n        for (int\
  \ i = 0; i < chars.length; i++) {\n            if (chars[i] == 'X') {\n        \
  \        chars[i] = (char) ((int) chars[i] + 2);\n            }\n        }\n   \
  \     message = new String(chars);\n        message = message.toLowerCase();\n \
  \       return message;"
- "        //YOUR CODE HERE\n        String string = \"\";\n        char[] alpha =\
  \ {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
  \        char[] vowel = {'a','e','i','o','u'};\n        char[] vowels = {'c','f','j','n','r'};\n\
  \        String[] words = message.split(\" \");\n        for(int w = 0; w < words.length;\
  \ w++){\n          String word = words[w];\n          for(int i = 0; i < word.length();\
  \ i++){\n            char c = word.charAt(i);\n            int index = Arrays.binarySearch(alpha,c);\n\
  \            if(index>=0){\n              index+=26;\n              if(Character.isUpperCase(c)){\n\
  \                string+=(alpha[index%26]).toUpperCase();\n              }else{\n\
  \                string+=(alpha[index%26]);\n              }\n            }else{\n\
  \              string+=c;\n            }\n          }\n          string+=\" \";\n\
  \        }\n        string = string.substring(0,string.length()-1);\n        for(int\
  \ i = 0; i < vowel.length; i++){\n          string = string.replace(vowel[i],vowels[i]);\n\
  \        }\n        return string;"
- "        // your code here\n        return null;"
- "        char[] charArr = message.toCharArray();\n        char[] result = new char[charArr.length];\n\
  \        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n     \
  \   HashMap<Character, Character> hash = new HashMap<Character, Character>();\n\
  \        for (int i = 0; i < alphabet.length; i++) {\n            char c = alphabet[i];\n\
  \            char c2 = alphabet[(i + 2) % alphabet.length];\n            hash.put(c,\
  \ c2);\n            hash.put(Character.toUpperCase(c), Character.toUpperCase(c2));\n\
  \        }\n        for (int i = 0; i < charArr.length; i++) {\n            if (hash.containsKey(charArr[i]))\
  \ {\n                result[i] = hash.get(charArr[i]);\n            } else {\n \
  \               result[i] = charArr[i];\n            }\n        }\n        return\
  \ new String(result);"
- "        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n     \
  \   List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        StringBuilder\
  \ sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++)\
  \ {\n            Character c = message.charAt(i);\n            if (vowels.contains(c))\
  \ {\n                int index = c + 2;\n                if (index > 25) {\n   \
  \                 index = index - 25;\n                }\n                Character\
  \ c1 = alphabet[index];\n                sb.append(c1);\n            } else {\n\
  \                sb.append(c);\n            }\n        }\n        return sb.toString();"
- '        return null;'
- "        String upperCase = message.toUpperCase();\n        String lowerCase = message.toLowerCase();\n\
  \        StringBuilder encodedMessage = new StringBuilder();\n        for (int i\
  \ = 0; i < message.length(); i++) {\n            if (message.charAt(i) == upperCase.charAt(i))\
  \ {\n                encodedMessage.append(lowerCase.charAt(i));\n            }\
  \ else {\n                encodedMessage.append(upperCase.charAt(i));\n        \
  \    }\n        }\n        return encodedMessage.toString();"
- "        // Your code here\n        return \"\";"
- '        // >>> your code here <<<'
- '        return null;'
- "        message = message.toUpperCase();\n        StringBuilder sb = new StringBuilder();\n\
  \        String vowels = \"AEIOU\";\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            char l = Character.toLowerCase(c);\n\
  \            int index = vowels.indexOf(l);\n            if (index >= 0) {\n   \
  \             sb.append(vowels.charAt((index + 2) % 5));\n            } else {\n\
  \                sb.append(c);\n            }\n        }\n        return sb.toString();"
- "        //Write your code here.\n        char []messageChar = message.toCharArray();\n\
  \        //retruns the first letter as a capital letter, followed by the rest of\
  \ the string.\n        String myString = message.substring(0, 1).toUpperCase() +\
  \ message.substring(1);\n        char []messageChar1 = myString.toCharArray();\n\
  \        String newString = \"\";\n        for(int i = 0; i < messageChar.length;\
  \ i++){\n          messageChar[i] = Character.toLowerCase(messageChar[i]);\n   \
  \       if(Character.isLetter(messageChar[i])){\n            if(messageChar[i] ==\
  \ 'v'){\n              messageChar[i] = 'x';\n            }\n            else if(messageChar[i]\
  \ == 'w'){\n              messageChar[i] = 'y';\n            }\n            else\
  \ if(messageChar[i] == 'x'){\n              messageChar[i] = 'z';\n            }\n\
  \            else if(messageChar[i] == 'y'){\n              messageChar[i] = 'a';\n\
  \            }\n            else if(messageChar[i] == 'z'){\n              messageChar[i]\
  \ = 'b';\n            }\n            else{\n              messageChar[i] = (char)((int)messageChar[i]\
  \ + 2);\n            }\n          }\n        }\n        for(int i = 0; i < messageChar1.length;\
  \ i++){\n          messageChar1[i] = Character.toUpperCase(messageChar1[i]);\n \
  \         if(Character.isLetter(messageChar1[i])){\n            if(messageChar1[i]\
  \ == 'V'){\n              messageChar1[i] = 'X';\n            }\n            else\
  \ if(messageChar1[i] == 'W'){\n              messageChar1[i] = 'Y';\n          \
  \  }\n            else if(messageChar1[i] == 'X'){\n              messageChar1[i]\
  \ = 'Z';\n            }\n            else if(messageChar1[i] == 'Y'){\n        \
  \      messageChar1[i] = 'A';\n            }\n            else if"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] charArray =\
  \ message.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n\
  \            if (vowels[i % vowels.length] == charArray[i]) {\n                charArray[i]\
  \ = vowels[(i + 2) % vowels.length];\n            }\n        }\n        return new\
  \ String(charArray);"
- "        StringBuilder sb = new StringBuilder();\n        char[] vowels = {'a',\
  \ 'e', 'i', 'o', 'u'};\n        for (char c : message.toCharArray()) {\n       \
  \     if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
  \ {\n                    c = Character.toLowerCase(c);\n                } else {\n\
  \                    c = Character.toUpperCase(c);\n                }\n        \
  \        if (Arrays.binarySearch(vowels, c) >= 0) {\n                    int index\
  \ = (Arrays.binarySearch(vowels, c) + 2) % vowels.length;\n                    c\
  \ = vowels[index];\n                }\n            }\n            sb.append(c);\n\
  \        }\n        return sb.toString();"
- "        return message.chars()\n            .mapToObj(i -> (char)i)\n         \
  \   .map(i -> Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i))\n\
  \            .map(i -> \"aeiou\".indexOf(i) >= 0 ? \"cdfghjklmnpqrstvwxyz\".charAt(\"\
  aeiou\".indexOf(i)) : i)\n            .map(i -> i.toString())\n            .collect(Collectors.joining());"
- "        message = message.toUpperCase();\n        String[] vowels = {\"A\", \"\
  E\", \"I\", \"O\", \"U\"};\n        char[] arr = message.toCharArray();\n      \
  \  int i;\n        for (i = 0; i < arr.length; i++) {\n            int v;\n    \
  \        for (v = 0; v < vowels.length; v++) {\n                if (arr[i] == vowels[v].charAt(0))\
  \ {\n                    arr[i] = vowels[(v + 2) % vowels.length].charAt(0);\n \
  \                   break;\n                }\n            }\n            if (arr[i]\
  \ == 'Z') {\n                arr[i] = 'B';\n            } else if (arr[i] == 'Y')\
  \ {\n                arr[i] = 'A';\n            } else if (v == vowels.length) {\n\
  \                arr[i] = (char) (arr[i] + 2);\n            }\n        }\n     \
  \   return new String(arr);"
- '        // Your code here'
- "        // TODO your code here\n        return \"\";"
- "        char[] encodedMessage = new char[message.length()];\n        for (int i\
  \ = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n \
  \           if (Character.isUpperCase(c)) {\n                encodedMessage[i] =\
  \ Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n\
  \                encodedMessage[i] = Character.toUpperCase(c);\n            } else\
  \ {\n                encodedMessage[i] = c;\n            }\n        }\n        String\
  \ vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n       \
  \ for (int i = 0; i < encodedMessage.length; i++) {\n            char c = encodedMessage[i];\n\
  \            if (vowels.indexOf(c) != -1) {\n                sb.append(vowels.charAt((vowels.indexOf(c)\
  \ + 2) % vowels.length()));\n            } else {\n                sb.append(c);\n\
  \            }\n        }\n        return sb.toString();"
- "        char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length;\
  \ i++) {\n            if (Character.isUpperCase(letters[i])) {\n               \
  \ letters[i] = Character.toLowerCase(letters[i]);\n            } else {\n      \
  \          letters[i] = Character.toUpperCase(letters[i]);\n            }\n    \
  \        switch (letters[i]) {\n                case 'a': letters[i] = 'c'; break;\n\
  \                case 'e': letters[i] = 'g'; break;\n                case 'i': letters[i]\
  \ = 'k'; break;\n                case 'o': letters[i] = 'q'; break;\n          \
  \      case 'u': letters[i] = 'y'; break;\n            }\n        }\n        return\
  \ new String(letters);"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char ch = message.charAt(i);\n            if (ch >= 'a' &&\
  \ ch <= 'z') {\n                sb.append((char)(ch - 'a' + 'A'));\n           \
  \ } else if (ch >= 'A' && ch <= 'Z') {\n                sb.append((char)(ch - 'A'\
  \ + 'a'));\n            } else {\n                sb.append(ch);\n            }\n\
  \        }\n        return sb.toString();"
- '        return "";'
- '        return message;'
- "        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray())\
  \ {\n            if (c >= 'a' && c <= 'z') {\n                sb.append((char) (c\
  \ + ('A' - 'a')));\n            } else if (c >= 'A' && c <= 'Z') {\n           \
  \     sb.append((char) (c + ('a' - 'A')));\n            } else {\n             \
  \   sb.append(c);\n            }\n        }\n        return sb.toString();"
- "        // Complete this function.\n        String s = \"\";\n        String vowels\
  \ = \"aeiou\";\n        for (int i = 0; i < message.length(); i++) {\n         \
  \   if (Character.isLowerCase(message.charAt(i))) {\n                if (vowels.contains(Character.toString(message.charAt(i))))\
  \ {\n                    char c = message.charAt(i);\n                    int x\
  \ = (int)c;\n                    if (x == 115) {\n                        s += 'a';\n\
  \                    } else if (x == 105) {\n                        s += 'e';\n\
  \                    } else if (x == 117) {\n                        s += 'i';\n\
  \                    } else if (x == 111) {\n                        s += 'o';\n\
  \                    } else if (x == 121) {\n                        s += 'u';\n\
  \                    } else {\n                        x += 2;\n               \
  \         s += (char)x;\n                    }\n                } else {\n     \
  \               char c = message.charAt(i);\n                    int x = (int)c;\n\
  \                    x -= 32;\n                    s += (char)x;\n             \
  \   }\n            } else if (Character.isUpperCase(message.charAt(i))) {\n    \
  \            if (vowels.contains(Character.toString(message.charAt(i)).toLowerCase()))\
  \ {\n                    char c = message.charAt(i);\n                    int x\
  \ = (int)c;\n                    if (x == 69) {\n                        s += 'b';\n\
  \                    } else if (x == 73) {\n                        s += 'f';\n\
  \                    } else if (x == 85) {\n                        s += 'j';\n\
  \                    } else if (x == 79) {\n                        s += 'p';\n\
  \                    } else if (x == 89) {\n                        s += 'v';\n\
  \                    } else {\n                        x += 2;\n               \
  \         s += (char)x;\n                    }\n                } else {\n     \
  \               char c = message.charAt(i);\n                    int x = (int)c;\n\
  \                    x += 32;\n                    s += (char)x;\n             \
  \   }\n            } else {\n                s += message.charAt(i);\n         \
  \   }\n       "
- '        return null;'
- "        // YOUR CODE HERE\n        return \"\";"
- "        // TODO: implement this function\n        return null;"
- "        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            int c = message.charAt(i);\n            if ('a' <= c && c\
  \ <= 'z') {\n                sb.append((char)('A' + (c - 'a')));\n            }\
  \ else if ('A' <= c && c <= 'Z') {\n                sb.append((char)('a' + (c -\
  \ 'A')));\n            } else {\n                sb.append((char)c);\n         \
  \   }\n        }\n        message = sb.toString();\n        return message;"
- '        return message.toUpperCase();'
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String vowels\
  \ = \"aeiou\";\n        StringBuilder encoded = new StringBuilder();\n        //\
  \ TODO: Add your code here\n        return encoded.toString();"
- '        return "Test";'
- '        throw new NotImplementedException();'
- "        // Implement your solution here\n        return \"\";"
- '        throw new RuntimeException("not implemented");'
- "        StringBuilder result = new StringBuilder();\n        String vowels = \"\
  aeiou\";\n        // We need the index of the letter to know which letter is\n \
  \       // to be replace.\n        int index = 0;\n        for (char c : message.toCharArray())\
  \ {\n            // If a vowel, replace with the letter 2 places ahead\n       \
  \     if (vowels.indexOf(c) != -1) {\n                result.append(vowels.charAt((vowels.indexOf(c)\
  \ + 2) % 5));\n            } else {\n                // Otherwise toggle the case.\n\
  \                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n\
  \                } else {\n                    result.append(Character.toUpperCase(c));\n\
  \                }\n            }\n        }\n        return result.toString();"
- "        StringBuilder result = new StringBuilder();\n        String vowels = \"\
  aeiou\";\n        String upcase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String\
  \ lowcase = \"abcdefghijklmnopqrstuvwxyz\";\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char cur = message.charAt(i);\n            if (vowels.indexOf(cur)\
  \ != -1) {\n                char next = (char) ((cur - 'a' + 2) % 26 + 'a');\n \
  \               result.append(next);\n            } else if (upcase.indexOf(cur)\
  \ != -1) {\n                result.append(lowcase.charAt(upcase.indexOf(cur)));\n\
  \            } else if (lowcase.indexOf(cur) != -1) {\n                result.append(upcase.charAt(lowcase.indexOf(cur)));\n\
  \            } else {\n                result.append(cur);\n            }\n    \
  \    }\n        return result.toString();"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] encoded = new\
  \ char[message.length()];\n        char[] current = message.toCharArray();\n   \
  \     for (int i = 0; i < message.length(); i++) {\n            boolean isVowel\
  \ = false;\n            for (int j = 0; j < vowels.length; j++) {\n            \
  \    if (current[i] == vowels[j]) {\n                    int index = vowels[j] +\
  \ 2 - 'a';\n                    index = index % vowels.length;\n               \
  \     encoded[i] = vowels[index];\n                    isVowel = true;\n       \
  \             break;\n                }\n            }\n            if (!isVowel)\
  \ {\n                encoded[i] = Character.isUpperCase(current[i]) ? Character.toLowerCase(current[i])\
  \ : Character.toUpperCase(current[i]);\n            }\n        }\n        return\
  \ new String(encoded);"
- '        return null;'
- "        StringBuilder output = new StringBuilder();\n        for (char c : message.toCharArray())\
  \ {\n            if (Character.isLetter(c)) {\n                output.append(Character.isUpperCase(c)\
  \ ?\n                    Character.toLowerCase(c) : Character.toUpperCase(c));\n\
  \            } else {\n                output.append(c);\n            }\n      \
  \  }\n        return output.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            char newChar = c;\n\
  \            if (Character.isLetter(c)) {\n                newChar = c ^ 32;\n \
  \               if (c == 'u') newChar = 'a';\n                else if (c == 'e')\
  \ newChar = 'i';\n                else if (c == 'o') newChar = 'u';\n          \
  \      else if (c == 'a') newChar = 'e';\n                else if (c == 'i') newChar\
  \ = 'o';\n            }\n            sb.append(newChar);\n        }\n        return\
  \ sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        int len = message.length();\n\
  \        for (int i = 0; i < len; i++) {\n            char c = message.charAt(i);\n\
  \            if (c >= 'a' && c <= 'z') {\n                sb.append((char)(c - 32));\n\
  \            } else if (c >= 'A' && c <= 'Z') {\n                sb.append((char)(c\
  \ + 32));\n            } else {\n                sb.append(c);\n            }\n\
  \        }\n        String encoded = sb.toString();\n        sb = new StringBuilder();\n\
  \        len = encoded.length();\n        String vowels = \"AEIOU\";\n        for\
  \ (int i = 0; i < len; i++) {\n            char c = encoded.charAt(i);\n       \
  \     if (vowels.indexOf(c) != -1) {\n                sb.append((char)(c + 2));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString();"
- '        return null;'
- "        // TODO\n        return \"\";"
- '        return "";'
- "        // write your code here\n        return \"\";"
- '        return null;'
- "        // BEGIN SOLUTION\n        return message.chars()\n          .map(c ->\
  \ {\n              if (Character.isLetter(c)) {\n                  c = Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                  switch\
  \ (c) {\n                      case 'a':\n                      case 'e':\n    \
  \                  case 'i':\n                      case 'o':\n                \
  \      case 'u':\n                          c += 2;\n                          break;\n\
  \                      case 'y':\n                          c = 'a';\n         \
  \                 break;\n                      case 'z':\n                    \
  \      c = 'b';\n                          break;\n                  }\n       \
  \       }\n              return c;\n          })\n          .collect(StringBuilder::new,\n\
  \                   StringBuilder::appendCodePoint,\n                   StringBuilder::append)\n\
  \          .toString();\n        // END SOLUTION"
- "        StringBuilder output = new StringBuilder();\n        String vowels = \"\
  aeiou\";\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        HashMap<Character,\
  \ Integer> vowelIndices = new HashMap<>();\n        HashMap<Character, Integer>\
  \ alphabetIndices = new HashMap<>();\n        for (int i = 0; i < vowels.length();\
  \ i++) {\n            vowelIndices.put(vowels.charAt(i), i);\n        }\n      \
  \  for (int i = 0; i < alphabet.length(); i++) {\n            alphabetIndices.put(alphabet.charAt(i),\
  \ i);\n        }\n        for (int i = 0; i < message.length(); i++) {\n       \
  \     char c = message.charAt(i);\n            if (Character.isUpperCase(c)) {\n\
  \                c = Character.toLowerCase(c);\n            }\n            if (vowelIndices.containsKey(c))\
  \ {\n                char vowel = c;\n                int index = vowelIndices.get(vowel);\n\
  \                char newVowel = vowels.charAt((index + 2) % 5);\n             \
  \   c = newVowel;\n            }\n            if (Character.isUpperCase(message.charAt(i)))\
  \ {\n                c = Character.toUpperCase(c);\n            }\n            output.append(c);\n\
  \        }\n        return output.toString();"
- "        String ans = \"\";\n        String vowels = \"aeiou\";\n        String\
  \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            if (vowels.indexOf(c)\
  \ != -1) {\n                ans += alphabet.charAt((alphabet.indexOf(c) + 2) % 26);\n\
  \            } else if (Character.isUpperCase(c)) {\n                ans += Character.toLowerCase(c);\n\
  \            } else if (Character.isLowerCase(c)) {\n                ans += Character.toUpperCase(c);\n\
  \            } else {\n                ans += c;\n            }\n        }\n   \
  \     return ans;"
- '        throw new UnsupportedOperationException("please implement me!");'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
  \ i++) {\n            char c = message.charAt(i);\n            int code = (int)\
  \ c;\n            if (Character.isUpperCase(c))\n                code += 2;\n  \
  \          else if (Character.isLowerCase(c))\n                code -= 2;\n    \
  \        char encoded = (char) code;\n            sb.append(encoded);\n        }\n\
  \        return sb.toString();"
- "      StringBuffer stringBuffer = new StringBuffer();\n      for (char c : message.toCharArray())\
  \ {\n        if (c == 'a') {\n          stringBuffer.append('c');\n        } else\
  \ if (c == 'e') {\n          stringBuffer.append('g');\n        } else if (c ==\
  \ 'i') {\n          stringBuffer.append('k');\n        } else if (c == 'o') {\n\
  \          stringBuffer.append('q');\n        } else if (c == 'u') {\n         \
  \ stringBuffer.append('y');\n        } else if (c == 'A') {\n          stringBuffer.append('C');\n\
  \        } else if (c == 'E') {\n          stringBuffer.append('G');\n        }\
  \ else if (c == 'I') {\n          stringBuffer.append('K');\n        } else if (c\
  \ == 'O') {\n          stringBuffer.append('Q');\n        } else if (c == 'U') {\n\
  \          stringBuffer.append('Y');\n        } else if (Character.isUpperCase(c))\
  \ {\n          stringBuffer.append(Character.toLowerCase(c));\n        } else {\n\
  \          stringBuffer.append(Character.toUpperCase(c));\n        }\n      }\n\
  \      return stringBuffer.toString();"
- "\tString encode = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t   \
  \ char c = message.charAt(i);\n\t    int k = (int) c;\n\t    if (c == ' ') {\n\t\
  \tencode += \" \";\n\t    } else if (c > 'Z') {\n\t\tk = (int) c - 32;\n\t\tif (c\
  \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t    k += 2;\n\t\
  \t    if (k > 90) {\n\t\t\tk -= 26;\n\t\t    }\n\t\t}\n\t\tencode += (char) k;\n\
  \t    } else {\n\t\tif (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
  \ {\n\t\t    k += 2;\n\t\t    if (k > 90) {\n\t\t\tk -= 26;\n\t\t    }\n\t\t}\n\t\
  \tencode += (char) k;\n\t    }\n\t}\n\treturn encode;"
- "        StringBuilder sb = new StringBuilder();\n        int vowelInd = 0;\n  \
  \      for (int i = 0; i < message.length(); i++) {\n            if (vowelInd ==\
  \ 5) {\n                vowelInd = 0;\n            }\n            char ch = message.charAt(i);\n\
  \            if (ch == 'a' || ch == 'A') {\n                sb.append(Character.toUpperCase(vowels[vowelInd]));\n\
  \                vowelInd++;\n            } else if (ch == 'e' || ch == 'E') {\n\
  \                sb.append(Character.toUpperCase(vowels[vowelInd]));\n         \
  \       vowelInd++;\n            } else if (ch == 'i' || ch == 'I') {\n        \
  \        sb.append(Character.toUpperCase(vowels[vowelInd]));\n                vowelInd++;\n\
  \            } else if (ch == 'o' || ch == 'O') {\n                sb.append(Character.toUpperCase(vowels[vowelInd]));\n\
  \                vowelInd++;\n            } else if (ch == 'u' || ch == 'U') {\n\
  \                sb.append(Character.toUpperCase(vowels[vowelInd]));\n         \
  \       vowelInd++;\n            } else {\n                sb.append(Character.toUpperCase(ch));\n\
  \            }\n        }\n        return sb.toString();"
- "        String temp = \"\";\n        for (int i = 0; i < message.length(); i++)\
  \ {\n            if (Character.isUpperCase(message.charAt(i))) {\n             \
  \   temp += Character.toLowerCase(message.charAt(i));\n            } else {\n  \
  \              temp += Character.toUpperCase(message.charAt(i));\n            }\n\
  \        }\n        String encoded = \"\";\n        for (int i = 0; i < temp.length();\
  \ i++) {\n            char c = temp.charAt(i);\n            if (c == 'a') {\n  \
  \              encoded += 'c';\n            } else if (c == 'e') {\n           \
  \     encoded += 'g';\n            } else if (c == 'i') {\n                encoded\
  \ += 'k';\n            } else if (c == 'o') {\n                encoded += 'q';\n\
  \            } else if (c == 'u') {\n                encoded += 'y';\n         \
  \   } else {\n                encoded += c;\n            }\n        }\n        return\
  \ encoded;"
- "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        char [] messageArr\
  \ = message.toCharArray();\n        int length = messageArr.length;\n        String\
  \ toReturn = \"\";\n        int index = 0;\n        for (char c : messageArr) {\n\
  \            int letterIndex = alphabet.indexOf(c);\n            if (letterIndex\
  \ >= 0) {\n                if (index % 2 == 0) {\n                    toReturn +=\
  \ Character.toUpperCase(c);\n                } else {\n                    toReturn\
  \ += Character.toLowerCase(c);\n                }\n                index++;\n  \
  \          } else {\n                toReturn += c;\n            }\n        }\n\
  \        return toReturn;"
language: java
name: HumanEval_93_encode
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes a message, and encodes in such\
  \ a \n    // way that it swaps case of all letters, replaces all vowels in \n  \
  \  // the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
  \    // 'tHKS KS C MGSSCGG'\n    public static String encode(String message) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
  )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n\
  \    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is\
  \ a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw\
  \ WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
