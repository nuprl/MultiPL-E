name: HumanEval_103_rounded_avg
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int.int_data(-1);\n        }\n        int avg = (n\
    \ + m) / 2;\n        String binaryString = Integer.toBinaryString(avg);\n    \
    \    return new Union_String_int.String_data(\"0b\" + binaryString);\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2lac34a_.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2lac34a_.java:20:\
    \ error: package Union_String_int does not exist\n            return new Union_String_int.int_data(-1);\n\
    \                                       ^\n/tmp/tmp2lac34a_.java:24: error: package\
    \ Union_String_int does not exist\n        return new Union_String_int.String_data(\"\
    0b\" + binaryString);\n                                   ^\n/tmp/tmp2lac34a_.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2lac34a_.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2lac34a_.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2lac34a_.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2lac34a_.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2lac34a_.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2lac34a_.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(\"\
    \", -1);\n        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n\
    \        double avg = sum / (m - n + 1.0);\n        double roundAvg = Math.round(avg);\n\
    \        int binary = Integer.parseInt(Integer.toBinaryString((int) roundAvg));\n\
    \        return new Union_String_int(\"0b\" + Integer.toBinaryString(binary),\
    \ 0);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgbnrx912.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgbnrx912.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    \", -1);\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpgbnrx912.java:25: error: cannot find symbol\n\
    \        return new Union_String_int(\"0b\" + Integer.toBinaryString(binary),\
    \ 0);\n                   ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpgbnrx912.java:26: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpgbnrx912.java:29: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpgbnrx912.java:30: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpgbnrx912.java:31: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpgbnrx912.java:32: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpgbnrx912.java:33: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpgbnrx912.java:34: error: cannot find symbol\n    assert(ro"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Validations\n      \
    \  if (n > m) {\n            return new Union_String_int(-1);\n        }\n   \
    \     // Calculate the mean of the integers\n        int sum = IntStream.rangeClosed(n,\
    \ m).sum();\n        double avg = (double) sum / (m - n + 1);\n        // Round\
    \ it to the nearest integer\n        int roundedAvg = (int) Math.round(avg);\n\
    \        // Convert the rounded average to binary\n        String bin = Integer.toBinaryString(roundedAvg);\n\
    \        return new Union_String_int(\"0b\" + bin);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk51w8ad9.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpk51w8ad9.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpk51w8ad9.java:30: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + bin);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpk51w8ad9.java:31: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpk51w8ad9.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk51w8ad9.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk51w8ad9.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk51w8ad9.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk51w8ad9.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk51w8ad9.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        Union_String_int\
    \ ret_val = new Union_String_int();\n        if (n > m) {\n            ret_val.set_int(-1);\n\
    \            return ret_val;\n        }\n        int n_sum = 0;\n        for (int\
    \ i = n; i <= m; i++) {\n            n_sum += i;\n        }\n        int avg =\
    \ (int) Math.round((double) n_sum / (m - n + 1));\n        ret_val.set_String(Integer.toBinaryString(avg));\n\
    \        return ret_val;\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfmwo9mew.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpfmwo9mew.java:22:\
    \ error: cannot find symbol\n        Union_String_int ret_val = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpfmwo9mew.java:22:\
    \ error: cannot find symbol\n        Union_String_int ret_val = new Union_String_int();\n\
    \                                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpfmwo9mew.java:34: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpfmwo9mew.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfmwo9mew.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfmwo9mew.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfmwo9mew.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfmwo9mew.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfmwo9mew.java:42: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (54"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(\"\
    -1\");\n        int mid = (n + m) / 2;\n        String binary = Integer.toBinaryString(mid);\n\
    \        return new Union_String_int(\"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rkwypi9.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2rkwypi9.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp2rkwypi9.java:22: error: cannot find symbol\n\
    \        return new Union_String_int(\"0b\" + binary);\n                   ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp2rkwypi9.java:23:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2rkwypi9.java:26:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2rkwypi9.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2rkwypi9.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2rkwypi9.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2rkwypi9.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2rkwypi9.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return null;\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjaory05h.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjaory05h.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjaory05h.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjaory05h.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjaory05h.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjaory05h.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjaory05h.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjaory05h.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjaory05h.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Variant_int(-1));\n        }\n        double\
    \ sum = 0;\n        int avg = 0;\n        for (int i = n; i <= m; i++) {\n   \
    \         sum += i;\n        }\n        avg = (int) Math.round(sum / (m - n +\
    \ 1));\n        return new Union_String_int(new Variant_String(\"0b\" + Integer.toBinaryString(avg)));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpupoxogi0.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpupoxogi0.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Variant_int(-1));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpupoxogi0.java:20: error: cannot find symbol\n            return\
    \ new Union_String_int(new Variant_int(-1));\n                               \
    \             ^\n  symbol:   class Variant_int\n  location: class Problem\n/tmp/tmpupoxogi0.java:28:\
    \ error: cannot find symbol\n        return new Union_String_int(new Variant_String(\"\
    0b\" + Integer.toBinaryString(avg)));\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpupoxogi0.java:28: error:\
    \ cannot find symbol\n        return new Union_String_int(new Variant_String(\"\
    0b\" + Integer.toBinaryString(avg)));\n                                      \
    \  ^\n  symbol:   class Variant_String\n  location: class Problem\n/tmp/tmpupoxogi0.java:29:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpupoxogi0.java:32:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpupoxogi0.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpupoxogi0.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpupoxogi0.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997))."
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Variant1<>(-1));\n        } else {\n    \
    \        int avg = (n + m) / 2;\n            StringBuilder result = new StringBuilder();\n\
    \            while (avg != 0) {\n                int rem = avg % 2;\n        \
    \        result.append(rem);\n                avg = avg / 2;\n            }\n\
    \            result.reverse();\n            return new Union_String_int(new Variant1<>(\"\
    0b\" + result.toString()));\n        }\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0j42qkt2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0j42qkt2.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Variant1<>(-1));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp0j42qkt2.java:30: error: cannot find symbol\n            return\
    \ new Union_String_int(new Variant1<>(\"0b\" + result.toString()));\n        \
    \               ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp0j42qkt2.java:32: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp0j42qkt2.java:35: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp0j42qkt2.java:36: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp0j42qkt2.java:37: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp0j42qkt2.java:38: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp0j42qkt2.java:39: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp0j42qkt2.java:40: error: cannot find symbol\n    ass"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // IMPLEMENT ME\n     \
    \   return null;\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaqit3l48.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpaqit3l48.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpaqit3l48.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpaqit3l48.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpaqit3l48.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpaqit3l48.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpaqit3l48.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpaqit3l48.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpaqit3l48.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Tests\n        if (n\
    \ > m) return new Union_String_int().set_int(-1);\n        if (n == m) return\
    \ new Union_String_int().set_String(Integer.toBinaryString(n));\n        int sum\
    \ = IntStream.rangeClosed(n, m).sum();\n        double roundedAvg = Math.round((double)\
    \ sum / (m - n + 1));\n        // Tests\n        if (roundedAvg == (int) roundedAvg)\
    \ return new Union_String_int().set_String(Integer.toBinaryString((int) roundedAvg));\n\
    \        return new Union_String_int().set_int(-1);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiikpt7ec.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpiikpt7ec.java:20:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int().set_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpiikpt7ec.java:21: error: cannot find symbol\n       \
    \ if (n == m) return new Union_String_int().set_String(Integer.toBinaryString(n));\n\
    \                               ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpiikpt7ec.java:25: error: cannot find symbol\n       \
    \ if (roundedAvg == (int) roundedAvg) return new Union_String_int().set_String(Integer.toBinaryString((int)\
    \ roundedAvg));\n                                                       ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpiikpt7ec.java:26:\
    \ error: cannot find symbol\n        return new Union_String_int().set_int(-1);\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpiikpt7ec.java:27: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpiikpt7ec.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpiikpt7ec.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpiikpt7ec.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpiikpt7ec.java:33: error: cannot find symbol\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(\"\
    -1\");\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n       \
    \     sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n\
    \        int roundedAvg = (int) Math.round(avg);\n        return new Union_String_int(Integer.toBinaryString(roundedAvg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwffidou9.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpwffidou9.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpwffidou9.java:26: error: cannot find symbol\n\
    \        return new Union_String_int(Integer.toBinaryString(roundedAvg));\n  \
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpwffidou9.java:27: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpwffidou9.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpwffidou9.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpwffidou9.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpwffidou9.java:33: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpwffidou9.java:34: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpwffidou9.java:35: error: cannot find symbol\n    assert(roundedAvg"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return null;\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyiuf8a73.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyiuf8a73.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyiuf8a73.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyiuf8a73.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyiuf8a73.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyiuf8a73.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyiuf8a73.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyiuf8a73.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyiuf8a73.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // @@@:return;\n      \
    \  if (n > m) {\n            return new Union_String_int(null, -1);\n        }\n\
    \        int sum = 0;\n        int nl = (int)Math.floor(Math.log(n) / Math.log(2));\n\
    \        int ml = (int)Math.floor(Math.log(m) / Math.log(2));\n        if (nl\
    \ == ml) {\n            return new Union_String_int(\"0b\" + Integer.toBinaryString(n),\
    \ null);\n        }\n        sum += (1 << nl) - n;\n        sum += m - (1 << ml);\n\
    \        for (int i = nl + 1; i < ml; i++) {\n            sum += (1 << i);\n \
    \       }\n        int avg = (int)Math.round((double)sum / (m - n + 1));\n   \
    \     return new Union_String_int(\"0b\" + Integer.toBinaryString(avg), null);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpis9u4cbb.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpis9u4cbb.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(null, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpis9u4cbb.java:27: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(n), null);\n          \
    \             ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpis9u4cbb.java:35: error: cannot find symbol\n        return new Union_String_int(\"\
    0b\" + Integer.toBinaryString(avg), null);\n                   ^\n  symbol:  \
    \ class Union_String_int\n  location: class Problem\n/tmp/tmpis9u4cbb.java:36:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpis9u4cbb.java:39:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpis9u4cbb.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpis9u4cbb.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpis9u4cbb.java:42: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpis9u4cbb.java:43: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Union_int(-1));\n        } else {\n     \
    \       return new Union_String_int(new Union_String(Integer.toBinaryString((n\
    \ + m) / 2)));\n        }\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnpxeyme2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpnpxeyme2.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_int(-1));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpnpxeyme2.java:20: error: cannot find symbol\n            return\
    \ new Union_String_int(new Union_int(-1));\n                                 \
    \           ^\n  symbol:   class Union_int\n  location: class Problem\n/tmp/tmpnpxeyme2.java:22:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_String(Integer.toBinaryString((n\
    \ + m) / 2)));\n                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpnpxeyme2.java:22: error: cannot find symbol\n\
    \            return new Union_String_int(new Union_String(Integer.toBinaryString((n\
    \ + m) / 2)));\n                                            ^\n  symbol:   class\
    \ Union_String\n  location: class Problem\n/tmp/tmpnpxeyme2.java:24: error: cannot\
    \ find symbol\nreturn new Union_String_int();\n           ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpnpxeyme2.java:27: error:\
    \ cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpnpxeyme2.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpnpxeyme2.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpnpxeyme2.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((996), ("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Union_String_int.Union_String_int_Element_1(-1));\n\
    \        }\n        else {\n            return new Union_String_int(new Union_String_int.Union_String_int_Element_0(Integer.toBinaryString((n\
    \ + m) / 2)));\n        }\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzd1_mv8.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpdzd1_mv8.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_String_int.Union_String_int_Element_1(-1));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpdzd1_mv8.java:20: error: package Union_String_int does not\
    \ exist\n            return new Union_String_int(new Union_String_int.Union_String_int_Element_1(-1));\n\
    \                                                            ^\n/tmp/tmpdzd1_mv8.java:23:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_String_int.Union_String_int_Element_0(Integer.toBinaryString((n\
    \ + m) / 2)));\n                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpdzd1_mv8.java:23: error: package Union_String_int\
    \ does not exist\n            return new Union_String_int(new Union_String_int.Union_String_int_Element_0(Integer.toBinaryString((n\
    \ + m) / 2)));\n                                                            ^\n\
    /tmp/tmpdzd1_mv8.java:25: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpdzd1_mv8.java:28: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpdzd1_mv8.java:29: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpdzd1_mv8.java:30: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ cla"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(null, -1);\n        }\n        double avg = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            avg += i;\n        }\n  \
    \      avg /= (m - n + 1);\n        int avgInt = (int) Math.round(avg);\n    \
    \    return new Union_String_int(\"0b\" + Integer.toBinaryString(avgInt), null);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp62943hsz.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp62943hsz.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(null, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp62943hsz.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(avgInt), null);\n     \
    \              ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp62943hsz.java:29: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp62943hsz.java:32: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp62943hsz.java:33: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp62943hsz.java:34: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp62943hsz.java:35: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp62943hsz.java:36: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp62943hsz.java:37: error: cannot find symbol\n    assert(roundedAvg("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        //if n is greater than\
    \ m return -1\n        if (n > m) {\n            return new Union_String_int(-1);\n\
    \        }\n        //calculate avg\n        float avg = (float) (n + m) / 2;\n\
    \        //round the avg\n        int roundedAvg = Math.round(avg);\n        //convert\
    \ the avg to binary\n        String binaryAvg = Integer.toBinaryString(roundedAvg);\n\
    \        //return the binary avg prefixed with 0b\n        return new Union_String_int(\"\
    0b\" + binaryAvg);\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu_8xdntr.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpu_8xdntr.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpu_8xdntr.java:30: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + binaryAvg);\n                   ^\n  symbol: \
    \  class Union_String_int\n  location: class Problem\n/tmp/tmpu_8xdntr.java:31:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpu_8xdntr.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu_8xdntr.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu_8xdntr.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu_8xdntr.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu_8xdntr.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu_8xdntr.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // IMPLEMENT ME\n     \
    \   int sum = 0;\n        for (int i = n; i <= m; i++)\n            sum += i;\n\
    \        if (n > m)\n            return new Union_String_int(\"-1\");\n      \
    \  double avg = (double) sum / (m - n + 1);\n        int roundedAvg = (int) Math.round(avg);\n\
    \        return new Union_String_int(Integer.toBinaryString(roundedAvg));\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ibx8vgq.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3ibx8vgq.java:24:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp3ibx8vgq.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(Integer.toBinaryString(roundedAvg));\n                \
    \   ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp3ibx8vgq.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3ibx8vgq.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ibx8vgq.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ibx8vgq.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ibx8vgq.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ibx8vgq.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ibx8vgq.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        throw new UnsupportedOperationException(\"\
    Not implemented yet\");\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nuww9iv.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4nuww9iv.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4nuww9iv.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp4nuww9iv.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp4nuww9iv.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp4nuww9iv.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp4nuww9iv.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp4nuww9iv.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp4nuww9iv.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return Union_String_int.intNew(-1);\n        }\n        int sum = 0;\n  \
    \      int count = 0;\n        while (n <= m) {\n            sum += n;\n     \
    \       n++;\n            count++;\n        }\n        double avg = (double) sum\
    \ / count;\n        int roundedAvg = (int) Math.round(avg);\n        return Union_String_int.stringNew(Integer.toBinaryString(roundedAvg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2n8___t1.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2n8___t1.java:20:\
    \ error: cannot find symbol\n            return Union_String_int.intNew(-1);\n\
    \                   ^\n  symbol:   variable Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp2n8___t1.java:31: error: cannot find symbol\n        return\
    \ Union_String_int.stringNew(Integer.toBinaryString(roundedAvg));\n          \
    \     ^\n  symbol:   variable Union_String_int\n  location: class Problem\n/tmp/tmp2n8___t1.java:32:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2n8___t1.java:35:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2n8___t1.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2n8___t1.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2n8___t1.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2n8___t1.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2n8___t1.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((185), ("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        //int result;\n       \
    \ // result = n;\n        // while (n < m) {\n        //     n += 1;\n       \
    \ //     result += n;\n        // }\n        // if (n > m) return Union_String_int.intOnly(-1);\n\
    \        // result = result / (m - n + 1);\n        // return Union_String_int.StringOnly(\"\
    0b\" + Integer.toBinaryString(result));\n        return (n > m) ? Union_String_int.intOnly(-1)\
    \ : Union_String_int.StringOnly(\"0b\" + Integer.toBinaryString(n + m >> 1));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5g9sn26.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpe5g9sn26.java:28:\
    \ error: cannot find symbol\n        return (n > m) ? Union_String_int.intOnly(-1)\
    \ : Union_String_int.StringOnly(\"0b\" + Integer.toBinaryString(n + m >> 1));\n\
    \                         ^\n  symbol:   variable Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpe5g9sn26.java:28: error: cannot find symbol\n       \
    \ return (n > m) ? Union_String_int.intOnly(-1) : Union_String_int.StringOnly(\"\
    0b\" + Integer.toBinaryString(n + m >> 1));\n                                \
    \                        ^\n  symbol:   variable Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpe5g9sn26.java:29: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpe5g9sn26.java:32: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpe5g9sn26.java:33: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpe5g9sn26.java:34: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpe5g9sn26.java:35: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpe5g9sn26.java:36: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(true, -1);\n        } else {\n            int\
    \ avg = (int) Math.round((n + m) / 2.0);\n            String binary = Integer.toBinaryString(avg);\n\
    \            return new Union_String_int(false, binary);\n        }\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsk2xzil2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpsk2xzil2.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(true, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpsk2xzil2.java:24: error: cannot find symbol\n            return\
    \ new Union_String_int(false, binary);\n                       ^\n  symbol:  \
    \ class Union_String_int\n  location: class Problem\n/tmp/tmpsk2xzil2.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpsk2xzil2.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsk2xzil2.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsk2xzil2.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsk2xzil2.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsk2xzil2.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsk2xzil2.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = 0;\n     \
    \   for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n       \
    \ int roundedAvg = Math.round((float) sum / (m - n + 1));\n        return new\
    \ Union_String_int(\"0b\" + Integer.toBinaryString(roundedAvg));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzr_5meh9.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpzr_5meh9.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpzr_5meh9.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(roundedAvg));\n       \
    \            ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpzr_5meh9.java:28: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpzr_5meh9.java:31: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpzr_5meh9.java:32: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpzr_5meh9.java:33: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpzr_5meh9.java:34: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpzr_5meh9.java:35: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpzr_5meh9.java:36: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ ("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return new Union_String_int();\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2j1uf000.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2j1uf000.java:19:\
    \ error: cannot find symbol\n        return new Union_String_int();\n        \
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp2j1uf000.java:20: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp2j1uf000.java:23: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp2j1uf000.java:24: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp2j1uf000.java:25: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp2j1uf000.java:26: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp2j1uf000.java:27: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp2j1uf000.java:28: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp2j1uf000.java:29: error: cannot find symbol\n    as"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(true, -1);\n        }\n        int total = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            total += i;\n        }\n\
    \        int average = total / (m - n + 1);\n        String averageBinary = Integer.toBinaryString(average);\n\
    \        return new Union_String_int(false, \"0b\" + averageBinary);\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjvkskjbd.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjvkskjbd.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(true, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpjvkskjbd.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(false, \"0b\" + averageBinary);\n                   ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpjvkskjbd.java:29:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjvkskjbd.java:32:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjvkskjbd.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjvkskjbd.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjvkskjbd.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjvkskjbd.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjvkskjbd.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).eq"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        \n        if (n > m) return\
    \ new Union_String_int(\"-1\");\n        else {\n            float average = ((float)\
    \ n + (float) m) / 2;\n            int new_average = Math.round(average);\n  \
    \          String binary_average = Integer.toBinaryString(new_average);\n    \
    \        String result = \"0b\" + binary_average;\n            return new Union_String_int(result);\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2o9fww3x.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2o9fww3x.java:20:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp2o9fww3x.java:26: error: cannot find symbol\n\
    \            return new Union_String_int(result);\n                       ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp2o9fww3x.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2o9fww3x.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2o9fww3x.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2o9fww3x.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2o9fww3x.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2o9fww3x.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2o9fww3x.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equal"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int union\
    \ = new Union_String_int();\n        // The average of two numbers is the sum\
    \ of the two numbers divided by two.\n        // However, what if there are a\
    \ hundred numbers? Or a thousand?\n        // Since the computer has to iterate\
    \ over every number,\n        // we can use the formula for the sum of all the\
    \ numbers\n        // between n and m to avoid looping.\n        //    n + n +\
    \ 1 + n + 2 + n + 3 + n + 4 + n + 5 + n + 6 + ... + m\n        //  = n + n + 1\
    \ + n + 2 + n + 3 + n + 4 + n + 5 + n + 6 + ... + m\n        //  = n * 1 + 1 *\
    \ 1 + 2 * 1 + 3 * 1 + 4 * 1 + 5 * 1 + 6 * 1 + ... + m * 1\n        //  = (1 +\
    \ 2 + 3 + 4 + 5 + 6 + ... + m) * n\n        //  = (1 + 2 + 3 + 4 + 5 + 6 + ...\
    \ + m) * n\n        //  = (m * (m + 1)) / 2 * n\n        //  = (m * (m + 1)) /\
    \ 2 * n\n        //\n        // If m is less than n, then we can simply return\
    \ -1 because the user\n        // did not enter valid input. Otherwise, we can\
    \ calculate the average\n        // and round it to the nearest integer. After\
    \ that, we can convert the\n        // average to a binary string, and concatenate\
    \ the \"0b\" at the start.\n        //\n        // Using the integer division\
    \ operator / will convert the result to an integer.\n        // If we want to\
    \ keep the fractional part of the result, we should use\n        // the floating\
    \ point division operator /.\n        // (m * (m + 1) / 2 * n) / 2 = (m * (m +\
    \ 1) / 2 * n) / 2\n        //\n        // To round a floating point number to\
    \ the nearest integer, we can use\n        // the math.round function.\n     \
    \   // math.round(1.7) = 2\n        // math.round(2.3) = 2\n        //\n     \
    \   // To convert an integer to a binary string,\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkdoros3o.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpkdoros3o.java:19:\
    \ error: cannot find symbol\n        Union_String_int union = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpkdoros3o.java:19:\
    \ error: cannot find symbol\n        Union_String_int union = new Union_String_int();\n\
    \                                     ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpkdoros3o.java:49: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpkdoros3o.java:52: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkdoros3o.java:53: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkdoros3o.java:54: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkdoros3o.java:55: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkdoros3o.java:56: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkdoros3o.java:57: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).eq"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(1, -1);\n        }\n        double sum = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n  \
    \      int avg = (int)Math.round(sum / (m - n + 1));\n        return new Union_String_int(0,\
    \ \"0b\" + Integer.toBinaryString(avg));\nreturn new Union_String_int();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwjsr51a2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpwjsr51a2.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(1, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpwjsr51a2.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(0, \"0b\" + Integer.toBinaryString(avg));\n           \
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpwjsr51a2.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpwjsr51a2.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpwjsr51a2.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpwjsr51a2.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpwjsr51a2.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpwjsr51a2.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpwjsr51a2.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (5"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return new Union_String_int();\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3y1mgcd.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpv3y1mgcd.java:19:\
    \ error: cannot find symbol\n        return new Union_String_int();\n        \
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpv3y1mgcd.java:20: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpv3y1mgcd.java:23: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpv3y1mgcd.java:24: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpv3y1mgcd.java:25: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpv3y1mgcd.java:26: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpv3y1mgcd.java:27: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpv3y1mgcd.java:28: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpv3y1mgcd.java:29: error: cannot find symbol\n    as"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        double sum = 0;\n        for (int i = n; i <= m; i++) {\n           \
    \ sum += i;\n        }\n        double avg = sum / (m - n + 1);\n        int rounded\
    \ = (int)Math.round(avg);\n        return new Union_String_int(\"0b\" + Integer.toBinaryString(rounded));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0pfazmst.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0pfazmst.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp0pfazmst.java:26: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + Integer.toBinaryString(rounded));\n   \
    \                ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp0pfazmst.java:27: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp0pfazmst.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp0pfazmst.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp0pfazmst.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp0pfazmst.java:33: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp0pfazmst.java:34: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp0pfazmst.java:35: error: cannot find symbol\n    assert(roundedA"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        int sum = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n  \
    \      double avg = (double) sum / (m - n + 1);\n        int rounded = (int) Math.round(avg);\n\
    \        String binary = String.format(\"%10s\", Integer.toBinaryString(rounded)).replace('\
    \ ', '0');\n        return new Union_String_int(binary, -1);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wvi7u8u.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1wvi7u8u.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp1wvi7u8u.java:29: error: cannot find symbol\n        return\
    \ new Union_String_int(binary, -1);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp1wvi7u8u.java:30: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp1wvi7u8u.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1wvi7u8u.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1wvi7u8u.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1wvi7u8u.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1wvi7u8u.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1wvi7u8u.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        } else {\n            int sum =\
    \ IntStream.rangeClosed(n, m).sum();\n            double sumDouble = (double)\
    \ sum;\n            int nM = (m - n) + 1;\n            double nMDouble = (double)\
    \ nM;\n            double average = sumDouble / nMDouble;\n            average\
    \ = Math.round(average);\n            String averageBinary = Integer.toBinaryString((int)\
    \ average);\n            String zeroBinary = \"0b\";\n            return new Union_String_int(zeroBinary\
    \ + averageBinary);\n        }\nreturn new Union_String_int();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7_mrbx7.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_7_mrbx7.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp_7_mrbx7.java:30: error: cannot find symbol\n            return\
    \ new Union_String_int(zeroBinary + averageBinary);\n                       ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp_7_mrbx7.java:32:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_7_mrbx7.java:35:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7_mrbx7.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7_mrbx7.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7_mrbx7.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7_mrbx7.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7_mrbx7.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(true, -1);\n        }\n        int sum = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n  \
    \      double avg = sum / (m - n + 1);\n        int rounded = (int) Math.round(avg);\n\
    \        return new Union_String_int(false, Integer.toBinaryString(rounded));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2wbf77o1.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2wbf77o1.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(true, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp2wbf77o1.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(false, Integer.toBinaryString(rounded));\n            \
    \       ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp2wbf77o1.java:29:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2wbf77o1.java:32:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2wbf77o1.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2wbf77o1.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2wbf77o1.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2wbf77o1.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2wbf77o1.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = IntStream.rangeClosed(n,\
    \ m).sum();\n        double avg = (double) sum / (m - n + 1);\n        String\
    \ binary = \"0b\" + String.format(\"%7s\", Integer.toBinaryString(Math.round(avg))).replace('\
    \ ', '0');\n        return new Union_String_int(binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4qp4lrlx.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4qp4lrlx.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp4qp4lrlx.java:24: error: incompatible types: possible lossy\
    \ conversion from long to int\n        String binary = \"0b\" + String.format(\"\
    %7s\", Integer.toBinaryString(Math.round(avg))).replace(' ', '0');\n         \
    \                                                                            ^\n\
    /tmp/tmp4qp4lrlx.java:25: error: cannot find symbol\n        return new Union_String_int(binary);\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp4qp4lrlx.java:26: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp4qp4lrlx.java:29: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp4qp4lrlx.java:30: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp4qp4lrlx.java:31: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4qp4lrlx.java:32: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4qp4lrlx.java:33: error: cannot find symbol\n    assert(roundedA"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        \n        if (n > m) {\n\
    \            return new Union_String_int(0, -1);\n        }\n        \n      \
    \  int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        \n        int average = (int) Math.round((double) sum / (m\
    \ - n + 1));\n        return new Union_String_int(average, 0);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39cietps.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp39cietps.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(0, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp39cietps.java:30: error: cannot find symbol\n        return\
    \ new Union_String_int(average, 0);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp39cietps.java:31: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp39cietps.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp39cietps.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp39cietps.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp39cietps.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp39cietps.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp39cietps.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Union_int_None(), new Union_None_String(),\
    \ new Union_None_int(), -1);\n        }\n        int sum = 0;\n        for (int\
    \ i = n; i <= m; i++) {\n            sum += i;\n        }\n        int average\
    \ = sum / (m - n + 1);\n        String binary = Integer.toBinaryString(average);\n\
    \        return new Union_String_int(new Union_int_None(), new Union_None_String(),\
    \ new Union_None_int(), binary);\nreturn new Union_String_int();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4m3g2xjk.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4m3g2xjk.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_int_None(),\
    \ new Union_None_String(), new Union_None_int(), -1);\n                      \
    \ ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp4m3g2xjk.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_int_None(),\
    \ new Union_None_String(), new Union_None_int(), -1);\n                      \
    \                      ^\n  symbol:   class Union_int_None\n  location: class\
    \ Problem\n/tmp/tmp4m3g2xjk.java:20: error: cannot find symbol\n            return\
    \ new Union_String_int(new Union_int_None(), new Union_None_String(), new Union_None_int(),\
    \ -1);\n                                                                  ^\n\
    \  symbol:   class Union_None_String\n  location: class Problem\n/tmp/tmp4m3g2xjk.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_int_None(),\
    \ new Union_None_String(), new Union_None_int(), -1);\n                      \
    \                                                                     ^\n  symbol:\
    \   class Union_None_int\n  location: class Problem\n/tmp/tmp4m3g2xjk.java:28:\
    \ error: cannot find symbol\n        return new Union_String_int(new Union_int_None(),\
    \ new Union_None_String(), new Union_None_int(), binary);\n                  \
    \ ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp4m3g2xjk.java:28:\
    \ error: cannot find symbol\n        return new Union_String_int(new Union_int_None(),\
    \ new Union_None_String(), new Union_None_int(), binary);\n                  \
    \                      ^\n  symbol:   class Union_int_None\n  location: class\
    \ Problem\n/tmp/tmp4m3g2xjk.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(new Union_int_None(), new Union_None_String(), new Union_None_int(),\
    \ binary);\n                                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n>m) {\n          \
    \  return new Union_String_int(new Union_String(), new Union_int());\n       \
    \ }\n        // TODO:\n        return new Union_String_int(new Union_String(),\
    \ new Union_int());\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1_0ry0ej.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1_0ry0ej.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_String(),\
    \ new Union_int());\n                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp1_0ry0ej.java:20: error: cannot find symbol\n\
    \            return new Union_String_int(new Union_String(), new Union_int());\n\
    \                                            ^\n  symbol:   class Union_String\n\
    \  location: class Problem\n/tmp/tmp1_0ry0ej.java:20: error: cannot find symbol\n\
    \            return new Union_String_int(new Union_String(), new Union_int());\n\
    \                                                                ^\n  symbol:\
    \   class Union_int\n  location: class Problem\n/tmp/tmp1_0ry0ej.java:23: error:\
    \ cannot find symbol\n        return new Union_String_int(new Union_String(),\
    \ new Union_int());\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp1_0ry0ej.java:23: error: cannot find symbol\n\
    \        return new Union_String_int(new Union_String(), new Union_int());\n \
    \                                       ^\n  symbol:   class Union_String\n  location:\
    \ class Problem\n/tmp/tmp1_0ry0ej.java:23: error: cannot find symbol\n       \
    \ return new Union_String_int(new Union_String(), new Union_int());\n        \
    \                                                    ^\n  symbol:   class Union_int\n\
    \  location: class Problem\n/tmp/tmp1_0ry0ej.java:24: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp1_0ry0ej.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1_0ry0ej.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        BigInteger sum\
    \ = BigInteger.ZERO;\n        BigInteger count = BigInteger.ZERO;\n        for\
    \ (int i = n; i <= m; i++) {\n            sum = sum.add(BigInteger.valueOf(i));\n\
    \            count = count.add(BigInteger.ONE);\n        }\n        BigInteger\
    \ avg = sum.divide(count);\n        String binary = \"0b\" + avg.toString(2);\n\
    \        return new Union_String_int(binary, 0);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4pbt7bo.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpu4pbt7bo.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpu4pbt7bo.java:30: error: cannot find symbol\n        return\
    \ new Union_String_int(binary, 0);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpu4pbt7bo.java:31: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpu4pbt7bo.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu4pbt7bo.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu4pbt7bo.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu4pbt7bo.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu4pbt7bo.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu4pbt7bo.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(1, -1);\n        }\n        int avg = (int) Math.floor((n\
    \ + m) / 2.0);\n        String bin = Integer.toBinaryString(avg);\n        return\
    \ new Union_String_int(0, \"0b\" + bin);\nreturn new Union_String_int();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp49ezthan.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp49ezthan.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(1, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp49ezthan.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(0, \"0b\" + bin);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmp49ezthan.java:25: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp49ezthan.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp49ezthan.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp49ezthan.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp49ezthan.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp49ezthan.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp49ezthan.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      if (n > m) return new Union_String_int(-1);\n\
    \      int s = 0;\n      for (int i = n; i <= m; i++) s += i;\n      int ans =\
    \ (int) Math.round(((double) s) / (m - n + 1));\n      String s_ans = \"0b\" +\
    \ Integer.toBinaryString(ans);\n      return new Union_String_int(s_ans);\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk71bwrfp.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpk71bwrfp.java:19:\
    \ error: cannot find symbol\n      if (n > m) return new Union_String_int(-1);\n\
    \                            ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpk71bwrfp.java:24: error: cannot find symbol\n      return\
    \ new Union_String_int(s_ans);\n                 ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpk71bwrfp.java:25: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpk71bwrfp.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk71bwrfp.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk71bwrfp.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk71bwrfp.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk71bwrfp.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpk71bwrfp.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        } else {\n            int sum =\
    \ IntStream.rangeClosed(n, m).sum();\n            double avg = Math.round((double)\
    \ sum / (m - n + 1));\n            int val = (int) avg;\n            String b\
    \ = Integer.toBinaryString(val);\n            return new Union_String_int(\"0b\"\
    \ + b);\n        }\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy004ix4z.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpy004ix4z.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpy004ix4z.java:26: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + b);\n                       ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpy004ix4z.java:28: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpy004ix4z.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy004ix4z.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy004ix4z.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy004ix4z.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy004ix4z.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy004ix4z.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(Either_String_int.right(IntV.apply(-1)));\n \
    \       }\n        int res = (n + m) / 2;\n        String bin = Integer.toBinaryString(res);\n\
    \        return new Union_String_int(Either_String_int.left(StringV.apply(\"0b\"\
    \ + bin)));\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw9e1q44o.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpw9e1q44o.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(Either_String_int.right(IntV.apply(-1)));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpw9e1q44o.java:20: error: cannot find symbol\n            return\
    \ new Union_String_int(Either_String_int.right(IntV.apply(-1)));\n           \
    \                                                     ^\n  symbol:   variable\
    \ IntV\n  location: class Problem\n/tmp/tmpw9e1q44o.java:20: error: cannot find\
    \ symbol\n            return new Union_String_int(Either_String_int.right(IntV.apply(-1)));\n\
    \                                        ^\n  symbol:   variable Either_String_int\n\
    \  location: class Problem\n/tmp/tmpw9e1q44o.java:24: error: cannot find symbol\n\
    \        return new Union_String_int(Either_String_int.left(StringV.apply(\"0b\"\
    \ + bin)));\n                   ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpw9e1q44o.java:24: error: cannot find symbol\n       \
    \ return new Union_String_int(Either_String_int.left(StringV.apply(\"0b\" + bin)));\n\
    \                                                           ^\n  symbol:   variable\
    \ StringV\n  location: class Problem\n/tmp/tmpw9e1q44o.java:24: error: cannot\
    \ find symbol\n        return new Union_String_int(Either_String_int.left(StringV.apply(\"\
    0b\" + bin)));\n                                    ^\n  symbol:   variable Either_String_int\n\
    \  location: class Problem\n/tmp/tmpw9e1q44o.java:25: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpw9e1q44o.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpw9e1q44o.java:29: err"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Calculate the average\
    \ and round it to the nearest integer.\n        double average = (double)(n +\
    \ m) / 2;\n        int avg_rounded = (int)Math.round(average);\n        if (n\
    \ > m) {\n            return new Union_String_int(new Unit(), false);\n      \
    \  }\n        String binary = Integer.toBinaryString(avg_rounded);\n        String\
    \ padded = String.format(\"%1$\" + (32 - binary.length()) + \"s\", binary).replace('\
    \ ', '0');\n        return new Union_String_int(new Unit(), padded);\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqubtkgkb.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpqubtkgkb.java:23:\
    \ error: cannot find symbol\n            return new Union_String_int(new Unit(),\
    \ false);\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpqubtkgkb.java:23: error: constructor Unit in class Unit<A>\
    \ cannot be applied to given types;\n            return new Union_String_int(new\
    \ Unit(), false);\n                                        ^\n  required: Object\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where A is a type-variable:\n    A extends Object declared in class Unit\n\
    /tmp/tmpqubtkgkb.java:27: error: cannot find symbol\n        return new Union_String_int(new\
    \ Unit(), padded);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpqubtkgkb.java:27: error: constructor Unit\
    \ in class Unit<A> cannot be applied to given types;\n        return new Union_String_int(new\
    \ Unit(), padded);\n                                    ^\n  required: Object\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where A is a type-variable:\n    A extends Object declared in class Unit\n\
    /tmp/tmpqubtkgkb.java:28: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpqubtkgkb.java:31: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpqubtkgkb.java:32: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpqubtkgkb.java:33: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977))."
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int.U1(-1);\n\
    \        else {\n            int sum = 0;\n            for (int i = n; i <= m;\
    \ i++) {\n                sum += i;\n            }\n            int x = (int)\
    \ Math.round((double) sum / (m - n + 1));\n            return new Union_String_int.U0(Integer.toBinaryString(x));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeup6ntql.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpeup6ntql.java:19:\
    \ error: package Union_String_int does not exist\n        if (n > m) return new\
    \ Union_String_int.U1(-1);\n                                              ^\n\
    /tmp/tmpeup6ntql.java:26: error: package Union_String_int does not exist\n   \
    \         return new Union_String_int.U0(Integer.toBinaryString(x));\n       \
    \                                ^\n/tmp/tmpeup6ntql.java:28: error: cannot find\
    \ symbol\nreturn new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpeup6ntql.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpeup6ntql.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpeup6ntql.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpeup6ntql.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpeup6ntql.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpeup6ntql.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b10"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Add your code here\n\
    \        if (n > m) {\n            return new Union_String_int(new Variant_int(true,\
    \ -1));\n        }\n        int avg = (n + m) / 2;\n        String binary = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(new Variant_String(false, binary));\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_p9j_r35.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_p9j_r35.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(new Variant_int(true,\
    \ -1));\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp_p9j_r35.java:21: error: cannot find symbol\n       \
    \     return new Union_String_int(new Variant_int(true, -1));\n              \
    \                              ^\n  symbol:   class Variant_int\n  location: class\
    \ Problem\n/tmp/tmp_p9j_r35.java:25: error: cannot find symbol\n        return\
    \ new Union_String_int(new Variant_String(false, binary));\n                 \
    \  ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp_p9j_r35.java:25:\
    \ error: cannot find symbol\n        return new Union_String_int(new Variant_String(false,\
    \ binary));\n                                        ^\n  symbol:   class Variant_String\n\
    \  location: class Problem\n/tmp/tmp_p9j_r35.java:26: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp_p9j_r35.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_p9j_r35.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_p9j_r35.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_p9j_r35.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b11"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Variant_int(true, -1));\n        }\n    \
    \    int sum = n;\n        int count = 1;\n        for (int i = n + 1; i <= m;\
    \ i++) {\n            sum += i;\n            count++;\n        }\n        int\
    \ avg = (int) Math.round((double) sum / count);\n        return new Union_String_int(new\
    \ Variant_String(false, \"0b\" + Integer.toBinaryString(avg)));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaa_yww20.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpaa_yww20.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Variant_int(true,\
    \ -1));\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpaa_yww20.java:20: error: cannot find symbol\n       \
    \     return new Union_String_int(new Variant_int(true, -1));\n              \
    \                              ^\n  symbol:   class Variant_int\n  location: class\
    \ Problem\n/tmp/tmpaa_yww20.java:29: error: cannot find symbol\n        return\
    \ new Union_String_int(new Variant_String(false, \"0b\" + Integer.toBinaryString(avg)));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpaa_yww20.java:29: error: cannot find symbol\n        return new Union_String_int(new\
    \ Variant_String(false, \"0b\" + Integer.toBinaryString(avg)));\n            \
    \                            ^\n  symbol:   class Variant_String\n  location:\
    \ class Problem\n/tmp/tmpaa_yww20.java:30: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpaa_yww20.java:33: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpaa_yww20.java:34: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpaa_yww20.java:35: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpaa_yww20.java:36: error: cannot find symbol\n    assert"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(1, new Option_int(-1));\n        }\n        BigInteger\
    \ average = BigInteger.valueOf(0);\n        int count = 0;\n        for (int i\
    \ = n; i <= m; i++) {\n            average = average.add(BigInteger.valueOf(i));\n\
    \            count++;\n        }\n        average = average.divide(BigInteger.valueOf(count));\n\
    \        return new Union_String_int(0, new Option_int(average.intValue()));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvu3wcpnn.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvu3wcpnn.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(1, new Option_int(-1));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpvu3wcpnn.java:20: error: cannot find symbol\n            return\
    \ new Union_String_int(1, new Option_int(-1));\n                             \
    \                  ^\n  symbol:   class Option_int\n  location: class Problem\n\
    /tmp/tmpvu3wcpnn.java:29: error: cannot find symbol\n        return new Union_String_int(0,\
    \ new Option_int(average.intValue()));\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpvu3wcpnn.java:29: error:\
    \ cannot find symbol\n        return new Union_String_int(0, new Option_int(average.intValue()));\n\
    \                                           ^\n  symbol:   class Option_int\n\
    \  location: class Problem\n/tmp/tmpvu3wcpnn.java:30: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpvu3wcpnn.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvu3wcpnn.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvu3wcpnn.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvu3wcpnn.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        } else {\n            int\
    \ average = (int) Math.round((n + m) / 2.0);\n            String binary = Integer.toBinaryString(average);\n\
    \            return new Union_String_int(\"0b\" + binary, 0);\n        }\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmix2f6qi.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpmix2f6qi.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpmix2f6qi.java:24: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + binary, 0);\n                       ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpmix2f6qi.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpmix2f6qi.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmix2f6qi.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmix2f6qi.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmix2f6qi.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmix2f6qi.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmix2f6qi.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(new\
    \ _String(\"-1\"));\n        double sum = 0;\n        for (int i = n; i <= m;\
    \ i++) {\n            sum += i;\n        }\n        int res = (int) Math.round(sum\
    \ / (m - n + 1));\n        return new Union_String_int(new _String(\"0b\" + Integer.toBinaryString(res)));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp849p2q2w.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp849p2q2w.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(new\
    \ _String(\"-1\"));\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp849p2q2w.java:19: error: cannot find symbol\n\
    \        if (n > m) return new Union_String_int(new _String(\"-1\"));\n      \
    \                                             ^\n  symbol:   class _String\n \
    \ location: class Problem\n/tmp/tmp849p2q2w.java:25: error: cannot find symbol\n\
    \        return new Union_String_int(new _String(\"0b\" + Integer.toBinaryString(res)));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp849p2q2w.java:25: error: cannot find symbol\n        return new Union_String_int(new\
    \ _String(\"0b\" + Integer.toBinaryString(res)));\n                          \
    \              ^\n  symbol:   class _String\n  location: class Problem\n/tmp/tmp849p2q2w.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp849p2q2w.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp849p2q2w.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp849p2q2w.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp849p2q2w.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(\"\
    -1\");\n        double average = Stream.iterate(n, i -> i + 1).limit(m - n + 1).mapToInt(x\
    \ -> x).average().getAsDouble();\n        int rounded = (int)Math.round(average);\n\
    \        String binary = Integer.toBinaryString(rounded);\n        return new\
    \ Union_String_int(\"0b\" + binary);\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjxn_zkmr.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjxn_zkmr.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpjxn_zkmr.java:23: error: cannot find symbol\n\
    \        return new Union_String_int(\"0b\" + binary);\n                   ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpjxn_zkmr.java:24:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjxn_zkmr.java:27:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjxn_zkmr.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjxn_zkmr.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjxn_zkmr.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjxn_zkmr.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjxn_zkmr.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = 0;\n     \
    \   for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n       \
    \ sum = (int)Math.round((double)sum / (m - n + 1));\n        return new Union_String_int(\"\
    0b\" + Integer.toBinaryString(sum));\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4lut12l.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmph4lut12l.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmph4lut12l.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(sum));\n              \
    \     ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmph4lut12l.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmph4lut12l.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph4lut12l.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph4lut12l.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph4lut12l.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph4lut12l.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph4lut12l.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int union\
    \ = new Union_String_int();\n        union.setString(Integer.toBinaryString(m\
    \ + n >> 1));\n        return union;\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphlccuw5b.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmphlccuw5b.java:19:\
    \ error: cannot find symbol\n        Union_String_int union = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmphlccuw5b.java:19:\
    \ error: cannot find symbol\n        Union_String_int union = new Union_String_int();\n\
    \                                     ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmphlccuw5b.java:22: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmphlccuw5b.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphlccuw5b.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphlccuw5b.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphlccuw5b.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphlccuw5b.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphlccuw5b.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).eq"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = 0;\n     \
    \   int num_ints = 0;\n        for (int i = n; i <= m; i++) {\n            sum\
    \ += i;\n            num_ints++;\n        }\n        int rounded_avg = Math.round((float)sum\
    \ / num_ints);\n        String binary_rep = Integer.toBinaryString(rounded_avg);\n\
    \        String result = \"0b\" + binary_rep;\n        return new Union_String_int(result);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpowfv9qgg.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpowfv9qgg.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpowfv9qgg.java:31: error: cannot find symbol\n        return\
    \ new Union_String_int(result);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpowfv9qgg.java:32: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpowfv9qgg.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpowfv9qgg.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpowfv9qgg.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpowfv9qgg.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpowfv9qgg.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpowfv9qgg.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b1"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n      \
    \  int avg = sum / (m - n + 1);\n        return new Union_String_int(\"0b\" +\
    \ Integer.toBinaryString(avg));\nreturn new Union_String_int();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaauui08t.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpaauui08t.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpaauui08t.java:23: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + Integer.toBinaryString(avg));\n       \
    \            ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpaauui08t.java:24: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpaauui08t.java:27: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpaauui08t.java:28: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpaauui08t.java:29: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpaauui08t.java:30: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpaauui08t.java:31: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpaauui08t.java:32: error: cannot find symbol\n    assert(roundedAvg(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Union_int_String(null, 1), null);\n     \
    \   }\n        int sum = IntStream.rangeClosed(n, m).sum();\n        Union_int_String\
    \ tuple = new Union_int_String(null, (int)Math.round((double)sum / (m - n + 1)));\n\
    \        Union_String_int res = new Union_String_int(tuple, null);\n        return\
    \ res;\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgo2byqbb.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgo2byqbb.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_int_String(null,\
    \ 1), null);\n                       ^\n  symbol:   class Union_String_int\n \
    \ location: class Problem\n/tmp/tmpgo2byqbb.java:20: error: cannot find symbol\n\
    \            return new Union_String_int(new Union_int_String(null, 1), null);\n\
    \                                            ^\n  symbol:   class Union_int_String\n\
    \  location: class Problem\n/tmp/tmpgo2byqbb.java:23: error: cannot find symbol\n\
    \        Union_int_String tuple = new Union_int_String(null, (int)Math.round((double)sum\
    \ / (m - n + 1)));\n        ^\n  symbol:   class Union_int_String\n  location:\
    \ class Problem\n/tmp/tmpgo2byqbb.java:23: error: cannot find symbol\n       \
    \ Union_int_String tuple = new Union_int_String(null, (int)Math.round((double)sum\
    \ / (m - n + 1)));\n                                     ^\n  symbol:   class\
    \ Union_int_String\n  location: class Problem\n/tmp/tmpgo2byqbb.java:24: error:\
    \ cannot find symbol\n        Union_String_int res = new Union_String_int(tuple,\
    \ null);\n        ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpgo2byqbb.java:24: error: cannot find symbol\n        Union_String_int\
    \ res = new Union_String_int(tuple, null);\n                                 \
    \  ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpgo2byqbb.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgo2byqbb.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgo2byqbb.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(null,\
    \ -1);\n        int avg = (n + m) / 2;\n        String binary = Integer.toBinaryString(avg);\n\
    \        StringBuilder result = new StringBuilder();\n        result.append(\"\
    0b\");\n        result.append(binary);\n        return new Union_String_int(result.toString(),\
    \ 0);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8i6hem8.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpj8i6hem8.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(null,\
    \ -1);\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpj8i6hem8.java:25: error: cannot find symbol\n\
    \        return new Union_String_int(result.toString(), 0);\n                \
    \   ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpj8i6hem8.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpj8i6hem8.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpj8i6hem8.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpj8i6hem8.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpj8i6hem8.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpj8i6hem8.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpj8i6hem8.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (5"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(\"\
    -1\");\n        int sum = IntStream.rangeClosed(n, m).sum();\n        int avg\
    \ = Math.round((float)sum / (m - n + 1));\n        String avgString = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(\"0b\" + avgString);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplu7wixuk.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmplu7wixuk.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmplu7wixuk.java:23: error: cannot find symbol\n\
    \        return new Union_String_int(\"0b\" + avgString);\n                  \
    \ ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmplu7wixuk.java:24:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmplu7wixuk.java:27:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplu7wixuk.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplu7wixuk.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplu7wixuk.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplu7wixuk.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplu7wixuk.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equ"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      if (n > m) return new Union_String_int(-1);\n\
    \      double avg = Math.round((double)(n + m) / 2);\n      return new Union_String_int(Integer.toBinaryString((int)avg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegg160nt.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpegg160nt.java:19:\
    \ error: cannot find symbol\n      if (n > m) return new Union_String_int(-1);\n\
    \                            ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpegg160nt.java:21: error: cannot find symbol\n      return\
    \ new Union_String_int(Integer.toBinaryString((int)avg));\n                 ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpegg160nt.java:22:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpegg160nt.java:25:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpegg160nt.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpegg160nt.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpegg160nt.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpegg160nt.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpegg160nt.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(false, -1);\n        } else {\n            double\
    \ avg = (n + m) / 2;\n            int rounded = (int) Math.round(avg);\n     \
    \       String binary = Integer.toBinaryString(rounded);\n            return new\
    \ Union_String_int(true, \"0b\" + binary);\n        }\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvzittey_.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvzittey_.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(false, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpvzittey_.java:25: error: cannot find symbol\n            return\
    \ new Union_String_int(true, \"0b\" + binary);\n                       ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvzittey_.java:27:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvzittey_.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvzittey_.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvzittey_.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvzittey_.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvzittey_.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvzittey_.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(new\
    \ Union_Void_int(), true);\n        float sum = 0;\n        for (int i = n; i\
    \ <= m; i++) {\n            sum += i;\n        }\n        float avg = sum / (m\
    \ - n + 1);\n        int rounded = Math.round(avg);\n        int bin = Integer.parseInt(Integer.toBinaryString(rounded));\n\
    \        return new Union_String_int(new Union_Void_int(), false, \"0b\" + bin);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpliezu4x6.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpliezu4x6.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(new\
    \ Union_Void_int(), true);\n                              ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpliezu4x6.java:19: error:\
    \ cannot find symbol\n        if (n > m) return new Union_String_int(new Union_Void_int(),\
    \ true);\n                                                   ^\n  symbol:   class\
    \ Union_Void_int\n  location: class Problem\n/tmp/tmpliezu4x6.java:27: error:\
    \ cannot find symbol\n        return new Union_String_int(new Union_Void_int(),\
    \ false, \"0b\" + bin);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpliezu4x6.java:27: error: cannot find symbol\n\
    \        return new Union_String_int(new Union_Void_int(), false, \"0b\" + bin);\n\
    \                                        ^\n  symbol:   class Union_Void_int\n\
    \  location: class Problem\n/tmp/tmpliezu4x6.java:28: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpliezu4x6.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpliezu4x6.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpliezu4x6.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpliezu4x6.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n>m) return new Union_String_int(-1);\n\
    \        int sum = IntStream.rangeClosed(n, m).sum();\n        int avg = Math.round((float)sum/(m-n+1));\n\
    \        String binary_avg = Integer.toBinaryString(avg);\n        return new\
    \ Union_String_int(\"0b\"+binary_avg);\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplbz6svw8.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmplbz6svw8.java:19:\
    \ error: cannot find symbol\n        if (n>m) return new Union_String_int(-1);\n\
    \                            ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmplbz6svw8.java:23: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\"+binary_avg);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmplbz6svw8.java:24:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmplbz6svw8.java:27:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplbz6svw8.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplbz6svw8.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplbz6svw8.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplbz6svw8.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmplbz6svw8.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Un"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return m >= n ? new Union_String_int(Integer.toBinaryString(Math.round((n\
    \ + m) / 2))) : new Union_String_int(-1);\nreturn new Union_String_int();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_8icbj8_.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_8icbj8_.java:19:\
    \ error: cannot find symbol\n        return m >= n ? new Union_String_int(Integer.toBinaryString(Math.round((n\
    \ + m) / 2))) : new Union_String_int(-1);\n                            ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_8icbj8_.java:19:\
    \ error: cannot find symbol\n        return m >= n ? new Union_String_int(Integer.toBinaryString(Math.round((n\
    \ + m) / 2))) : new Union_String_int(-1);\n                                  \
    \                                                                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_8icbj8_.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_8icbj8_.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_8icbj8_.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_8icbj8_.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_8icbj8_.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_8icbj8_.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // YOUR CODE HERE\n   \
    \     return new Union_String_int();\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbzdvrh5y.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpbzdvrh5y.java:20:\
    \ error: cannot find symbol\n        return new Union_String_int();\n        \
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpbzdvrh5y.java:21: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpbzdvrh5y.java:24: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpbzdvrh5y.java:25: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpbzdvrh5y.java:26: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbzdvrh5y.java:27: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbzdvrh5y.java:28: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbzdvrh5y.java:29: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbzdvrh5y.java:30: error: cannot find symbol\n    as"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      int avg = (n + m) / 2;\n\
    \      return new Union_String_int(Integer.toBinaryString(avg));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1xwx3ec.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpe1xwx3ec.java:20:\
    \ error: cannot find symbol\n      return new Union_String_int(Integer.toBinaryString(avg));\n\
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpe1xwx3ec.java:21: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpe1xwx3ec.java:24: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpe1xwx3ec.java:25: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpe1xwx3ec.java:26: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpe1xwx3ec.java:27: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpe1xwx3ec.java:28: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpe1xwx3ec.java:29: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpe1xwx3ec.java:30: error: ca"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\n                (int)0,\n                new\
    \ Union_String_int(\n                    (int)0,\n                    new Union_String_int(\n\
    \                        (int)0,\n                        new Union_String_int(\n\
    \                            (int)0,\n                            new Union_String_int(\n\
    \                                (int)0,\n                                new\
    \ Union_String_int(\n                                    (int)0,\n           \
    \                         new Union_String_int(\n                            \
    \            (int)0,\n                                        new Union_String_int(\n\
    \                                            (int)0,\n                       \
    \                     new Union_String_int(\n                                \
    \                (int)0,\n                                                new\
    \ Union_String_int(\n                                                    (int)0,\n\
    \                                                    new Union_String_int(\n \
    \                                                       (int)0,\n            \
    \                                            new Union_String_int(\n         \
    \                                                   (int)0,\n                \
    \                                            new Union_String_int(\n         \
    \                                                       (int)0,\n            \
    \                                                    new Union_String_int(\n \
    \                                                                   (int)0,\n\
    \                                                                    new Union_String_int(\n\
    \                                                                        (int)0,\n\
    \                                                                        new Union_String_int(\n\
    \                                                                            (int)0,\n\
    \                                                                            new\
    \ Union_String_int(\n                                                        \
    \                        (int)0,\n                                           \
    \                                     new Union_String_int(\n                \
    \                                                                    (int)0,\n\
    \                                                                            \
    \        new Union_String_int(\n                                             \
    \                                           (int)0,\n                        \
    \                                                                new Union_String_int(\n\
    \                                                                            \
    \                (int)0,\n                                                   \
    \                                         new Union_String_int(\n            \
    \                                                                            \
    \        (int)0,\n                                                           \
    \                                     new Union_String_int(\n                \
    \                                                                            \
    \        (int)0,\n                                                           \
    \                                         new Union_String_int(\n            \
    \                                                                            \
    \                (int)0,\n                                                   \
    \                                                     new Union_String_int(\n\
    \                                                                \nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg0gaxe9g.java:68: error: illegal start of expression\nreturn new\
    \ Union_String_int();\n^\n/tmp/tmpg0gaxe9g.java:68: error: ')' expected\nreturn\
    \ new Union_String_int();\n      ^\n/tmp/tmpg0gaxe9g.java:68: error: ')' expected\n\
    return new Union_String_int();\n          ^\n/tmp/tmpg0gaxe9g.java:68: error:\
    \ ')' expected\nreturn new Union_String_int();\n                           ^\n\
    /tmp/tmpg0gaxe9g.java:68: error: ')' expected\nreturn new Union_String_int();\n\
    \                             ^\n/tmp/tmpg0gaxe9g.java:68: error: ')' expected\n\
    return new Union_String_int();\n                              ^\n/tmp/tmpg0gaxe9g.java:69:\
    \ error: ')' expected\n    }\n     ^\n/tmp/tmpg0gaxe9g.java:70: error: ')' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpg0gaxe9g.java:70:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpg0gaxe9g.java:70: error: ')' expected\n    public static\
    \ void main(String[] args) {\n                      ^\n/tmp/tmpg0gaxe9g.java:70:\
    \ error: ')' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpg0gaxe9g.java:70: error: ')' expected\n    public\
    \ static void main(String[] args) {\n                            ^\n/tmp/tmpg0gaxe9g.java:70:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                                   ^\n/tmp/tmpg0gaxe9g.java:70: error: ')'\
    \ expected\n    public static void main(String[] args) {\n                   \
    \                 ^\n/tmp/tmpg0gaxe9g.java:71: error: as of release 1.4, 'assert'\
    \ is a keyword, and may not be used as an identifier\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    ^\n  (use -source 1.3 or lower\
    \ to use 'assert' as an identifier)\n/tmp/tmpg0gaxe9g.java:71: error: <identifier>\
    \ expected\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"\
    ))));\n                     ^\n/tmp/tmpg0gaxe9g.java:71: error: ';' expected\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                  ^\n/tmp/tmpg0gaxe9g.java:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        BigInteger sum\
    \ = BigInteger.ZERO;\n        for (int i = n; i <= m; i++) {\n            sum\
    \ = sum.add(BigInteger.valueOf(i));\n        }\n        int avg = (int) Math.round(sum.doubleValue()\
    \ / (m - n + 1));\n        return new Union_String_int(\"0b\" + Integer.toBinaryString(avg),\
    \ 0);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2yqvyoj.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpm2yqvyoj.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpm2yqvyoj.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(avg), 0);\n           \
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpm2yqvyoj.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpm2yqvyoj.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpm2yqvyoj.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpm2yqvyoj.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpm2yqvyoj.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpm2yqvyoj.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpm2yqvyoj.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), ("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        throw new UnsupportedOperationException(\"\
    Problem Solution Unimplemented\");\nreturn new Union_String_int();\n    }\n  \
    \  public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tqnmmav.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp6tqnmmav.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp6tqnmmav.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp6tqnmmav.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp6tqnmmav.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp6tqnmmav.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp6tqnmmav.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp6tqnmmav.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp6tqnmmav.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return new Union_String_int(-1);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw2vhsr4a.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpw2vhsr4a.java:19:\
    \ error: cannot find symbol\n        return new Union_String_int(-1);\n      \
    \             ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpw2vhsr4a.java:20: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpw2vhsr4a.java:23: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpw2vhsr4a.java:24: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpw2vhsr4a.java:25: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw2vhsr4a.java:26: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw2vhsr4a.java:27: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw2vhsr4a.java:28: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw2vhsr4a.java:29: error: cannot find symbol\n    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Your code here\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx5p_jpcr.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpx5p_jpcr.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpx5p_jpcr.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx5p_jpcr.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx5p_jpcr.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx5p_jpcr.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx5p_jpcr.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx5p_jpcr.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx5p_jpcr.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return n>m?new Union_String_int(\"\
    -1\"):new Union_String_int(Integer.toBinaryString((n+m)/2));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppoeh7j5e.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmppoeh7j5e.java:19:\
    \ error: cannot find symbol\n        return n>m?new Union_String_int(\"-1\"):new\
    \ Union_String_int(Integer.toBinaryString((n+m)/2));\n                       ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmppoeh7j5e.java:19:\
    \ error: cannot find symbol\n        return n>m?new Union_String_int(\"-1\"):new\
    \ Union_String_int(Integer.toBinaryString((n+m)/2));\n                       \
    \                           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmppoeh7j5e.java:20: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmppoeh7j5e.java:23: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmppoeh7j5e.java:24: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmppoeh7j5e.java:25: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppoeh7j5e.java:26: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppoeh7j5e.java:27: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = 0;\n     \
    \   for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n       \
    \ double avg = (double) sum / (m - n + 1);\n        int roundedAvg = (int) Math.round(avg);\n\
    \        return new Union_String_int(\"0b\" + Integer.toBinaryString(roundedAvg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp09nj70z8.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp09nj70z8.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp09nj70z8.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(roundedAvg));\n       \
    \            ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp09nj70z8.java:29: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp09nj70z8.java:32: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp09nj70z8.java:33: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp09nj70z8.java:34: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp09nj70z8.java:35: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp09nj70z8.java:36: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp09nj70z8.java:37: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ ("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // fill in the code\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ml2nx6c.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3ml2nx6c.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3ml2nx6c.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ml2nx6c.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ml2nx6c.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ml2nx6c.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ml2nx6c.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ml2nx6c.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3ml2nx6c.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        else {\n           \
    \ int avg = (n + m) / 2;\n            String binary = Integer.toBinaryString(avg);\n\
    \            return new Union_String_int(\"0b\" + binary);\n        }\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1aza2urx.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1aza2urx.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp1aza2urx.java:25: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + binary);\n                       ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1aza2urx.java:27:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1aza2urx.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1aza2urx.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1aza2urx.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1aza2urx.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1aza2urx.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1aza2urx.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"-1\");\n        }\n        int sum = 0;\n \
    \       int count = 0;\n        for (int i = n; i <= m; i++) {\n            sum\
    \ += i;\n            count++;\n        }\n        int average = sum / count;\n\
    \        String binary = Integer.toBinaryString(average);\n        return new\
    \ Union_String_int(\"0b\" + binary);\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpytseec9a.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpytseec9a.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpytseec9a.java:30: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + binary);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpytseec9a.java:31: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpytseec9a.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpytseec9a.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpytseec9a.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpytseec9a.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpytseec9a.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpytseec9a.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        //YOUR CODE HERE\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvmw709en.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvmw709en.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvmw709en.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvmw709en.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvmw709en.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvmw709en.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvmw709en.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvmw709en.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvmw709en.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      // First, compute the average\
    \ of n and m\n      // Then, round the average\n      // Then, convert to binary\n\
    \      // If n > m, then return -1\n      if (n > m) {\n        return new Union_String_int(\"\
    -1\");\n      }\n      int avg = (int) Math.round((n + m) / 2.0);\n      String\
    \ s = Integer.toBinaryString(avg);\n      String result = \"0b\" + s;\n      return\
    \ new Union_String_int(result);\nreturn new Union_String_int();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8o2khevf.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp8o2khevf.java:24:\
    \ error: cannot find symbol\n        return new Union_String_int(\"-1\");\n  \
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp8o2khevf.java:29: error: cannot find symbol\n      return new Union_String_int(result);\n\
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp8o2khevf.java:30: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp8o2khevf.java:33: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp8o2khevf.java:34: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp8o2khevf.java:35: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp8o2khevf.java:36: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp8o2khevf.java:37: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp8o2khevf.java:38: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\")"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      return new Union_String_int();\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2g88kndq.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2g88kndq.java:19:\
    \ error: cannot find symbol\n      return new Union_String_int();\n          \
    \       ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp2g88kndq.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2g88kndq.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2g88kndq.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2g88kndq.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2g88kndq.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2g88kndq.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2g88kndq.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2g88kndq.java:29: error: cannot find symbol\n\
    \    assert"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        long average = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            average += i;\n        }\n\
    \        average /= (m - n + 1);\n        return new Union_String_int(Integer.toBinaryString((int)average));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpizwuw7bl.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpizwuw7bl.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpizwuw7bl.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(Integer.toBinaryString((int)average));\n              \
    \     ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpizwuw7bl.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpizwuw7bl.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpizwuw7bl.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpizwuw7bl.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpizwuw7bl.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpizwuw7bl.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpizwuw7bl.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return n>m? new Union_String_int(-1)\
    \ : \n            new Union_String_int(Integer.toBinaryString(\n             \
    \       (n+m)/2));\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjfrx73lq.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjfrx73lq.java:19:\
    \ error: cannot find symbol\n        return n>m? new Union_String_int(-1) : \n\
    \                        ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpjfrx73lq.java:20: error: cannot find symbol\n            new\
    \ Union_String_int(Integer.toBinaryString(\n                ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpjfrx73lq.java:22: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjfrx73lq.java:25:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjfrx73lq.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjfrx73lq.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjfrx73lq.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjfrx73lq.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjfrx73lq.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_St"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        final int n_i = n;\n\
    \        final int m_i = m;\n        Tuple2<String, Integer> res =\n        Stream.iterate(n_i,\
    \ e -> e + 1)\n              .limit(m_i - n_i + 1)\n              .reduce(\n \
    \               new Tuple2<>(\"\", 0),\n                (a, b) -> new Tuple2<>(a.getValue0()\
    \ + b, a.getValue1() + 1)\n              );\n        int avg = (int) Math.round((double)\
    \ res.getValue0() / res.getValue1());\n        return new Union_String_int(\"\
    0b\" + Integer.toBinaryString(avg));\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gpaf5f4.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4gpaf5f4.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp4gpaf5f4.java:24: error: cannot find symbol\n        Tuple2<String,\
    \ Integer> res =\n        ^\n  symbol:   class Tuple2\n  location: class Problem\n\
    /tmp/tmp4gpaf5f4.java:29: error: cannot find symbol\n                (a, b) ->\
    \ new Tuple2<>(a.getValue0() + b, a.getValue1() + 1)\n                       \
    \       ^\n  symbol:   class Tuple2\n  location: class Problem\n/tmp/tmp4gpaf5f4.java:28:\
    \ error: cannot find symbol\n                new Tuple2<>(\"\", 0),\n        \
    \            ^\n  symbol:   class Tuple2\n  location: class Problem\n/tmp/tmp4gpaf5f4.java:32:\
    \ error: cannot find symbol\n        return new Union_String_int(\"0b\" + Integer.toBinaryString(avg));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp4gpaf5f4.java:33: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp4gpaf5f4.java:36: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp4gpaf5f4.java:37: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp4gpaf5f4.java:38: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4gpaf5f4.java:39: error: cannot find symbol\n    assert"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(Union_String_int.TAG.TAG_int, -1);\n        }\n\
    \        else {\n            int sum = 0;\n            for (int i = n; i <= m;\
    \ i++) {\n                sum += i;\n            }\n            int avg = (int)\
    \ Math.round((double) sum / (m - n + 1));\n            String str = \"0b\" + Integer.toBinaryString(avg);\n\
    \            return new Union_String_int(Union_String_int.TAG.TAG_String, str);\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse_ljf0s.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpse_ljf0s.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(Union_String_int.TAG.TAG_int,\
    \ -1);\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpse_ljf0s.java:20: error: package Union_String_int does\
    \ not exist\n            return new Union_String_int(Union_String_int.TAG.TAG_int,\
    \ -1);\n                                                        ^\n/tmp/tmpse_ljf0s.java:29:\
    \ error: cannot find symbol\n            return new Union_String_int(Union_String_int.TAG.TAG_String,\
    \ str);\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpse_ljf0s.java:29: error: package Union_String_int does\
    \ not exist\n            return new Union_String_int(Union_String_int.TAG.TAG_String,\
    \ str);\n                                                        ^\n/tmp/tmpse_ljf0s.java:31:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpse_ljf0s.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpse_ljf0s.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpse_ljf0s.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpse_ljf0s.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      int len = m - n + 1;\n  \
    \    if (len < 1) {\n        return new Union_String_int(\"-1\");\n      }\n \
    \     String avg = String.format(\"%d\", (int)Math.round((double)(n + m) / 2.0));\n\
    \      String bin = Integer.toBinaryString(Integer.parseInt(avg));\n      return\
    \ new Union_String_int(\"0b\" + bin);\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw1b24tqp.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpw1b24tqp.java:21:\
    \ error: cannot find symbol\n        return new Union_String_int(\"-1\");\n  \
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpw1b24tqp.java:25: error: cannot find symbol\n      return new Union_String_int(\"\
    0b\" + bin);\n                 ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpw1b24tqp.java:26: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpw1b24tqp.java:29: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpw1b24tqp.java:30: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpw1b24tqp.java:31: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw1b24tqp.java:32: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw1b24tqp.java:33: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw1b24tqp.java:34: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b1011011"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // ctor of Union takes\
    \ any types of objects.\n        if (n > m) return new Union_String_int(\"-1\"\
    );\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n           \
    \ sum += i;\n        }\n        int avg = (int)Math.round((double)sum / (m - n\
    \ + 1));\n        return new Union_String_int(Integer.toBinaryString(avg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj_27k58k.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpj_27k58k.java:20:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpj_27k58k.java:26: error: cannot find symbol\n\
    \        return new Union_String_int(Integer.toBinaryString(avg));\n         \
    \          ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpj_27k58k.java:27: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpj_27k58k.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpj_27k58k.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpj_27k58k.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_27k58k.java:33: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_27k58k.java:34: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_27k58k.java:35: error: cannot find symbol\n    assert(roundedAvg((185),"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(n);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n      \
    \  int avg = sum / (m - n + 1);\n        String bin = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(\"0b\" + bin);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyb93_rbg.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyb93_rbg.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(n);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpyb93_rbg.java:24: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + bin);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyb93_rbg.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyb93_rbg.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyb93_rbg.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyb93_rbg.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyb93_rbg.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyb93_rbg.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyb93_rbg.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Unio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(Union_String_int.tag_int, -1);\n        }\n \
    \       int sum = IntStream.rangeClosed(n, m).sum();\n        int avg = Math.round((float)\
    \ sum / (m - n + 1));\n        String avgBin = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(Union_String_int.tag_String, \"0b\" + avgBin);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiv3_gyc7.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpiv3_gyc7.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(Union_String_int.tag_int,\
    \ -1);\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpiv3_gyc7.java:20: error: cannot find symbol\n       \
    \     return new Union_String_int(Union_String_int.tag_int, -1);\n           \
    \                             ^\n  symbol:   variable Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpiv3_gyc7.java:25: error: cannot find symbol\n       \
    \ return new Union_String_int(Union_String_int.tag_String, \"0b\" + avgBin);\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpiv3_gyc7.java:25: error: cannot find symbol\n        return new Union_String_int(Union_String_int.tag_String,\
    \ \"0b\" + avgBin);\n                                    ^\n  symbol:   variable\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpiv3_gyc7.java:26: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpiv3_gyc7.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpiv3_gyc7.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpiv3_gyc7.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpiv3_gyc7.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(0, -1);\n        }\n        double avg = (double)(n\
    \ + m) / 2;\n        long rounded = Math.round(avg);\n        String binary =\
    \ Long.toBinaryString(rounded);\n        return new Union_String_int(0, binary);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcd1hoh8a.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpcd1hoh8a.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(0, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpcd1hoh8a.java:25: error: cannot find symbol\n        return\
    \ new Union_String_int(0, binary);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpcd1hoh8a.java:26: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpcd1hoh8a.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcd1hoh8a.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcd1hoh8a.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcd1hoh8a.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcd1hoh8a.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcd1hoh8a.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_in"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        } else {\n            return new\
    \ Union_String_int(Integer.toBinaryString((int)Math.round((double)(n + m) / 2)));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphks92p44.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmphks92p44.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmphks92p44.java:22: error: cannot find symbol\n            return\
    \ new Union_String_int(Integer.toBinaryString((int)Math.round((double)(n + m)\
    \ / 2)));\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmphks92p44.java:24: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmphks92p44.java:27: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmphks92p44.java:28: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmphks92p44.java:29: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmphks92p44.java:30: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmphks92p44.java:31: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmphks92p44.java:32: error: cannot find symbol\n   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        int sum = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n  \
    \      int avg = sum / (m - n + 1);\n        String binary = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(binary, 0);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxocwfsho.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpxocwfsho.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpxocwfsho.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(binary, 0);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpxocwfsho.java:29: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpxocwfsho.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpxocwfsho.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpxocwfsho.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpxocwfsho.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpxocwfsho.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpxocwfsho.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return Union_String_int.S_int(new Pair<String, Integer>(\"-1\", -1));\n \
    \       } else {\n            int avg = (n + m) / 2;\n            String bin =\
    \ Integer.toBinaryString(avg);\n            return Union_String_int.S_int(new\
    \ Pair<String, Integer>(\"0b\" + bin, avg));\n        }\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0r2r8yeu.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0r2r8yeu.java:20:\
    \ error: cannot find symbol\n            return Union_String_int.S_int(new Pair<String,\
    \ Integer>(\"-1\", -1));\n                   ^\n  symbol:   variable Union_String_int\n\
    \  location: class Problem\n/tmp/tmp0r2r8yeu.java:24: error: cannot find symbol\n\
    \            return Union_String_int.S_int(new Pair<String, Integer>(\"0b\" +\
    \ bin, avg));\n                   ^\n  symbol:   variable Union_String_int\n \
    \ location: class Problem\n/tmp/tmp0r2r8yeu.java:26: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp0r2r8yeu.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0r2r8yeu.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0r2r8yeu.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0r2r8yeu.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0r2r8yeu.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0r2r8yeu.java:34: error: canno"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Write your code here\n\
    \        return new Union_String_int(\"0b0\");\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgobu5ln1.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgobu5ln1.java:20:\
    \ error: cannot find symbol\n        return new Union_String_int(\"0b0\");\n \
    \                  ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpgobu5ln1.java:21: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpgobu5ln1.java:24: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpgobu5ln1.java:25: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpgobu5ln1.java:26: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpgobu5ln1.java:27: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpgobu5ln1.java:28: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpgobu5ln1.java:29: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpgobu5ln1.java:30: error: cannot find symbol\n "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int result\
    \ = new Union_String_int();\n        int avg = 0;\n        int count = 0;\n  \
    \      if (n > m) {\n            result.setInt(-1);\n            return result;\n\
    \        }\n        while (n <= m) {\n            avg += n;\n            n++;\n\
    \            count++;\n        }\n        avg = avg / count;\n        result.setString(\"\
    0b\" + Integer.toBinaryString(avg));\n        return result;\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp95nxavk.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpp95nxavk.java:19:\
    \ error: cannot find symbol\n        Union_String_int result = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpp95nxavk.java:19:\
    \ error: cannot find symbol\n        Union_String_int result = new Union_String_int();\n\
    \                                      ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpp95nxavk.java:34: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpp95nxavk.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp95nxavk.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp95nxavk.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp95nxavk.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp95nxavk.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp95nxavk.java:42: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"-1\");\n        }\n        int average = ((n\
    \ + m) / 2);\n        String binary = Integer.toBinaryString(average);\n     \
    \   return new Union_String_int(\"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzvhqi240.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpzvhqi240.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpzvhqi240.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + binary);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpzvhqi240.java:25: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpzvhqi240.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzvhqi240.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzvhqi240.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzvhqi240.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzvhqi240.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzvhqi240.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Fill in the code here\n\
    \        if (n > m) {\n            return new Union_String_int(-1);\n        }\
    \ else {\n            int average = (n + m) / 2;\n            String binaryStr\
    \ = Integer.toBinaryString(average);\n            return new Union_String_int(\"\
    0b\" + binaryStr);\n        }\nreturn new Union_String_int();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2mw9wpt5.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2mw9wpt5.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp2mw9wpt5.java:25: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + binaryStr);\n                       ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2mw9wpt5.java:27:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2mw9wpt5.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2mw9wpt5.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2mw9wpt5.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2mw9wpt5.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2mw9wpt5.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2mw9wpt5.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Uni"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        \n        if (n > m) {\n\
    \            return new Union_String_int(\"-1\");\n        }\n        \n     \
    \   int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        \n        double avg = (double) sum / (m - n + 1);\n     \
    \   int rounded = (int) Math.round(avg);\n        String result = Integer.toBinaryString(rounded);\n\
    \        return new Union_String_int(\"0b\" + result);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvl_j3am5.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvl_j3am5.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpvl_j3am5.java:32: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + result);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpvl_j3am5.java:33: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpvl_j3am5.java:36:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvl_j3am5.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvl_j3am5.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvl_j3am5.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvl_j3am5.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpvl_j3am5.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return Union_String_int.get_Union_String_int(Union_String_int.Union_String_int_tag.String_tag,\
    \ \"0b11\");\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo79bgt_p.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpo79bgt_p.java:19:\
    \ error: package Union_String_int does not exist\n        return Union_String_int.get_Union_String_int(Union_String_int.Union_String_int_tag.String_tag,\
    \ \"0b11\");\n                                                               \
    \      ^\n/tmp/tmpo79bgt_p.java:19: error: cannot find symbol\n        return\
    \ Union_String_int.get_Union_String_int(Union_String_int.Union_String_int_tag.String_tag,\
    \ \"0b11\");\n               ^\n  symbol:   variable Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpo79bgt_p.java:20: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpo79bgt_p.java:23: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpo79bgt_p.java:24: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpo79bgt_p.java:25: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpo79bgt_p.java:26: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpo79bgt_p.java:27: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  lo"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Your code here\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_7m7q4f4.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_7m7q4f4.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp_7m7q4f4.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7m7q4f4.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7m7q4f4.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7m7q4f4.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7m7q4f4.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7m7q4f4.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp_7m7q4f4.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        BigInteger total\
    \ = BigInteger.ZERO;\n        BigInteger nBigInt = BigInteger.valueOf(n);\n  \
    \      BigInteger mBigInt = BigInteger.valueOf(m);\n        BigInteger i = nBigInt;\n\
    \        while (i.compareTo(mBigInt) <= 0) {\n            total = total.add(i);\n\
    \            i = i.add(BigInteger.ONE);\n        }\n        BigInteger average\
    \ = total.divide(BigInteger.valueOf(m - n + 1));\n        String averageStr =\
    \ average.toString(2);\n        return new Union_String_int(\"0b\" + averageStr,\
    \ -1);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy1na1ev6.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpy1na1ev6.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpy1na1ev6.java:32: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + averageStr, -1);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpy1na1ev6.java:33:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpy1na1ev6.java:36:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy1na1ev6.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy1na1ev6.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy1na1ev6.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy1na1ev6.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpy1na1ev6.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Un"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return new Union_String_int(\"\
    0b\" + IntStream.rangeClosed(n, m).average().getAsDouble(), -1);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphelcew69.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmphelcew69.java:19:\
    \ error: cannot find symbol\n        return new Union_String_int(\"0b\" + IntStream.rangeClosed(n,\
    \ m).average().getAsDouble(), -1);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmphelcew69.java:20: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmphelcew69.java:23: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphelcew69.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphelcew69.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphelcew69.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphelcew69.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphelcew69.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Prob"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(1, -1);\n        }\n        double avg = (n +\
    \ m) / 2.0;\n        String binaryStr = Integer.toBinaryString((int) Math.round(avg));\n\
    \        return new Union_String_int(0, \"0b\" + binaryStr);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bbdczuk.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7bbdczuk.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(1, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp7bbdczuk.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(0, \"0b\" + binaryStr);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7bbdczuk.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7bbdczuk.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7bbdczuk.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7bbdczuk.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7bbdczuk.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7bbdczuk.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7bbdczuk.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Union_String_int.Variant_int(-1));\n    \
    \    }\n        if (n == m) {\n            return new Union_String_int(new Union_String_int.Variant_String(Integer.toBinaryString(n)));\n\
    \        }\n        int avg = (n + m) / 2;\n        return new Union_String_int(new\
    \ Union_String_int.Variant_String(Integer.toBinaryString(avg)));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0titkuhr.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0titkuhr.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_String_int.Variant_int(-1));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp0titkuhr.java:20: error: package Union_String_int does not\
    \ exist\n            return new Union_String_int(new Union_String_int.Variant_int(-1));\n\
    \                                                            ^\n/tmp/tmp0titkuhr.java:23:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_String_int.Variant_String(Integer.toBinaryString(n)));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp0titkuhr.java:23: error: package Union_String_int does not\
    \ exist\n            return new Union_String_int(new Union_String_int.Variant_String(Integer.toBinaryString(n)));\n\
    \                                                            ^\n/tmp/tmp0titkuhr.java:26:\
    \ error: cannot find symbol\n        return new Union_String_int(new Union_String_int.Variant_String(Integer.toBinaryString(avg)));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp0titkuhr.java:26: error: package Union_String_int does not exist\n   \
    \     return new Union_String_int(new Union_String_int.Variant_String(Integer.toBinaryString(avg)));\n\
    \                                                        ^\n/tmp/tmp0titkuhr.java:27:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0titkuhr.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0titkuhr.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7),"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(String.valueOf(-1));\n\
    \        int sum = IntStream.rangeClosed(n, m).sum();\n        String binary =\
    \ Integer.toBinaryString(Math.round((float)sum / (m - n + 1)));\n        return\
    \ new Union_String_int(String.valueOf(\"0b\" + binary));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr0yrtj6l.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpr0yrtj6l.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(String.valueOf(-1));\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpr0yrtj6l.java:22: error: cannot find symbol\n       \
    \ return new Union_String_int(String.valueOf(\"0b\" + binary));\n            \
    \       ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpr0yrtj6l.java:23:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpr0yrtj6l.java:26:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr0yrtj6l.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr0yrtj6l.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr0yrtj6l.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr0yrtj6l.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr0yrtj6l.java:31: error: cannot find symbol\n\
    \    assert(r"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(\"\
    -1\");\n        int ans = (n + m) / 2;\n        String res = Integer.toBinaryString(ans);\n\
    \        return new Union_String_int(\"0b\" + res);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0s7ooacy.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0s7ooacy.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp0s7ooacy.java:22: error: cannot find symbol\n\
    \        return new Union_String_int(\"0b\" + res);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0s7ooacy.java:23:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0s7ooacy.java:26:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0s7ooacy.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0s7ooacy.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0s7ooacy.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0s7ooacy.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0s7ooacy.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((U"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int avg = (n + m) / 2;\n\
    \        String binary = Integer.toBinaryString(avg);\n        return new Union_String_int(binary);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3cqyq7rb.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3cqyq7rb.java:21:\
    \ error: cannot find symbol\n        return new Union_String_int(binary);\n  \
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp3cqyq7rb.java:22: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp3cqyq7rb.java:25: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp3cqyq7rb.java:26: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp3cqyq7rb.java:27: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp3cqyq7rb.java:28: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp3cqyq7rb.java:29: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp3cqyq7rb.java:30: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp3cqyq7rb.java:31: error: cannot find symbol\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        } else {\n            double avg\
    \ = (double)(n + m) / 2;\n            return new Union_String_int(Integer.toBinaryString((int)Math.round(avg)));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3k1pdbi.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmps3k1pdbi.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmps3k1pdbi.java:23: error: cannot find symbol\n            return\
    \ new Union_String_int(Integer.toBinaryString((int)Math.round(avg)));\n      \
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmps3k1pdbi.java:25: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmps3k1pdbi.java:28: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmps3k1pdbi.java:29: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmps3k1pdbi.java:30: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmps3k1pdbi.java:31: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmps3k1pdbi.java:32: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmps3k1pdbi.java:33: error: cannot find symbol\n    assert(roundedA"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int.Case2(-1);\n\
    \        double sum = 0;\n        for (int i = n; i <= m; i++) {\n           \
    \ sum += i;\n        }\n        int rounded = (int) Math.round(sum / (m - n +\
    \ 1));\n        return new Union_String_int.Case1(\"0b\" + Integer.toBinaryString(rounded));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25ellsd1.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp25ellsd1.java:19:\
    \ error: package Union_String_int does not exist\n        if (n > m) return new\
    \ Union_String_int.Case2(-1);\n                                              ^\n\
    /tmp/tmp25ellsd1.java:25: error: package Union_String_int does not exist\n   \
    \     return new Union_String_int.Case1(\"0b\" + Integer.toBinaryString(rounded));\n\
    \                                   ^\n/tmp/tmp25ellsd1.java:26: error: cannot\
    \ find symbol\nreturn new Union_String_int();\n           ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmp25ellsd1.java:29: error:\
    \ cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp25ellsd1.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp25ellsd1.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp25ellsd1.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp25ellsd1.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp25ellsd1.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        double avg = (double)(m+n)/2;\n\
    \        String avgBin = Integer.toBinaryString((int)Math.round(avg));\n     \
    \   return new Union_String_int(\"0b\" + avgBin);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp5xcug2n.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpp5xcug2n.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpp5xcug2n.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + avgBin);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpp5xcug2n.java:25: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpp5xcug2n.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp5xcug2n.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp5xcug2n.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp5xcug2n.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp5xcug2n.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpp5xcug2n.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n      \
    \  int average = sum / (m - n + 1);\n        return new Union_String_int(Integer.toBinaryString(average));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp32gte8fx.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp32gte8fx.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp32gte8fx.java:23: error: cannot find symbol\n       \
    \ return new Union_String_int(Integer.toBinaryString(average));\n            \
    \       ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp32gte8fx.java:24:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp32gte8fx.java:27:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp32gte8fx.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp32gte8fx.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp32gte8fx.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp32gte8fx.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp32gte8fx.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((185"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(new\
    \ Some<String>(\"-1\"));\n        int avg = (n + m) / 2;\n        StringBuilder\
    \ binary = new StringBuilder();\n        for (int i = 31; i >= 0; i--) {\n   \
    \         if (((1 << i) & avg) != 0) {\n                binary.append(\"1\");\n\
    \            } else {\n                binary.append(\"0\");\n            }\n\
    \        }\n        int firstOne = binary.indexOf(\"1\");\n        return new\
    \ Union_String_int(new Some<String>(\"0b\" + binary.substring(firstOne)));\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzbd7bbih.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpzbd7bbih.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(new\
    \ Some<String>(\"-1\"));\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpzbd7bbih.java:19: error: cannot find symbol\n\
    \        if (n > m) return new Union_String_int(new Some<String>(\"-1\"));\n \
    \                                                  ^\n  symbol:   class Some\n\
    \  location: class Problem\n/tmp/tmpzbd7bbih.java:30: error: cannot find symbol\n\
    \        return new Union_String_int(new Some<String>(\"0b\" + binary.substring(firstOne)));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpzbd7bbih.java:30: error: cannot find symbol\n        return new Union_String_int(new\
    \ Some<String>(\"0b\" + binary.substring(firstOne)));\n                      \
    \                  ^\n  symbol:   class Some\n  location: class Problem\n/tmp/tmpzbd7bbih.java:31:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpzbd7bbih.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzbd7bbih.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzbd7bbih.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzbd7bbih.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((99"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int r = new\
    \ Union_String_int();\n        // @TODO: Write your code here\n        if (n >\
    \ m) {\n            r.set_int(-1);\n        } else {\n            r.set_String(String.format(\"\
    0b%s\", Integer.toBinaryString((n + m) / 2)));\n        }\n        return r;\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj_in0zu9.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpj_in0zu9.java:19:\
    \ error: cannot find symbol\n        Union_String_int r = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpj_in0zu9.java:19:\
    \ error: cannot find symbol\n        Union_String_int r = new Union_String_int();\n\
    \                                 ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpj_in0zu9.java:27: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpj_in0zu9.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpj_in0zu9.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpj_in0zu9.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_in0zu9.java:33: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_in0zu9.java:34: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_in0zu9.java:35: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // your code here\n   \
    \     int sum = 0;\n        if (n > m) {\n            return new Union_String_int(-1);\n\
    \        }\n        for (int i = n; i <= m; i++) {\n            sum += i;\n  \
    \      }\n        int mid = (int)Math.round((double)sum / (m - n + 1));\n    \
    \    String res = Integer.toBinaryString(mid);\n        return new Union_String_int(\"\
    0b\" + res);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdwcemee.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpsdwcemee.java:22:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpsdwcemee.java:29: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + res);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpsdwcemee.java:30: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpsdwcemee.java:33:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsdwcemee.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsdwcemee.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsdwcemee.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsdwcemee.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpsdwcemee.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(true, -1);\n        }\n        return new Union_String_int(false,\
    \ Integer.toBinaryString((int) Math.round((n + m) / 2.0)));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppkg22shv.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmppkg22shv.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(true, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmppkg22shv.java:22: error: cannot find symbol\n        return\
    \ new Union_String_int(false, Integer.toBinaryString((int) Math.round((n + m)\
    \ / 2.0)));\n                   ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmppkg22shv.java:23: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmppkg22shv.java:26: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmppkg22shv.java:27: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmppkg22shv.java:28: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppkg22shv.java:29: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppkg22shv.java:30: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppkg22shv.java:31: error: cannot find symbol\n   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(true, -1);\n        }\n        int average =\
    \ (int) Math.round((n + m) / 2.0);\n        String binary = Integer.toBinaryString(average);\n\
    \        return new Union_String_int(false, \"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpisyp4ijy.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpisyp4ijy.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(true, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpisyp4ijy.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(false, \"0b\" + binary);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpisyp4ijy.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpisyp4ijy.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpisyp4ijy.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpisyp4ijy.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpisyp4ijy.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpisyp4ijy.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpisyp4ijy.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((U"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // BEGIN CUT HERE\n   \
    \     // System.out.println(\"roundedAvg(\" + n + \", \" + m + \")\");\n     \
    \   // END CUT HERE\n        if (n > m) {\n            return Union_String_int.withInt(-1);\n\
    \        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n   \
    \         sum += i;\n        }\n        double avg = sum / (double) (m - n + 1);\n\
    \        BigInteger roundedAvg = new BigInteger(String.valueOf(Math.round(avg)));\n\
    \        String binaryString = \"0b\" + roundedAvg.toString(2);\n        return\
    \ Union_String_int.withString(binaryString);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9i04rmlt.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp9i04rmlt.java:23:\
    \ error: cannot find symbol\n            return Union_String_int.withInt(-1);\n\
    \                   ^\n  symbol:   variable Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp9i04rmlt.java:32: error: cannot find symbol\n        return\
    \ Union_String_int.withString(binaryString);\n               ^\n  symbol:   variable\
    \ Union_String_int\n  location: class Problem\n/tmp/tmp9i04rmlt.java:33: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp9i04rmlt.java:36:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9i04rmlt.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9i04rmlt.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9i04rmlt.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9i04rmlt.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9i04rmlt.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      if (n > m) return new Union_String_int(\"\
    -1\");\n      int sum = 0;\n      for (int i = n; i <= m; i++) {\n        sum\
    \ += i;\n      }\n      return new Union_String_int(\"0b\" + Integer.toBinaryString(Math.round(sum/(m-n+1))));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4biub6xz.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4biub6xz.java:19:\
    \ error: cannot find symbol\n      if (n > m) return new Union_String_int(\"-1\"\
    );\n                            ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp4biub6xz.java:24: error: cannot find symbol\n      return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(Math.round(sum/(m-n+1))));\n\
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp4biub6xz.java:25: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp4biub6xz.java:28: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp4biub6xz.java:29: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp4biub6xz.java:30: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4biub6xz.java:31: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4biub6xz.java:32: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4biub6xz.java:33: error: cannot find symbol\n    asser"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // your code here\n   \
    \     return null;\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkj51cp3d.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpkj51cp3d.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpkj51cp3d.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkj51cp3d.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkj51cp3d.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkj51cp3d.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkj51cp3d.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkj51cp3d.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkj51cp3d.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int average = (n + m) /\
    \ 2;\n        if (n > m) {\n            return new Union_String_int(null, -1);\n\
    \        }\n        return new Union_String_int(\"0b\" + Integer.toBinaryString(average),\
    \ 0);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppp23r46g.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmppp23r46g.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(null, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmppp23r46g.java:23: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(average), 0);\n       \
    \            ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmppp23r46g.java:24: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmppp23r46g.java:27: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmppp23r46g.java:28: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmppp23r46g.java:29: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppp23r46g.java:30: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppp23r46g.java:31: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmppp23r46g.java:32: error: cannot find symbol\n    assert(roundedAvg((1"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(1, new Union_int_None());\n        } else {\n\
    \            int sum = 0;\n            for (int i = n; i <= m; i++) {\n      \
    \          sum += i;\n            }\n            int quotient = sum / (m - n +\
    \ 1);\n            String binary = Integer.toBinaryString(quotient);\n       \
    \     return new Union_String_int(0, new Union_int_String(binary));\n        }\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzfuymv_.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmphzfuymv_.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(1, new Union_int_None());\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmphzfuymv_.java:20: error: cannot find symbol\n            return\
    \ new Union_String_int(1, new Union_int_None());\n                           \
    \                    ^\n  symbol:   class Union_int_None\n  location: class Problem\n\
    /tmp/tmphzfuymv_.java:28: error: cannot find symbol\n            return new Union_String_int(0,\
    \ new Union_int_String(binary));\n                       ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmphzfuymv_.java:28: error:\
    \ cannot find symbol\n            return new Union_String_int(0, new Union_int_String(binary));\n\
    \                                               ^\n  symbol:   class Union_int_String\n\
    \  location: class Problem\n/tmp/tmphzfuymv_.java:30: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmphzfuymv_.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphzfuymv_.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphzfuymv_.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphzfuymv_.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Uni"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // your code goes here\n\
    \        return null;\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5w3pra4v.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5w3pra4v.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5w3pra4v.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5w3pra4v.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5w3pra4v.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5w3pra4v.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5w3pra4v.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5w3pra4v.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5w3pra4v.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      if (n > m) {\n        return\
    \ new Union_String_int(\"-1\");\n      } else {\n        int sum = 0;\n      \
    \  for (int i = n; i <= m; i++) {\n          sum += i;\n        }\n        int\
    \ avg = sum / (m - n + 1);\n        return new Union_String_int(Integer.toBinaryString(avg));\n\
    \      }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfyrdq9x2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpfyrdq9x2.java:20:\
    \ error: cannot find symbol\n        return new Union_String_int(\"-1\");\n  \
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpfyrdq9x2.java:27: error: cannot find symbol\n        return new Union_String_int(Integer.toBinaryString(avg));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpfyrdq9x2.java:29: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpfyrdq9x2.java:32: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpfyrdq9x2.java:33: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpfyrdq9x2.java:34: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpfyrdq9x2.java:35: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpfyrdq9x2.java:36: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpfyrdq9x2.java:37: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"-1\");\n        }\n        int sum = 0;\n \
    \       for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n   \
    \     int avg = (int) Math.round((double) sum / (m - n + 1));\n        return\
    \ new Union_String_int(Integer.toBinaryString(avg));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppud14ujj.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmppud14ujj.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmppud14ujj.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(Integer.toBinaryString(avg));\n                   ^\n \
    \ symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmppud14ujj.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmppud14ujj.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppud14ujj.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppud14ujj.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppud14ujj.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppud14ujj.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppud14ujj.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        throw new UnsupportedOperationException(\"\
    Not implemented yet.\");\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf7tnkbl_.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpf7tnkbl_.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpf7tnkbl_.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf7tnkbl_.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf7tnkbl_.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf7tnkbl_.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf7tnkbl_.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf7tnkbl_.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf7tnkbl_.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // YOUR CODE HERE\n   \
    \     if (n > m) {\n            return new Union_String_int(null, -1);\n     \
    \   } else {\n            int roundedAvg = (int)Math.round(((n + m) / 2.0));\n\
    \            String binaryRoundedAvg = Integer.toBinaryString(roundedAvg);\n \
    \           return new Union_String_int(\"0b\" + binaryRoundedAvg, 0);\n     \
    \   }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0rkec83t.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0rkec83t.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(null, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp0rkec83t.java:25: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + binaryRoundedAvg, 0);\n                      \
    \ ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp0rkec83t.java:27:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0rkec83t.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0rkec83t.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0rkec83t.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0rkec83t.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0rkec83t.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0rkec83t.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (5"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        int average = sum / (m - n + 1);\n        return new\
    \ Union_String_int(\"0b\" + Integer.toBinaryString(average));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw0v9rpdo.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpw0v9rpdo.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpw0v9rpdo.java:25: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + Integer.toBinaryString(average));\n   \
    \                ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpw0v9rpdo.java:26: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpw0v9rpdo.java:29: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpw0v9rpdo.java:30: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpw0v9rpdo.java:31: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw0v9rpdo.java:32: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw0v9rpdo.java:33: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpw0v9rpdo.java:34: error: cannot find symbol\n    assert(roundedA"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Your code here...\n\
    \        return null;\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3vjizhrc.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3vjizhrc.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3vjizhrc.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3vjizhrc.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3vjizhrc.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3vjizhrc.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3vjizhrc.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3vjizhrc.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp3vjizhrc.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(null,\
    \ -1);\n        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n\
    \        int avg = sum / (m - n + 1);\n        String binary = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(\"0b\" + binary, 0);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3n5g99o.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmph3n5g99o.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(null,\
    \ -1);\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmph3n5g99o.java:24: error: cannot find symbol\n\
    \        return new Union_String_int(\"0b\" + binary, 0);\n                  \
    \ ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmph3n5g99o.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmph3n5g99o.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph3n5g99o.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph3n5g99o.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph3n5g99o.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph3n5g99o.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmph3n5g99o.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        long sum = IntStream.rangeClosed(n, m).sum();\n        int ave = (int)\
    \ Math.round((double) sum / (m - n + 1));\n        return new Union_String_int(\"\
    0b\" + Integer.toBinaryString(ave));\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5csnj_kh.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5csnj_kh.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp5csnj_kh.java:22: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + Integer.toBinaryString(ave));\n       \
    \            ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp5csnj_kh.java:23: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp5csnj_kh.java:26: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp5csnj_kh.java:27: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp5csnj_kh.java:28: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp5csnj_kh.java:29: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp5csnj_kh.java:30: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp5csnj_kh.java:31: error: cannot find symbol\n    assert(roundedAvg(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        else {\n           \
    \ int sum = 0;\n            int count = 0;\n            for (int i = n; i <= m;\
    \ i++) {\n                sum += i;\n                count++;\n            }\n\
    \            double avg = (double)sum / (double)count;\n            int roundedAvg\
    \ = (int)Math.round(avg);\n            String binaryRoundedAvg = Integer.toBinaryString(roundedAvg);\n\
    \            return new Union_String_int(\"0b\" + binaryRoundedAvg);\n       \
    \ }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpylo2hloi.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpylo2hloi.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpylo2hloi.java:32: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + binaryRoundedAvg);\n                       ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpylo2hloi.java:34:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpylo2hloi.java:37:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpylo2hloi.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpylo2hloi.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpylo2hloi.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpylo2hloi.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpylo2hloi.java:42: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int.B(new Union_int_Union_String_int(new Union_int_Union_String_int.B(-1)));\n\
    \        }\n        int avg = (n + m) / 2;\n        String bin = toBinary(avg);\n\
    \        return new Union_String_int.A(new Union_String_Union_String_int(new Union_String_Union_String_int.A(\"\
    0b\" + bin)));\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0qnhwgl3.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0qnhwgl3.java:20:\
    \ error: package Union_String_int does not exist\n            return new Union_String_int.B(new\
    \ Union_int_Union_String_int(new Union_int_Union_String_int.B(-1)));\n       \
    \                                ^\n/tmp/tmp0qnhwgl3.java:20: error: cannot find\
    \ symbol\n            return new Union_String_int.B(new Union_int_Union_String_int(new\
    \ Union_int_Union_String_int.B(-1)));\n                                      \
    \        ^\n  symbol:   class Union_int_Union_String_int\n  location: class Problem\n\
    /tmp/tmp0qnhwgl3.java:20: error: package Union_int_Union_String_int does not exist\n\
    \            return new Union_String_int.B(new Union_int_Union_String_int(new\
    \ Union_int_Union_String_int.B(-1)));\n                                      \
    \                                                                 ^\n/tmp/tmp0qnhwgl3.java:23:\
    \ error: cannot find symbol\n        String bin = toBinary(avg);\n           \
    \          ^\n  symbol:   method toBinary(int)\n  location: class Problem\n/tmp/tmp0qnhwgl3.java:24:\
    \ error: package Union_String_int does not exist\n        return new Union_String_int.A(new\
    \ Union_String_Union_String_int(new Union_String_Union_String_int.A(\"0b\" + bin)));\n\
    \                                   ^\n/tmp/tmp0qnhwgl3.java:24: error: cannot\
    \ find symbol\n        return new Union_String_int.A(new Union_String_Union_String_int(new\
    \ Union_String_Union_String_int.A(\"0b\" + bin)));\n                         \
    \                 ^\n  symbol:   class Union_String_Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp0qnhwgl3.java:24: error: package Union_String_Union_String_int\
    \ does not exist\n        return new Union_String_int.A(new Union_String_Union_String_int(new\
    \ Union_String_Union_String_int.A(\"0b\" + bin)));\n                         \
    \                                                                            \
    \    ^\n/tmp/tmp0qnhwgl3.java:25: err"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int r = new\
    \ Union_String_int();\n        r.e0 = \"\";\n        int sum = 0;\n        for\
    \ (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int ave\
    \ = sum / (m - n + 1);\n        r.e0 = aveToBinary(ave);\n        return r;\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03_0vuc0.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp03_0vuc0.java:19:\
    \ error: cannot find symbol\n        Union_String_int r = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp03_0vuc0.java:19:\
    \ error: cannot find symbol\n        Union_String_int r = new Union_String_int();\n\
    \                                 ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp03_0vuc0.java:26: error: cannot find symbol\n       \
    \ r.e0 = aveToBinary(ave);\n               ^\n  symbol:   method aveToBinary(int)\n\
    \  location: class Problem\n/tmp/tmp03_0vuc0.java:28: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp03_0vuc0.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp03_0vuc0.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp03_0vuc0.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp03_0vuc0.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp03_0vuc0.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = n;\n     \
    \   for (int i = n + 1; i <= m; i++) {\n            sum += i;\n        }\n   \
    \     int avg = (int) Math.round(((double) sum) / (m - n + 1));\n        String\
    \ result = \"0b\" + Integer.toBinaryString(avg);\n        return new Union_String_int(result);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppor_gpo2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmppor_gpo2.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmppor_gpo2.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(result);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmppor_gpo2.java:29: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmppor_gpo2.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppor_gpo2.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppor_gpo2.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppor_gpo2.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppor_gpo2.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmppor_gpo2.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b1"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = n;\n     \
    \   for (int i = n + 1; i <= m; i++) {\n            sum += i;\n        }\n   \
    \     int avg = (int)Math.round((double)sum / (m - n + 1));\n        String s\
    \ = Integer.toBinaryString(avg);\n        return new Union_String_int(s);\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqokd766q.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpqokd766q.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpqokd766q.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(s);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpqokd766q.java:29: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpqokd766q.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqokd766q.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqokd766q.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqokd766q.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqokd766q.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqokd766q.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return Union_String_int.create(Union_String_int.Tag.Int,\
    \ -1);\n        return Union_String_int.create(Union_String_int.Tag.String, \"\
    0b\" + Integer.toBinaryString((int)Math.round((n + m) / 2.0)));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppk6cacth.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmppk6cacth.java:19:\
    \ error: package Union_String_int does not exist\n        if (n > m) return Union_String_int.create(Union_String_int.Tag.Int,\
    \ -1);\n                                                                  ^\n\
    /tmp/tmppk6cacth.java:19: error: cannot find symbol\n        if (n > m) return\
    \ Union_String_int.create(Union_String_int.Tag.Int, -1);\n                   \
    \       ^\n  symbol:   variable Union_String_int\n  location: class Problem\n\
    /tmp/tmppk6cacth.java:20: error: package Union_String_int does not exist\n   \
    \     return Union_String_int.create(Union_String_int.Tag.String, \"0b\" + Integer.toBinaryString((int)Math.round((n\
    \ + m) / 2.0)));\n                                                       ^\n/tmp/tmppk6cacth.java:20:\
    \ error: cannot find symbol\n        return Union_String_int.create(Union_String_int.Tag.String,\
    \ \"0b\" + Integer.toBinaryString((int)Math.round((n + m) / 2.0)));\n        \
    \       ^\n  symbol:   variable Union_String_int\n  location: class Problem\n\
    /tmp/tmppk6cacth.java:21: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmppk6cacth.java:24: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmppk6cacth.java:25: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmppk6cacth.java:26: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tm"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        //BEGIN SOLUTION\n    \
    \    int sum = n + m;\n        int avg = sum / 2;\n        avg = Math.round(avg);\n\
    \        String binary = Integer.toBinaryString(avg);\n        String result =\
    \ \"0b\" + binary;\n        return Union_String_int.with_String(result);\n   \
    \     //END SOLUTION\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp52z85ovc.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp52z85ovc.java:25:\
    \ error: cannot find symbol\n        return Union_String_int.with_String(result);\n\
    \               ^\n  symbol:   variable Union_String_int\n  location: class Problem\n\
    /tmp/tmp52z85ovc.java:27: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp52z85ovc.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp52z85ovc.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp52z85ovc.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp52z85ovc.java:33: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp52z85ovc.java:34: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp52z85ovc.java:35: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp52z85ovc.java:36: error: cannot find "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        } else {\n            var a = (n\
    \ + m) / 2;\n            return new Union_String_int(Integer.toBinaryString(a));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkm7m7_pv.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpkm7m7_pv.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpkm7m7_pv.java:22: error: cannot find symbol\n            var\
    \ a = (n + m) / 2;\n            ^\n  symbol:   class var\n  location: class Problem\n\
    /tmp/tmpkm7m7_pv.java:23: error: cannot find symbol\n            return new Union_String_int(Integer.toBinaryString(a));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpkm7m7_pv.java:25: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpkm7m7_pv.java:28: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpkm7m7_pv.java:29: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpkm7m7_pv.java:30: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpkm7m7_pv.java:31: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpkm7m7_pv.java:32: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   m"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int avg = (n + m) /\
    \ 2;\n        String binary = Integer.toBinaryString(avg);\n        return new\
    \ Union_String_int(\"0b\" + binary);\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps5b7iq4b.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmps5b7iq4b.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmps5b7iq4b.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + binary);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmps5b7iq4b.java:25: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmps5b7iq4b.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmps5b7iq4b.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmps5b7iq4b.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmps5b7iq4b.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmps5b7iq4b.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmps5b7iq4b.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n      \
    \  float avg = (float) sum / (m - n + 1);\n        return new Union_String_int(Integer.toBinaryString(Math.round(avg)));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwtpnvch0.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpwtpnvch0.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpwtpnvch0.java:23: error: cannot find symbol\n       \
    \ return new Union_String_int(Integer.toBinaryString(Math.round(avg)));\n    \
    \               ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpwtpnvch0.java:24: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpwtpnvch0.java:27: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpwtpnvch0.java:28: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpwtpnvch0.java:29: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpwtpnvch0.java:30: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpwtpnvch0.java:31: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpwtpnvch0.java:32: error: cannot find symbol\n    assert(rounded"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Union_int_String( -1));\n        }\n    \
    \    else {\n            int avg = (n + m) / 2;\n            String binary = Integer.toBinaryString(avg);\n\
    \            return new Union_String_int(new Union_int_String(Integer.parseInt(binary)));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ctidcsn.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2ctidcsn.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_int_String(\
    \ -1));\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp2ctidcsn.java:20: error: cannot find symbol\n       \
    \     return new Union_String_int(new Union_int_String( -1));\n              \
    \                              ^\n  symbol:   class Union_int_String\n  location:\
    \ class Problem\n/tmp/tmp2ctidcsn.java:25: error: cannot find symbol\n       \
    \     return new Union_String_int(new Union_int_String(Integer.parseInt(binary)));\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp2ctidcsn.java:25: error: cannot find symbol\n            return\
    \ new Union_String_int(new Union_int_String(Integer.parseInt(binary)));\n    \
    \                                        ^\n  symbol:   class Union_int_String\n\
    \  location: class Problem\n/tmp/tmp2ctidcsn.java:27: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp2ctidcsn.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2ctidcsn.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2ctidcsn.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp2ctidcsn.java:33: error: cannot find symbol\n\
    \    assert(rounde"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        return new Union_String_int(null);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmex0nn4f.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpmex0nn4f.java:19:\
    \ error: cannot find symbol\n        return new Union_String_int(null);\n    \
    \               ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpmex0nn4f.java:20: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpmex0nn4f.java:23: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpmex0nn4f.java:24: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpmex0nn4f.java:25: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpmex0nn4f.java:26: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpmex0nn4f.java:27: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpmex0nn4f.java:28: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpmex0nn4f.java:29: error: cannot find symbol\n  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // It is possible that\
    \ the result is an integer (decimal) value; \n        // so you have to return\
    \ a tuple of Union<String, int>\n        int sum = 0;\n        int count = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n\
    \        }\n        BigDecimal bd = new BigDecimal(sum).divide(new BigDecimal(count),\
    \ RoundingMode.HALF_UP);\n        return new Union_String_int(Integer.toBinaryString(bd.intValue()));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj_ajawjy.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpj_ajawjy.java:28:\
    \ error: cannot find symbol\n        return new Union_String_int(Integer.toBinaryString(bd.intValue()));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpj_ajawjy.java:29: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpj_ajawjy.java:32: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpj_ajawjy.java:33: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpj_ajawjy.java:34: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_ajawjy.java:35: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_ajawjy.java:36: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_ajawjy.java:37: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpj_ajawjy.java"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n      \
    \  int avg = (int) Math.round(((double) sum) / (m - n + 1));\n        String binary\
    \ = Integer.toBinaryString(avg);\n        return new Union_String_int(\"0b\" +\
    \ binary);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgdmjuzss.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgdmjuzss.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpgdmjuzss.java:24: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + binary);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgdmjuzss.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgdmjuzss.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgdmjuzss.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgdmjuzss.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgdmjuzss.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgdmjuzss.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgdmjuzss.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // todo: Implement this\
    \ function\n        if (n > m) {\n            return Union_String_int.withInt(0);\n\
    \        }\n        int average = (n + m) / 2;\n        String binary = Integer.toBinaryString(average);\n\
    \        return Union_String_int.withString(\"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1l48qwmg.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1l48qwmg.java:21:\
    \ error: cannot find symbol\n            return Union_String_int.withInt(0);\n\
    \                   ^\n  symbol:   variable Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp1l48qwmg.java:25: error: cannot find symbol\n        return\
    \ Union_String_int.withString(\"0b\" + binary);\n               ^\n  symbol: \
    \  variable Union_String_int\n  location: class Problem\n/tmp/tmp1l48qwmg.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1l48qwmg.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1l48qwmg.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1l48qwmg.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1l48qwmg.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1l48qwmg.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1l48qwmg.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int v = new\
    \ Union_String_int();\n        v.choice2 = -1;\n        //@ghost int c = 0; //\
    \ count\n        //@ghost int s = 0; // sum\n        for (int i = n; i <= m; i++)\
    \ {\n            //@set c = c + 1;\n            //@set s = s + i;\n        }\n\
    \        //@set s = s / c;\n        //@set s = ((s >> 31) ^ s) + ((s >> 31) &\
    \ 1);\n        //@set v.choice1 = Integer.toBinaryString(s);\n        return v;\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4fo26pcl.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4fo26pcl.java:19:\
    \ error: cannot find symbol\n        Union_String_int v = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp4fo26pcl.java:19:\
    \ error: cannot find symbol\n        Union_String_int v = new Union_String_int();\n\
    \                                 ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp4fo26pcl.java:31: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp4fo26pcl.java:34: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp4fo26pcl.java:35: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp4fo26pcl.java:36: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4fo26pcl.java:37: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4fo26pcl.java:38: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4fo26pcl.java:39: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(null, -1);\n        } else {\n            BigInteger\
    \ sum = BigInteger.ZERO;\n            BigInteger count = BigInteger.ZERO;\n  \
    \          for (int i = n; i <= m; i++) {\n                sum = sum.add(BigInteger.valueOf(i));\n\
    \                count = count.add(BigInteger.ONE);\n            }\n         \
    \   BigInteger avg = sum.divide(count);\n            String avgBin = \"0b\" +\
    \ avg.toString(2);\n            return new Union_String_int(avgBin, null);\n \
    \       }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7_modxt.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpi7_modxt.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(null, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpi7_modxt.java:30: error: cannot find symbol\n            return\
    \ new Union_String_int(avgBin, null);\n                       ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpi7_modxt.java:32: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpi7_modxt.java:35:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpi7_modxt.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpi7_modxt.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpi7_modxt.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpi7_modxt.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpi7_modxt.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((U"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(1, -1);\n        }\n        int count = 0;\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum\
    \ += i;\n            count++;\n        }\n        int avg = (int)Math.round((double)sum\
    \ / count);\n        String binary = Integer.toBinaryString(avg);\n        return\
    \ new Union_String_int(0, \"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ryd3ks4.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1ryd3ks4.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(1, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp1ryd3ks4.java:30: error: cannot find symbol\n        return\
    \ new Union_String_int(0, \"0b\" + binary);\n                   ^\n  symbol: \
    \  class Union_String_int\n  location: class Problem\n/tmp/tmp1ryd3ks4.java:31:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1ryd3ks4.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1ryd3ks4.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1ryd3ks4.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1ryd3ks4.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1ryd3ks4.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1ryd3ks4.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_St"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new None_String(), new Some_int(-1));\n     \
    \   }\n        int avg = Math.round((n + m) / 2.0);\n        String binary = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(new Some_String(\"0b\" + binary), new None_int());\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3v4djax9.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3v4djax9.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new None_String(),\
    \ new Some_int(-1));\n                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp3v4djax9.java:20: error: cannot find symbol\n\
    \            return new Union_String_int(new None_String(), new Some_int(-1));\n\
    \                                            ^\n  symbol:   class None_String\n\
    \  location: class Problem\n/tmp/tmp3v4djax9.java:20: error: cannot find symbol\n\
    \            return new Union_String_int(new None_String(), new Some_int(-1));\n\
    \                                                               ^\n  symbol: \
    \  class Some_int\n  location: class Problem\n/tmp/tmp3v4djax9.java:22: error:\
    \ incompatible types: possible lossy conversion from long to int\n        int\
    \ avg = Math.round((n + m) / 2.0);\n                            ^\n/tmp/tmp3v4djax9.java:24:\
    \ error: cannot find symbol\n        return new Union_String_int(new Some_String(\"\
    0b\" + binary), new None_int());\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp3v4djax9.java:24: error: cannot find symbol\n\
    \        return new Union_String_int(new Some_String(\"0b\" + binary), new None_int());\n\
    \                                        ^\n  symbol:   class Some_String\n  location:\
    \ class Problem\n/tmp/tmp3v4djax9.java:24: error: cannot find symbol\n       \
    \ return new Union_String_int(new Some_String(\"0b\" + binary), new None_int());\n\
    \                                                                        ^\n \
    \ symbol:   class None_int\n  location: class Problem\n/tmp/tmp3v4djax9.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp3v4djax9.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n      \
    \  int avg = sum / (m - n + 1);\n        String res = Integer.toBinaryString(avg);\n\
    \        return new Union_String_int(\"0b\" + res);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl80axqb7.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpl80axqb7.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpl80axqb7.java:24: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + res);\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpl80axqb7.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpl80axqb7.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpl80axqb7.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpl80axqb7.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpl80axqb7.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpl80axqb7.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpl80axqb7.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Uni"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n      if (n > m) return new Union_String_int(\"\
    -1\");\n      int average = (n + m) / 2;\n      int binary = Integer.parseInt(Integer.toBinaryString(average));\n\
    \      return new Union_String_int(\"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyrk9ifus.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyrk9ifus.java:19:\
    \ error: cannot find symbol\n      if (n > m) return new Union_String_int(\"-1\"\
    );\n                            ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpyrk9ifus.java:22: error: cannot find symbol\n      return\
    \ new Union_String_int(\"0b\" + binary);\n                 ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpyrk9ifus.java:23: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyrk9ifus.java:26:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyrk9ifus.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyrk9ifus.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyrk9ifus.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyrk9ifus.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyrk9ifus.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // You may solve the problem\
    \ in any programming language you like.\n        // There are some hints to assist\
    \ you. \n        // If you are unfamiliar with bitwise operations, you can read\
    \ up on them here:\n        // https://en.wikipedia.org/wiki/Bitwise_operation\n\
    \        // The bitwise OR operation (|) can be used to set bits to 1.\n     \
    \   // The bitwise AND operation (&) can be used to clear bits to 0.\n       \
    \ // You may also use the bit shift operators:\n        // https://en.wikipedia.org/wiki/Bitwise_operation#Shift_operators\n\
    \        // https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html\n\
    \        // The integer average is calculated by ((n + m) / 2). \n        // To\
    \ round it up, add 1 to the result.\n        // Return the result.\n        return\
    \ new Union_String_int(null, -1);\nreturn new Union_String_int();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphkwu7smt.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmphkwu7smt.java:31:\
    \ error: cannot find symbol\n        return new Union_String_int(null, -1);\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmphkwu7smt.java:32: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmphkwu7smt.java:35: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmphkwu7smt.java:36: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmphkwu7smt.java:37: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmphkwu7smt.java:38: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmphkwu7smt.java:39: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmphkwu7smt.java:40: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmphkwu7smt.java:41: error: cannot find symbo"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new String(\"-1\"));\n        }\n        int\
    \ avg = (n + m) / 2;\n        String binary = Integer.toBinaryString(avg);\n \
    \       String binary_str = \"0b\" + binary;\n        return new Union_String_int(binary_str);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf47bluho.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpf47bluho.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new String(\"\
    -1\"));\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpf47bluho.java:25: error: cannot find symbol\n       \
    \ return new Union_String_int(binary_str);\n                   ^\n  symbol:  \
    \ class Union_String_int\n  location: class Problem\n/tmp/tmpf47bluho.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpf47bluho.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf47bluho.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf47bluho.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf47bluho.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf47bluho.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpf47bluho.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Uni"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new Union_int_None(0), \"int\");\n        }\n\
    \        int average = (n + m) / 2;\n        String str = Integer.toBinaryString(average);\n\
    \        return new Union_String_int(new Union_String_None(str), \"String\");\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkgx_os6j.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpkgx_os6j.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(new Union_int_None(0),\
    \ \"int\");\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpkgx_os6j.java:20: error: cannot find symbol\n       \
    \     return new Union_String_int(new Union_int_None(0), \"int\");\n         \
    \                                   ^\n  symbol:   class Union_int_None\n  location:\
    \ class Problem\n/tmp/tmpkgx_os6j.java:24: error: cannot find symbol\n       \
    \ return new Union_String_int(new Union_String_None(str), \"String\");\n     \
    \              ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpkgx_os6j.java:24: error: cannot find symbol\n        return new Union_String_int(new\
    \ Union_String_None(str), \"String\");\n                                     \
    \   ^\n  symbol:   class Union_String_None\n  location: class Problem\n/tmp/tmpkgx_os6j.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpkgx_os6j.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkgx_os6j.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkgx_os6j.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpkgx_os6j.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Unio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // find avg of n and m\n\
    \        // round to nearest integer\n        // convert to binary\n        if\
    \ (n > m) return Union_String_int.new_int(-1);\n        int avg = n + m;\n   \
    \     if (avg % 2 == 1) avg++;\n        avg /= 2;\n        String avgBin = Integer.toBinaryString(avg);\n\
    \        return Union_String_int.new_String(\"0b\" + avgBin);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpal1gqk00.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpal1gqk00.java:22:\
    \ error: cannot find symbol\n        if (n > m) return Union_String_int.new_int(-1);\n\
    \                          ^\n  symbol:   variable Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpal1gqk00.java:27: error: cannot find symbol\n       \
    \ return Union_String_int.new_String(\"0b\" + avgBin);\n               ^\n  symbol:\
    \   variable Union_String_int\n  location: class Problem\n/tmp/tmpal1gqk00.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpal1gqk00.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpal1gqk00.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpal1gqk00.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpal1gqk00.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpal1gqk00.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpal1gqk00.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        BigInteger sum = BigInteger.ZERO;\n\
    \        for (int i = n; i <= m; i++) {\n            sum = sum.add(BigInteger.valueOf(i));\n\
    \        }\n        BigInteger avg = sum.divide(BigInteger.valueOf(m - n + 1));\n\
    \        BigInteger lower = avg.and(BigInteger.valueOf(1));\n        BigInteger\
    \ upper = avg.add(BigInteger.ONE).and(BigInteger.valueOf(1));\n        if (lower.equals(BigInteger.ONE)\
    \ && upper.equals(BigInteger.ZERO)) {\n            avg = avg.add(BigInteger.ONE);\n\
    \        }\n        return new Union_String_int(\"0b\" + avg.toString(2));\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5dcn72d5.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5dcn72d5.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp5dcn72d5.java:32: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + avg.toString(2));\n                   ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5dcn72d5.java:33:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5dcn72d5.java:36:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5dcn72d5.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5dcn72d5.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5dcn72d5.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5dcn72d5.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5dcn72d5.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int sum = 0;\n        int\
    \ round = 0;\n        if (n > m) {\n            return new Union_String_int(null,\
    \ -1);\n        }\n        for (int i = n; i <= m; i++) {\n            sum +=\
    \ i;\n        }\n        round = (int) Math.round((double) sum / (m - n + 1));\n\
    \        return new Union_String_int(\"0b\" + Integer.toBinaryString(round), null);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgnnnh5c.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpsgnnnh5c.java:22:\
    \ error: cannot find symbol\n            return new Union_String_int(null, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpsgnnnh5c.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(round), null);\n      \
    \             ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpsgnnnh5c.java:29: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpsgnnnh5c.java:32: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpsgnnnh5c.java:33: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpsgnnnh5c.java:34: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpsgnnnh5c.java:35: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpsgnnnh5c.java:36: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpsgnnnh5c.java:37: error: cannot find symbol\n    assert(roundedAvg(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int mid = (n + m) /\
    \ 2;\n        String bin_mid = Integer.toBinaryString(mid);\n        return new\
    \ Union_String_int(\"0b\" + bin_mid);\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae89dtn1.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpae89dtn1.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpae89dtn1.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + bin_mid);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpae89dtn1.java:25: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpae89dtn1.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpae89dtn1.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpae89dtn1.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpae89dtn1.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpae89dtn1.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpae89dtn1.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(new\
    \ TYPE_String(), \"-1\");\n        int sum = 0;\n        for (int i = n; i <=\
    \ m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double)\
    \ sum / (m - n + 1));\n        return new Union_String_int(new TYPE_String(),\
    \ \"0b\" + Integer.toBinaryString(avg));\nreturn new Union_String_int();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpngoalnol.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpngoalnol.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(new\
    \ TYPE_String(), \"-1\");\n                              ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpngoalnol.java:19: error:\
    \ cannot find symbol\n        if (n > m) return new Union_String_int(new TYPE_String(),\
    \ \"-1\");\n                                                   ^\n  symbol:  \
    \ class TYPE_String\n  location: class Problem\n/tmp/tmpngoalnol.java:25: error:\
    \ cannot find symbol\n        return new Union_String_int(new TYPE_String(), \"\
    0b\" + Integer.toBinaryString(avg));\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpngoalnol.java:25: error:\
    \ cannot find symbol\n        return new Union_String_int(new TYPE_String(), \"\
    0b\" + Integer.toBinaryString(avg));\n                                       \
    \ ^\n  symbol:   class TYPE_String\n  location: class Problem\n/tmp/tmpngoalnol.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpngoalnol.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpngoalnol.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpngoalnol.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpngoalnol.java:32: error: cannot find symbol\n\
    \    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) sum += i;\n      \
    \  int avg = sum / (m - n + 1);\n        return new Union_String_int(\"0b\" +\
    \ Integer.toBinaryString(avg));\nreturn new Union_String_int();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy9hdr8u7.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpy9hdr8u7.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpy9hdr8u7.java:23: error: cannot find symbol\n       \
    \ return new Union_String_int(\"0b\" + Integer.toBinaryString(avg));\n       \
    \            ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpy9hdr8u7.java:24: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpy9hdr8u7.java:27: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpy9hdr8u7.java:28: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpy9hdr8u7.java:29: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpy9hdr8u7.java:30: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpy9hdr8u7.java:31: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpy9hdr8u7.java:32: error: cannot find symbol\n    assert(roundedAvg(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(new int(-1));\n        }\n        int average\
    \ = n + m;\n        average = average >> 1;\n        String binary = Integer.toBinaryString(average);\n\
    \        return new Union_String_int(new String(\"0b\" + binary));\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4kqgv_0u.java:20: error: '[' expected\n            return new Union_String_int(new\
    \ int(-1));\n                                               ^\n/tmp/tmp4kqgv_0u.java:20:\
    \ error: ']' expected\n            return new Union_String_int(new int(-1));\n\
    \                                                   ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        } else {\n            int sum =\
    \ IntStream.rangeClosed(n, m).sum();\n            int average = (int) Math.round((double)\
    \ sum / (m - n + 1));\n            return new Union_String_int(Integer.toBinaryString(average));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0k9kwztl.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0k9kwztl.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp0k9kwztl.java:24: error: cannot find symbol\n            return\
    \ new Union_String_int(Integer.toBinaryString(average));\n                   \
    \    ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp0k9kwztl.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp0k9kwztl.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0k9kwztl.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0k9kwztl.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0k9kwztl.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0k9kwztl.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp0k9kwztl.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (54"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        String result = \"\";\n\
    \        if (n > m) {\n            return new Union_String_int(-1);\n        }\n\
    \        int resultInt = (int) Math.round((n + m) / 2.0);\n        result = Integer.toBinaryString(resultInt);\n\
    \        return new Union_String_int(result);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr6o48509.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpr6o48509.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpr6o48509.java:25: error: cannot find symbol\n        return\
    \ new Union_String_int(result);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpr6o48509.java:26: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpr6o48509.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr6o48509.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr6o48509.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr6o48509.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr6o48509.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpr6o48509.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b1"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int sum = 0;\n        int\
    \ q = m - n + 1;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n\
    \        }\n        if (n > m) {\n            return new Union_String_int(\"-1\"\
    );\n        }\n        else {\n            String res = Integer.toBinaryString(Math.round(sum\
    \ / q));\n            String binary = \"0b\" + res;\n            return new Union_String_int(binary);\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp92_2fsfk.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp92_2fsfk.java:25:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp92_2fsfk.java:30: error: cannot find symbol\n            return\
    \ new Union_String_int(binary);\n                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp92_2fsfk.java:32: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp92_2fsfk.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp92_2fsfk.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp92_2fsfk.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp92_2fsfk.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp92_2fsfk.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp92_2fsfk.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Your code here...\n\
    \        return null;\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzoil2ure.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpzoil2ure.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpzoil2ure.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzoil2ure.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzoil2ure.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzoil2ure.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzoil2ure.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzoil2ure.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpzoil2ure.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int total = (m - n) + 1;\n\
    \        if (total <= 0) return new Union_String_int(\"-1\");\n        int avg\
    \ = n + (m - n) / 2;\n        String binary = Integer.toBinaryString(avg);\n \
    \       return new Union_String_int(\"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrg7kn7j.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpqrg7kn7j.java:20:\
    \ error: cannot find symbol\n        if (total <= 0) return new Union_String_int(\"\
    -1\");\n                                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpqrg7kn7j.java:23: error: cannot find symbol\n\
    \        return new Union_String_int(\"0b\" + binary);\n                   ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpqrg7kn7j.java:24:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpqrg7kn7j.java:27:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqrg7kn7j.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqrg7kn7j.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqrg7kn7j.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqrg7kn7j.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpqrg7kn7j.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (54"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        throw new UnsupportedOperationException(\"\
    Not yet implemented\");\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyplzrhtu.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyplzrhtu.java:20:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpyplzrhtu.java:23:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyplzrhtu.java:24: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyplzrhtu.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyplzrhtu.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyplzrhtu.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyplzrhtu.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpyplzrhtu.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // your code goes here\n\
    \        if (n > m) {\n            return Union_String_int.ofB(null);\n      \
    \  } else {\n            int avg = (int) Math.round((n + m) / 2.0);\n        \
    \    String s = Integer.toBinaryString(avg);\n            return Union_String_int.ofA(\"\
    0b\" + s);\n        }\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3v93tl9.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpu3v93tl9.java:21:\
    \ error: cannot find symbol\n            return Union_String_int.ofB(null);\n\
    \                   ^\n  symbol:   variable Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpu3v93tl9.java:25: error: cannot find symbol\n            return\
    \ Union_String_int.ofA(\"0b\" + s);\n                   ^\n  symbol:   variable\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpu3v93tl9.java:27: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpu3v93tl9.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu3v93tl9.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu3v93tl9.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu3v93tl9.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu3v93tl9.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu3v93tl9.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        int sum = 0;\n\
    \        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n  \
    \      double d = (double) sum / (m - n + 1);\n        int avg = (int) Math.round(d);\n\
    \        return new Union_String_int(\"0b\" + Integer.toBinaryString(avg), 0);\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjrjbz2_g.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjrjbz2_g.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpjrjbz2_g.java:28: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(avg), 0);\n           \
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpjrjbz2_g.java:29:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjrjbz2_g.java:32:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjrjbz2_g.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjrjbz2_g.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjrjbz2_g.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjrjbz2_g.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjrjbz2_g.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185), ("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int sum = 0;\n        for\
    \ (int i = n; i <= m; i++)\n            sum += i;\n        if (n > m)\n      \
    \      return new Union_String_int(-1);\n        sum = (int) Math.round((double)\
    \ sum / (m - n + 1));\n        String bin = Integer.toBinaryString(sum);\n   \
    \     return new Union_String_int(\"0b\" + bin);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgm2m1c00.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgm2m1c00.java:23:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpgm2m1c00.java:26: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + bin);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpgm2m1c00.java:27: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgm2m1c00.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgm2m1c00.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgm2m1c00.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgm2m1c00.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgm2m1c00.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgm2m1c00.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int avg = (n + m) / 2;\n\
    \        return avg > m ? new Union_String_int(\"-1\") : new Union_String_int(Integer.toBinaryString(avg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe6gct_eh.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpe6gct_eh.java:20:\
    \ error: cannot find symbol\n        return avg > m ? new Union_String_int(\"\
    -1\") : new Union_String_int(Integer.toBinaryString(avg));\n                 \
    \            ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpe6gct_eh.java:20: error: cannot find symbol\n        return avg > m ?\
    \ new Union_String_int(\"-1\") : new Union_String_int(Integer.toBinaryString(avg));\n\
    \                                                          ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpe6gct_eh.java:21: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpe6gct_eh.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe6gct_eh.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe6gct_eh.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe6gct_eh.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe6gct_eh.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Uni"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        BigInteger sum = BigInteger.ZERO;\n\
    \        for (int i = n; i <= m; i++) {\n            sum = sum.add(BigInteger.valueOf(i));\n\
    \        }\n        return new Union_String_int(\"0b\" + sum.divide(BigInteger.valueOf(m\
    \ - n + 1)).toString(2));\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8fsdjtl.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpx8fsdjtl.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpx8fsdjtl.java:26: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + sum.divide(BigInteger.valueOf(m - n + 1)).toString(2));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpx8fsdjtl.java:27: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpx8fsdjtl.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpx8fsdjtl.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpx8fsdjtl.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpx8fsdjtl.java:33: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpx8fsdjtl.java:34: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpx8fsdjtl.java:35: error: cannot find symbol\n    assert("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        //return new Union_String_int();\n\
    \        if (n > m) return new Union_String_int(new Union_String_int.L_int(-1));\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n       \
    \ String out = \"0b\" + Integer.toBinaryString((int) Math.round(avg));\n     \
    \   return new Union_String_int(new Union_String_int.L_String(out));\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfy_0qkn2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpfy_0qkn2.java:20:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(new\
    \ Union_String_int.L_int(-1));\n                              ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpfy_0qkn2.java:20: error:\
    \ package Union_String_int does not exist\n        if (n > m) return new Union_String_int(new\
    \ Union_String_int.L_int(-1));\n                                             \
    \                      ^\n/tmp/tmpfy_0qkn2.java:27: error: cannot find symbol\n\
    \        return new Union_String_int(new Union_String_int.L_String(out));\n  \
    \                 ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpfy_0qkn2.java:27: error: package Union_String_int does not exist\n   \
    \     return new Union_String_int(new Union_String_int.L_String(out));\n     \
    \                                                   ^\n/tmp/tmpfy_0qkn2.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpfy_0qkn2.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfy_0qkn2.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfy_0qkn2.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpfy_0qkn2.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b111"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int ret_val\
    \ = new Union_String_int();\n        if (n <= m) {\n            int avg = (n +\
    \ m) / 2;\n            ret_val.string_field = Integer.toBinaryString(avg);\n \
    \       } else {\n            ret_val.int_field = -1;\n        }\n        return\
    \ ret_val;\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjel_io9b.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpjel_io9b.java:19:\
    \ error: cannot find symbol\n        Union_String_int ret_val = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpjel_io9b.java:19:\
    \ error: cannot find symbol\n        Union_String_int ret_val = new Union_String_int();\n\
    \                                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpjel_io9b.java:27: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpjel_io9b.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjel_io9b.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjel_io9b.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjel_io9b.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjel_io9b.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpjel_io9b.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (54"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        else {\n           \
    \ int sum = 0;\n            for (int i = n; i <= m; i++) {\n                sum\
    \ += i;\n            }\n            int answer = (int)Math.round((double)sum /\
    \ (m - n + 1));\n            String answerInBinary = Integer.toBinaryString(answer);\n\
    \            return new Union_String_int(\"0b\" + answerInBinary);\n        }\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp10zfpst7.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp10zfpst7.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp10zfpst7.java:29: error: cannot find symbol\n            return\
    \ new Union_String_int(\"0b\" + answerInBinary);\n                       ^\n \
    \ symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp10zfpst7.java:31:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp10zfpst7.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp10zfpst7.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp10zfpst7.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp10zfpst7.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp10zfpst7.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp10zfpst7.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        else {\n     \
    \       int mean = (n + m) / 2;\n            String meanString = Integer.toBinaryString(mean);\n\
    \            return new Union_String_int(meanString, 0);\n        }\nreturn new\
    \ Union_String_int();\n    }\n    public static void main(String[] args) {\n \
    \   assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ylofvv2.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5ylofvv2.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp5ylofvv2.java:25: error: cannot find symbol\n            return\
    \ new Union_String_int(meanString, 0);\n                       ^\n  symbol:  \
    \ class Union_String_int\n  location: class Problem\n/tmp/tmp5ylofvv2.java:27:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5ylofvv2.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5ylofvv2.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5ylofvv2.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5ylofvv2.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5ylofvv2.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5ylofvv2.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Un"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        if (n == m) {\n    \
    \        return new Union_String_int(Integer.toBinaryString(n));\n        }\n\
    \        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum\
    \ += i;\n        }\n        int avg = sum / (m - n + 1);\n        return new Union_String_int(Integer.toBinaryString(avg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpass1sc9w.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpass1sc9w.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpass1sc9w.java:23: error: cannot find symbol\n            return\
    \ new Union_String_int(Integer.toBinaryString(n));\n                       ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpass1sc9w.java:30:\
    \ error: cannot find symbol\n        return new Union_String_int(Integer.toBinaryString(avg));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpass1sc9w.java:31: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpass1sc9w.java:34: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpass1sc9w.java:35: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpass1sc9w.java:36: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpass1sc9w.java:37: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpass1sc9w.java:38: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n      "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Write your code here!\n\
    \        return null;\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvi5zryg.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpmvi5zryg.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpmvi5zryg.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmvi5zryg.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmvi5zryg.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmvi5zryg.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmvi5zryg.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmvi5zryg.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpmvi5zryg.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // BEGIN MY_CODE\n    \
    \    Union_String_int ret;\n        if (n > m) {\n            ret = new Union_String_int(-1);\n\
    \        } else {\n            double avg = (double)(n + m) / 2;\n           \
    \ int avgInt = (int)Math.round(avg);\n            ret = new Union_String_int(\"\
    0b\" + Integer.toBinaryString(avgInt));\n        }\n        return ret;\n    \
    \    // END MY_CODE\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9hk5wk7u.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp9hk5wk7u.java:20:\
    \ error: cannot find symbol\n        Union_String_int ret;\n        ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp9hk5wk7u.java:22:\
    \ error: cannot find symbol\n            ret = new Union_String_int(-1);\n   \
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp9hk5wk7u.java:26: error: cannot find symbol\n            ret = new Union_String_int(\"\
    0b\" + Integer.toBinaryString(avgInt));\n                      ^\n  symbol:  \
    \ class Union_String_int\n  location: class Problem\n/tmp/tmp9hk5wk7u.java:30:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp9hk5wk7u.java:33:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9hk5wk7u.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9hk5wk7u.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9hk5wk7u.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp9hk5wk7u.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // The problem does not\
    \ specify the format of the error condition (n>m)\n        // So you get to decide.\n\
    \        if (n > m) {\n            return Union_String_int.Filled_int(-1);\n \
    \       }\n        double sum = IntStream.rangeClosed(n, m).sum();\n        int\
    \ average = (int) Math.round(sum / (m - n + 1));\n        return Union_String_int.Filled_String(Integer.toBinaryString(average));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptb6lj1ft.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmptb6lj1ft.java:22:\
    \ error: cannot find symbol\n            return Union_String_int.Filled_int(-1);\n\
    \                   ^\n  symbol:   variable Union_String_int\n  location: class\
    \ Problem\n/tmp/tmptb6lj1ft.java:26: error: cannot find symbol\n        return\
    \ Union_String_int.Filled_String(Integer.toBinaryString(average));\n         \
    \      ^\n  symbol:   variable Union_String_int\n  location: class Problem\n/tmp/tmptb6lj1ft.java:27:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmptb6lj1ft.java:30:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmptb6lj1ft.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmptb6lj1ft.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmptb6lj1ft.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmptb6lj1ft.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmptb6lj1ft.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((18"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = 0;\n     \
    \   int count = 0;\n        for (int i = n; i <= m; i++) {\n            sum +=\
    \ i;\n            count++;\n        }\n        int avg = (int)Math.round(((double)sum)/count);\n\
    \        String binary = Integer.toBinaryString(avg);\n        return new Union_String_int(\"\
    0b\" + binary);\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt2600yon.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpt2600yon.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpt2600yon.java:30: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + binary);\n                   ^\n  symbol:   class\
    \ Union_String_int\n  location: class Problem\n/tmp/tmpt2600yon.java:31: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpt2600yon.java:34:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt2600yon.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt2600yon.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt2600yon.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt2600yon.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt2600yon.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        else {\n           \
    \ return new Union_String_int(Integer.toBinaryString((n + m) / 2));\n        }\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu7bl9ev3.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpu7bl9ev3.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpu7bl9ev3.java:23: error: cannot find symbol\n            return\
    \ new Union_String_int(Integer.toBinaryString((n + m) / 2));\n               \
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpu7bl9ev3.java:25:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpu7bl9ev3.java:28:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu7bl9ev3.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu7bl9ev3.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu7bl9ev3.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu7bl9ev3.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpu7bl9ev3.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185),"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Your code here\n   \
    \     return null;\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7e1k545q.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7e1k545q.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7e1k545q.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7e1k545q.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7e1k545q.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7e1k545q.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7e1k545q.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7e1k545q.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7e1k545q.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Your code here\n   \
    \     return null;\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphin48_p3.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmphin48_p3.java:21:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmphin48_p3.java:24:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphin48_p3.java:25: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphin48_p3.java:26: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphin48_p3.java:27: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphin48_p3.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphin48_p3.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmphin48_p3.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  locatio"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        Union_String_int res =\
    \ new Union_String_int();\n        if (n <= m) {\n            float a = (float)\
    \ (n + m) / 2;\n            String bin = Integer.toBinaryString((int) Math.round(a));\n\
    \            res.string = \"0b\" + bin;\n        } else {\n            res.int_\
    \ = -1;\n        }\n        return res;\nreturn new Union_String_int();\n    }\n\
    \    public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn05v3wf4.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpn05v3wf4.java:19:\
    \ error: cannot find symbol\n        Union_String_int res = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpn05v3wf4.java:19:\
    \ error: cannot find symbol\n        Union_String_int res = new Union_String_int();\n\
    \                                   ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpn05v3wf4.java:28: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpn05v3wf4.java:31: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpn05v3wf4.java:32: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpn05v3wf4.java:33: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpn05v3wf4.java:34: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpn05v3wf4.java:35: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpn05v3wf4.java:36: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(-1);\n\
    \        return new Union_String_int(String.format(\"0b%s\", Integer.toBinaryString((n\
    \ + m) / 2)));\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt2nful52.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpt2nful52.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(-1);\n\
    \                              ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpt2nful52.java:20: error: cannot find symbol\n       \
    \ return new Union_String_int(String.format(\"0b%s\", Integer.toBinaryString((n\
    \ + m) / 2)));\n                   ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpt2nful52.java:21: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmpt2nful52.java:24: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpt2nful52.java:25: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpt2nful52.java:26: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpt2nful52.java:27: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpt2nful52.java:28: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpt2nful52.java:29: error: cannot find symbol"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(\"\
    -1\");\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n       \
    \     sum += i;\n        }\n        int avg = (int)Math.round((double)sum / (m\
    \ - n + 1));\n        return new Union_String_int(Integer.toBinaryString(avg));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_eqrebw.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpr_eqrebw.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(\"\
    -1\");\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpr_eqrebw.java:25: error: cannot find symbol\n\
    \        return new Union_String_int(Integer.toBinaryString(avg));\n         \
    \          ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpr_eqrebw.java:26: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpr_eqrebw.java:29: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpr_eqrebw.java:30: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpr_eqrebw.java:31: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpr_eqrebw.java:32: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpr_eqrebw.java:33: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpr_eqrebw.java:34: error: cannot find symbol\n    assert(roundedAvg((185),"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(m);\n        }\n        else {\n            return\
    \ new Union_String_int(String.format(\"0b%s\", Integer.toBinaryString(((m + n)\
    \ / 2))));\n        }\nreturn new Union_String_int();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2fvcqyk5.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp2fvcqyk5.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(m);\n   \
    \                    ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp2fvcqyk5.java:23: error: cannot find symbol\n            return\
    \ new Union_String_int(String.format(\"0b%s\", Integer.toBinaryString(((m + n)\
    \ / 2))));\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp2fvcqyk5.java:25: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp2fvcqyk5.java:28: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp2fvcqyk5.java:29: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp2fvcqyk5.java:30: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp2fvcqyk5.java:31: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp2fvcqyk5.java:32: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp2fvcqyk5.java:33: error: cannot find symbol\n    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        \n        // Interval of\
    \ numbers [n, m]\n        int sum = 0;\n        for (int i = n; i <= m; i++)\n\
    \            sum += i;\n        \n        // Calculate average of numbers in the\
    \ interval\n        int average = sum / (m - n + 1);\n        \n        // Return\
    \ average in binary\n        return new Union_String_int(\"0b\" + Integer.toBinaryString(average));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_yyevfk.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpd_yyevfk.java:29:\
    \ error: cannot find symbol\n        return new Union_String_int(\"0b\" + Integer.toBinaryString(average));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpd_yyevfk.java:30: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpd_yyevfk.java:33: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpd_yyevfk.java:34: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpd_yyevfk.java:35: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpd_yyevfk.java:36: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpd_yyevfk.java:37: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpd_yyevfk.java:38: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpd_yyevfk.jav"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return Union_String_int.wrapInt(-1);\n        }\n        double avg = (m\
    \ + n) / 2.0;\n        int avg_int = (int) Math.round(avg);\n        String binary\
    \ = Integer.toBinaryString(avg_int);\n        return Union_String_int.wrapString(\"\
    0b\" + binary);\nreturn new Union_String_int();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpswle_e20.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpswle_e20.java:20:\
    \ error: cannot find symbol\n            return Union_String_int.wrapInt(-1);\n\
    \                   ^\n  symbol:   variable Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpswle_e20.java:25: error: cannot find symbol\n        return\
    \ Union_String_int.wrapString(\"0b\" + binary);\n               ^\n  symbol: \
    \  variable Union_String_int\n  location: class Problem\n/tmp/tmpswle_e20.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpswle_e20.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpswle_e20.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpswle_e20.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpswle_e20.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpswle_e20.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpswle_e20.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // IMPLEMENT ME\n     \
    \   return new Union_String_int();\nreturn new Union_String_int();\n    }\n  \
    \  public static void main(String[] args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"\
    ))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbxhitdd7.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpbxhitdd7.java:20:\
    \ error: cannot find symbol\n        return new Union_String_int();\n        \
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpbxhitdd7.java:21: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpbxhitdd7.java:24: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmpbxhitdd7.java:25: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmpbxhitdd7.java:26: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbxhitdd7.java:27: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbxhitdd7.java:28: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbxhitdd7.java:29: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmpbxhitdd7.java:30: error: cannot find symbol\n    as"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"\", -1);\n        }\n        int sum = n;\n\
    \        int count = 1;\n        for (int i = n + 1; i <= m; i++) {\n        \
    \    sum += i;\n            count++;\n        }\n        String binary = Integer.toBinaryString(sum\
    \ / count);\n        return new Union_String_int(\"0b\" + binary, 0);\nreturn\
    \ new Union_String_int();\n    }\n    public static void main(String[] args) {\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n    assert(roundedAvg((362),\
    \ (496)).equals((Union_String_int(\"0b110101101\"))));\n    assert(roundedAvg((350),\
    \ (902)).equals((Union_String_int(\"0b1001110010\"))));\n    assert(roundedAvg((197),\
    \ (233)).equals((Union_String_int(\"0b11010111\"))));\n    assert(roundedAvg((7),\
    \ (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (5)).equals((Union_String_int(\"0b101\"))));\n   \
    \ }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rnzn2th.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp8rnzn2th.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"\", -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp8rnzn2th.java:29: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + binary, 0);\n                   ^\n  symbol: \
    \  class Union_String_int\n  location: class Problem\n/tmp/tmp8rnzn2th.java:30:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp8rnzn2th.java:33:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp8rnzn2th.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp8rnzn2th.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp8rnzn2th.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp8rnzn2th.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp8rnzn2th.java:38: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_S"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // If n is greater than\
    \ m, return -1.\n        if (n > m) {\n            return new Union_String_int(-1);\n\
    \        }\n\n        // Compute the average of the integers from n through m\
    \ (including n and m).\n        int average = 0;\n        for (int i = n; i <=\
    \ m; i++) {\n            average += i;\n        }\n        average /= m - n +\
    \ 1;\n\n        // Round the answer to the nearest integer and convert that to\
    \ binary.\n        int r = (average % 2 == 0) ? 0 : 1;\n        average = average\
    \ / 2 + r;\n        return new Union_String_int(Integer.toBinaryString(average));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7tzu52w.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpe7tzu52w.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpe7tzu52w.java:34: error: cannot find symbol\n        return\
    \ new Union_String_int(Integer.toBinaryString(average));\n                   ^\n\
    \  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpe7tzu52w.java:35:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpe7tzu52w.java:38:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe7tzu52w.java:39: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe7tzu52w.java:40: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe7tzu52w.java:41: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe7tzu52w.java:42: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpe7tzu52w.java:43: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(Union_String_int.tagged_union.tag_int, -1);\n\
    \        }\n        int avg = (n + m) / 2;\n        String binary = Integer.toBinaryString(avg);\n\
    \        String output = \"0b\" + binary;\n        return new Union_String_int(Union_String_int.tagged_union.tag_String,\
    \ output);\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7a1th9ms.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7a1th9ms.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(Union_String_int.tagged_union.tag_int,\
    \ -1);\n                       ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp7a1th9ms.java:20: error: package Union_String_int does\
    \ not exist\n            return new Union_String_int(Union_String_int.tagged_union.tag_int,\
    \ -1);\n                                                        ^\n/tmp/tmp7a1th9ms.java:25:\
    \ error: cannot find symbol\n        return new Union_String_int(Union_String_int.tagged_union.tag_String,\
    \ output);\n                   ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp7a1th9ms.java:25: error: package Union_String_int does\
    \ not exist\n        return new Union_String_int(Union_String_int.tagged_union.tag_String,\
    \ output);\n                                                    ^\n/tmp/tmp7a1th9ms.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7a1th9ms.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7a1th9ms.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7a1th9ms.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp7a1th9ms.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_Str"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // ints only\n        if\
    \ (n > m) {\n            return new Union_String_int(new Unit_String(\"\"), new\
    \ Unit_int(-1));\n        }\n        int sum = 0;\n        for (int i = n; i <=\
    \ m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum\
    \ / (m - n + 1);\n        String bin = Integer.toBinaryString((int) Math.round(avg));\n\
    \        return new Union_String_int(new Unit_String(\"0b\" + bin), new Unit_int(-1));\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgaa80buw.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgaa80buw.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(new Unit_String(\"\
    \"), new Unit_int(-1));\n                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpgaa80buw.java:21: error: cannot find symbol\n\
    \            return new Union_String_int(new Unit_String(\"\"), new Unit_int(-1));\n\
    \                                            ^\n  symbol:   class Unit_String\n\
    \  location: class Problem\n/tmp/tmpgaa80buw.java:21: error: cannot find symbol\n\
    \            return new Union_String_int(new Unit_String(\"\"), new Unit_int(-1));\n\
    \                                                                 ^\n  symbol:\
    \   class Unit_int\n  location: class Problem\n/tmp/tmpgaa80buw.java:29: error:\
    \ cannot find symbol\n        return new Union_String_int(new Unit_String(\"0b\"\
    \ + bin), new Unit_int(-1));\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpgaa80buw.java:29: error: cannot find symbol\n\
    \        return new Union_String_int(new Unit_String(\"0b\" + bin), new Unit_int(-1));\n\
    \                                        ^\n  symbol:   class Unit_String\n  location:\
    \ class Problem\n/tmp/tmpgaa80buw.java:29: error: cannot find symbol\n       \
    \ return new Union_String_int(new Unit_String(\"0b\" + bin), new Unit_int(-1));\n\
    \                                                                     ^\n  symbol:\
    \   class Unit_int\n  location: class Problem\n/tmp/tmpgaa80buw.java:30: error:\
    \ cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpgaa80buw.java:33:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpgaa80buw.java:34: error: cannot find sy"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) return new Union_String_int(Union_String_int.tag_int,\
    \ -1);\n        int sum = n;\n        for (int i = n + 1; i <= m; i++) {\n   \
    \         sum += i;\n        }\n        int avg = (int) Math.round((double) sum\
    \ / (m - n + 1));\n        return new Union_String_int(Union_String_int.tag_String,\
    \ \"0b\" + Integer.toBinaryString(avg));\nreturn new Union_String_int();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9bj9_lj.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpx9bj9_lj.java:19:\
    \ error: cannot find symbol\n        if (n > m) return new Union_String_int(Union_String_int.tag_int,\
    \ -1);\n                              ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpx9bj9_lj.java:19: error: cannot find symbol\n\
    \        if (n > m) return new Union_String_int(Union_String_int.tag_int, -1);\n\
    \                                               ^\n  symbol:   variable Union_String_int\n\
    \  location: class Problem\n/tmp/tmpx9bj9_lj.java:25: error: cannot find symbol\n\
    \        return new Union_String_int(Union_String_int.tag_String, \"0b\" + Integer.toBinaryString(avg));\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmpx9bj9_lj.java:25: error: cannot find symbol\n        return new Union_String_int(Union_String_int.tag_String,\
    \ \"0b\" + Integer.toBinaryString(avg));\n                                   \
    \ ^\n  symbol:   variable Union_String_int\n  location: class Problem\n/tmp/tmpx9bj9_lj.java:26:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpx9bj9_lj.java:29:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx9bj9_lj.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx9bj9_lj.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpx9bj9_lj.ja"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(\"-1\");\n        } else {\n            int sum\
    \ = 0;\n            for (int i = n; i <= m; i++) {\n                sum += i;\n\
    \            }\n            int roundedAvg = (int) Math.round((double) sum / (m\
    \ - n + 1));\n            return new Union_String_int(Integer.toBinaryString(roundedAvg));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1a6x6_wg.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1a6x6_wg.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp1a6x6_wg.java:27: error: cannot find symbol\n            return\
    \ new Union_String_int(Integer.toBinaryString(roundedAvg));\n                \
    \       ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp1a6x6_wg.java:29:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1a6x6_wg.java:32:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1a6x6_wg.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1a6x6_wg.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1a6x6_wg.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1a6x6_wg.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp1a6x6_wg.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(-1);\n        }\n        int sum = 0;\n     \
    \   for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n       \
    \ int avg = (int) Math.round((double) sum / (m - n + 1));\n        return new\
    \ Union_String_int(\"0b\" + Integer.toBinaryString(avg));\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcii03a8q.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpcii03a8q.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(-1);\n  \
    \                     ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpcii03a8q.java:27: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + Integer.toBinaryString(avg));\n              \
    \     ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmpcii03a8q.java:28:\
    \ error: cannot find symbol\nreturn new Union_String_int();\n           ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpcii03a8q.java:31:\
    \ error: cannot find symbol\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"\
    0b11\"))));\n                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcii03a8q.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcii03a8q.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcii03a8q.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcii03a8q.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpcii03a8q.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(2, -1);\n        } else {\n            int sum\
    \ = 0;\n            for (int i = n; i <= m; i++) {\n                sum += i;\n\
    \            }\n            String s = Integer.toBinaryString(Math.round((float)\
    \ sum / (m - n + 1)));\n            return new Union_String_int(1, s);\n     \
    \   }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt4dol7v5.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmpt4dol7v5.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(2, -1);\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmpt4dol7v5.java:27: error: cannot find symbol\n            return\
    \ new Union_String_int(1, s);\n                       ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpt4dol7v5.java:29: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmpt4dol7v5.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt4dol7v5.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt4dol7v5.java:34: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt4dol7v5.java:35: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt4dol7v5.java:36: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmpt4dol7v5.java:37: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        if (n > m) {\n        \
    \    return new Union_String_int(2);\n        }\n        double x = (double) (n\
    \ + m) / 2;\n        String y = Integer.toBinaryString((int) Math.round(x));\n\
    \        return new Union_String_int(1, y);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vgtpldw.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp5vgtpldw.java:20:\
    \ error: cannot find symbol\n            return new Union_String_int(2);\n   \
    \                    ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp5vgtpldw.java:24: error: cannot find symbol\n        return\
    \ new Union_String_int(1, y);\n                   ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp5vgtpldw.java:25: error: cannot find symbol\n\
    return new Union_String_int();\n           ^\n  symbol:   class Union_String_int\n\
    \  location: class Problem\n/tmp/tmp5vgtpldw.java:28: error: cannot find symbol\n\
    \    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n    \
    \                                    ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5vgtpldw.java:29: error: cannot find symbol\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \                                        ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5vgtpldw.java:30: error: cannot find symbol\n\
    \    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5vgtpldw.java:31: error: cannot find symbol\n\
    \    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5vgtpldw.java:32: error: cannot find symbol\n\
    \    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n                                            ^\n  symbol:   method Union_String_int(String)\n\
    \  location: class Problem\n/tmp/tmp5vgtpldw.java:33: error: cannot find symbol\n\
    \    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b1011"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Convert the average\
    \ from decimal to binary\n        if (n > m) {\n            return new Union_String_int(\"\
    -1\");\n        }\n        int average = (n + m) / 2;\n        int remainder =\
    \ 0;\n        String average_as_string = \"\";\n        do {\n            remainder\
    \ = average % 2;\n            average = average / 2;\n            average_as_string\
    \ = average_as_string + remainder;\n        } while (average != 0);\n        return\
    \ new Union_String_int(\"0b\" + new StringBuilder(average_as_string).reverse().toString());\n\
    return new Union_String_int();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1boxju_6.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp1boxju_6.java:21:\
    \ error: cannot find symbol\n            return new Union_String_int(\"-1\");\n\
    \                       ^\n  symbol:   class Union_String_int\n  location: class\
    \ Problem\n/tmp/tmp1boxju_6.java:31: error: cannot find symbol\n        return\
    \ new Union_String_int(\"0b\" + new StringBuilder(average_as_string).reverse().toString());\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp1boxju_6.java:32: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp1boxju_6.java:35: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp1boxju_6.java:36: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp1boxju_6.java:37: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp1boxju_6.java:38: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp1boxju_6.java:39: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp1boxju_6.java:40: error: cannot find symbol\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        //iterate from n to m inclusive\
    \ and compute their average\n        int sum = 0;\n        for (int i = n; i <=\
    \ m; i++) {\n            sum += i;\n        }\n        int avg = (int)Math.round((double)sum\
    \ / (m - n + 1));\n        String binary = Integer.toBinaryString(avg);\n    \
    \    return new Union_String_int(0, \"0b\" + binary);\nreturn new Union_String_int();\n\
    \    }\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
    0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"\
    0b1111001010\"))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"\
    0b1111100100\"))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"\
    0b1011000010\"))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"\
    0b101101110\"))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"\
    0b110101101\"))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"\
    0b1001110010\"))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"\
    0b11010111\"))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n\
    \    assert(roundedAvg((5), (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (5)).equals((Union_String_int(\"0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7_1blzq7.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp7_1blzq7.java:26:\
    \ error: cannot find symbol\n        return new Union_String_int(0, \"0b\" + binary);\n\
    \                   ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp7_1blzq7.java:27: error: cannot find symbol\nreturn new Union_String_int();\n\
    \           ^\n  symbol:   class Union_String_int\n  location: class Problem\n\
    /tmp/tmp7_1blzq7.java:30: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp7_1blzq7.java:31: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp7_1blzq7.java:32: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp7_1blzq7.java:33: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp7_1blzq7.java:34: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp7_1blzq7.java:35: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_String_int(\"0b101101110\"))));\n                     \
    \                       ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp7_1blzq7.java:36: error: cannot fi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        int n1 = n;\n        int\
    \ n2 = m;\n        int n3 = ((n1 + n2) / 2);\n        Union_String_int b = new\
    \ Union_String_int();\n        if (n1 > n2) {\n            return b.with_int(-1);\n\
    \        } else {\n            return b.with_String(Integer.toBinaryString(n3));\n\
    \        }\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4o9anhdo.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp4o9anhdo.java:22:\
    \ error: cannot find symbol\n        Union_String_int b = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp4o9anhdo.java:22:\
    \ error: cannot find symbol\n        Union_String_int b = new Union_String_int();\n\
    \                                 ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp4o9anhdo.java:28: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp4o9anhdo.java:31: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp4o9anhdo.java:32: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp4o9anhdo.java:33: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4o9anhdo.java:34: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4o9anhdo.java:35: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp4o9anhdo.java:36: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals((Union_"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given two positive integers n and m, and your\
    \ task is to compute the\n    // average of the integers from n through m (including\
    \ n and m). \n    // Round the answer to the nearest integer and convert that\
    \ to binary.\n    // If n is greater than m, return -1.\n    // Example:\n   \
    \ // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10,\
    \ 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n        // Your code here\n   \
    \     Union_String_int ret = new Union_String_int();\n        if (n > m) {\n \
    \           ret.set_int(-1);\n            return ret;\n        }\n        int\
    \ result = (n + m) / 2;\n        int binResult = Integer.parseInt(Integer.toBinaryString(result));\n\
    \        ret.set_String(\"0b\" + Integer.toString(binResult));\n        return\
    \ ret;\nreturn new Union_String_int();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(roundedAvg((1), (5)).equals((Union_String_int(\"0b11\"))));\n\
    \    assert(roundedAvg((7), (13)).equals((Union_String_int(\"0b1010\"))));\n \
    \   assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
    ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
    ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
    ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
    ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
    ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
    ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
    ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
    \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
    0b101\"))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8qo2i2p5.java:18: error: cannot find symbol\n    public static\
    \ Union_String_int roundedAvg(int n, int m) {\n                  ^\n  symbol:\
    \   class Union_String_int\n  location: class Problem\n/tmp/tmp8qo2i2p5.java:20:\
    \ error: cannot find symbol\n        Union_String_int ret = new Union_String_int();\n\
    \        ^\n  symbol:   class Union_String_int\n  location: class Problem\n/tmp/tmp8qo2i2p5.java:20:\
    \ error: cannot find symbol\n        Union_String_int ret = new Union_String_int();\n\
    \                                   ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp8qo2i2p5.java:29: error: cannot find symbol\nreturn new\
    \ Union_String_int();\n           ^\n  symbol:   class Union_String_int\n  location:\
    \ class Problem\n/tmp/tmp8qo2i2p5.java:32: error: cannot find symbol\n    assert(roundedAvg((1),\
    \ (5)).equals((Union_String_int(\"0b11\"))));\n                              \
    \          ^\n  symbol:   method Union_String_int(String)\n  location: class Problem\n\
    /tmp/tmp8qo2i2p5.java:33: error: cannot find symbol\n    assert(roundedAvg((7),\
    \ (13)).equals((Union_String_int(\"0b1010\"))));\n                           \
    \              ^\n  symbol:   method Union_String_int(String)\n  location: class\
    \ Problem\n/tmp/tmp8qo2i2p5.java:34: error: cannot find symbol\n    assert(roundedAvg((964),\
    \ (977)).equals((Union_String_int(\"0b1111001010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp8qo2i2p5.java:35: error: cannot find symbol\n    assert(roundedAvg((996),\
    \ (997)).equals((Union_String_int(\"0b1111100100\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp8qo2i2p5.java:36: error: cannot find symbol\n    assert(roundedAvg((560),\
    \ (851)).equals((Union_String_int(\"0b1011000010\"))));\n                    \
    \                        ^\n  symbol:   method Union_String_int(String)\n  location:\
    \ class Problem\n/tmp/tmp8qo2i2p5.java:37: error: cannot find symbol\n    assert(roundedAvg((185),\
    \ (546)).equals(("
  exit_code: 1
  status: SyntaxError
