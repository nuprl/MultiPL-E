language: java
name: HumanEval_87_get_row
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code here\n        // !!! Your code !!!\n   \
    \     return null;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpvz2lzmwe.java:31)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n \
    \                   ret.add(new Pair<>(i, j));\n            }\n        }\n   \
    \     Collections.sort(ret, new Comparator<Pair<Integer, Integer>>() {\n     \
    \       @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer,\
    \ Integer> o2) {\n                if (o1.getValue0() == o2.getValue0()) {\n  \
    \                  return o2.getValue1() - o1.getValue1();\n                }\n\
    \                return o1.getValue0() - o2.getValue0();\n            }\n    \
    \    });\n        return ret;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp38l5v2_a.java:30)\n\tat Problem.main(tmp38l5v2_a.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        int row = 0;\n        int col = 0;\n        ArrayList<Pair<Integer,\
    \ Integer>> arr = new ArrayList<Pair<Integer, Integer>>();\n        for (int i\
    \ = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size();\
    \ j++) {\n                if (lst.get(i).get(j) == x) {\n                    arr.add(new\
    \ Pair<Integer, Integer>(i, j));\n                }\n            }\n        }\n\
    \        Collections.sort(arr, new Comparator<Pair<Integer, Integer>>() {\n  \
    \          @Override\n            public int compare(Pair<Integer, Integer> o1,\
    \ Pair<Integer, Integer> o2) {\n                if (o1.getValue0() < o2.getValue0())\
    \ {\n                    return -1;\n                } else if (o1.getValue0()\
    \ > o2.getValue0()) {\n                    return 1;\n                } else {\n\
    \                    if (o1.getValue1() > o2.getValue1()) {\n                \
    \        return -1;\n                    } else if (o1.getValue1() < o2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpfn_vg8s3.java:32)\n\tat Problem.main(tmpfn_vg8s3.java:57)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpiffkk6i1.java:30)\n\tat Problem.main(tmpiffkk6i1.java:37)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> output = new ArrayList<>();\n\
    \        int y = 0;\n        for (ArrayList<Integer> sublist : lst) {\n      \
    \      for (int i = 0; i < sublist.size(); i++) {\n                if (sublist.get(i)\
    \ == x) {\n                    output.add(new Pair<>(y, i));\n               \
    \ }\n            }\n            y++;\n        }\n        return output;\n}\n \
    \   public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpo_8azvse.java:31)\n\tat Problem.main(tmpo_8azvse.java:39)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        res.sort((p1, p2) -> {\n            int d = p1.getValue0()\
    \ - p2.getValue0();\n            if (d != 0) {\n                return d;\n  \
    \          }\n            return p2.getValue1() - p1.getValue1();\n        });\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpwd68vxa3.java:30)\n\tat Problem.main(tmpwd68vxa3.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        int row = 0;\n        int col = 0;\n        ArrayList<Pair<Integer,\
    \ Integer>> result = new ArrayList<>();\n        while (row < lst.size()) {\n\
    \            col = 0;\n            while (col < lst.get(row).size()) {\n     \
    \           if (lst.get(row).get(col) == x) {\n                    result.add(new\
    \ Pair<>(row, col));\n                }\n                col++;\n            }\n\
    \            row++;\n        }\n        if (result.size() == 0) {\n          \
    \  return result;\n        }\n        for (int i = 0; i < result.size(); i++)\
    \ {\n            for (int j = i + 1; j < result.size(); j++) {\n             \
    \   if (result.get(i).getValue0() > result.get(j).getValue0()) {\n           \
    \         Pair<Integer, Integer> temp = result.get(i);\n                    result.set(i,\
    \ result.get(j));\n                    result.set(j, temp);\n                }\n\
    \            }\n        }\n        for (int i = 0; i < result.size(); i++) {\n\
    \            for (int j = i + 1; j < result.size(); j++) {\n                if\
    \ (result.get(i).getValue0() == result.get(j).getValue0()) {\n               \
    \     if (result.get(i).getValue1() < result.get(j).getValue1()) {\n         \
    \               Pair<Integer, Integer> temp = result.get(i);\n               \
    \         result.set(i, result.get(j));\n                        result.set(j,\
    \ temp);\n                    }\n                }\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpupfdy8qq.java:33)\n\tat Problem.main(tmpupfdy8qq.java:65)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                return o2.getValue1().compareTo(o1.getValue1());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp2u50l2ew.java:30)\n\tat Problem.main(tmp2u50l2ew.java:49)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            int el = row.get(j);\n                if (el == x) {\n          \
    \          res.add(new Pair<>(i, j));\n                }\n            }\n    \
    \    }\n        res.sort((a, b) -> (a.getValue0() - b.getValue0()));\n       \
    \ res.sort((a, b) -> (b.getValue1() - a.getValue1()));\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp2b9v9ldx.java:32)\n\tat Problem.main(tmp2b9v9ldx.java:41)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write code here\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpr1ogsepi.java:27: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // your code here\n        ArrayList<Pair<Integer, Integer>>\
    \ result = new ArrayList<Pair<Integer, Integer>>();\n        int row = 0;\n  \
    \      for (ArrayList<Integer> list : lst) {\n            int col = 0;\n     \
    \       for (Integer inte : list) {\n                if (inte == x) {\n      \
    \              result.add(new Pair<Integer, Integer>(row, col));\n           \
    \     }\n                col++;\n            }\n            row++;\n        }\n\
    \        Comparator<Pair<Integer, Integer>> comparator = new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                int row1 = o1.getValue0();\n\
    \                int row2 = o2.getValue0();\n                int col1 = o1.getValue1();\n\
    \                int col2 = o2.getValue1();\n                if (row1 > row2)\
    \ {\n                    return 1;\n                } else if (row1 < row2) {\n\
    \                    return -1;\n                } else {\n                  \
    \  if (col1 > col2) {\n                        return -1;\n                  \
    \  } else if (col1 < col2) {\n                        return 1;\n            \
    \        } else {\n                        return 0;\n                    }\n\
    \                }\n            }\n        };\n        Collections.sort(result,\
    \ comparator);\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp64gvc8e6.java:33)\n\tat Problem.main(tmp64gvc8e6.java:65)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpiffkk6i1.java:30)\n\tat Problem.main(tmpiffkk6i1.java:37)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> tuples = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    tuples.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        tuples.sort((a, b) -> {\n            if (a.getValue0()\
    \ == b.getValue0()) {\n                return b.getValue1() - a.getValue1();\n\
    \            }\n            return a.getValue0() - b.getValue0();\n        });\n\
    \        return tuples;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpt770ll1u.java:30)\n\tat Problem.main(tmpt770ll1u.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ (p1, p2) -> {\n            int row1 = p1.getValue0();\n            int row2\
    \ = p2.getValue0();\n            if (row1 != row2) {\n                return row1\
    \ - row2;\n            }\n            return p2.getValue1() - p1.getValue1();\n\
    \        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpnb_1rq8q.java:31)\n\tat Problem.main(tmpnb_1rq8q.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        if (lst.size() == 0) {\n            return new ArrayList<Pair<Integer,\
    \ Integer>>();\n        }\n        ArrayList<Pair<Integer, Integer>> result =\
    \ new ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<Integer,\
    \ Integer>(i, j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                if (p1.getValue0() < p2.getValue0()) {\n                \
    \    return -1;\n                } else if (p1.getValue0() > p2.getValue0()) {\n\
    \                    return 1;\n                } else {\n                   \
    \ if (p1.getValue1() > p2.getValue1()) {\n                        return -1;\n\
    \                    } else if (p1.getValue1() < p2.getValue1()) {\n         \
    \               return 1;\n                    } else {\n                    \
    \    return 0;\n                    }\n                }\n            }\n    \
    \    });\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpqgl4jjlh.java:33)\n\tat Problem.main(tmpqgl4jjlh.java:58)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code here\n        ArrayList<Pair<Integer, Integer>>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            int k = lst.get(i).indexOf(x);\n            while (k != -1) {\n \
    \               result.add(new Pair<>(i, k));\n                k = lst.get(i).indexOf(x,\
    \ k + 1);\n            }\n        }\n        result.sort((p1, p2) -> (p1.getValue0()\
    \ - p2.getValue0()));\n        for (int i = 0; i < result.size(); i++) {\n   \
    \         for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).getValue0()\
    \ == result.get(j).getValue0()) {\n                    int temp = result.get(i).getValue1();\n\
    \                    result.get(i).setValue1(result.get(j).getValue1());\n   \
    \                 result.get(j).setValue1(temp);\n                }\n        \
    \    }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dfo2ae9.java:32: error: method indexOf in class ArrayList<E> cannot\
    \ be applied to given types;\n                k = lst.get(i).indexOf(x, k + 1);\n\
    \                              ^\n  required: Object\n  found:    int,int\n  reason:\
    \ actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in class ArrayList\n/tmp/tmp3dfo2ae9.java:40: error:\
    \ cannot find symbol\n                    result.get(i).setValue1(result.get(j).getValue1());\n\
    \                                 ^\n  symbol:   method setValue1(Integer)\n \
    \ location: class Pair<Integer,Integer>\n/tmp/tmp3dfo2ae9.java:41: error: cannot\
    \ find symbol\n                    result.get(j).setValue1(temp);\n          \
    \                       ^\n  symbol:   method setValue1(int)\n  location: class\
    \ Pair<Integer,Integer>\n3 errors\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n \
    \                   ret.add(new Pair<>(i, j));\n            }\n        }\n   \
    \     ret.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ret.sort((a,\
    \ b) -> a.getValue1().compareTo(b.getValue1()));\n        return ret;\n}\n   \
    \ public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpc1e7k1p3.java:30)\n\tat Problem.main(tmpc1e7k1p3.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        ArrayList<Integer> indices = new ArrayList<>();\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            indices.add(i);\n        }\n        for\
    \ (int index : indices) {\n            int resultSize = result.size();\n     \
    \       int j = 0;\n            while (j < lst.get(index).size()) {\n        \
    \        if (lst.get(index).get(j) == x) {\n                    result.add(new\
    \ Pair<>(index, j));\n                }\n                j++;\n            }\n\
    \            int k = resultSize;\n            while (k < result.size()) {\n  \
    \              for (int n = k; n < result.size(); n++) {\n                   \
    \ if (result.get(k).getValue0() > result.get(n).getValue0()) {\n             \
    \           Collections.swap(result, k, n);\n                    }\n         \
    \       }\n                k++;\n            }\n            int m = resultSize;\n\
    \            while (m < result.size()) {\n                for (int n = m; n <\
    \ result.size(); n++) {\n                    if (result.get(m).getValue0() ==\
    \ result.get(n).getValue0() && result.get(m).getValue1() < result.get(n).getValue1())\
    \ {\n                        Collections.swap(result, m, n);\n               \
    \     }\n                }\n                m++;\n            }\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpzb2piqbj.java:36)\n\tat Problem.main(tmpzb2piqbj.java:62)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n      ArrayList<Pair<Integer, Integer>> coordinates = new ArrayList<Pair<Integer,\
    \ Integer>>();\n      int len = lst.size();\n      for (int i = 0; i < len; i++)\
    \ {\n        int innerLen = lst.get(i).size();\n        for (int j = 0; j < innerLen;\
    \ j++) {\n          if (lst.get(i).get(j) == x) {\n            coordinates.add(new\
    \ Pair<Integer, Integer>(i, j));\n          }\n        }\n      }\n      Collections.sort(coordinates,\
    \ (a, b) -> Integer.compare(a.getValue0(), b.getValue0()));\n      Collections.sort(coordinates,\
    \ (a, b) -> Integer.compare(b.getValue1(), a.getValue1()));\n      return coordinates;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp8aaxo9vv.java:32)\n\tat Problem.main(tmp8aaxo9vv.java:41)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n      ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n\
    \      for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst.get(i).size();\
    \ j++) {\n          if (lst.get(i).get(j) == x) {\n            pairs.add(new Pair<Integer,\
    \ Integer>(i, j));\n          }\n        }\n      }\n      Collections.sort(pairs,\
    \ (a, b) -> {\n        if (a.getValue0() == b.getValue0()) {\n          return\
    \ b.getValue1() - a.getValue1();\n        }\n        return a.getValue0() - b.getValue0();\n\
    \      });\n      return pairs;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp4q8nbn0t.java:30)\n\tat Problem.main(tmp4q8nbn0t.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        // Insert your code here.\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpte0v9as8.java:31)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Comparator<Pair<Integer, Integer>> c = new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0()\
    \ != o2.getValue0()) {\n                    return o1.getValue0() - o2.getValue0();\n\
    \                } else {\n                    return o2.getValue1() - o1.getValue1();\n\
    \                }\n            }\n        };\n        Collections.sort(result,\
    \ c);\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpme5h7pue.java:30)\n\tat Problem.main(tmpme5h7pue.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return new ArrayList<>();\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpklc7va25.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // x is int\n        // lst is list\n        // return\
    \ list of tuples (row, column)\n        // 0-indexed\n        // first sort by\
    \ row, then sort by column\n        // if equal rows, sort row by column DESC\n\
    \        // return [] if no match\n        ArrayList<Pair<Integer, Integer>> result\
    \ = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n     \
    \       for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    result.add(new Pair<>(i, j));\n               \
    \ }\n            }\n        }\n        // sort by row ascending\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                return o1.getValue0().compareTo(o2.getValue0());\n      \
    \      }\n        });\n        // sort by col descending\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                return o2.getValue1().compareTo(o1.getValue1());\n      \
    \      }\n        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpt77543ot.java:37)\n\tat Problem.main(tmpt77543ot.java:58)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return o2.getValue1().compareTo(o1.getValue1());\n  \
    \              }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpii0ciuob.java:30)\n\tat Problem.main(tmpii0ciuob.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ans = new ArrayList<>();\n\
    \        if (lst.size() == 0) return ans;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x) {\n                    ans.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Comparator<Pair<Integer,\
    \ Integer>> cmp = (x1, x2) -> {\n            int cmpX = x1.getValue0().compareTo(x2.getValue0());\n\
    \            if (cmpX != 0) return cmpX;\n            return -x1.getValue1().compareTo(x2.getValue1());\n\
    \        };\n        Collections.sort(ans, cmp);\n        return ans;\n}\n   \
    \ public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp1kp_1k0p.java:31)\n\tat Problem.main(tmp1kp_1k0p.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        int row = 0;\n        for (ArrayList<Integer> e : lst) {\n          \
    \  for (int i = 0; i < e.size(); i++) {\n                if (e.get(i) == x) {\n\
    \                    res.add(new Pair<>(row, i));\n                }\n       \
    \     }\n            row++;\n        }\n        Collections.sort(res, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return o2.getValue1().compareTo(o1.getValue1());\n  \
    \              }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp7fytkcpo.java:31)\n\tat Problem.main(tmp7fytkcpo.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        if (lst.size() == 0) {\n            return result;\n        }\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).contains(x))\
    \ {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n         \
    \           if (lst.get(i).get(j) == x) {\n                        result.add(new\
    \ Pair<>(i, j));\n                    }\n                }\n            }\n  \
    \      }\n        result.sort((p1, p2) -> {\n            int val = p1.getValue0().compareTo(p2.getValue0());\n\
    \            if (val == 0) {\n                return -p1.getValue1().compareTo(p2.getValue1());\n\
    \            }\n            return val;\n        });\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpcoskmnx8.java:34)\n\tat Problem.main(tmpcoskmnx8.java:49)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // your code here\n        ArrayList<Pair<Integer, Integer>>\
    \ result = new ArrayList<Pair<Integer, Integer>>();\n        ArrayList<Pair<Integer,\
    \ Integer>> temp = new ArrayList<Pair<Integer, Integer>>();\n        Pair<Integer,\
    \ Integer> p = new Pair<Integer, Integer>(0, 0);\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    p = new\
    \ Pair<Integer, Integer>(i, j);\n                    temp.add(p);\n          \
    \      }\n            }\n        }\n        for (int i = 0; i < temp.size(); i++)\
    \ {\n            for (int j = i + 1; j < temp.size(); j++) {\n               \
    \ if (temp.get(i).getValue0() > temp.get(j).getValue0()) {\n                 \
    \   p = temp.get(i);\n                    temp.set(i, temp.get(j));\n        \
    \            temp.set(j, p);\n                }\n            }\n        }\n  \
    \      for (int i = 0; i < temp.size(); i++) {\n            for (int j = i + 1;\
    \ j < temp.size(); j++) {\n                if (temp.get(i).getValue0() == temp.get(j).getValue0())\
    \ {\n                    if (temp.get(i).getValue1() < temp.get(j).getValue1())\
    \ {\n                        p = temp.get(i);\n                        temp.set(i,\
    \ temp.get(j));\n                        temp.set(j, p);\n                   \
    \ }\n                }\n            }\n        }\n        for (int i = 0; i <\
    \ temp.size(); i++) {\n            result.add(temp.get(i));\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpl6e4yp3g.java:29)\n\tat Problem.main(tmpl6e4yp3g.java:64)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> answer = new ArrayList<>();\n\
    \        ArrayList<Integer> arr = new ArrayList<>();\n        ArrayList<Integer>\
    \ arr2 = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            for (int j = 0; j < lst.get(i).size(); j++) {\n                if\
    \ (lst.get(i).get(j) == x) {\n                    answer.add(new Pair<>(i, j));\n\
    \                    arr.add(i);\n                    arr2.add(j);\n         \
    \       }\n            }\n        }\n        quickSort(arr, arr2, 0, arr.size()\
    \ - 1);\n        return answer;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1caenkk.java:38: error: cannot find symbol\n        quickSort(arr,\
    \ arr2, 0, arr.size() - 1);\n        ^\n  symbol:   method quickSort(ArrayList<Integer>,ArrayList<Integer>,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code goes here.\n        return null;\n}\n  \
    \  public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpdtrewrww.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        ArrayList<Pair<Integer, Integer>>\
    \ result = new ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i\
    \ < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new\
    \ Pair<Integer, Integer>(i, j));\n                }\n            }\n        }\n\
    \        Comparator<Pair<Integer, Integer>> myComp = new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0()\
    \ == o2.getValue0()) {\n                    return o2.getValue1() - o1.getValue1();\n\
    \                }\n                return o1.getValue0() - o2.getValue0();\n\
    \            }\n        };\n        Collections.sort(result, myComp);\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp0ai5rvnq.java:33)\n\tat Problem.main(tmp0ai5rvnq.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        result.sort((a, b) -> (a.getValue0() - b.getValue0()\
    \ != 0) ? a.getValue0() - b.getValue0() : b.getValue1() - a.getValue1());\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpx47kbn6r.java:30)\n\tat Problem.main(tmpx47kbn6r.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return lst.stream()\n                  .flatMap(row ->\
    \ IntStream.range(0, row.size())\n                                           .mapToObj(j\
    \ -> new Pair<Integer, Integer>(row.indexOf(x), j)))\n                  .filter(p\
    \ -> p.getValue0() != -1)\n                  .sorted((p1, p2) -> p1.getValue0()\
    \ == p2.getValue0()\n                                      ? p2.getValue1().compareTo(p1.getValue1())\n\
    \                                      : p1.getValue0().compareTo(p2.getValue0()))\n\
    \                  .collect(Collectors.toCollection(ArrayList::new));\n}\n   \
    \ public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpxpvm8urq.java:27)\n\tat Problem.main(tmpxpvm8urq.java:36)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ans = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    ans.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Comparator<Pair<Integer,\
    \ Integer>> cmp = new Comparator<Pair<Integer, Integer>>() {\n            @Override\n\
    \            public int compare(Pair<Integer, Integer> lhs, Pair<Integer, Integer>\
    \ rhs) {\n                Integer lhsInts[] = {lhs.getValue0(), lhs.getValue1()};\n\
    \                Integer rhsInts[] = {rhs.getValue0(), rhs.getValue1()};\n   \
    \             for (int i = 0; i < 2; i++) {\n                    int cmpVal =\
    \ lhsInts[i].compareTo(rhsInts[i]);\n                    if (cmpVal != 0) {\n\
    \                        return cmpVal;\n                    }\n             \
    \   }\n                return 0;\n            }\n        };\n        Collections.sort(ans,\
    \ cmp);\n        return ans;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpbc5yi_3v.java:31)\n\tat Problem.main(tmpbc5yi_3v.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> pos = new ArrayList<>();\n\
    \        int i = 0;\n        for (ArrayList<Integer> l : lst) {\n            int\
    \ j = 0;\n            for (int v : l) {\n                if (v == x) {\n     \
    \               pos.add(new Pair<>(i, j));\n                }\n              \
    \  j++;\n            }\n            i++;\n        }\n        pos.sort((a, b) ->\
    \ {\n            if (a.getValue0() != b.getValue0()) {\n                return\
    \ a.getValue0() - b.getValue0();\n            }\n            return b.getValue1()\
    \ - a.getValue1();\n        });\n        return pos;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpw9utuj_8.java:32)\n\tat Problem.main(tmpw9utuj_8.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        int listSize = lst.size();\n        for (int i = 0; i < listSize; i++)\
    \ {\n            ArrayList<Integer> row = lst.get(i);\n            int rowSize\
    \ = row.size();\n            for (int j = 0; j < rowSize; j++) {\n           \
    \     if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n\
    \                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                int row1 = p1.getValue0();\n                int row2 = p2.getValue0();\n\
    \                if (row1 == row2) {\n                    int col1 = p1.getValue1();\n\
    \                    int col2 = p2.getValue1();\n                    return col2\
    \ - col1;\n                }\n                return row1 - row2;\n          \
    \  }\n        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp_x2x2_5v.java:33)\n\tat Problem.main(tmp_x2x2_5v.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ list = lst.get(i);\n            for (int j = 0; j < list.size(); j++) {\n  \
    \              if (list.get(j) == x) {\n                    res.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                if (o1.getValue0().equals(o2.getValue0())) {\n          \
    \          return o2.getValue1().compareTo(o1.getValue1());\n                }\n\
    \                return o1.getValue0().compareTo(o2.getValue0());\n          \
    \  }\n        });\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmps82v6vfk.java:31)\n\tat Problem.main(tmps82v6vfk.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        // write your code here\n        int n = lst.size();\n        for (int\
    \ i = 0; i < n; i++) {\n            ArrayList<Integer> sub = lst.get(i);\n   \
    \         for (int j = 0; j < sub.size(); j++) {\n                if (sub.get(j)\
    \ == x) {\n                    res.add(new Pair<>(i, j));\n                }\n\
    \            }\n        }\n        Collections.sort(res, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> t1, Pair<Integer, Integer> t2) {\n                int cmp = t1.getValue0().compareTo(t2.getValue0());\n\
    \                if (cmp == 0) {\n                    return -(t1.getValue1().compareTo(t2.getValue1()));\n\
    \                }\n                return cmp;\n            }\n        });\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp469xxmkm.java:33)\n\tat Problem.main(tmp469xxmkm.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return new ArrayList<Pair<Integer, Integer>>();\n}\n\
    \    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpnunnpzac.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // the first element of a tuple is a row, the second\
    \ - column\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Integer, Integer>> temp = new ArrayList<>();\n       \
    \ int i = 0;\n        int j = 0;\n        for (List<Integer> row : lst) {\n  \
    \          j = 0;\n            for (Integer el : row) {\n                if (el\
    \ == x) {\n                    temp.add(new Pair<>(i, j));\n                }\n\
    \                j++;\n            }\n            i++;\n        }\n        temp.sort((a,\
    \ b) -> a.getValue0().compareTo(b.getValue0()));\n        for (int index = 0;\
    \ index < temp.size(); index++) {\n            Pair<Integer, Integer> coord =\
    \ temp.get(index);\n            if (coord.getValue0() == index) {\n          \
    \      result.add(coord);\n            } else {\n                Collections.sort(temp.subList(index,\
    \ temp.size()), (a, b) -> b.getValue1().compareTo(a.getValue1()));\n         \
    \       result.addAll(temp.subList(index, temp.size()));\n                break;\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp018n3xh0.java:35)\n\tat Problem.main(tmp018n3xh0.java:55)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Integer, Integer>> sortedRow = new ArrayList<>();\n  \
    \      for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j <\
    \ lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n \
    \                   result.add(new Pair<>(i, j));\n                }\n       \
    \     }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> left, Pair<Integer, Integer> right) {\n                if (left.getValue0()\
    \ == right.getValue0()) {\n                    return -(left.getValue1() - right.getValue1());\n\
    \                }\n                return left.getValue0() - right.getValue0();\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpuz_fhda5.java:31)\n\tat Problem.main(tmpuz_fhda5.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int row = 0; row < lst.size(); row++) {\n            for (int col\
    \ = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col)\
    \ == x) {\n                    result.add(new Pair<>(row, col));\n           \
    \     }\n            }\n        }\n        result.sort((a, b) -> {\n         \
    \   if (a.getValue0() != b.getValue0()) {\n                return a.getValue0()\
    \ - b.getValue0();\n            } else {\n                return b.getValue1()\
    \ - a.getValue1();\n            }\n        });\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpk19emng2.java:30)\n\tat Problem.main(tmpk19emng2.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmp10roa3aq.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write your code here.\n        return null;\n}\n \
    \   public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpbyywzs6z.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> a = new ArrayList<>();\n\
    \        int i = 0;\n        for (ArrayList<Integer> b : lst) {\n            int\
    \ j = 0;\n            for (Integer y : b) {\n                if (y == x) {\n \
    \                   a.add(new Pair<>(i, j));\n                }\n            \
    \    j++;\n            }\n            i++;\n        }\n        return a;\n}\n\
    \    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp6l0twpy9.java:32)\n\tat Problem.main(tmp6l0twpy9.java:41)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Integer, Integer>> rowResult = new ArrayList<>();\n  \
    \      for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j <\
    \ lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n \
    \                   rowResult.add(new Pair<>(i, j));\n                }\n    \
    \        }\n        }\n        rowResult.sort((p1, p2) -> {\n            if (p1.getValue0()\
    \ == p2.getValue0()) {\n                return p2.getValue1() - p1.getValue1();\n\
    \            }\n            return p1.getValue0() - p2.getValue0();\n        });\n\
    \        return rowResult;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpqnxx_6gw.java:31)\n\tat Problem.main(tmpqnxx_6gw.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            int val = row.get(j);\n                if (val == x) {\n        \
    \            result.add(new Pair<>(i, j));\n                }\n            }\n\
    \        }\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ p1, Pair<Integer, Integer> p2) {\n                if (p1.getValue0() > p2.getValue0())\
    \ {\n                    return 1;\n                } else if (p1.getValue0()\
    \ < p2.getValue0()) {\n                    return -1;\n                } else\
    \ {\n                    if (p1.getValue1() > p2.getValue1()) {\n            \
    \            return -1;\n                    } else if (p1.getValue1() < p2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp5optp65x.java:32)\n\tat Problem.main(tmp5optp65x.java:57)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ cur = lst.get(i);\n            for (int j = 0; j < cur.size(); j++) {\n    \
    \            if (cur.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> a, Pair<Integer, Integer> b) {\n\
    \                if (a.getValue0() == b.getValue0()) {\n                    return\
    \ - a.getValue1().compareTo(b.getValue1());\n                }\n             \
    \   return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp7sbs7te9.java:31)\n\tat Problem.main(tmp7sbs7te9.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n      ArrayList<Pair<Integer, Integer>> answer = new ArrayList<Pair<Integer,\
    \ Integer>>();\n      for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n          if (lst.get(i).get(j) == x)\
    \ {\n            answer.add(new Pair<Integer, Integer>(i, j));\n          }\n\
    \        }\n      }\n      Comparator<Pair<Integer, Integer>> byFirst = (Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) -> o1.getValue0().compareTo(o2.getValue0());\n\
    \      Comparator<Pair<Integer, Integer>> bySecond = (Pair<Integer, Integer> o1,\
    \ Pair<Integer, Integer> o2) -> o2.getValue1().compareTo(o1.getValue1());\n  \
    \    answer.sort(byFirst.thenComparing(bySecond));\n      return answer;\n}\n\
    \    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmppuvlltgv.java:30)\n\tat Problem.main(tmppuvlltgv.java:40)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> p1, Pair<Integer, Integer> p2) {\n                if (p1.getValue0()\
    \ < p2.getValue0()) return -1;\n                if (p1.getValue0() > p2.getValue0())\
    \ return 1;\n                if (p1.getValue1() > p2.getValue1()) return -1;\n\
    \                if (p1.getValue1() < p2.getValue1()) return 1;\n            \
    \    return 0;\n            }\n        });\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp0gx0r4iy.java:30)\n\tat Problem.main(tmp0gx0r4iy.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // create an empty list to store the result\n       \
    \ ArrayList<Pair<Integer, Integer>> emptyList = new ArrayList<Pair<Integer, Integer>>();\n\
    \        // check if lst is empty\n        if (lst.size() == 0) {\n          \
    \  return emptyList;\n        }\n        // iterate through all items in the list\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            // get the current\
    \ row\n            ArrayList<Integer> currRow = lst.get(i);\n            // check\
    \ if the current row is empty\n            if (currRow.size() == 0) {\n      \
    \          continue;\n            }\n            // iterate through all the items\
    \ in the current row\n            for (int j = 0; j < currRow.size(); j++) {\n\
    \                // check if the current item is x\n                if (currRow.get(j)\
    \ == x) {\n                    // create a new pair and add it to the empty list\n\
    \                    Pair<Integer, Integer> newPair = new Pair<Integer, Integer>(i,\
    \ j);\n                    emptyList.add(newPair);\n                }\n      \
    \      }\n        }\n        // use the default sort method of list\n        //\
    \ sort by row first\n        // sort by column second\n        Collections.sort(emptyList,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                int result = o1.getValue0().compareTo(o2.getValue0());\n\
    \                return result != 0 ? result : o2.getValue1().compareTo(o1.getValue1());\n\
    \            }\n        });\n        return emptyList;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpgo3ec4rh.java:45)\n\tat Problem.main(tmpgo3ec4rh.java:63)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Create your solution here.\n        ArrayList<Pair<Integer,\
    \ Integer>> row = new ArrayList<Pair<Integer, Integer>>();\n        int count\
    \ = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ rowList = lst.get(i);\n            for (int j = 0; j < rowList.size(); j++)\
    \ {\n                if (rowList.get(j) == x) {\n                    Pair<Integer,\
    \ Integer> pair = new Pair<Integer, Integer>(i, j);\n                    row.add(pair);\n\
    \                }\n            }\n        }\n        Collections.sort(row, new\
    \ Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public\
    \ int compare(Pair<Integer, Integer> pair1, Pair<Integer, Integer> pair2) {\n\
    \                if (pair1.getValue0() == pair2.getValue0()) {\n             \
    \       return pair2.getValue1() - pair1.getValue1();\n                }\n   \
    \             return pair1.getValue0() - pair2.getValue0();\n            }\n \
    \       });\n        return row;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp_qrrhb9n.java:33)\n\tat Problem.main(tmp_qrrhb9n.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        ArrayList<Pair<Integer, Integer>> temp = new ArrayList<>();\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size();\
    \ j++) {\n                if (lst.get(i).get(j) == x) {\n                    temp.add(new\
    \ Pair<>(i, j));\n                }\n            }\n        }\n        temp.sort((a,\
    \ b) -> {\n            if (a.getValue0() == b.getValue0()) {\n               \
    \ return b.getValue1() - a.getValue1();\n            }\n            return a.getValue0()\
    \ - b.getValue0();\n        });\n        return temp;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp1sf9u5n6.java:31)\n\tat Problem.main(tmp1sf9u5n6.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        int i = 0;\n        for (ArrayList<Integer> row : lst) {\n          \
    \  int j = 0;\n            for (Integer e : row) {\n                if (e == x)\
    \ {\n                    result.add(new Pair<>(i, j));\n                }\n  \
    \              j++;\n            }\n            i++;\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                return (p1.getValue0() == p2.getValue0()) ? p2.getValue1()\
    \ - p1.getValue1() : p1.getValue0() - p2.getValue0();\n            }\n       \
    \ });\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpznr1oefk.java:32)\n\tat Problem.main(tmpznr1oefk.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        // res.sort((a, b) -> {\n        //     int cmp = Integer.compare(a.getValue0(),\
    \ b.getValue0());\n        //     if (cmp == 0) {\n        //         return Integer.compare(b.getValue1(),\
    \ a.getValue1());\n        //     }\n        //     return cmp;\n        // });\n\
    \        res.sort(Comparator.comparing(Pair::getValue0).thenComparing(Pair::getValue1,\
    \ Comparator.reverseOrder()));\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5psezx8d.java:41: error: incompatible types: cannot infer type-variable(s)\
    \ T,U\n        res.sort(Comparator.comparing(Pair::getValue0).thenComparing(Pair::getValue1,\
    \ Comparator.reverseOrder()));\n                                     ^\n    (argument\
    \ mismatch; invalid method reference\n      method getValue0 in class Pair<A,B>\
    \ cannot be applied to given types\n        required: no arguments\n        found:\
    \    Object\n        reason: actual and formal argument lists differ in length)\n\
    \  where T,U,A,B are type-variables:\n    T extends Object declared in method\
    \ <T,U>comparing(Function<? super T,? extends U>)\n    U extends Comparable<?\
    \ super U> declared in method <T,U>comparing(Function<? super T,? extends U>)\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        int maxColSize = -1;\n        for (int row = 0; row <\
    \ lst.size(); row++) {\n            if (lst.get(row).size() > maxColSize) {\n\
    \                maxColSize = lst.get(row).size();\n            }\n        }\n\
    \        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n     \
    \   for (int row = 0; row < lst.size(); row++) {\n            int col = 0;\n \
    \           while (col < lst.get(row).size()) {\n                if (lst.get(row).get(col)\
    \ == x) {\n                    result.add(new Pair<>(row, col));\n           \
    \     }\n                col++;\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                if (o1.getValue0() > o2.getValue0()) {\n                \
    \    return 1;\n                } else if (o1.getValue0() < o2.getValue0()) {\n\
    \                    return -1;\n                } else {\n                  \
    \  if (o1.getValue1() > o2.getValue1()) {\n                        return -1;\n\
    \                    } else if (o1.getValue1() < o2.getValue1()) {\n         \
    \               return 1;\n                    } else {\n                    \
    \    return 0;\n                    }\n                }\n            }\n    \
    \    });\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpiccob2xj.java:37)\n\tat Problem.main(tmpiccob2xj.java:63)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Comparator<Pair<Integer, Integer>> comparator = Comparator.comparing(Pair::getValue0);\n\
    \        comparator = comparator.thenComparing(p -> -p.getValue1());\n       \
    \ result.sort(comparator);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpbws3f2xz.java:30)\n\tat Problem.main(tmpbws3f2xz.java:40)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ a = lst.get(i);\n            for (int j = 0; j < a.size(); j++) {\n        \
    \        if (a.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n\
    \                }\n            }\n        }\n        res.sort((a, b) -> {\n \
    \           if (a.getValue0() != b.getValue0())\n                return a.getValue0()\
    \ - b.getValue0();\n            return b.getValue1() - a.getValue1();\n      \
    \  });\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp4qii9vt4.java:31)\n\tat Problem.main(tmp4qii9vt4.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        if (lst.size() == 0) {\n            return new ArrayList<Pair<Integer,\
    \ Integer>>();\n        }\n        ArrayList<Pair<Integer, Integer>> res = new\
    \ ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<Integer,\
    \ Integer>(i, j));\n                }\n            }\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                if (o1.getValue0().equals(o2.getValue0())) {\n          \
    \          return o2.getValue1().compareTo(o1.getValue1());\n                }\n\
    \                return o1.getValue0().compareTo(o2.getValue0());\n          \
    \  }\n        });\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpp4sa7zw5.java:33)\n\tat Problem.main(tmpp4sa7zw5.java:49)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    res.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        res.sort((p1, p2)\
    \ -> {\n            if (p1.getValue0() < p2.getValue0()) {\n                return\
    \ -1;\n            } else if (p1.getValue0() > p2.getValue0()) {\n           \
    \     return 1;\n            } else {\n                if (p1.getValue1() > p2.getValue1())\
    \ {\n                    return -1;\n                } else if (p1.getValue1()\
    \ < p2.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpf040g6f_.java:31)\n\tat Problem.main(tmpf040g6f_.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        int i = 0;\n        for (ArrayList<Integer> row : lst) {\n          \
    \  int j = 0;\n            for (Integer num : row) {\n                if (num\
    \ == x) {\n                    res.add(new Pair<>(i, j));\n                }\n\
    \                j++;\n            }\n            i++;\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp5q13wjf8.java:32)\n\tat Problem.main(tmp5q13wjf8.java:41)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coords = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n \
    \                   coords.add(new Pair<>(i, j));\n            }\n        }\n\
    \        Collections.sort(coords, new Comparator<Pair<Integer, Integer>>() {\n\
    \            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        ArrayList<Pair<Integer, Integer>> sorted\
    \ = new ArrayList<>();\n        for (int i = 0; i < coords.size(); i++) {\n  \
    \          Pair<Integer, Integer> curr = coords.get(i);\n            if (i > 0\
    \ && coords.get(i - 1).getValue0() == curr.getValue0()) {\n                sorted.add(new\
    \ Pair<>(curr.getValue0(), curr.getValue1()));\n            } else {\n       \
    \         ArrayList<Pair<Integer, Integer>> temp = new ArrayList<>();\n      \
    \          for (int j = i; j < coords.size(); j++) {\n                    if (coords.get(j).getValue0()\
    \ == curr.getValue0())\n                        temp.add(coords.get(j));\n   \
    \             }\n                Collections.sort(temp, new Comparator<Pair<Integer,\
    \ Integer>>() {\n                    @Override\n                    public int\
    \ compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n          \
    \              return o2.getValue1().compareTo(o1.getValue1());\n            \
    \        }\n                });\n                sorted.addAll(temp);\n      \
    \          i += temp.size() - 1;\n            }\n        }\n        return sorted;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmppn7tah4l.java:30)\n\tat Problem.main(tmppn7tah4l.java:63)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        if (lst.size() == 0) return new ArrayList<>();\n    \
    \    ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        int row\
    \ = 0;\n        for (ArrayList<Integer> l : lst) {\n            int col = 0;\n\
    \            for (int e : l) {\n                if (e == x) {\n              \
    \      res.add(new Pair<>(row, col));\n                }\n                col++;\n\
    \            }\n            row++;\n        }\n        Collections.sort(res, (p1,\
    \ p2) -> {\n            if (p1.getValue0() < p2.getValue0()) return -1;\n    \
    \        if (p1.getValue0() > p2.getValue0()) return 1;\n            if (p1.getValue1()\
    \ > p2.getValue1()) return -1;\n            if (p1.getValue1() < p2.getValue1())\
    \ return 1;\n            return 0;\n        });\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmppepb17yk.java:33)\n\tat Problem.main(tmppepb17yk.java:49)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ans = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    ans.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(ans,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                if (o1.getValue0().equals(o2.getValue0())) {\n          \
    \          return o2.getValue1().compareTo(o1.getValue1());\n                }\n\
    \                return o1.getValue0().compareTo(o2.getValue0());\n          \
    \  }\n        });\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpgwj5y91f.java:31)\n\tat Problem.main(tmpgwj5y91f.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n\
    \        Collections.sort(result, (a, b) -> (int) (b.getValue1() - a.getValue1()));\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmplgsjqxar.java:30)\n\tat Problem.main(tmplgsjqxar.java:39)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        // BEGIN (write your solution here)\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x)\n                    result.add(new Pair<>(i,\
    \ j));\n            }\n        }\n        // END\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpbpa5lbp8.java:31)\n\tat Problem.main(tmpbpa5lbp8.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> out = new ArrayList<>();\n\
    \        for (int row = 0; row < lst.size(); row++) {\n            for (int col\
    \ = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col)\
    \ == x) {\n                    out.add(new Pair<>(row, col));\n              \
    \  }\n            }\n        }\n        return out;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpr0a8565t.java:30)\n\tat Problem.main(tmpr0a8565t.java:37)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coords = new ArrayList<>();\n\
    \        if (lst.size() == 0) {\n            return coords;\n        }\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer> row\
    \ = lst.get(i);\n            if (row.size() == 0) {\n                continue;\n\
    \            }\n            for (int j = 0; j < row.size(); j++) {\n         \
    \       if (row.get(j) == x) {\n                    coords.add(new Pair<>(i, j));\n\
    \                }\n            }\n        }\n        coords.sort((a, b) -> {\n\
    \            if (a.getValue0() < b.getValue0()) {\n                return -1;\n\
    \            } else if (a.getValue0() > b.getValue0()) {\n                return\
    \ 1;\n            } else {\n                if (a.getValue1() > b.getValue1())\
    \ {\n                    return -1;\n                } else if (a.getValue1()\
    \ < b.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return coords;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp5tfypxqz.java:37)\n\tat Problem.main(tmp5tfypxqz.java:59)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> tempList = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    tempList.add(new Pair<>(i, j));\n                }\n    \
    \        }\n        }\n        return tempList;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpcragepo6.java:30)\n\tat Problem.main(tmpcragepo6.java:37)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        int row = 0;\n        for (ArrayList<Integer> r : lst) {\n          \
    \  for (int i = 0; i < r.size(); i++) {\n                if (r.get(i) == x) {\n\
    \                    result.add(new Pair<>(row, i));\n                }\n    \
    \        }\n            row++;\n        }\n        result.sort((a, b) -> {\n \
    \           if (a.getValue0() != b.getValue0()) {\n                return a.getValue0()\
    \ - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n\
    \        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpb__fbr0q.java:31)\n\tat Problem.main(tmpb__fbr0q.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        ArrayList<ArrayList<Integer>> sorted = new ArrayList<>();\n        int\
    \ j = 0;\n        for (ArrayList<Integer> l : lst) {\n            sorted.add(new\
    \ ArrayList<>());\n            for (int i = 0; i < l.size(); i++) {\n        \
    \        if (l.get(i) == x) {\n                    sorted.get(j).add(i);\n   \
    \             }\n            }\n            j++;\n        }\n        for (int\
    \ i = 0; i < sorted.size(); i++) {\n            for (int k = 0; k < sorted.get(i).size();\
    \ k++) {\n                result.add(new Pair<>(i, sorted.get(i).get(k)));\n \
    \           }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp8wij8646.java:40)\n\tat Problem.main(tmp8wij8646.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> pairList = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    pairList.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        pairList.sort((a,\
    \ b) -> {\n            int compare = a.getValue0().compareTo(b.getValue0());\n\
    \            if (compare == 0) {\n                return b.getValue1().compareTo(a.getValue1());\n\
    \            }\n            return compare;\n        });\n        return pairList;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpr0bkw1e1.java:31)\n\tat Problem.main(tmpr0bkw1e1.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // your code here\n        ArrayList<Pair<Integer, Integer>>\
    \ output = new ArrayList<Pair<Integer, Integer>>();\n        int counter1 = 0;\n\
    \        for (ArrayList<Integer> inner_lst : lst) {\n            int counter2\
    \ = 0;\n            for (Integer a : inner_lst) {\n                if (a == x)\
    \ {\n                    output.add(new Pair<Integer, Integer>(counter1, counter2));\n\
    \                }\n                counter2++;\n            }\n            counter1++;\n\
    \        }\n        return output;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp3a3knviq.java:33)\n\tat Problem.main(tmp3a3knviq.java:42)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            int item = row.get(j);\n                if (item == x) {\n      \
    \              result.add(new Pair<>(i, j));\n                }\n            }\n\
    \        }\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return -o1.getValue1().compareTo(o2.getValue1());\n \
    \               }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpw2eamk1w.java:32)\n\tat Problem.main(tmpw2eamk1w.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        //\n        // Your code here\n        //\n        int outer = 0;\n \
    \       for (ArrayList<Integer> a : lst) {\n            int inner = 0;\n     \
    \       for (Integer b : a) {\n                if (b == x) {\n               \
    \     result.add(new Pair<>(outer, inner));\n                }\n             \
    \   inner++;\n            }\n            outer++;\n        }\n        // result.sort(Comparator.comparing(Pair::getValue0));\n\
    \        Collections.sort(result, (a, b) -> {\n            int first = a.getValue0().compareTo(b.getValue0());\n\
    \            if (first == 0) {\n                return b.getValue1().compareTo(a.getValue1());\n\
    \            }\n            return first;\n        });\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpdzczkhgi.java:35)\n\tat Problem.main(tmpdzczkhgi.java:52)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        ArrayList<Integer> row;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            row = lst.get(i);\n            for (int j = 0; j < row.size();\
    \ j++) {\n                if (row.get(j) == x) {\n                    result.add(new\
    \ Pair<>(i, j));\n                }\n            }\n        }\n        Comparator<Pair<Integer,\
    \ Integer>> cmp = (p1, p2) -> {\n            if (p1.getValue0().equals(p2.getValue0()))\
    \ {\n                return p2.getValue1().compareTo(p1.getValue1());\n      \
    \      }\n            return p1.getValue0().compareTo(p2.getValue0());\n     \
    \   };\n        result.sort(cmp);\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpsqecyp2n.java:32)\n\tat Problem.main(tmpsqecyp2n.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        Collections.sort(res, (p1, p2) -> {\n            if\
    \ (p1.getValue0() == p2.getValue0()) {\n                return p2.getValue1()\
    \ - p1.getValue1();\n            }\n            return p1.getValue0() - p2.getValue0();\n\
    \        });\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpesrzedgi.java:30)\n\tat Problem.main(tmpesrzedgi.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        result.sort((t1,\
    \ t2) -> t1.getValue0().compareTo(t2.getValue0()));\n        for (int i = 0; i\
    \ < result.size(); i++) {\n            for (int j = 0; j < result.size() - 1;\
    \ j++) {\n                if (result.get(j).getValue0() == result.get(j + 1).getValue0())\
    \ {\n                    if (result.get(j).getValue1() < result.get(j + 1).getValue1())\
    \ {\n                        Collections.swap(result, j, j + 1);\n           \
    \         }\n                }\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp3wybg5vy.java:31)\n\tat Problem.main(tmp3wybg5vy.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            int element = row.get(j);\n                if (element == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        // sort result\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> a, Pair<Integer, Integer> b) {\n\
    \                return a.getValue0().compareTo(b.getValue0());\n            }\n\
    \        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp0hbcy2uj.java:32)\n\tat Problem.main(tmp0hbcy2uj.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        // int i = 0;\n        for (ArrayList<Integer> row : lst) {\n       \
    \     int c = 0;\n            for (Integer value : row) {\n                if\
    \ (value == x) {\n                    res.add(new Pair<>(c, value));\n       \
    \         }\n                c++;\n            }\n            // i++;\n      \
    \  }\n        res.sort((x1, x2) -> x1.getValue0().compareTo(x2.getValue0()));\n\
    \        res.sort((x1, x2) -> x1.getValue1().compareTo(x2.getValue1()));\n   \
    \     return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpbn1dii15.java:32)\n\tat Problem.main(tmpbn1dii15.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> row = new ArrayList<>();\n\
    \        int i = 0;\n        for (ArrayList<Integer> l : lst) {\n            int\
    \ j = 0;\n            for (Integer e : l) {\n                if (e == x) {\n \
    \                   row.add(new Pair<>(i, j));\n                }\n          \
    \      j++;\n            }\n            i++;\n        }\n        row.sort((a,\
    \ b) -> {\n            if (a.getValue0() < b.getValue0()) {\n                return\
    \ -1;\n            } else if (a.getValue0() > b.getValue0()) {\n             \
    \   return 1;\n            } else {\n                if (a.getValue1() > b.getValue1())\
    \ {\n                    return -1;\n                } else if (a.getValue1()\
    \ < b.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return row;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp49_pp2cq.java:32)\n\tat Problem.main(tmp49_pp2cq.java:56)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        // check each row\n        for (int i = 0; i < lst.size(); i++) {\n \
    \           ArrayList<Integer> row = lst.get(i);\n            // check each element\
    \ in a row\n            for (int j = 0; j < row.size(); j++) {\n             \
    \   if (row.get(j) == x) {\n                    result.add(new Pair<>(i, j));\n\
    \                }\n            }\n        }\n        // sort by row\n       \
    \ Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n      \
    \      @Override\n            public int compare(Pair<Integer, Integer> a, Pair<Integer,\
    \ Integer> b) {\n                int row_a = a.getValue0();\n                int\
    \ row_b = b.getValue0();\n                int col_a = a.getValue1();\n       \
    \         int col_b = b.getValue1();\n                if (row_a != row_b) {\n\
    \                    return row_a - row_b;\n                } else {\n       \
    \             return col_b - col_a;\n                }\n            }\n      \
    \  });\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp0uxjmcb5.java:33)\n\tat Problem.main(tmp0uxjmcb5.java:55)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        result.sort((o1,\
    \ o2) -> {\n            int diff = o1.getValue0() - o2.getValue0();\n        \
    \    if (diff == 0) {\n                return o2.getValue1() - o1.getValue1();\n\
    \            }\n            return diff;\n        });\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpn8de2f4g.java:31)\n\tat Problem.main(tmpn8de2f4g.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        res.sort((a, b) -> {\n            if (a.getValue0()\
    \ != b.getValue0()) {\n                return a.getValue0() - b.getValue0();\n\
    \            } else {\n                return b.getValue1() - a.getValue1();\n\
    \            }\n        });\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpnq_82av6.java:30)\n\tat Problem.main(tmpnq_82av6.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return lst.stream()\n            .map(e -> e.stream()\n\
    \                 .map(i -> new Pair<Integer, Integer>(e.indexOf(i), Collections.frequency(e,\
    \ i)))\n                 .collect(Collectors.toList()))\n            .flatMap(Collection::stream)\n\
    \            .filter(e -> e.getValue0() == x)\n            .sorted((a, b) -> {\n\
    \                var cmp = Integer.compare(a.getValue0(), b.getValue0());\n  \
    \              if (cmp == 0) {\n                    cmp = Integer.compare(b.getValue1(),\
    \ a.getValue1());\n                }\n                return cmp;\n          \
    \  })\n            .collect(Collectors.toCollection(ArrayList::new));\n}\n   \
    \ public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp3c_3t01d.java:30)\n\tat Problem.main(tmp3c_3t01d.java:42)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ans = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    ans.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(ans,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                return o1.getValue0().compareTo(o2.getValue0());\n      \
    \      }\n        });\n        Collections.sort(ans, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return o2.getValue1().compareTo(o1.getValue1());\n  \
    \              }\n                return 0;\n            }\n        });\n    \
    \    return ans;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpitpdof70.java:31)\n\tat Problem.main(tmpitpdof70.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    ret.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        Collections.sort(ret, new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0() < o2.getValue0())\
    \ {\n                    return -1;\n                } else if (o1.getValue0()\
    \ > o2.getValue0()) {\n                    return 1;\n                } else {\n\
    \                    if (o1.getValue1() > o2.getValue1()) {\n                \
    \        return -1;\n                    } else if (o1.getValue1() < o2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpgugho80b.java:30)\n\tat Problem.main(tmpgugho80b.java:55)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        int i, j;\n        ArrayList<Pair<Integer, Integer>>\
    \ ret = new ArrayList<>();\n        // Write your code here\n        for (i =\
    \ 0; i < lst.size(); i++) {\n            ArrayList<Integer> al = lst.get(i);\n\
    \            for (j = 0; j < al.size(); j++) {\n                if (al.get(j)\
    \ == x) {\n                    ret.add(new Pair<Integer, Integer>(i, j));\n  \
    \              }\n            }\n        }\n        Comparator<Pair<Integer, Integer>>\
    \ cmp = new Comparator<Pair<Integer, Integer>>() {\n            @Override\n  \
    \          public int compare(Pair<Integer, Integer> a, Pair<Integer, Integer>\
    \ b) {\n                if (a.getValue0() < b.getValue0()) {\n               \
    \     return -1;\n                } else if (a.getValue0() > b.getValue0()) {\n\
    \                    return 1;\n                } else {\n                   \
    \ if (a.getValue1() > b.getValue1()) {\n                        return -1;\n \
    \                   } else if (a.getValue1() < b.getValue1()) {\n            \
    \            return 1;\n                    } else {\n                       \
    \ return 0;\n                    }\n                }\n            }\n       \
    \ };\n        Collections.sort(ret, cmp);\n        return ret;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpop_1mu7l.java:33)\n\tat Problem.main(tmpop_1mu7l.java:59)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        res.sort((a, b) -> {\n            if (a.getValue0()\
    \ == b.getValue0()) {\n                return b.getValue1() - a.getValue1();\n\
    \            }\n            return a.getValue0() - b.getValue0();\n        });\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpm2cusgck.java:30)\n\tat Problem.main(tmpm2cusgck.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> arr = new ArrayList<>();\n\
    \        ArrayList<Pair<Integer, Integer>> arr1 = new ArrayList<>();\n       \
    \ ArrayList<Pair<Integer, Integer>> arr2 = new ArrayList<>();\n        //get element\
    \ in the arr\n        for (int i = 0; i < lst.size(); i++) {\n            for\
    \ (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    arr.add(new Pair<>(i, j));\n                }\n\
    \            }\n        }\n        //sorted by row\n        arr1 = arr.stream().sorted(Comparator.comparing(Pair::getValue0)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        //sorted by column\n        for (int i = 0; i < arr1.size(); i++) {\n\
    \            for (int j = 0; j < arr1.size() - 1; j++) {\n                if (arr1.get(j).getValue0()\
    \ == arr1.get(j + 1).getValue0()) {\n                    if (arr1.get(j).getValue1()\
    \ < arr1.get(j + 1).getValue1()) {\n                        Pair<Integer, Integer>\
    \ p = arr1.get(j);\n                        arr1.set(j, arr1.get(j + 1));\n  \
    \                      arr1.set(j + 1, p);\n                    }\n          \
    \      }\n            }\n        }\n        return arr1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpcefakhxs.java:33)\n\tat Problem.main(tmpcefakhxs.java:54)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> list = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    list.add(new Pair<>(i, j));\n                }\n        \
    \    }\n        }\n        Collections.sort(list, new RowComparator());\n    \
    \    return list;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1km40pnd.java:34: error: cannot find symbol\n        Collections.sort(list,\
    \ new RowComparator());\n                                   ^\n  symbol:   class\
    \ RowComparator\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> a, Pair<Integer, Integer> b) {\n                if (a.getValue0().equals(b.getValue0()))\
    \ {\n                    return b.getValue1().compareTo(a.getValue1());\n    \
    \            }\n                return a.getValue0().compareTo(b.getValue0());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpzjqjqfdn.java:30)\n\tat Problem.main(tmpzjqjqfdn.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // You can write your solution here\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpzmrml0ds.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        Collections.sort(res, (p1, p2) -> {\n            if\
    \ (p1.getValue0() != p2.getValue0()) {\n                return p1.getValue0()\
    \ - p2.getValue0();\n            } else {\n                return p2.getValue1()\
    \ - p1.getValue1();\n            }\n        });\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp2ro2cdbl.java:30)\n\tat Problem.main(tmp2ro2cdbl.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ list = lst.get(i);\n            for (int j = 0; j < list.size(); j++) {\n  \
    \              if (list.get(j) == x) {\n                    res.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(res,\
    \ (a, b) -> {\n            int i = a.getValue0().compareTo(b.getValue0());\n \
    \           if (i != 0) {\n                return i;\n            }\n        \
    \    return b.getValue1().compareTo(a.getValue1());\n        });\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpirp_f1vz.java:31)\n\tat Problem.main(tmpirp_f1vz.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmp10roa3aq.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> indices = new ArrayList<>();\n\
    \        if (lst.size() == 0) {\n            return indices;\n        }\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer> row\
    \ = lst.get(i);\n            if (row.size() == 0) {\n                continue;\n\
    \            }\n            for (int j = 0; j < row.size(); j++) {\n         \
    \       if (row.get(j) == x) {\n                    indices.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(indices,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                if (p1.getValue0() > p2.getValue0()) {\n                \
    \    return 1;\n                } else if (p1.getValue0() < p2.getValue0()) {\n\
    \                    return -1;\n                } else {\n                  \
    \  if (p1.getValue1() > p2.getValue1()) {\n                        return -1;\n\
    \                    } else if (p1.getValue1() < p2.getValue1()) {\n         \
    \               return 1;\n                    } else {\n                    \
    \    return 0;\n                    }\n                }\n            }\n    \
    \    });\n        return indices;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpvxw9i0bp.java:37)\n\tat Problem.main(tmpvxw9i0bp.java:62)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        //sort the arraylist by count of row in descending order\n        ArrayList<ArrayList<Integer>>\
    \ rowSorted = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            int count = 0;\n            for (int j = 0; j < lst.get(i).size();\
    \ j++) {\n                if (lst.get(i).get(j) == x) {\n                    count++;\n\
    \                }\n            }\n            if (count > 0) {\n            \
    \    rowSorted.add(new ArrayList<>(Arrays.asList(count, i)));\n            }\n\
    \        }\n        Collections.sort(rowSorted, (a, b) -> b.get(0) - a.get(0));\n\
    \        for (int i = 0; i < rowSorted.size(); i++) {\n            int row = rowSorted.get(i).get(1);\n\
    \            ArrayList<Integer> col = new ArrayList<>();\n            for (int\
    \ j = 0; j < lst.get(row).size(); j++) {\n                if (lst.get(row).get(j)\
    \ == x) {\n                    col.add(j);\n                }\n            }\n\
    \            for (int j = 0; j < col.size(); j++) {\n                res.add(new\
    \ Pair<>(row, col.get(j)));\n            }\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpnnuhc4wy.java:50)\n\tat Problem.main(tmpnnuhc4wy.java:56)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ r = lst.get(i);\n            for (int j = 0; j < r.size(); j++) {\n        \
    \        if (r.get(j) == x) {\n                    ret.add(new Pair<>(i, j));\n\
    \                }\n            }\n        }\n        ret.sort((a, b) -> {\n \
    \           if (a.getValue0() != b.getValue0()) {\n                return a.getValue0()\
    \ - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n\
    \        });\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpt08zpuce.java:31)\n\tat Problem.main(tmpt08zpuce.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        result.sort(((o1, o2) -> o1.getValue0().compareTo(o2.getValue0())));\n\
    \        result.sort(((o1, o2) -> o2.getValue1().compareTo(o1.getValue1())));\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpex8dt0ws.java:30)\n\tat Problem.main(tmpex8dt0ws.java:39)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Note: ArrayList<Pair<Integer, Integer>> is a list\
    \ of pairs\n        // of Integer, Integer. First element of pair is first, second\n\
    \        // is second.\n        // 1. Create an empty list result, initially it\
    \ should be empty\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<Pair<Integer,\
    \ Integer>>();\n        // 2. Loop over lst, checking each element in the row\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    // 3. If element is equal\
    \ to x, add pair to the result.\n                    // Use Pair.with(first, second)\
    \ to create a pair.\n                    result.add(Pair.with(i, j));\n      \
    \          }\n            }\n        }\n        // 4. Sort result by rows, use\
    \ Collections.sort(result, comparator)\n        // You need to pass a comparator\
    \ to the sort method.\n        // Collections.sort(list, comparator)\n       \
    \ // Comparator has a method compare(a, b) that takes two Pairs,\n        // and\
    \ returns an integer.\n        // If integer is negative, a should be before b.\n\
    \        // If integer is zero, a and b are equal.\n        // If integer is positive,\
    \ b should be before a.\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> a, Pair<Integer, Integer> b) {\n                // Here we define a\
    \ comparator.\n                // a and b are of type Pair<Integer, Integer>\n\
    \                // a.getValue0() is the first element, a.getValue1() is second\n\
    \                // 5. If rows of both pairs are equal, we need to compare columns.\n\
    \                // If rows are not equal, the first element of the pair is the\
    \ row\n                // and the second element is the column.\n\n          \
    \      // 5.1 Compare rows first (we want rows to be sorted in ascending order).\n\
    \                // Compare a\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_9t_5w_.java:72: error: reached end of file while parsing\n}\n\
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Write a code here\n        ArrayList<Pair<Integer,\
    \ Integer>> result = new ArrayList<>();\n        int index = 0;\n        for (ArrayList<Integer>\
    \ a: lst) {\n            int col_index = 0;\n            for (Integer b: a) {\n\
    \                if (b == x) {\n                    result.add(new Pair<>(index,\
    \ col_index));\n                }\n                col_index += 1;\n         \
    \   }\n            index += 1;\n        }\n        Collections.sort(result, new\
    \ Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public\
    \ int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n      \
    \          if (o1.getValue0() == o2.getValue0()) {\n                    return\
    \ Integer.compare(o2.getValue1(), o1.getValue1());\n                }\n      \
    \          return Integer.compare(o1.getValue0(), o2.getValue0());\n         \
    \   }\n        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpdbf0y3_b.java:33)\n\tat Problem.main(tmpdbf0y3_b.java:51)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write your code here\n        return null;\n}\n  \
    \  public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmp206n5dw7.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coords = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    coords.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        coords.sort((a, b)\
    \ -> {\n            if (a.getValue0() < b.getValue0()) {\n                return\
    \ -1;\n            } else if (a.getValue0() > b.getValue0()) {\n             \
    \   return 1;\n            } else {\n                if (a.getValue1() > b.getValue1())\
    \ {\n                    return -1;\n                } else if (a.getValue1()\
    \ < b.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return coords;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpi0aek1iu.java:31)\n\tat Problem.main(tmpi0aek1iu.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        int i = 0;\n        for (ArrayList<Integer> row : lst) {\n          \
    \  int j = 0;\n            for (Integer xInt : row) {\n                if (xInt\
    \ == x) {\n                    result.add(new Pair<>(i, j));\n               \
    \ }\n                j++;\n            }\n            i++;\n        }\n      \
    \  // implement your solution here\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpd_l360cb.java:32)\n\tat Problem.main(tmpd_l360cb.java:42)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ans = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n \
    \                   ans.add(new Pair<>(i, j));\n            }\n        }\n   \
    \     if (ans.size() == 0)\n            return ans;\n        if (ans.size() ==\
    \ 1)\n            return ans;\n        Collections.sort(ans, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        Collections.sort(ans, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                return o2.getValue1().compareTo(o1.getValue1());\n\
    \            }\n        });\n        // for (int i = 0; i < ans.size(); i++) {\n\
    \        //     System.out.println(ans.get(i).getValue0() + \" \" + ans.get(i).getValue1());\n\
    \        // }\n        return ans;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpmkj3v82i.java:30)\n\tat Problem.main(tmpmkj3v82i.java:55)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // this function returns list of tuples, [(x1, y1), (x2,\
    \ y2) ...]\n        // such that each tuple is a coordinate - (row, columns),\n\
    \        // starting with 0, in which x appears in lst.\n        ArrayList<Pair<Integer,\
    \ Integer>> res = new ArrayList<>();\n        // write code here\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmp8exq9ce0.java:34)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> row = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    row.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        row.sort((o1, o2) -> {\n            int compare = o1.getValue0().compareTo(o2.getValue0());\n\
    \            if (compare == 0) {\n                return o2.getValue1().compareTo(o1.getValue1());\n\
    \            }\n            return compare;\n        });\n        return row;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpgmr459s6.java:30)\n\tat Problem.main(tmpgmr459s6.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, (p1, p2) -> {\n        \
    \    if (p1.getValue0() == p2.getValue0()) {\n                return p2.getValue1()\
    \ - p1.getValue1();\n            }\n            return p1.getValue0() - p2.getValue0();\n\
    \        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpzmuvx9sw.java:30)\n\tat Problem.main(tmpzmuvx9sw.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                if (o1.getValue0().equals(o2.getValue0())) {\n          \
    \          return o2.getValue1().compareTo(o1.getValue1());\n                }\n\
    \                return o1.getValue0().compareTo(o2.getValue0());\n          \
    \  }\n        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpzwqb73vf.java:31)\n\tat Problem.main(tmpzwqb73vf.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coordinates = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    coordinates.add(new Pair<>(i, j));\n                }\n \
    \           }\n        }\n        return coordinates;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpbnsv81h0.java:30)\n\tat Problem.main(tmpbnsv81h0.java:37)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n      ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \      for (int i = 0; i < lst.size(); i++) {\n        ArrayList<Integer> currentRow\
    \ = lst.get(i);\n        for (int j = 0; j < currentRow.size(); j++) {\n     \
    \     if (currentRow.get(j) == x) {\n            result.add(new Pair<Integer,\
    \ Integer>(i, j));\n          }\n        }\n      }\n      Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n        @Override\n        public\
    \ int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n      \
    \    if (o1.getValue0() < o2.getValue0()) {\n            return -1;\n        \
    \  } else if (o1.getValue0() > o2.getValue0()) {\n            return 1;\n    \
    \      } else {\n            if (o1.getValue1() > o2.getValue1()) {\n        \
    \      return -1;\n            } else if (o1.getValue1() < o2.getValue1()) {\n\
    \              return 1;\n            } else {\n              return 0;\n    \
    \        }\n          }\n        }\n      });\n      return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpt5ayipjd.java:31)\n\tat Problem.main(tmpt5ayipjd.java:56)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        if (lst.size() == 0) {\n            return new ArrayList<Pair<Integer,\
    \ Integer>>();\n        }\n        ArrayList<Pair<Integer, Integer>> res = new\
    \ ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<Integer,\
    \ Integer>(i, j));\n                }\n            }\n        }\n        Comparator<Pair<Integer,\
    \ Integer>> first = Comparator.comparing(Pair::getValue0);\n        Comparator<Pair<Integer,\
    \ Integer>> second = Comparator.comparing(Pair::getValue1);\n        res.sort(first.thenComparing(second.reversed()));\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmppxuq7rph.java:33)\n\tat Problem.main(tmppxuq7rph.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        result.sort((o1, o2) -> {\n            if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                return o2.getValue1().compareTo(o1.getValue1());\n      \
    \      }\n            return o1.getValue0().compareTo(o2.getValue0());\n     \
    \   });\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpp84heh2h.java:30)\n\tat Problem.main(tmpp84heh2h.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            int val = row.get(j);\n                if (val == x) {\n        \
    \            ret.add(new Pair<>(i, j));\n                }\n            }\n  \
    \      }\n        Comparator<Pair<Integer, Integer>> cmp = new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> p1, Pair<Integer, Integer> p2) {\n                int row1 = p1.getValue0();\n\
    \                int row2 = p2.getValue0();\n                if (row1 == row2)\
    \ {\n                    int col1 = p1.getValue1();\n                    int col2\
    \ = p2.getValue1();\n                    return -1 * Integer.compare(col1, col2);\n\
    \                }\n                return Integer.compare(row1, row2);\n    \
    \        }\n        };\n        Collections.sort(ret, cmp);\n        return ret;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpphhch3fd.java:32)\n\tat Problem.main(tmpphhch3fd.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        // Since we are suppose to return coordinates\n        // We must iterate\
    \ through each list and each element of each list\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            ArrayList<Integer> curr = lst.get(i);\n    \
    \        for (int j = 0; j < curr.size(); j++) {\n                if (curr.get(j)\
    \ == x) {\n                    ret.add(new Pair<>(i, j));\n                }\n\
    \            }\n        }\n        // Sort rows and columns descending order\n\
    \        Collections.sort(ret, new Comparator<Pair<Integer, Integer>>() {\n  \
    \          @Override\n            public int compare(Pair<Integer, Integer> p1,\
    \ Pair<Integer, Integer> p2) {\n                if (p1.getValue0() == p2.getValue0())\
    \ {\n                    return p2.getValue1() - p1.getValue1();\n           \
    \     }\n                return p1.getValue0() - p2.getValue0();\n           \
    \ }\n        });\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpwvg_y0po.java:33)\n\tat Problem.main(tmpwvg_y0po.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coords = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n \
    \                   coords.add(new Pair<>(i, j));\n            }\n        }\n\
    \        Collections.sort(coords, new Comparator<Pair<Integer, Integer>>() {\n\
    \            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\n\
    \                    return o2.getValue1().compareTo(o1.getValue1());\n      \
    \          return o1.getValue0().compareTo(o2.getValue0());\n            }\n \
    \       });\n        return coords;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp9wvdy1gj.java:30)\n\tat Problem.main(tmp9wvdy1gj.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003970
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> r = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    r.add(new Pair<>(i, j));\n                }\n           \
    \ }\n        }\n        Collections.sort(r, new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return o2.getValue1().compareTo(o1.getValue1());\n  \
    \              }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return r;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpm37mqs00.java:30)\n\tat Problem.main(tmpm37mqs00.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmp1yvt597d.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        result.sort((a, b) -> {\n            if (a.getValue0()\
    \ == b.getValue0()) {\n                return b.getValue1() - a.getValue1();\n\
    \            }\n            return a.getValue0() - b.getValue0();\n        });\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpspzwgl2p.java:30)\n\tat Problem.main(tmpspzwgl2p.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        res.sort((a, b) -> {\n            if (a.getValue0()\
    \ == b.getValue0()) {\n                return b.getValue1() - a.getValue1();\n\
    \            }\n            return a.getValue0() - b.getValue0();\n        });\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpm2cusgck.java:30)\n\tat Problem.main(tmpm2cusgck.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Good luck!\n        ArrayList<Pair<Integer, Integer>>\
    \ ret = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n \
    \           ArrayList<Integer> e = lst.get(i);\n            for (int j = 0; j\
    \ < e.size(); j++) {\n                if (e.get(j) == x) {\n                 \
    \   ret.add(new Pair<>(i, j));\n                }\n            }\n        }\n\
    \        return ret;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpl4w6b9ho.java:32)\n\tat Problem.main(tmpl4w6b9ho.java:39)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // your code here\n        ArrayList<Pair<Integer, Integer>>\
    \ result = new ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i\
    \ < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new\
    \ Pair<Integer, Integer>(i, j));\n                }\n            }\n        }\n\
    \        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n\
    \            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0() == o2.getValue0())\
    \ {\n                    return o2.getValue1() - o1.getValue1();\n           \
    \     }\n                return o1.getValue0() - o2.getValue0();\n           \
    \ }\n        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpwdvfgmcf.java:31)\n\tat Problem.main(tmpwdvfgmcf.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        int row = 0;\n        ArrayList<Pair<Integer, Integer>>\
    \ res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n \
    \           for (int j = 0; j < lst.get(i).size(); j++) {\n                if\
    \ (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n\
    \                }\n            }\n        }\n        res.sort((a, b) -> {\n \
    \           if (a.getValue0() == b.getValue0()) {\n                return b.getValue1()\
    \ - a.getValue1();\n            }\n            return a.getValue0() - b.getValue0();\n\
    \        });\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpxhc34imc.java:31)\n\tat Problem.main(tmpxhc34imc.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int row = 0; row < lst.size(); row++) {\n            ArrayList<Integer>\
    \ tempRow = lst.get(row);\n            for (int col = 0; col < tempRow.size();\
    \ col++) {\n                if (tempRow.get(col) == x) {\n                   \
    \ result.add(new Pair<>(row, col));\n                }\n            }\n      \
    \  }\n        Collections.sort(result, (p1, p2) -> {\n            if (p1.getValue0()\
    \ == p2.getValue0()) {\n                return p2.getValue1() - p1.getValue1();\n\
    \            }\n            return p1.getValue0() - p2.getValue0();\n        });\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpgckqy647.java:31)\n\tat Problem.main(tmpgckqy647.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coordinates = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    coordinates.add(new Pair<>(i, j));\n                }\n \
    \           }\n        }\n        coordinates.sort((a, b) -> {\n            int\
    \ ai = a.getValue0();\n            int bi = b.getValue0();\n            int aj\
    \ = a.getValue1();\n            int bj = b.getValue1();\n            if (ai ==\
    \ bi) {\n                return bj - aj;\n            }\n            return ai\
    \ - bi;\n        });\n        return coordinates;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp4sxqi9g_.java:30)\n\tat Problem.main(tmp4sxqi9g_.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    res.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(res,\
    \ (a, b) -> {\n            if (a.getValue0() == b.getValue0()) {\n           \
    \     return -Integer.compare(a.getValue1(), b.getValue1());\n            }\n\
    \            return Integer.compare(a.getValue0(), b.getValue0());\n        });\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp2qs5w801.java:31)\n\tat Problem.main(tmp2qs5w801.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write your code here\n        int n = lst.size();\n\
    \        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n     \
    \   for (int i = 0; i < n; i++) {\n            int m = lst.get(i).size();\n  \
    \          for (int j = 0; j < m; j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    result.add(new Pair<>(i, j));\n               \
    \ }\n            }\n        }\n        Collections.sort(result, (a, b) -> {\n\
    \            int compare = Integer.compare(a.getValue0(), b.getValue0());\n  \
    \          if (compare == 0) {\n                return Integer.compare(b.getValue1(),\
    \ a.getValue1());\n            }\n            return compare;\n        });\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpjvr6zn5n.java:33)\n\tat Problem.main(tmpjvr6zn5n.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> pos = new ArrayList<>();\n\
    \        for (int row = 0; row < lst.size(); row++) {\n            ArrayList<Integer>\
    \ arr = lst.get(row);\n            for (int col = 0; col < arr.size(); col++)\
    \ {\n                if (arr.get(col) == x) {\n                    pos.add(new\
    \ Pair<>(row, col));\n                }\n            }\n        }\n        pos.sort((p1,\
    \ p2) -> {\n            if (p1.getValue0().equals(p2.getValue0())) {\n       \
    \         return p2.getValue1().compareTo(p1.getValue1());\n            }\n  \
    \          return p1.getValue0().compareTo(p2.getValue0());\n        });\n   \
    \     return pos;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpsuy2ajk2.java:31)\n\tat Problem.main(tmpsuy2ajk2.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> a, Pair<Integer, Integer> b) {\n                if (a.getValue0() >\
    \ b.getValue0()) {\n                    return 1;\n                } else if (a.getValue0()\
    \ < b.getValue0()) {\n                    return -1;\n                } else {\n\
    \                    if (a.getValue1() > b.getValue1()) {\n                  \
    \      return -1;\n                    } else if (a.getValue1() < b.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmppatglj13.java:30)\n\tat Problem.main(tmppatglj13.java:55)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return Stream.of(lst)\n            .flatMap(List::stream)\n\
    \            .flatMap(i -> \n                Stream.of(i)\n                  \
    \  .flatMap(j -> \n                        Stream.of(j)\n                    \
    \        .filter(k -> k == x)\n                            .map(k -> \n      \
    \                          Pair.with(\n                                    lst.indexOf(i),\n\
    \                                    i.indexOf(j)\n                          \
    \      )\n                            )\n                    )\n            )\n\
    \            .collect(Collectors.toCollection(ArrayList::new));\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3rs5d97.java:32: error: bad operand types for binary operator\
    \ '=='\n                            .filter(k -> k == x)\n                   \
    \                        ^\n  first type:  ArrayList<Integer>\n  second type:\
    \ int\n1 error\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        var ans = new ArrayList<Pair<Integer, Integer>>();\n\
    \        int row = 0;\n        for (var rowLst : lst) {\n            int col =\
    \ 0;\n            for (var e : rowLst) {\n                if (e == x) {\n    \
    \                ans.add(new Pair<>(row, col));\n                }\n         \
    \       col++;\n            }\n            row++;\n        }\n        ans.sort((p1,\
    \ p2) -> {\n            if (p1.getValue0() == p2.getValue0()) {\n            \
    \    return p2.getValue1() - p1.getValue1();\n            }\n            return\
    \ p1.getValue0() - p2.getValue0();\n        });\n        return ans;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpgifrxnfj.java:32)\n\tat Problem.main(tmpgifrxnfj.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                if (o1.getValue0().equals(o2.getValue0())) {\n          \
    \          return -Integer.compare(o1.getValue1(), o2.getValue1());\n        \
    \        }\n                return Integer.compare(o1.getValue0(), o2.getValue0());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpar90rk1c.java:31)\n\tat Problem.main(tmpar90rk1c.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        if (lst.size() != 0) {\n            for (int i = 0; i < lst.size(); i++)\
    \ {\n                if (lst.get(i).size() != 0) {\n                    for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                        if (lst.get(i).get(j)\
    \ == x) {\n                            result.add(new Pair<>(i, j));\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        if (result.size() != 0) {\n            Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n                @Override\n    \
    \            public int compare(Pair<Integer, Integer> lhs, Pair<Integer, Integer>\
    \ rhs) {\n                    if (lhs.getValue0() > rhs.getValue0()) {\n     \
    \                   return 1;\n                    } else if (lhs.getValue0()\
    \ < rhs.getValue0()) {\n                        return -1;\n                 \
    \   } else {\n                        if (lhs.getValue1() > rhs.getValue1()) {\n\
    \                            return -1;\n                        } else if (lhs.getValue1()\
    \ < rhs.getValue1()) {\n                            return 1;\n              \
    \          } else {\n                            return 0;\n                 \
    \       }\n                    }\n                }\n            });\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpj33nll6t.java:32)\n\tat Problem.main(tmpj33nll6t.java:61)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code here\n        ArrayList<Pair<Integer, Integer>>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            ArrayList<Integer> currentList = lst.get(i);\n            int indexOfX\
    \ = Collections.binarySearch(currentList, x);\n            if (indexOfX >= 0)\
    \ {\n                result.add(new Pair<>(i, indexOfX));\n            }\n   \
    \     }\n        result.sort((o1, o2) -> {\n            int diff = o1.getValue0()\
    \ - o2.getValue0();\n            if (diff == 0) {\n                return o2.getValue1()\
    \ - o1.getValue1();\n            }\n            return diff;\n        });\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpaevh9cfo.java:32)\n\tat Problem.main(tmpaevh9cfo.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ cur = lst.get(i);\n            for (int j = 0; j < cur.size(); j++) {\n    \
    \            if (cur.get(j) == x) {\n                    ret.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        ret.sort((Pair<Integer,\
    \ Integer> a, Pair<Integer, Integer> b) -> {\n            if (a.getValue0().equals(b.getValue0()))\
    \ {\n                return b.getValue1() - a.getValue1();\n            }\n  \
    \          return a.getValue0() - b.getValue0();\n        });\n        return\
    \ ret;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp6_wquth_.java:31)\n\tat Problem.main(tmp6_wquth_.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ curRow = lst.get(i);\n            for (int j = 0; j < curRow.size(); j++) {\n\
    \                if (curRow.get(j) == x)\n                    res.add(new Pair<>(i,\
    \ j));\n            }\n        }\n        Comparator<Pair<Integer, Integer>> comparator\
    \ = new Comparator<Pair<Integer, Integer>>() {\n            @Override\n      \
    \      public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                if (p1.getValue0() > p2.getValue0())\n                  \
    \  return 1;\n                else if (p1.getValue0() < p2.getValue0())\n    \
    \                return -1;\n                else {\n                    if (p1.getValue1()\
    \ > p2.getValue1())\n                        return -1;\n                    else\
    \ if (p1.getValue1() < p2.getValue1())\n                        return 1;\n  \
    \                  else\n                        return 0;\n                }\n\
    \            }\n        };\n        Collections.sort(res, comparator);\n     \
    \   return res;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp0s6vwt6t.java:31)\n\tat Problem.main(tmp0s6vwt6t.java:55)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        result.sort((a, b)\
    \ -> {\n            if (a.getValue0() == b.getValue0()) {\n                return\
    \ - a.getValue1().compareTo(b.getValue1());\n            }\n            return\
    \ a.getValue0().compareTo(b.getValue0());\n        });\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpllm0tobc.java:31)\n\tat Problem.main(tmpllm0tobc.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        res.sort((Pair<Integer, Integer> o1, Pair<Integer, Integer>\
    \ o2) -> {\n            int row1 = o1.getValue0();\n            int row2 = o2.getValue0();\n\
    \            int col1 = o1.getValue1();\n            int col2 = o2.getValue1();\n\
    \            if (row1 == row2) {\n                return col2 - col1;\n      \
    \      }\n            return row1 - row2;\n        });\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmph5gz3pni.java:30)\n\tat Problem.main(tmph5gz3pni.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> row = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n \
    \                   row.add(new Pair<>(i, j));\n            }\n        }\n   \
    \     Collections.sort(row, new Comparator<Pair<Integer, Integer>>() {\n     \
    \       @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer,\
    \ Integer> p2) {\n                if (p1.getValue0().compareTo(p2.getValue0())\
    \ == 0)\n                    return -p1.getValue1().compareTo(p2.getValue1());\n\
    \                return p1.getValue0().compareTo(p2.getValue0());\n          \
    \  }\n        });\n        return row;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp_eiqyvvj.java:30)\n\tat Problem.main(tmp_eiqyvvj.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> sol = new ArrayList<>();\n\
    \        for (int row = 0; row < lst.size(); row++) {\n            for (int col\
    \ = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col)\
    \ == x) {\n                    sol.add(new Pair<>(row, col));\n              \
    \  }\n            }\n        }\n        sol.sort((a, b) -> {\n            if (a.getValue0()\
    \ < b.getValue0()) {\n                return -1;\n            } else if (a.getValue0()\
    \ > b.getValue0()) {\n                return 1;\n            } else {\n      \
    \          if (a.getValue1() > b.getValue1()) {\n                    return -1;\n\
    \                } else if (a.getValue1() < b.getValue1()) {\n               \
    \     return 1;\n                } else {\n                    return 0;\n   \
    \             }\n            }\n        });\n        return sol;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpf73x39vh.java:30)\n\tat Problem.main(tmpf73x39vh.java:52)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, (a, b) -> {\n          \
    \  if (a.getValue0() != b.getValue0()) {\n                return a.getValue0()\
    \ - b.getValue0();\n            } else {\n                return b.getValue1()\
    \ - a.getValue1();\n            }\n        });\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpuywc5qy6.java:30)\n\tat Problem.main(tmpuywc5qy6.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> list = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            int num = row.get(j);\n                if (num == x) {\n        \
    \            list.add(new Pair<>(i, j));\n                }\n            }\n \
    \       }\n        Collections.sort(list, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n\
    \        for (int i = 0; i < list.size(); i++) {\n            Pair<Integer, Integer>\
    \ pair = list.get(i);\n            if (i > 0 && pair.getValue0().equals(list.get(i\
    \ - 1).getValue0())) {\n                list.remove(i);\n                list.add(i\
    \ - 1, pair);\n            }\n        }\n        return list;\n}\n    public static\
    \ void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpnb4o9pq2.java:32)\n\tat Problem.main(tmpnb4o9pq2.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Write your code here\n        ArrayList<Pair<Integer,\
    \ Integer>> result = new ArrayList<>();\n        int r = 0;\n        for (ArrayList<Integer>\
    \ row : lst) {\n            for (int c = 0; c < row.size(); c++) {\n         \
    \       if (row.get(c) == x) {\n                    result.add(new Pair<>(r, c));\n\
    \                }\n            }\n            r++;\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2)\
    \ {\n                int cmp = o1.getValue0().compareTo(o2.getValue0());\n   \
    \             if (cmp == 0) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n\
    \                }\n                return cmp;\n            }\n        });\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp165ssptq.java:32)\n\tat Problem.main(tmp165ssptq.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n \
    \                   ret.add(new Pair<>(i, j));\n            }\n        }\n   \
    \     Collections.sort(ret, new Comparator<Pair<Integer, Integer>>() {\n     \
    \       @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer,\
    \ Integer> p2) {\n                if (p1.getValue0() > p2.getValue0()) return\
    \ 1;\n                if (p1.getValue0() < p2.getValue0()) return -1;\n      \
    \          if (p1.getValue1() > p2.getValue1()) return -1;\n                if\
    \ (p1.getValue1() < p2.getValue1()) return 1;\n                return 0;\n   \
    \         }\n        });\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpyhlmiqbc.java:30)\n\tat Problem.main(tmpyhlmiqbc.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    ret.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        ret.sort((p1, p2)\
    \ -> {\n            if (p1.getValue0() != p2.getValue0()) {\n                return\
    \ p1.getValue0() - p2.getValue0();\n            }\n            return p2.getValue1()\
    \ - p1.getValue1();\n        });\n        return ret;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp0eedvagp.java:31)\n\tat Problem.main(tmp0eedvagp.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        int row = 0;\n        ArrayList<Pair<Integer, Integer>>\
    \ list = new ArrayList<>();\n        for (ArrayList<Integer> rowLst : lst) {\n\
    \            int col = 0;\n            for (Integer i : rowLst) {\n          \
    \      if (i == x) {\n                    list.add(new Pair<>(row, col));\n  \
    \              }\n                col++;\n            }\n            row++;\n\
    \        }\n        Collections.sort(list, new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0() == o2.getValue0())\
    \ {\n                    return o2.getValue1() - o1.getValue1();\n           \
    \     }\n                return o1.getValue0() - o2.getValue0();\n           \
    \ }\n        });\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpupq7e1oq.java:32)\n\tat Problem.main(tmpupq7e1oq.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        int n = lst.size();\n        for (int i = 0; i < n; i++) {\n        \
    \    int index = Collections.binarySearch(lst.get(i), x);\n            if (index\
    \ >= 0)\n                result.add(new Pair<>(i, index));\n        }\n      \
    \  Collections.sort(result, (a, b) -> (a.getValue0() - b.getValue0()));\n    \
    \    for (int i = 0; i < n; i++) {\n            if (result.get(i).getValue0()\
    \ == i) {\n                Collections.sort(result.subList(i, result.size()),\
    \ (a, b) -> (b.getValue1() - a.getValue1()));\n                break;\n      \
    \      }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp_3rko170.java:31)\n\tat Problem.main(tmp_3rko170.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write code here\n        ArrayList<Pair<Integer, Integer>>\
    \ result = new ArrayList<>();\n        int row_index = 0;\n        for (ArrayList<Integer>\
    \ row : lst) {\n            int col_index = 0;\n            for (Integer col :\
    \ row) {\n                if (col == x) {\n                    result.add(new\
    \ Pair<>(row_index, col_index));\n                }\n                col_index++;\n\
    \            }\n            row_index++;\n        }\n        result.sort((Pair<Integer,\
    \ Integer> first, Pair<Integer, Integer> second) -> {\n            if (first.getValue0().equals(second.getValue0()))\
    \ {\n                return second.getValue1().compareTo(first.getValue1());\n\
    \            }\n            return first.getValue0().compareTo(second.getValue0());\n\
    \        });\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpyfzasrgx.java:33)\n\tat Problem.main(tmpyfzasrgx.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ans = new ArrayList<>();\n\
    \        int y = 0;\n        for (ArrayList<Integer> row : lst) {\n          \
    \  for (int i = 0; i < row.size(); i++) {\n                if (row.get(i) == x)\
    \ {\n                    ans.add(new Pair<>(y, i));\n                }\n     \
    \       }\n            y++;\n        }\n        Collections.sort(ans, (a, b) ->\
    \ {\n            if (a.getValue0() == b.getValue0()) {\n                return\
    \ b.getValue1() - a.getValue1();\n            }\n            return a.getValue0()\
    \ - b.getValue0();\n        });\n        return ans;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpvcp4rqpz.java:31)\n\tat Problem.main(tmpvcp4rqpz.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // There are no given constraints on the problem size.\n\
    \        // A given problem can be extremely huge, thus, it is\n        // required\
    \ to reduce problem size, before solving it.\n        // In order to reduce the\
    \ problem size, I treat the data\n        // as an undirected graph, and apply\
    \ the Idea\n        // of map and reduce.\n        // Because, it is possible\
    \ to reduce a problem size\n        // of a graph by its topology, while preserving\
    \ the problem\n        // correct answer.\n        // Also, by using the Idea\
    \ of Map and Reduce, I can\n        // parallelize the problem, and speed up the\
    \ solution.\n        // The Idea is to divide the graph into a number of sub graphs,\n\
    \        // each having a limited size, and do this for each subgraph.\n     \
    \   // For example, for a large graph, I can divide it into\n        // subgraphs\
    \ of size 100, and solve each of them separately.\n        // For each subgraph\
    \ I can use a different processor.\n        // Thus, the Idea of Map and Reduce,\
    \ can be used to solve\n        // large problems, and apply parallel computing.\n\
    \        // In the following, I will use hashmap to reduce the problem size.\n\
    \        // Note that it is possible to do this by creating a custom\n       \
    \ // map reduce function, that can group the data by x and\n        // reduce\
    \ the problem size to 1 dimension, thus, preserving\n        // the correct answer.\n\
    \        // Also, I can use a multimap, to solve the problem.\n        // The\
    \ same idea of map and reduce can be applied.\n        // Note that, it is possible\
    \ to use a separate class for this,\n        // and make it a generic class.\n\
    \        // This function can be used to calculate the in-degree of each\n   \
    \     // vertices of a graph, and find all the nodes that have an\n        //\
    \ in-degree of x.\n        // The same Idea can be applied to directed graphs.\n\
    \        // However, the problem must be reduced to undirected graphs.\n     \
    \   // The runtime complexity of this algorithm is O(m + n), where\n        //\
    \ m is the number of elements in the hashmap, and n is the\n        // number\
    \ of elements in the list.\n        // For example, if there are n elements, the\
    \ runtime is O(n\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpyp48vspt.java:62: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> ret = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            ArrayList<Integer> newRow = new ArrayList<>();\n\
    \            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j)\
    \ == x) {\n                    newRow.add(j);\n                }\n           \
    \ }\n            newRow.sort(Collections.reverseOrder());\n            for (int\
    \ j = 0; j < newRow.size(); j++) {\n                ret.add(new Pair<>(i, newRow.get(j)));\n\
    \            }\n        }\n        ret.sort((a, b) -> {\n            if (a.getValue0()\
    \ == b.getValue0()) {\n                return b.getValue1() - a.getValue1();\n\
    \            }\n            return a.getValue0() - b.getValue0();\n        });\n\
    \        return ret;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmppzkaf8c2.java:37)\n\tat Problem.main(tmppzkaf8c2.java:49)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // implement function here\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpirqey_dj.java:27: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            int j = 0;\n    \
    \        while (j < lst.get(i).size()) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    res.add(new Pair<>(i, j));\n                }\n\
    \                j++;\n            }\n        }\n        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmptu62amez.java:31)\n\tat Problem.main(tmptu62amez.java:42)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coordinates = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    coordinates.add(new Pair<>(i, j));\n                }\n \
    \           }\n        }\n        return coordinates;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpbnsv81h0.java:30)\n\tat Problem.main(tmpbnsv81h0.java:37)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        // Sort by row ascending,\
    \ then by column descending\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> left, Pair<Integer, Integer> right) {\n                if (left.getValue0().equals(right.getValue0()))\
    \ {\n                    return right.getValue1().compareTo(left.getValue1());\n\
    \                }\n                return left.getValue0().compareTo(right.getValue0());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpw5ij3xmx.java:31)\n\tat Problem.main(tmpw5ij3xmx.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            int start = 0;\n\
    \            while (true) {\n                int j = start + lst.get(i).subList(start,\
    \ lst.get(i).size()).indexOf(x);\n                if (j == -1) {\n           \
    \         break;\n                }\n                start = j + 1;\n        \
    \        pairs.add(new Pair<>(i, j));\n            }\n        }\n        Collections.sort(pairs,\
    \ (a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n           \
    \     return a.getValue0() - b.getValue0();\n            }\n            return\
    \ b.getValue1() - a.getValue1();\n        });\n        return pairs;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpqkwo93i4.java:35)\n\tat Problem.main(tmpqkwo93i4.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write your code here...\n        return null;\n}\n\
    \    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpklpvu070.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return new ArrayList<>();\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpklc7va25.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> points = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    points.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        points.sort((p1, p2) -> {\n            if (p1.getValue0().equals(p2.getValue0()))\
    \ {\n                return -p1.getValue1().compareTo(p2.getValue1());\n     \
    \       }\n            return p1.getValue0().compareTo(p2.getValue0());\n    \
    \    });\n        return points;\n}\n    public static void main(String[] args)\
    \ {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmplok9atad.java:30)\n\tat Problem.main(tmplok9atad.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        res.sort((p1, p2) -> {\n            int p1row = p1.getValue0();\n\
    \            int p2row = p2.getValue0();\n            int p1col = p1.getValue1();\n\
    \            int p2col = p2.getValue1();\n            if (p1row < p2row) {\n \
    \               return -1;\n            } else if (p1row > p2row) {\n        \
    \        return 1;\n            } else {\n                if (p1col > p2col) {\n\
    \                    return -1;\n                } else if (p1col < p2col) {\n\
    \                    return 1;\n                } else {\n                   \
    \ return 0;\n                }\n            }\n        });\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp1bw7lbhk.java:30)\n\tat Problem.main(tmp1bw7lbhk.java:56)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        int k = 0;\n        for (int i = 0; i < lst.size(); i++) {\n        \
    \    for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    res.add(new Pair<>(i, j));\n                }\n\
    \            }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp6extjzpo.java:31)\n\tat Problem.main(tmp6extjzpo.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return o2.getValue1().compareTo(o1.getValue1());\n  \
    \              }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpii0ciuob.java:30)\n\tat Problem.main(tmpii0ciuob.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpfl7u7cp9.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code here!\n        // Tuples are immutable,\
    \ you can use the following syntax\n        // to create one:\n        // Pair<Integer,\
    \ Integer> pair = new Pair<>(0, 0);\n        // pair.setAt0(1);\n        // pair.setAt1(2);\n\
    \        // ArrayList<Pair<Integer, Integer>> arr = new ArrayList<>();\n     \
    \   // arr.add(pair);\n        // return arr;\n        ArrayList<Pair<Integer,\
    \ Integer>> array = new ArrayList<>();\n        if (lst.size() == 0) return array;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    Pair<Integer, Integer> pair = new Pair<>(i, j);\n       \
    \             array.add(pair);\n                }\n            }\n        }\n\
    \        Collections.sort(array, new PairComparator());\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3f7fhll.java:45: error: cannot find symbol\n        Collections.sort(array,\
    \ new PairComparator());\n                                    ^\n  symbol:   class\
    \ PairComparator\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        ArrayList<Pair<Integer, Integer>>\
    \ res = new ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new\
    \ Pair<Integer, Integer>(i, j));\n                }\n            }\n        }\n\
    \        Collections.sort(res, new Comparator<Pair<Integer, Integer>>() {\n  \
    \          @Override\n            public int compare(Pair<Integer, Integer> p1,\
    \ Pair<Integer, Integer> p2) {\n                if (p1.getValue0() < p2.getValue0())\
    \ {\n                    return -1;\n                } else if (p1.getValue0()\
    \ > p2.getValue0()) {\n                    return 1;\n                } else {\n\
    \                    if (p1.getValue1() > p2.getValue1()) {\n                \
    \        return -1;\n                    } else if (p1.getValue1() < p2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpa8ea7yhq.java:33)\n\tat Problem.main(tmpa8ea7yhq.java:58)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        if (lst.size() == 0) {\n            return result;\n        }\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer> row\
    \ = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n        \
    \        if (row.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        result.sort((p1,\
    \ p2) -> {\n            int row1 = p1.getValue0();\n            int row2 = p2.getValue0();\n\
    \            if (row1 != row2) {\n                return row1 - row2;\n      \
    \      }\n            int col1 = p1.getValue1();\n            int col2 = p2.getValue1();\n\
    \            return col2 - col1;\n        });\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpy53_5fkf.java:34)\n\tat Problem.main(tmpy53_5fkf.java:51)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    res.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmphuvqumit.java:31)\n\tat Problem.main(tmphuvqumit.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        Collections.sort(res, (p1, p2) -> {\n            if\
    \ (p1.getValue0() != p2.getValue0()) {\n                return p1.getValue0()\
    \ - p2.getValue0();\n            } else {\n                return p2.getValue1()\
    \ - p1.getValue1();\n            }\n        });\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp2ro2cdbl.java:30)\n\tat Problem.main(tmp2ro2cdbl.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return o2.getValue1().compareTo(o1.getValue1());\n  \
    \              }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpii0ciuob.java:30)\n\tat Problem.main(tmpii0ciuob.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        // sort rows\n        result.sort((Pair<Integer,\
    \ Integer> a, Pair<Integer, Integer> b) -> {\n            if (a.getValue0() <\
    \ b.getValue0()) {\n                return -1;\n            } else if (a.getValue0()\
    \ > b.getValue0()) {\n                return 1;\n            } else {\n      \
    \          if (a.getValue1() > b.getValue1()) {\n                    return -1;\n\
    \                } else if (a.getValue1() < b.getValue1()) {\n               \
    \     return 1;\n                } else {\n                    return 0;\n   \
    \             }\n            }\n        });\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpquj0sf3e.java:30)\n\tat Problem.main(tmpquj0sf3e.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> coordinates = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    coordinates.add(new Pair<>(i, j));\n                }\n \
    \           }\n        }\n        coordinates.sort((a, b) -> {\n            if\
    \ (a.getValue0() < b.getValue0()) {\n                return -1;\n            }\
    \ else if (a.getValue0() > b.getValue0()) {\n                return 1;\n     \
    \       } else {\n                if (a.getValue1() > b.getValue1()) {\n     \
    \               return -1;\n                } else if (a.getValue1() < b.getValue1())\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        return\
    \ coordinates;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpn2sfrqa7.java:30)\n\tat Problem.main(tmpn2sfrqa7.java:52)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write your code here\n        ArrayList<Pair<Integer,\
    \ Integer>> result = new ArrayList<>();\n        int i = 0;\n        for (ArrayList<Integer>\
    \ row : lst) {\n            int j = 0;\n            for (Integer col : row) {\n\
    \                if (col == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n                j++;\n            }\n            i++;\n\
    \        }\n        result.sort(((o1, o2) -> {\n            int diff = o1.getValue0()\
    \ - o2.getValue0();\n            if (diff != 0) {\n                return diff;\n\
    \            }\n            else {\n                return o2.getValue1() - o1.getValue1();\n\
    \            }\n        }));\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpmsrly6et.java:33)\n\tat Problem.main(tmpmsrly6et.java:51)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(new Pair<>(i, j));\n                }\n      \
    \      }\n        }\n        result.sort((a, b) -> {\n            int res = a.getValue0().compareTo(b.getValue0());\n\
    \            if (res == 0) {\n                res = -a.getValue1().compareTo(b.getValue1());\n\
    \            }\n            return res;\n        });\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmply40efb6.java:30)\n\tat Problem.main(tmply40efb6.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // write your code here\n        return null;\n}\n  \
    \  public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmp206n5dw7.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003968
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        int n = lst.size();\n        for (int i = 0; i < n; i++) {\n        \
    \    int j = lst.get(i).size() - 1;\n            for (int k = 0; k < lst.get(i).size();\
    \ k++) {\n                if (lst.get(i).get(k) == x)\n                    res.add(new\
    \ Pair<>(i, k));\n            }\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp4wnxgb2h.java:32)\n\tat Problem.main(tmp4wnxgb2h.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ list = lst.get(i);\n            for (int j = 0; j < list.size(); j++) {\n  \
    \              if (list.get(j) == x) {\n                    result.add(new Pair<>(i,\
    \ j));\n                }\n            }\n        }\n        Comparator<Pair<Integer,\
    \ Integer>> comparator = new Comparator<Pair<Integer, Integer>>() {\n        \
    \    @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer,\
    \ Integer> o2) {\n                return (o1.getValue0() != o2.getValue0()) ?\
    \ o1.getValue0() - o2.getValue0() :\n                       (o1.getValue1() !=\
    \ o2.getValue1()) ? o2.getValue1() - o1.getValue1() : 0;\n            }\n    \
    \    };\n        Collections.sort(result, comparator);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpzpe4agoa.java:31)\n\tat Problem.main(tmpzpe4agoa.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        int n = lst.size();\n        ArrayList<Pair<Integer,\
    \ Integer>> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n\
    \            ArrayList<Integer> arr = lst.get(i);\n            for (int j = 0;\
    \ j < arr.size(); j++) {\n                if (arr.get(j) == x) {\n           \
    \         res.add(new Pair<>(i, j));\n                }\n            }\n     \
    \   }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp3c3gw6ax.java:32)\n\tat Problem.main(tmp3c3gw6ax.java:39)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> r = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer>\
    \ ll = lst.get(i);\n            for (int j = 0; j < ll.size(); j++) {\n      \
    \          int v = ll.get(j);\n                if (v == x) {\n               \
    \     r.add(new Pair<>(i, j));\n                }\n            }\n        }\n\
    \        r.sort((x1, x2) -> {\n            int d = x1.getValue0().compareTo(x2.getValue0());\n\
    \            if (d == 0) {\n                return x2.getValue1().compareTo(x1.getValue1());\n\
    \            }\n            return d;\n        });\n        return r;\n}\n   \
    \ public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmp0spzml5t.java:32)\n\tat Problem.main(tmp0spzml5t.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    res.add(new Pair<>(i, j));\n                }\n         \
    \   }\n        }\n        // \u041F\u043E \u0441\u0442\u0440\u043E\u043A\u0430\
    \u043C \u043F\u043E \u0432\u043E\u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\
    \u044E\n        res.sort((Pair<Integer, Integer> a, Pair<Integer, Integer> b)\
    \ -> {\n            if (a.getValue0() > b.getValue0()) return 1;\n           \
    \ if (a.getValue0() < b.getValue0()) return -1;\n            if (a.getValue0()\
    \ == b.getValue0()) {\n                if (a.getValue1() > b.getValue1()) return\
    \ -1;\n                if (a.getValue1() < b.getValue1()) return 1;\n        \
    \    }\n            return 0;\n        });\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpw5lnea0s.java:30)\n\tat Problem.main(tmpw5lnea0s.java:47)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // code here\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpexsqa80o.java:27: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // your code\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpvjrfsifi.java:30)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code here\n        // Iterate over the given\
    \ list of lists,\n        // and when an integer x is found,\n        // add a\
    \ tuple (row, column) to the answer.\n        // rows and columns start with 0.\n\
    \        // Sort the resulting list of tuples in the manner described above.\n\
    \        return null;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmpq8tctmie.java:35)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.main(tmphu97s26l.java:29)\nCaused by: java.lang.ClassNotFoundException:\
    \ org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 1\
    \ more\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        for (int r = 0; r < lst.size(); r++) {\n            ArrayList<Integer>\
    \ row = lst.get(r);\n            for (int c = 0; c < row.size(); c++) {\n    \
    \            if (row.get(c) == x) {\n                    result.add(new Pair<>(r,\
    \ c));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> a, Pair<Integer, Integer> b) {\n\
    \                if (a.getValue0() < b.getValue0()) {\n                    return\
    \ -1;\n                } else if (a.getValue0() > b.getValue0()) {\n         \
    \           return 1;\n                } else {\n                    if (a.getValue1()\
    \ > b.getValue1()) {\n                        return -1;\n                   \
    \ } else if (a.getValue1() < b.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(getRow((new\
    \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpsyy09yhd.java:31)\n\tat Problem.main(tmpsyy09yhd.java:56)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // getRow([\n        // [1,2,3,4,5,6],\n        // [1,2,3,4,1,6],\n\
    \        // [1,2,3,4,5,1]\n        // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5),\
    \ (2, 0)]\n        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n\
    \        int row = 0;\n        for (ArrayList<Integer> lst_row : lst) {\n    \
    \        for (int i = 0; i < lst_row.size(); i++) {\n                if (lst_row.get(i)\
    \ == x) {\n                    pairs.add(new Pair<Integer, Integer>(row, i));\n\
    \                }\n            }\n            row++;\n        }\n        // Comparator\
    \ implementation\n        Collections.sort(pairs, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                int row1 = o1.getValue0();\n\
    \                int row2 = o2.getValue0();\n                int column1 = o1.getValue1();\n\
    \                int column2 = o2.getValue1();\n                // sord by rows\
    \ in ascending order\n                if (row1 > row2) return 1;\n           \
    \     if (row1 < row2) return -1;\n                // if rows are equal\n    \
    \            // sort by columns in descending order\n                if (column1\
    \ > column2) return -1;\n                if (column1 < column2) return 1;\n  \
    \              return 0;\n            }\n        });\n        return pairs;\n\
    }\n    public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpc0fn3yfb.java:36)\n\tat Problem.main(tmpc0fn3yfb.java:62)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n\
    \        int row = 0;\n        for (ArrayList<Integer> l : lst) {\n          \
    \  int col = 0;\n            for (int val : l) {\n                if (val == x)\
    \ {\n                    result.add(new Pair<>(row, col));\n                }\n\
    \                col++;\n            }\n            row++;\n        }\n      \
    \  Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n     \
    \       @Override\n            public int compare(Pair<Integer, Integer> a, Pair<Integer,\
    \ Integer> b) {\n                if (a.getValue0().equals(b.getValue0())) {\n\
    \                    return b.getValue1().compareTo(a.getValue1());\n        \
    \        }\n                return a.getValue0().compareTo(b.getValue0());\n \
    \           }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmptc8f0vik.java:32)\n\tat Problem.main(tmptc8f0vik.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        // Your code is here ... enjoy!!!\n}\n    public static\
    \ void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp2clbbgk3.java:27: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
    \    // which is similar to matrix, however, unlike matrices,\n    // each row\
    \ may contain a different number of columns.\n    // Given lst, and integer x,\
    \ find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n   \
    \ // Also, sort coordinates of the row by columns in descending order.\n    //\
    \ Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n\
    \    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2,\
    \ 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>>\
    \ lst, int x) {\n        if (lst.size() == 0) {\n            return new ArrayList<Pair<Integer,\
    \ Integer>>();\n        }\n        ArrayList<Pair<Integer, Integer>> res = new\
    \ ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            ArrayList<Integer> row = lst.get(i);\n            for (int\
    \ j = 0; j < row.size(); j++) {\n                int elem = row.get(j);\n    \
    \            if (elem == x) {\n                    res.add(new Pair<Integer, Integer>(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(res,\
    \ (a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n           \
    \     return a.getValue0() - b.getValue0();\n            }\n            return\
    \ b.getValue1() - a.getValue1();\n        });\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
    \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
    \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
    \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
    \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
    \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
    \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
    \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
    \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
    \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
    \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n  \
    \  assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList((int)1))))), (2)).equals((new ArrayList<Pair<Integer,\
    \ Integer>>(Arrays.asList()))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
    \ ArrayList<Integer>(Arrays.asList()), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)),\
    \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))),\
    \ (3)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer,\
    \ Integer>)Pair.with(2, 2))))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.getRow(tmpdmnk___s.java:35)\n\tat Problem.main(tmpdmnk___s.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660003977
