language: java
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++)\n     \
    \       s += i + \" \";\n        return s.trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return Arrays.stream(IntStream.range(0, n + 1).toArray()).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString().trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010933
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // YOUR CODE HERE\n        String[] str = new String[n+1];\n \
    \       for(int i=0;i<=n;i++){\n            str[i] = Integer.toString(i);\n  \
    \      }\n        String ret = String.join(\" \",str);\n        return ret;\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String numbers = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            numbers += \" \" + i;\n        }\n        return numbers.substring(1);\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n\treturn IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return Stream.iterate(0, i -> i + 1).limit(n + 1).map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqfjetrly.java:15: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        return Stream.iterate(0, i -> i + 1).limit(n + 1).map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                                             ^\n    (argument\
    \ mismatch; invalid method reference\n      reference to toString is ambiguous\n\
    \        both method toString(int) in Integer and method toString() in Integer\
    \ match)\n  where R,T are type-variables:\n    R extends Object declared in method\
    \ <R>map(Function<? super T,? extends R>)\n    T extends Object declared in interface\
    \ Stream\n1 error\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i + \" \");\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n == 0) return \"0\";\n        StringBuilder res = new StringBuilder();\n\
    \        int i = 0;\n        while (i <= n) {\n            res.append(i);\n  \
    \          res.append(\" \");\n            i++;\n        }\n        return res.toString().trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        throw new RuntimeException(\"TODO: Implement me!\");\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: TODO: Implement\
    \ me!\n\tat Problem.stringSequence(tmpulxbz94t.java:15)\n\tat Problem.main(tmpulxbz94t.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(x -> Integer.toString(x)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += String.valueOf(i) + \" \";\n        }\n        return s.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        // WRITE CODE HERE\n        for\
    \ (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n  \
    \      return result.trim();\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) sb.append(\"\
    \ \");\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(i -> i.toString()).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rc3m25l.java:15: error: int cannot be dereferenced\n        return\
    \ IntStream.rangeClosed(0, n).mapToObj(i -> i.toString()).collect(Collectors.joining(\"\
    \ \"));\n                                                          ^\n/tmp/tmp3rc3m25l.java:15:\
    \ error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return IntStream.rangeClosed(0, n).mapToObj(i -> i.toString()).collect(Collectors.joining(\"\
    \ \"));\n                                                                    \
    \  ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,? super Object>,BiConsumer<R#1,R#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) R#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Stream.<R#2,A>collect(Collector<?\
    \ super Object,A,R#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String> cannot\
    \ be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A are type-variables:\n\
    \    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += String.valueOf(i) + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String ans = \"\";\n        for (int i = 0; i <= n; i++) {\n \
    \           ans += i + \" \";\n        }\n        return ans.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = 0; i <= n; i++) {\n            builder.append(i);\n            if (i !=\
    \ n) {\n                builder.append(\" \");\n            }\n        }\n   \
    \     return builder.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String out = \"\";\n        for (int i = 0; i <= n; i++) {\n \
    \           out += i + \" \";\n        }\n        return out.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += \" \" + i;\n        }\n        return s.substring(1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder res = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            res.append(i);\n            res.append(\" \"\
    );\n        }\n        return res.toString().trim();\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n  \
    \  assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(x -> String.valueOf(x)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(String.valueOf(i));\n            if\
    \ (i != n) {\n                sb.append(\" \");\n            }\n        }\n  \
    \      return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        throw new UnsupportedOperationException(\"Problem.stringSequence\"\
    );\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem.stringSequence\n\
    \tat Problem.stringSequence(tmpo9fvuyuj.java:15)\n\tat Problem.main(tmpo9fvuyuj.java:18)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String ans = \"\";\n        int i = 0;\n        while (i < n)\
    \ {\n            ans += i + \" \";\n            i++;\n        }\n        ans +=\
    \ n;\n        return ans;\n}\n    public static void main(String[] args) {\n \
    \   assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // YOUR CODE HERE\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder stringSequenceBuilder = new StringBuilder();\n \
    \       for (int i = 0; i <= n; i++) {\n            stringSequenceBuilder.append(String.valueOf(i));\n\
    \            if (i != n) {\n                stringSequenceBuilder.append(\" \"\
    );\n            }\n        }\n        return stringSequenceBuilder.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n == 0) return \"0\";\n        int i = 0;\n        String\
    \ output = \"\";\n        while (i <= n) {\n            output += i + \" \";\n\
    \            i++;\n        }\n        return output.trim();\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n\
    \    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"0 1 2 3 4 5\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9zcd5fj.java:18)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(i -> Integer.toString(i)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i + \" \");\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += \" \" + i;\n        }\n        return s.substring(1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String x = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         x += String.valueOf(i) + \" \";\n        }\n        return x.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Feel free to modify the return statement below\n        return\
    \ \"\";\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2m_g201.java:19)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n == 0) return \"0\";\n        return stringSequence(n - 1)\
    \ + \" \" + n;\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += \" \" + Integer.toString(i);\n        }\n        return\
    \ result.substring(1);\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) sb.append(\"\
    \ \");\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return null;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmph8ep3cwk.java:18)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        String res = \"\";\n        for (int i = 0; i <= n;\
    \ i++) {\n            res += i + \" \";\n        }\n        return res.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Put your code here\n        return \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n\
    \    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprz_ktq2p.java:19)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Your code here\n        return null;\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n\
    \    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmphrqu5vqy.java:19)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = 0; i <= n; i++) {\n            builder.append(i + \" \");\n        }\n \
    \       builder.deleteCharAt(builder.length() - 1);\n        return builder.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n      // Define n_range to be the range from 0 upto n inclusive.\n   \
    \   List<Integer> n_range = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \      // Map all the integers in n_range to strings.\n      return String.join(\"\
    \ \", n_range.stream().map(Object::toString).collect(Collectors.toList()));\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        int i = 0;\n        while (i <\
    \ n) {\n            result += i + \" \";\n            i++;\n        }\n      \
    \  return result + n;\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder result = new StringBuilder();\n        for (int\
    \ i = 0; i <= n; i++) {\n            result.append(i + \" \");\n        }\n  \
    \      return result.toString().trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += i + \" \";\n        }\n        return s.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder str = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            str.append(i + \" \");\n        }\n        return\
    \ str.toString().trim();\n}\n    public static void main(String[] args) {\n  \
    \  assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n == 0) {\n            return \"0\";\n        }\n        String\
    \ seq = stringSequence(n - 1);\n        return seq + \" \" + n;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i + \" \");\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // YOUR CODE HERE\n        return \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n\
    \    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8te4lnn6.java:19)\n"
  stdout: ''
  timestamp: 1660010938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder str = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            str.append(i);\n            if (i != n) {\n \
    \               str.append(\" \");\n            }\n        }\n        return str.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // ADD CODE HERE\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n         \
    \   if (i != n) {\n                sb.append(\" \");\n            }\n        }\n\
    \        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n == 0) {\n            return \"0\";\n        } else {\n \
    \           return stringSequence(n - 1) + \" \" + n;\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String res = \"\";\n        for (int i = 0; i <= n; i++) {\n \
    \           res += String.valueOf(i) + \" \";\n        }\n        return res.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // YOUR CODE HERE\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.append(i + \" \");\n \
    \       }\n        return sb.toString().trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(0);\n\
    \        for (int i = 1; i <= n; i++) {\n            sb.append(\" \");\n     \
    \       sb.append(i);\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String[] numbers = new String[n + 1];\n        for (int i = 0;\
    \ i <= n; i++) {\n            numbers[i] = String.valueOf(i);\n        }\n   \
    \     return String.join(\" \", numbers);\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder res = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            res.append(i);\n            res.append(\" \"\
    );\n        }\n        return res.toString().trim();\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n  \
    \  assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return n < 0 ? \"\" : (stringSequence(n - 1) + \" \" + n).trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        if (n > 0) {\n            result\
    \ = stringSequence(n - 1) + \" \" + n;\n        } else {\n            result =\
    \ \"0\";\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String results = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            results += String.valueOf(i) + \" \";\n        }\n        return\
    \ results.trim();\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += i + \" \";\n        }\n        return s.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        // your code goes here\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcs09b08v.java:20)\n"
  stdout: ''
  timestamp: 1660010939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Implement this placeholder.\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_qy7seo5.java:19)\n"
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        String result = sb.toString();\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010939
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        if (n == 0) {\n            result\
    \ = \"0\";\n        } else {\n            for (int i = 0; i <= n; i++) {\n   \
    \             result += Integer.toString(i) + \" \";\n            }\n        }\n\
    \        return result.trim();\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        int[] nums = IntStream.rangeClosed(0, n).toArray();\n        return\
    \ Arrays.stream(nums).mapToObj(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010939
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (int\
    \ i = 0; i <= n; i++) {\n            joiner.add(Integer.toString(i));\n      \
    \  }\n        return joiner.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010939
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // YOUR CODE HERE\n        return \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n\
    \    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8te4lnn6.java:19)\n"
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // REPLACE THE CODE BELOW WITH YOUR stringSequence METHOD\n  \
    \      return null;\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmpcqljxzrm.java:19)\n"
  stdout: ''
  timestamp: 1660010939
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += \" \" + i;\n        }\n        return result.substring(1);\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010939
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return null;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmph8ep3cwk.java:18)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += String.valueOf(i) + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        List<String> nums = new ArrayList<>();\n        for (int i = 0;\
    \ i <= n; i++) {\n            nums.add(Integer.toString(i));\n        }\n    \
    \    return String.join(\" \", nums);\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010940
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.append(i + \" \");\n \
    \       }\n        return sb.toString().trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative!\");\n        }\n        return IntStream.rangeClosed(0,\
    \ n).mapToObj(i -> Integer.toString(i)).collect(Collectors.joining(\" \"));\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n\t// BEGIN SOLUTION\n\treturn IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n\t// END SOLUTION\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(String.valueOf(i));\n            if\
    \ (i != n) {\n                sb.append(\" \");\n            }\n        }\n  \
    \      return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n\tString output=\"\";\n\tfor(int i=0;i<=n;i++){\n\t    output+=i+\" \"\
    ;\n\t}\n\toutput=output.substring(0,output.length()-1);\n\treturn output;\n}\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return null;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmph8ep3cwk.java:18)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        throw new RuntimeException(\"Not implemented yet.\");\n}\n   \
    \ public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\
    \ yet.\n\tat Problem.stringSequence(tmphbc8ojzn.java:15)\n\tat Problem.main(tmphbc8ojzn.java:18)\n"
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) sb.append(\"\
    \ \");\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        throw new RuntimeException(\"Function not implemented\");\n}\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Function not implemented\n\
    \tat Problem.stringSequence(tmp1ersksd0.java:15)\n\tat Problem.main(tmp1ersksd0.java:18)\n"
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(String.valueOf(i));\n            if\
    \ (i != n) sb.append(\" \");\n        }\n        return sb.toString();\n}\n  \
    \  public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String[] arr = new String[n + 1];\n        for (int i = 0; i <=\
    \ n; i++) {\n            arr[i] = Integer.toString(i);\n        }\n        return\
    \ String.join(\" \", arr);\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010940
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuffer result = new StringBuffer();\n        for (int i\
    \ = 0; i <= n; i++) {\n            result.append(Integer.toString(i) + \" \");\n\
    \        }\n        return result.toString().trim();\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n  \
    \  assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString().trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010933
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        if (n == 0) return \"0\";\n        else return stringSequence(n\
    \ - 1) + \" \" + n;\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder result = new StringBuilder();\n        for (int\
    \ i = 0; i <= n; i++) {\n            result.append(i);\n            if (i != n)\
    \ {\n                result.append(\" \");\n            }\n        }\n       \
    \ return result.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += i + \" \";\n        }\n        return s.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Write your code here\n        StringBuilder str = new StringBuilder();\n\
    \        str.append(0);\n        for(int i = 1; i<=n; i++){\n            str.append(\"\
    \ \" + i);\n        }\n        return str.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n  \
    \  assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i + \" \");\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(i -> Integer.toString(i)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return null;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmph8ep3cwk.java:18)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"0\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzp4k4h7.java:19)\n"
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0;\
    \ i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n \
    \       }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xyij_6x.java:18)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String string = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            string += i + \" \";\n        }\n        return string.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        //\n        // YOUR CODE HERE\n        //\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n\
    \    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpre_tizwp.java:18: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010940
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Don't forget to return the result!\n        // Replace the\
    \ following line with your solution.\n        return \"\";\n}\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0)).equals((\"0\")));\n\
    \    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fdq6k_o.java:20)\n"
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String res = \"\";\n        for (int i = 0; i <= n; i++) {\n \
    \           res += i + \" \";\n        }\n        return res.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // BEGIN SOLUTION\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n        // END SOLUTION\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringJoiner sj = new StringJoiner(\" \");\n        for (int i\
    \ = 0; i <= n; i++) {\n            sj.add(Integer.toString(i));\n        }\n \
    \       return sj.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += String.valueOf(i) + \" \";\n        }\n        return s.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += i + \" \";\n        }\n        return s.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n      // TODO: Implement this function\n      return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmplu0v12jp.java:19)\n"
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n\tString s = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t    s += i + \"\
    \ \";\n\t}\n\treturn s.trim();\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) sb.append(\"\
    \ \");\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        throw new UnsupportedOperationException(\"Problem method stringSequence(int\
    \ n) not implemented.\");\n}\n    public static void main(String[] args) {\n \
    \   assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem\
    \ method stringSequence(int n) not implemented.\n\tat Problem.stringSequence(tmp7bjzywkk.java:15)\n\
    \tat Problem.main(tmp7bjzywkk.java:18)\n"
  stdout: ''
  timestamp: 1660010942
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i + \" \");\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String str = \"\";\n        for (int i = 0; i <= n; i++) {\n \
    \           str += Integer.toString(i) + \" \";\n        }\n        return str.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010942
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String res = \"\";\n        for (int i = 0; i <= n; i++) {\n \
    \           res += i + \" \";\n        }\n        return res.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010941
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n  \
    \              sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        throw new UnsupportedOperationException(\"Waiting to be implemented.\"\
    );\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Waiting\
    \ to be implemented.\n\tat Problem.stringSequence(tmpsg92av3_.java:15)\n\tat Problem.main(tmpsg92av3_.java:18)\n"
  stdout: ''
  timestamp: 1660010942
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // Replace with your implementation.\n        return \"\";\n}\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwp5h6h48.java:19)\n"
  stdout: ''
  timestamp: 1660010942
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        // return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n    \
    \    return sb.toString().trim();\n}\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010942
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) sb.append(\"\
    \ \");\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return Stream.iterate(0, i -> i+1).limit(n+1).map(x -> Integer.toString(x)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010942
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String ret = \"\";\n        for (int i = 0; i <= n; i++) {\n \
    \           ret += i + \" \";\n        }\n        return ret.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010942
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return Arrays.stream(IntStream.range(0, n + 1).toArray()).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010942
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return null;\n}\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0)).equals((\"0\")));\n    assert(stringSequence((3)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"0 1 2 3 4 5 6 7 8 9 10\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(int)\"\
    \ is null\n\tat Problem.main(tmph8ep3cwk.java:18)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += i + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += i + \" \";\n        }\n        return s.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010938
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n\
    \            result += String.valueOf(i) + \" \";\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n   \
    \         s += \" \" + i;\n        }\n        return s.substring(1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n      /* return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive. */\n      if (n == 0) {\n        return \"0\";\n      }\n\
    \      String sequence = \"\";\n      for (int i = 0; i <= n; i++) {\n       \
    \ sequence += Integer.toString(i) + \" \";\n      }\n      return sequence.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010942
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    //\
    \ >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int\
    \ n) {\n        return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(stringSequence((0)).equals((\"\
    0\")));\n    assert(stringSequence((3)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010934
