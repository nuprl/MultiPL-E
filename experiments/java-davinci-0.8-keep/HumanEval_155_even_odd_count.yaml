completions:
- '        return Pair.with(1, 1);'
- "        int even = 0;\n        int odd = 0;\n        if (num < 0) {\n         \
  \   num = -num;\n        }\n        while (num > 0) {\n            int digit = num\
  \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n          \
  \  } else {\n                odd++;\n            }\n            num /= 10;\n   \
  \     }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        if (num == 0) {\n        \
  \    even++;\n        }\n        if (num < 0) {\n            num = num * -1;\n \
  \       }\n        while (num > 0) {\n            int digit = num % 10;\n      \
  \      if (digit % 2 == 0) {\n                even++;\n            } else {\n  \
  \              odd++;\n            }\n            num = num / 10;\n        }\n \
  \       return new Pair<Integer, Integer>(even, odd);"
- "        // TODO: write your code here\n        return null;"
- '        return new Pair<>(0, 0);'
- "        int even=0, odd=0;\n        while(num!=0){\n            if((num%10)%2==0)\
  \ even++;\n            else odd++;\n            num=num/10;\n        }\n       \
  \ return new Pair<Integer, Integer>(even, odd);"
- "        // Your code goes here\n        int temp = num;\n        int even = 0;\n\
  \        int odd = 0;\n        while(temp != 0){\n            int digit = temp %\
  \ 10;\n            if(digit % 2 == 0){\n                even++;\n            }\n\
  \            else{\n                odd++;\n            }\n            temp /= 10;\n\
  \        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        // TODO: Return a tuple with the count of even digits and odd digits respectively\n\
  \        return null;"
- "        // Your code here\n        return null;"
- "        int even = 0;\n        int odd = 0;\n        String s = Integer.toString(num);\n\
  \        int temp;\n        for (int i = 0; i < s.length(); i++) {\n           \
  \ temp = Integer.parseInt(Character.toString(s.charAt(i)));\n            if (temp\
  \ % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even++;\n            } else {\n                odd++;\n            }\n     \
  \       num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return new Pair<Integer, Integer>(1, 2);'
- "        int even_count = 0;\n        int odd_count = 0;\n        for (char c :\
  \ (\"\" + num).toCharArray()) {\n            int digit = c - '0';\n            if\
  \ (digit % 2 == 0) {\n                even_count++;\n            } else {\n    \
  \            odd_count++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(even_count, odd_count);"
- "        int even = 0;\n        int odd = 0;\n        boolean negative = false;\n\
  \        if (num < 0) {\n            negative = true;\n            num = -num;\n\
  \        }\n        if (num == 0) {\n            even++;\n        }\n        while\
  \ (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0)\
  \ {\n                even++;\n            } else {\n                odd++;\n   \
  \         }\n            num /= 10;\n        }\n        if (negative) {\n      \
  \      odd++;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int e = 0, o = 0;\n        while (num != 0) {\n            int r = num\
  \ % 10;\n            if (r % 2 == 0) e++;\n            else o++;\n            num\
  \ /= 10;\n        }\n        return new Pair<Integer, Integer>(e, o);"
- '        return null;'
- "        int[] count = new int[2];\n        while (num != 0) {\n            if (num\
  \ % 2 == 0) {\n                count[0]++;\n            } else {\n             \
  \   count[1]++;\n            }\n            num /= 10;\n        }\n        return\
  \ new Pair<Integer, Integer>(count[0], count[1]);"
- '        return null;'
- "        int even = 0;\n        int odd = 0;\n        for (int i = 0; i < String.valueOf(num).length();\
  \ i++) {\n            int digit = Integer.parseInt(String.valueOf(String.valueOf(num).charAt(i)));\n\
  \            if (digit % 2 == 0) {\n                even++;\n            } else\
  \ {\n                odd++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(even, odd);"
- "        // fill your code here\n        return null;"
- '        return new Pair<>(1, 1);'
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even++;\n            } else {\n                odd++;\n            }\n     \
  \       num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return new Pair<Integer, Integer>(0, 0);'
- "        int evenCount = 0;\n        int oddCount = 0;\n        while (num != 0)\
  \ {\n            int lastDigit = num % 10;\n            if (lastDigit % 2 == 0)\
  \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
  \            }\n            num /= 10;\n        }\n        return new Pair<Integer,\
  \ Integer>(evenCount, oddCount);"
- "        if (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n\
  \        }\n        int even = 0;\n        int odd = 0;\n        if (num < 0) {\n\
  \            num = -num;\n        }\n        while (num > 0) {\n            int\
  \ ld = num % 10;\n            if (ld % 2 == 0) {\n                even++;\n    \
  \        } else {\n                odd++;\n            }\n            num /= 10;\n\
  \        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return new Pair<Integer, Integer>(0, 0);'
- "        String num_str = String.valueOf(num);\n        int even_cnt = 0;\n    \
  \    int odd_cnt = 0;\n        for (int i = 0; i < num_str.length(); i++) {\n  \
  \          int digit = Integer.parseInt(String.valueOf(num_str.charAt(i)));\n  \
  \          if (digit % 2 == 0) {\n                even_cnt++;\n            } else\
  \ {\n                odd_cnt++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(even_cnt, odd_cnt);"
- "        // We use an array of size 10 because there are 10 digits\n        int[]\
  \ even = new int[10];\n        int[] odd = new int[10];\n        while (num != 0)\
  \ {\n            if (num % 2 == 0) {\n                // the digit is even\n   \
  \             even[Math.abs(num % 10)]++;\n            } else {\n              \
  \  // the digit is odd\n                odd[Math.abs(num % 10)]++;\n           \
  \ }\n            num /= 10;\n        }\n        // we need to get the sum of each\
  \ array\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int\
  \ i = 0; i < 10; i++) {\n            evenCount += even[i];\n            oddCount\
  \ += odd[i];\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);"
- "        // Add your code here\n        return null;"
- "        Pair<Integer, Integer> result = new Pair<Integer, Integer>(0, 0);\n   \
  \     List<Integer> digits = Problem.intToDigits(num);\n        for (int digit :\
  \ digits) {\n            if (digit % 2 == 0) {\n                result = result.setAt0(result.getValue0()\
  \ + 1);\n            } else {\n                result = result.setAt1(result.getValue1()\
  \ + 1);\n            }\n        }\n        return result;"
- "        var even = 0;\n        var odd = 0;\n        while (num != 0) {\n     \
  \       var digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even++;\n            } else {\n                odd++;\n            }\n     \
  \       num /= 10;\n        }\n        return new Pair<>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even += 1;\n            } else {\n                odd += 1;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- '        // your code here'
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even++;\n            } else {\n                odd++;\n            }\n     \
  \       num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int evenCount = 0;\n        int oddCount = 0;\n        int[] arr = {evenCount,\
  \ oddCount};\n        int i = 0;\n        while (num != 0) {\n            int digit\
  \ = num % 10;\n            if (digit % 2 == 0) {\n                arr[0]++;\n  \
  \          } else {\n                arr[1]++;\n            }\n            num /=\
  \ 10;\n        }\n        return new Pair<Integer, Integer>(arr[0], arr[1]);"
- "        // Code goes here.\n        Pair<Integer, Integer> result = new Pair<Integer,\
  \ Integer>(0, 0);\n        String s = Integer.toString(num);\n        for (int i\
  \ = 0; i < s.length(); i++) {\n            if (Character.getNumericValue(s.charAt(i))\
  \ % 2 == 0) {\n                result = result.setAt0(result.getValue0() + 1);\n\
  \            } else {\n                result = result.setAt1(result.getValue1()\
  \ + 1);\n            }\n        }\n        return result;"
- '        return null;'
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even += 1;\n            } else {\n                odd += 1;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        // Write your code here...\n        int temp = num;\n        int evenCount\
  \ = 0;\n        int oddCount = 0;\n        if (num < 0) {\n            temp = temp\
  \ * -1;\n        }\n        while (temp != 0) {\n            int a = temp % 10;\n\
  \            if (a % 2 == 0) {\n                evenCount++;\n            } else\
  \ {\n                oddCount++;\n            }\n            temp = temp / 10;\n\
  \        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);"
- '        throw new UnsupportedOperationException("TODO: implement");'
- "        int evenCount = 0;\n        int oddCount = 0;\n        while (num != 0)\
  \ {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n    \
  \            evenCount++;\n            } else {\n                oddCount++;\n \
  \           }\n            num /= 10;\n        }\n        return new Pair<Integer,\
  \ Integer>(evenCount, oddCount);"
- '        return Pair.with(0, 0);'
- '        return new Pair<>(0, 0);'
- "        // put your code here.\n        String s = String.valueOf(num);\n     \
  \   int cnt = 0;\n        int cnt1 = 0;\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (s.charAt(i) % 2 == 0) {\n                cnt++;\n    \
  \        } else {\n                cnt1++;\n            }\n        }\n        return\
  \ new Pair<Integer, Integer>(cnt, cnt1);"
- "      int evenCount = 0;\n      int oddCount = 0;\n      String intString = String.valueOf(num);\n\
  \      String[] digits = intString.split(\"\");\n      for (String digit : digits)\
  \ {\n        if (digit.equals(\"-\")) continue;\n        int intDigit = Integer.parseInt(digit);\n\
  \        if (intDigit % 2 == 0) {\n          evenCount += 1;\n        } else {\n\
  \          oddCount += 1;\n        }\n      }\n      return new Pair<Integer, Integer>(evenCount,\
  \ oddCount);"
- '        return null;'
- "        // return new Pair<>(0, 0);\n        int even = 0;\n        int odd = 0;\n\
  \        while (num != 0) {\n            int digit = num % 10;\n            if (digit\
  \ % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n            num /= 10;\n        }\n        return new Pair<>(even,\
  \ odd);"
- "        // TODO: Implement solution here\n        return null;"
- "        int e = 0, o = 0;\n        while (num != 0) {\n            int d = num\
  \ % 10;\n            if (d % 2 == 0) e++;\n            else o++;\n            num\
  \ /= 10;\n        }\n        return new Pair<Integer, Integer>(e, o);"
- "        // Implement the logic here\n        int evens = 0;\n        int odds =\
  \ 0;\n        while (num != 0) {\n            int lastDigit = num % 10;\n      \
  \      if (lastDigit % 2 == 0) {\n                evens++;\n            } else {\n\
  \                odds++;\n            }\n            num /= 10;\n        }\n   \
  \     return new Pair<Integer, Integer>(evens, odds);"
- "        return new Pair<Integer, Integer>(\n            1, 2\n        );"
- '        return null;'
- "        int even = 0;\n        int odd = 0;\n        String numString = Integer.toString(num);\n\
  \        for (int i = 0; i < numString.length(); i++) {\n            if (numString.charAt(i)\
  \ % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        // YOUR CODE HERE\n        // throw new Exception(\"Not implemented\");\n\
  \        int evenCount = 0;\n        int oddCount = 0;\n        do {\n         \
  \   int lastDigit = num % 10;\n            if (lastDigit % 2 == 0) {\n         \
  \       evenCount++;\n            } else {\n                oddCount++;\n      \
  \      }\n            num /= 10;\n        } while (num != 0);\n        return new\
  \ Pair<Integer, Integer>(evenCount, oddCount);"
- '        return new Pair<Integer, Integer>(1, 1);'
- '        return null;'
- "        // TODO\n        int evenCount = 0;\n        int oddCount = 0;\n      \
  \  String strNum = String.valueOf(num);\n        for (int i = 0; i < strNum.length();\
  \ i++) {\n            int numTest = Integer.parseInt(strNum.substring(i, i + 1));\n\
  \            if (numTest % 2 == 0) {\n                evenCount++;\n           \
  \ } else {\n                oddCount++;\n            }\n        }\n        return\
  \ new Pair<Integer, Integer>(evenCount, oddCount);"
- "        // IMPLEMENT THIS METHOD\n        int odd = 0;\n        int even = 0;\n\
  \        String stringNum = String.valueOf(num);\n        for (int i = 0; i < stringNum.length();\
  \ i++) {\n            if (Character.getNumericValue(stringNum.charAt(i)) % 2 ==\
  \ 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        String t = String.valueOf(num);\n        int evenCount = 0;\n        int\
  \ oddCount = 0;\n        int temp = 0;\n        for (int i = 0; i < t.length();\
  \ i++) {\n            temp = t.charAt(i) - '0';\n            if (temp % 2 == 0)\
  \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(evenCount,\
  \ oddCount);"
- "        // gets the absolute value of the number.\n        // and converts to a\
  \ string.\n        String str = String.valueOf(Math.abs(num));\n        // instantiates\
  \ the tuple.\n        Pair<Integer, Integer> tuple = new Pair<>(0, 0);\n       \
  \ // loop over the digits of the number.\n        for (int i = 0; i < str.length();\
  \ i++) {\n            // if a digit is even.\n            if (Character.getNumericValue(str.charAt(i))\
  \ % 2 == 0) {\n                // increment the left value of the tuple.\n     \
  \           tuple = tuple.setAt0(tuple.getValue0() + 1);\n            } else {\n\
  \                // increment the right value of the tuple.\n                tuple\
  \ = tuple.setAt1(tuple.getValue1() + 1);\n            }\n        }\n        // return\
  \ the tuple.\n        return tuple;"
- "        int even = 0;\n        int odd = 0;\n        char[] evenDigits = new char[]{'0',\
  \ '2', '4', '6', '8'};\n        char[] oddDigits = new char[]{'1', '3', '5', '7',\
  \ '9'};\n        String numString = Integer.toString(num);\n        for (int i =\
  \ 0; i < numString.length(); i++) {\n            char currChar = numString.charAt(i);\n\
  \            if (Arrays.asList(evenDigits).contains(currChar)) {\n             \
  \   even++;\n            } else if (Arrays.asList(oddDigits).contains(currChar))\
  \ {\n                odd++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(even, odd);"
- "      int oddCount = 0;\n      int evenCount = 0;\n      for (String str : Integer.toString(num).split(\"\
  \")) {\n        if (Integer.parseInt(str) % 2 == 0) {\n          evenCount++;\n\
  \        } else {\n          oddCount++;\n        }\n      }\n      return new Pair<Integer,\
  \ Integer>(evenCount, oddCount);"
- "        // Write your code here\n        return null;"
- "        int number = num < 0 ? num * -1 : num;\n        int even = 0;\n       \
  \ int odd = 0;\n        while (number > 0) {\n            int digit = number % 10;\n\
  \            if (digit % 2 == 0) {\n                even++;\n            } else\
  \ {\n                odd++;\n            }\n            number /= 10;\n        }\n\
  \        return new Pair<Integer, Integer>(even, odd);"
- '        return new Pair<>(0, 0);'
- '        return new Pair<Integer, Integer>(0, 0);'
- "        //Your code here.\n        return null;"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even += 1;\n            } else {\n                odd += 1;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        int even = 0;\n        int odd = 0;\n        // write your code here\n\
  \        if (num < 0) {\n            num = num * -1;\n        }\n        String\
  \ s = String.valueOf(num);\n        char[] c = s.toCharArray();\n        for (int\
  \ i = 0; i < c.length; i++) {\n            if (c[i] % 2 == 0) {\n              \
  \  even++;\n            } else {\n                odd++;\n            }\n      \
  \  }\n        return new Pair<Integer, Integer>(even, odd);"
- "        // IMPLEMENT THIS FUNCTION\n        return new Pair<Integer, Integer>(0,\
  \ 0);"
- '        return Pair.with(0, 0);'
- "        return Pair.with(new Long(String.valueOf(num).chars().filter(c -> c % 2\
  \ == 0).count()).intValue(),\n                new Long(String.valueOf(num).chars().filter(c\
  \ -> c % 2 != 0).count()).intValue());"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even++;\n            } else {\n                odd++;\n            }\n     \
  \       num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int even_count = 0;\n        int odd_count = 0;\n        while (num !=\
  \ 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n \
  \               even_count++;\n            } else {\n                odd_count++;\n\
  \            }\n            num /= 10;\n        }\n        return new Pair<Integer,\
  \ Integer>(even_count, odd_count);"
- "      String numstr = String.valueOf(num);\n      int evencount = 0;\n      int\
  \ oddcount = 0;\n      for (int i = 0; i < numstr.length(); i++) {\n        if (numstr.charAt(i)\
  \ % 2 == 0) {\n          evencount++;\n        } else {\n          oddcount++;\n\
  \        }\n      }\n      return new Pair<Integer, Integer>(evencount, oddcount);"
- "        int even = 0;\n        int odd = 0;\n        String numStr = String.valueOf(num);\n\
  \        for (int i = 0; i < numStr.length(); i++) {\n            int number = Integer.parseInt(String.valueOf(numStr.charAt(i)));\n\
  \            if (number % 2 == 0) {\n                even++;\n            } else\
  \ {\n                odd++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(even, odd);"
- "        Pair<Integer, Integer> ret = new Pair<Integer, Integer>(0, 0);\n      \
  \  if (num < 0) {\n            num = -num;\n        }\n        while (num > 0) {\n\
  \            int digit = num % 10;\n            if (digit % 2 == 0) {\n        \
  \        ret = ret.setAt0(ret.getValue0() + 1);\n            } else {\n        \
  \        ret = ret.setAt1(ret.getValue1() + 1);\n            }\n            num\
  \ /= 10;\n        }\n        return ret;"
- "        String str = String.valueOf(num);\n        int even = 0;\n        int odd\
  \ = 0;\n        for (int i = 0; i < str.length(); i++) {\n            int digit\
  \ = str.charAt(i) - '0';\n            if (digit % 2 == 0) even++;\n            else\
  \ odd++;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return null;'
- "        int evenCount = 0;\n        int oddCount = 0;\n        for (char c : (\"\
  \" + num).toCharArray()) {\n            int digit = Integer.parseInt(\"\" + c);\n\
  \            if (digit % 2 == 0) {\n                evenCount++;\n            }\
  \ else {\n                oddCount++;\n            }\n        }\n        return\
  \ new Pair<Integer, Integer>(evenCount, oddCount);"
- '      //Code here'
- "        int even = 0;\n        int odd = 0;\n        if (num < 0) {\n         \
  \   num = -num;\n        }\n        while (num > 0) {\n            int d = num %\
  \ 10;\n            if (d % 2 == 0) {\n                even += 1;\n            }\
  \ else {\n                odd += 1;\n            }\n            num /= 10;\n   \
  \     }\n        return new Pair<Integer, Integer>(even, odd);"
- '        // WRITE YOUR CODE HERE'
- '        return new Pair<>(num, num);'
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even += 1;\n            } else {\n                odd += 1;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        int even = 0;\n        int odd = 0;\n        if (num < 0) num *= -1;\n\
  \        while (num > 0) {\n            if (num % 2 == 0) even++;\n            else\
  \ odd++;\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        int evenCount = 0;\n        int oddCount = 0;\n        for (char c : Integer.toString(num).toCharArray())\
  \ {\n            int n = Character.getNumericValue(c);\n            if (n % 2 ==\
  \ 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(evenCount,\
  \ oddCount);"
- "        // TODO: Implement this method\n        if (num == 0) {\n            return\
  \ new Pair<Integer, Integer>(1, 0);\n        }\n        int evenCount = 0;\n   \
  \     int oddCount = 0;\n        while (num != 0) {\n            int digit = num\
  \ % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n     \
  \       } else {\n                oddCount++;\n            }\n            num /=\
  \ 10;\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);"
- '        // write your code here'
- '        return null;'
- "        // your solution goes here\n        int evens = 0;\n        int odds =\
  \ 0;\n        while (num != 0) {\n            int digit = num % 10;\n          \
  \  if (digit % 2 == 0) {\n                evens += 1;\n            } else {\n  \
  \              odds += 1;\n            }\n            num /= 10;\n        }\n  \
  \      return new Pair<Integer, Integer>(evens, odds);"
- '        return new Pair<Integer, Integer>(0, 0);'
- "        int even = 0;\n        int odd = 0;\n        if (num < 0) {\n         \
  \   num = num * -1;\n        }\n        while (num > 0) {\n            int i = num\
  \ % 10;\n            if (i % 2 == 0) {\n                even++;\n            } else\
  \ {\n                odd++;\n            }\n            num = num / 10;\n      \
  \  }\n        return new Pair<Integer, Integer>(even, odd);"
- "\t\tint temp = num;\n\t\tint count = 0;\n\t\tint odd = 0;\n\t\tint even = 0;\n\t\
  \tif(num < 0)\n\t\t{\n\t\t\ttemp = -temp;\n\t\t}\n\t\twhile(temp > 0)\n\t\t{\n\t\
  \t\tint mod = temp % 10;\n\t\t\tif(mod % 2 == 0)\n\t\t\t{\n\t\t\t\teven++;\n\t\t\
  \t}\n\t\t\telse\n\t\t\t{\n\t\t\t\todd++;\n\t\t\t}\n\t\t\ttemp = temp / 10;\n\t\t\
  }\n\t\treturn new Pair<Integer, Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int d = num % 10;\n            if (d % 2 == 0) {\n                even++;\n\
  \            } else {\n                odd++;\n            }\n            num /=\
  \ 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return null;'
- "        // fill me in\n        return null;"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even += 1;\n            } else {\n                odd += 1;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- '        // Code here'
- "        int evenCount = 0;\n        int oddCount = 0;\n        // TODO: implement\
  \ here\n        // input: integer\n        // output: Pair<Integer, Integer>\n \
  \       return new Pair<Integer, Integer>(evenCount, oddCount);"
- "      Integer evenCount = 0;\n      Integer oddCount = 0;\n      Integer numCopy\
  \ = num;\n      while (numCopy > 0) {\n        if (numCopy % 2 == 0) {\n       \
  \   evenCount++;\n        } else {\n          oddCount++;\n        }\n        numCopy\
  \ /= 10;\n      }\n      return new Pair<Integer, Integer>(evenCount, oddCount);"
- "        // TODO: complete this\n        return null;"
- '        return null;'
- "        int evenCount = 0;\n        int oddCount = 0;\n        while (num != 0)\
  \ {\n            int n = num % 10;\n            if (n % 2 == 0) {\n            \
  \    evenCount++;\n            } else {\n                oddCount++;\n         \
  \   }\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(evenCount,\
  \ oddCount);"
- "        // write code here\n        return null;"
- "        int evenCount = 0;\n        int oddCount = 0;\n        while (num != 0)\
  \ {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n    \
  \            evenCount++;\n            } else {\n                oddCount++;\n \
  \           }\n            num /= 10;\n        }\n        return new Pair<Integer,\
  \ Integer>(evenCount, oddCount);"
- '        return null;'
- "        Pair<Integer, Integer> retVal = new Pair<Integer, Integer>(0, 0);\n   \
  \     int even = 0;\n        int odd = 0;\n        for (int i = 0; i < Integer.toString(num).length();\
  \ i++) {\n            if (Integer.toString(num).charAt(i) % 2 == 0) {\n        \
  \        even += 1;\n            } else {\n                odd += 1;\n         \
  \   }\n        }\n        retVal = new Pair<Integer, Integer>(even, odd);\n    \
  \    return retVal;"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int t = num % 10;\n            if (t % 2 == 0)\n                even++;\n\
  \            else\n                odd++;\n            num /= 10;\n        }\n \
  \       return new Pair<Integer, Integer>(even, odd);"
- '        // write your code here'
- "        Integer even = 0;\n        Integer odd = 0;\n        while (num != 0) {\n\
  \            int digit = num % 10;\n            if (digit % 2 == 0) {\n        \
  \        even++;\n            } else {\n                odd++;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        int evens = 0;\n        int odds = 0;\n        if (num < 0) num *= -1;\n\
  \        while (num > 0) {\n            int digit = num % 10;\n            if (digit\
  \ % 2 == 0) evens++;\n            else odds++;\n            num /= 10;\n       \
  \ }\n        return new Pair<Integer, Integer>(evens, odds);"
- '        return Pair.with(0, 0);'
- "        int even = 0;\n        int odd = 0;\n        String number = String.valueOf(num);\n\
  \        for (int i = 0; i < number.length(); i++) {\n            if ((int) number.charAt(i)\
  \ % 2 == 0)\n                even++;\n            else\n                odd++;\n\
  \        }\n        return new Pair<Integer, Integer>(even, odd);"
- "      int even = 0;\n      int odd = 0;\n      while (num > 0) {\n        if (num\
  \ % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n      }\n      return\
  \ new Pair<Integer, Integer>(even, odd);"
- "        // Your code here\n        return null;"
- "        return Pair.with(\n            evenOddCountHelper(num, n -> n % 2 == 0),\n\
  \            evenOddCountHelper(num, n -> n % 2 != 0)\n        );"
- "        String t = String.valueOf(num);\n        int c_even = 0;\n        int c_odd\
  \ = 0;\n        for (int i = 0; i < t.length(); i++) {\n            if (t.charAt(i)\
  \ % 2 == 0)\n                c_even++;\n            else\n                c_odd++;\n\
  \        }\n        return new Pair<Integer, Integer>(c_even, c_odd);"
- '        return null;'
- "        int odds = 0;\n        int evens = 0;\n        for (char c : Integer.toString(num).toCharArray())\
  \ {\n            int x = Character.getNumericValue(c);\n            if (x % 2 ==\
  \ 0) {\n                evens++;\n            } else {\n                odds++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(evens, odds);"
- "        // Implement solution here\n        int[] arr = new int[10];\n        for\
  \ (int i = Math.abs(num); i > 0; i /= 10)\n            arr[i % 10]++;\n        int\
  \ even = 0, odd = 0;\n        for (int i = 0; i < 10; i++)\n            if (i %\
  \ 2 == 0)\n                even += arr[i];\n            else\n                odd\
  \ += arr[i];\n        return new Pair<Integer, Integer>(even, odd);"
- "        Pair<Integer, Integer> result = new Pair<Integer, Integer>(0, 0);\n   \
  \     String str = String.valueOf(num);\n        int len = str.length();\n     \
  \   for (int i = 0; i < len; i++) {\n            int digit = Integer.parseInt(String.valueOf(str.charAt(i)));\n\
  \            if (digit % 2 == 0)\n                result = result.setAt0(result.getValue0()\
  \ + 1);\n            else\n                result = result.setAt1(result.getValue1()\
  \ + 1);\n        }\n        return result;"
- "        int even = 0;\n        int odd = 0;\n        String numString = String.valueOf(num);\n\
  \        for (int i = 0; i < numString.length(); i++) {\n            String s =\
  \ String.valueOf(numString.charAt(i));\n            int digit = Integer.parseInt(s);\n\
  \            if (digit % 2 == 0) {\n                even++;\n            } else\
  \ {\n                odd++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(even, odd);"
- '        return new Pair<Integer, Integer>(1, 1);'
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even++;\n            } else {\n                odd++;\n            }\n     \
  \       num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        String numberAsString = String.valueOf(num);\n        char[] digits = numberAsString.toCharArray();\n\
  \        int even = 0;\n        int odd = 0;\n        for (char c : digits) {\n\
  \            if (c == '-') {\n                continue;\n            }\n       \
  \     int digit = Integer.parseInt(String.valueOf(c));\n            if (digit %\
  \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        String str = String.valueOf(num);\n        int[] digit = new int[str.length()];\n\
  \        int[] mark = new int[str.length()];\n        int count1 = 0;\n        int\
  \ count2 = 0;\n        for (int i = 0; i < str.length(); i++) {\n            digit[i]\
  \ = (int) str.charAt(i) - 48;\n            mark[i] = digit[i] % 2;\n           \
  \ if (mark[i] == 0) {\n                count1++;\n            } else {\n       \
  \         count2++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(count1, count2);"
- "        // start your coding here\n        return null;"
- "        // Solution\n        int[] count = {0, 0};\n        int[] nums = {num,\
  \ num < 0 ? -num : num};\n        while (nums[1] > 0) {\n            int i = nums[1]\
  \ % 10;\n            if (i % 2 == 0) {\n                count[0]++;\n          \
  \  } else {\n                count[1]++;\n            }\n            nums[1] /=\
  \ 10;\n        }\n        if (nums[0] < 0) count[1]++;\n        return new Pair<Integer,\
  \ Integer>(count[0], count[1]);"
- "        // solution is here\n        int even = 0;\n        int odd = 0;\n    \
  \    while (num != 0) {\n            int digit = num % 10;\n            if (digit\
  \ % 2 == 0)\n                even++;\n            else\n                odd++;\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        int even = 0;\n        int odd = 0;\n        String str = Integer.toString(num);\n\
  \        for (int i = 0; i < str.length(); i++) {\n            if (Character.getNumericValue(str.charAt(i))\
  \ % 2 == 0)\n                even++;\n            else\n                odd++;\n\
  \        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        String n = String.valueOf(num);\n        int even = 0;\n        int odd\
  \ = 0;\n        for (int i = 0; i < n.length(); i++) {\n            if (Integer.parseInt(n.substring(i,\
  \ i + 1)) % 2 == 0) {\n                even++;\n            } else {\n         \
  \       odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        // write your code here\n        return null;"
- '        return null;'
- "        int even = 0;\n        int odd = 0;\n        for (int i = 0; i < String.valueOf(num).length();\
  \ i++) {\n            if (Integer.parseInt(String.valueOf(String.valueOf(num).charAt(i)))\
  \ % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        // your code here.

  '
- '        return null;'
- "        // TODO: Write code here\n        return null;"
- "      int even = 0;\n      int odd = 0;\n      for (char c : String.valueOf(num).toCharArray())\
  \ {\n        if (Character.getNumericValue(c) % 2 == 0) {\n          even++;\n \
  \       } else {\n          odd++;\n        }\n      }\n      return new Pair<Integer,\
  \ Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        for (int i = 0; i < Integer.toString(num).length();\
  \ i++) {\n            if (Integer.toString(num).charAt(i) % 2 == 0) {\n        \
  \        even++;\n            } else {\n                odd++;\n            }\n\
  \        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        // TODO: Write code here'
- "        int temp = num;\n        int even = 0;\n        int odd = 0;\n        if\
  \ (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n        }\n\
  \        while (num != 0) {\n            int digit = num % 10;\n            if (digit\
  \ % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n            num /= 10;\n        }\n        if (temp < 0) {\n   \
  \         even++;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return null;'
- "        // return new Pair<Integer, Integer>(0, 0);\n        // Pair<Integer, Integer>\
  \ result = new Pair<Integer, Integer>(0, 0);\n        int a = 0;\n        int b\
  \ = 0;\n        if (num < 0) {\n            num = num * -1;\n        }\n       \
  \ while (num > 0) {\n            int temp = num % 10;\n            if (temp % 2\
  \ == 0) {\n                a++;\n            } else {\n                b++;\n  \
  \          }\n            num = num / 10;\n        }\n        return new Pair<Integer,\
  \ Integer>(a, b);"
- "        int even = 0;\n        int odd = 0;\n        int sign = 1;\n        if\
  \ (num < 0) {\n            sign = -1;\n            num = -num;\n        }\n    \
  \    while (num > 0) {\n            int digit = num % 10;\n            if (digit\
  \ % 2 == 0) {\n                even += 1;\n            } else {\n              \
  \  odd += 1;\n            }\n            num /= 10;\n        }\n        return new\
  \ Pair<Integer, Integer>(even, odd);"
- "        String num_str = Integer.toString(num);\n        int even_count = 0;\n\
  \        int odd_count = 0;\n        for (int i = 0; i < num_str.length(); i++)\
  \ {\n            int curr_digit = Character.getNumericValue(num_str.charAt(i));\n\
  \            if (curr_digit % 2 == 0) {\n                even_count++;\n       \
  \     } else {\n                odd_count++;\n            }\n        }\n       \
  \ return new Pair<Integer, Integer>(even_count, odd_count);"
- "        int odd = 0;\n        int even = 0;\n        while (num != 0) {\n     \
  \       int last = num % 10;\n            if (last % 2 == 0) {\n               \
  \ even++;\n            } else {\n                odd++;\n            }\n       \
  \     num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        // YOUR CODE HERE\n        return new Pair<Integer, Integer>(1, 1);"
- "        if (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n\
  \        }\n        if (num < 0) {\n            num = -num;\n        }\n       \
  \ int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            int\
  \ digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n\
  \            } else {\n                odd++;\n            }\n            num /=\
  \ 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        String numString = String.valueOf(num);\n        if (num < 0) {\n     \
  \       numString = numString.substring(1);\n        }\n        Integer[] nums =\
  \ Arrays.stream(numString.split(\"\")).map(Integer::parseInt).toArray(Integer[]::new);\n\
  \        int even = (int)Arrays.stream(nums).filter(x -> x % 2 == 0).count();\n\
  \        int odd = (int)Arrays.stream(nums).filter(x -> x % 2 != 0).count();\n \
  \       return new Pair<Integer, Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int dig = num % 10;\n            if (dig % 2 == 0) {\n                even++;\n\
  \            } else {\n                odd++;\n            }\n            num /=\
  \ 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return null;'
- "        // start coding here\n        return new Pair<Integer, Integer>(0, 0);"
- "        // Your code here\n        int even = 0;\n        int odd = 0;\n      \
  \  if (num < 0) {\n            num = -num;\n        }\n        while (num > 0) {\n\
  \            int t = num % 10;\n            if (t % 2 == 0) {\n                even++;\n\
  \            } else {\n                odd++;\n            }\n            num /=\
  \ 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int last = num % 10;\n            if (last % 2 == 0) {\n               \
  \ even++;\n            } else {\n                odd++;\n            }\n       \
  \     num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int evenCount = 0;\n        int oddCount = 0;\n        int rem = 0;\n \
  \       while (num != 0) {\n            rem = num % 10;\n            if (rem % 2\
  \ == 0)\n                evenCount++;\n            else\n                oddCount++;\n\
  \            num = num / 10;\n        }\n        return new Pair<Integer, Integer>(evenCount,\
  \ oddCount);"
- '        // Your code here'
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int remainder = num % 10;\n            if (remainder % 2 == 0) {\n     \
  \           even++;\n            } else {\n                odd++;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        int even = 0;\n        int odd = 0;\n        String[] numString = String.valueOf(num).split(\"\
  \");\n        for (String n : numString) {\n            if (Integer.parseInt(n)\
  \ % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int evenCount = 0;\n        int oddCount = 0;\n        for (int digit :\
  \ toDigits(num)) {\n            if (digit % 2 == 0) {\n                evenCount++;\n\
  \            } else {\n                oddCount++;\n            }\n        }\n \
  \       return new Pair<Integer, Integer>(evenCount, oddCount);"
- "        int oddCount = 0;\n        int evenCount = 0;\n        int n = num < 0\
  \ ? num * -1 : num;\n        while (n > 0) {\n            int i = n % 10;\n    \
  \        if (i % 2 == 0) {\n                evenCount++;\n            } else {\n\
  \                oddCount++;\n            }\n            n /= 10;\n        }\n \
  \       return new Pair<Integer, Integer>(evenCount, oddCount);"
- "        int oddCount = 0;\n        int evenCount = 0;\n        int aNum = num;\n\
  \        if (num < 0) {\n            aNum = Math.abs(num);\n        }\n        if\
  \ (aNum == 0) {\n            return new Pair<Integer, Integer>(0, 0);\n        }\n\
  \        while (aNum > 0) {\n            int digit = aNum % 10;\n            if\
  \ (digit % 2 == 0) {\n                evenCount++;\n            } else {\n     \
  \           oddCount++;\n            }\n            aNum = aNum / 10;\n        }\n\
  \        return new Pair<Integer, Integer>(evenCount, oddCount);"
- "        // your solution here\n        return null;"
- "        int num_copy = num;\n        int even_count = 0;\n        int odd_count\
  \ = 0;\n        if (num == 0) {\n            even_count++;\n        }\n        while\
  \ (num_copy != 0) {\n            if (num_copy % 2 == 0) {\n                even_count++;\n\
  \            } else {\n                odd_count++;\n            }\n           \
  \ num_copy /= 10;\n        }\n        return new Pair<Integer, Integer>(even_count,\
  \ odd_count);"
- "        String digits = String.valueOf(num);\n        int even_count = 0;\n   \
  \     int odd_count = 0;\n        for (char c : digits.toCharArray()) {\n      \
  \      int digit = Character.getNumericValue(c);\n            if (digit % 2 == 0)\
  \ {\n                even_count++;\n            } else {\n                odd_count++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even_count,\
  \ odd_count);"
- '        // Please complete this method'
- "        // Your Code Here\n        return null;"
- '        return null;'
- "        int num_even = 0;\n        int num_odd = 0;\n        // Your code here\n\
  \        return new Pair<Integer, Integer>(num_even, num_odd);"
- "        // TODO: Return number of even and odd digits respectively.\n        return\
  \ new Pair<Integer, Integer>(0, 0);"
- "        // Write your code here\n        return null;"
- "        // YOUR CODE HERE\n        return null;"
- "        // WRITE YOUR CODE HERE\n        return null;"
- "        String s = String.valueOf(num);\n        int even = 0;\n        int odd\
  \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i)\
  \ % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return new Pair<Integer, Integer>(0, 0);'
- '        // Fill this in.'
- "        int even = 0;\n        int odd = 0;\n        for (int d : getDigits(num))\
  \ {\n            if (d % 2 == 0) {\n                even++;\n            } else\
  \ {\n                odd++;\n            }\n        }\n        return new Pair<Integer,\
  \ Integer>(even, odd);"
- "        int evenCount = 0;\n        int oddCount = 0;\n        int absNum = Math.abs(num);\n\
  \        while (absNum > 0) {\n            int digit = absNum % 10;\n          \
  \  if (digit % 2 == 0)\n                evenCount++;\n            else\n       \
  \         oddCount++;\n            absNum /= 10;\n        }\n        return new\
  \ Pair<Integer, Integer>(evenCount, oddCount);"
- "        int even = 0;\n        int odd = 0;\n        for (char c : Integer.toString(num).toCharArray())\
  \ {\n            if (Character.getNumericValue(c) % 2 == 0) {\n                even++;\n\
  \            } else {\n                odd++;\n            }\n        }\n      \
  \  return new Pair<Integer, Integer>(even, odd);"
- "        if (num == 0) return new Pair<>(1, 0);\n        int even = 0, odd = 0;\n\
  \        boolean negative = false;\n        if (num < 0) {\n            negative\
  \ = true;\n            num = Math.abs(num);\n        }\n        while (num > 0)\
  \ {\n            int digit = num % 10;\n            if (digit % 2 == 0) even++;\n\
  \            else odd++;\n            num /= 10;\n        }\n        if (negative)\
  \ odd++;\n        return new Pair<>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even += 1;\n            } else {\n                odd += 1;\n            }\n\
  \            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even,\
  \ odd);"
- "        int even_count = 0;\n        int odd_count = 0;\n        while (num !=\
  \ 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0)\n   \
  \             even_count++;\n            else\n                odd_count++;\n  \
  \          num /= 10;\n        }\n        return new Pair<Integer, Integer>(even_count,\
  \ odd_count);"
- '        return new Pair<Integer, Integer>(num, num);'
- "        num = Math.abs(num);\n        return new Pair<Integer, Integer>(\n    \
  \        (int) Arrays.stream(String.valueOf(num).split(\"\"))\n                .map(Integer::parseInt)\n\
  \                .filter(x -> x % 2 == 0)\n                .count(),\n         \
  \   (int) Arrays.stream(String.valueOf(num).split(\"\"))\n                .map(Integer::parseInt)\n\
  \                .filter(x -> x % 2 != 0)\n                .count()\n        );"
- "        // Your Code Here\n        return null;"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0)\n               \
  \ even++;\n            else\n                odd++;\n            num /= 10;\n  \
  \      }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int digit = num % 10;\n            if (digit % 2 == 0) {\n             \
  \   even++;\n            } else {\n                odd++;\n            }\n     \
  \       num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        return new Pair<Integer, Integer>(0, 0);'
- "        int even_count = 0;\n        int odd_count = 0;\n        int num_copy =\
  \ num;\n        int digit = 0;\n        if (num_copy == 0)\n            even_count++;\n\
  \        while (num_copy != 0) {\n            digit = num_copy % 10;\n         \
  \   if (digit % 2 == 0)\n                even_count++;\n            else\n     \
  \           odd_count++;\n            num_copy /= 10;\n        }\n        return\
  \ new Pair<Integer, Integer>(even_count, odd_count);"
- '        throw new RuntimeException("not implemented");'
- '        return Pair.with(0, 0);'
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int temp = num % 10;\n            if (temp % 2 == 0) {\n               \
  \ even++;\n            } else {\n                odd++;\n            }\n       \
  \     num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        if (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n\
  \        }\n        int count_even = 0;\n        int count_odd = 0;\n        int\
  \ temp = Math.abs(num);\n        while (temp > 0) {\n            int digit = temp\
  \ % 10;\n            if (digit % 2 == 0) {\n                count_even += 1;\n \
  \           } else {\n                count_odd += 1;\n            }\n         \
  \   temp /= 10;\n        }\n        return new Pair<Integer, Integer>(count_even,\
  \ count_odd);"
- "        Pair<Integer, Integer> result = new Pair<Integer, Integer>(0, 0);\n   \
  \     // your code goes here\n        return result;"
- '        return null;'
- "        int even = 0;\n        int odd = 0;\n        String numString = String.valueOf(num);\n\
  \        for (int i = 0; i < numString.length(); i++) {\n            int temp =\
  \ Integer.parseInt(String.valueOf(numString.charAt(i)));\n            if (temp %\
  \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
  \            }\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- "        //\n        int even = 0;\n        int odd = 0;\n        while (num !=\
  \ 0) {\n            if (num % 2 == 0) {\n                even++;\n            }\
  \ else {\n                odd++;\n            }\n            num /= 10;\n      \
  \  }\n        return new Pair<Integer, Integer>(even, odd);"
- "        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n     \
  \       int temp = num % 10;\n            if (temp % 2 == 0) {\n               \
  \ even++;\n            } else {\n                odd++;\n            }\n       \
  \     num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);"
- '        // Your code here'
- '        return null;'
language: java
name: HumanEval_155_even_odd_count
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an integer. return a tuple that has the number of\
  \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
  \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
  \ Integer> evenOddCount(int num) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
  \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
  \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
  \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
  \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n}\n"
