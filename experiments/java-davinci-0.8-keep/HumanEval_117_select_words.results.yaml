language: java
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> answer = new ArrayList<String>();\n \
    \       ArrayList<String> words = new ArrayList<String>(Arrays.asList(s.split(\"\
    \ \")));\n        for (String word : words) {\n            if (isConsonant(word)\
    \ == n) {\n                answer.add(word);\n            }\n        }\n     \
    \   return answer;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdiq6o7q.java:24: error: cannot find symbol\n            if (isConsonant(word)\
    \ == n) {\n                ^\n  symbol:   method isConsonant(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: implement the function here.\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpxqmdbewv.java:25)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      for (String word : s.split(\" \")) {\n            if (word.replaceAll(\"\
    [aeiouAEIOU]\", \"\").length() == n)\n                words.add(word);\n     \
    \   }\n        return words;\n}\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        String[]\
    \ splitWords = s.split(\" \");\n        for (String word : splitWords) {\n   \
    \         int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                String character = String.valueOf(word.charAt(i));\n\
    \                if (character.matches(\"[bcdfghjklmnpqrstvwxz]\")) consonants++;\n\
    \            }\n            if (consonants == n) words.add(word);\n        }\n\
    \        return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpif39rsu6.java:35)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Uncomment the following line and run the test to pass\
    \ the first test.\n        // return new ArrayList<String>();\n        // You\
    \ can use the following lines to check the current state of the program.\n   \
    \     // This will execute the code given in the second argument if the given\
    \ condition is true.\n        // assert s.length() > 0 : \"The string s must contain\
    \ at least one character.\";\n        // assert n > 0 : \"The natural number n\
    \ must be greater than 0.\";\n        // Write your code between this comment\
    \ and the previous one.\n        // Note: you will have to uncomment the first\
    \ line to pass the first test.\n        // Note: you will have to uncomment the\
    \ first line to pass the first test.\n        // Note: you will have to uncomment\
    \ the first line to pass the first test.\n        // Note: you will have to uncomment\
    \ the first line to pass the first test.\n        ArrayList<String> words = new\
    \ ArrayList<String>();\n        ArrayList<String> wordsn = new ArrayList<String>();\n\
    \        int i = 0;\n        while (i < s.length()) {\n            String word\
    \ = \"\";\n            while (i < s.length() && s.charAt(i) != ' ') {\n      \
    \          word += s.charAt(i);\n                i++;\n            }\n       \
    \     words.add(word);\n            i++;\n        }\n        for (String word\
    \ : words) {\n            int numConsonants = 0;\n            for (int j = 0;\
    \ j < word.length(); j++) {\n                char c = word.charAt(j);\n      \
    \          if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {\n\
    \                    numConsonants++;\n                }\n            }\n    \
    \        if (numConsonants == n) {\n                wordsn.add(word);\n      \
    \      }\n        }\n        return wordsn;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwago2ex.java:63)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] letters = s.split(\"\");\n        for (int i = 0; i < letters.length;\
    \ i++) {\n            String temp = \"\";\n            int counter = 0;\n    \
    \        while (!letters[i].equals(\" \") && i < letters.length) {\n         \
    \       temp += letters[i];\n                if (!isVowel(letters[i])) {\n   \
    \                 counter++;\n                }\n                i++;\n      \
    \      }\n            if (counter == n) {\n                words.add(temp);\n\
    \            }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpphuz716p.java:28: error: cannot find symbol\n                if\
    \ (!isVowel(letters[i])) {\n                     ^\n  symbol:   method isVowel(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Write your code here.\n        ArrayList<String> words\
    \ = new ArrayList<>();\n        int start = 0;\n        int end = 0;\n       \
    \ for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ')\
    \ {\n                end = i;\n                words.add(s.substring(start, end));\n\
    \                start = i + 1;\n            }\n        }\n        if (start !=\
    \ s.length()) {\n            words.add(s.substring(start, s.length()));\n    \
    \    }\n        words.removeIf(word -> (countConsonants(word) != n));\n      \
    \  return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh76ycan.java:35: error: cannot find symbol\n        words.removeIf(word\
    \ -> (countConsonants(word) != n));\n                                ^\n  symbol:\
    \   method countConsonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String>  result = new ArrayList<String>();\n\
    \        ArrayList<String>  words = new ArrayList<String>(Arrays.asList(s.split(\"\
    \ \")));\n        HashSet<Character> vowels = new HashSet<Character>(Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u'));\n        for (String w : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < w.length(); i++) {\n                if\
    \ (!vowels.contains(w.charAt(i))) {\n                    count++;\n          \
    \      }\n            }\n            if (count == n) {\n                result.add(w);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ayqi8vn.java:42)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int c = 0;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                char ch = word.charAt(i);\n                if (ch == 'a' || ch\
    \ == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n                    c++;\n \
    \           }\n            if (word.length() - c == n)\n                result.add(word);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmptdvd_g.java:40)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int count = 0;\n            for (char c : word.toCharArray()) {\n\
    \                if (!isVowel(c)) count++;\n            }\n            if (count\
    \ == n) result.add(word);\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5fidbd1f.java:26: error: cannot find symbol\n                if\
    \ (!isVowel(c)) count++;\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // We need a counter\n        int counter = 0;\n      \
    \  // Get all the words in the string\n        String[] strArray = s.split(\"\
    \ \");\n        // We need to return an array\n        ArrayList<String> list\
    \ = new ArrayList<String>();\n        // loop over the string\n        for (int\
    \ i = 0; i < strArray.length; i++) {\n            // loop over each word in the\
    \ string\n            for (int j = 0; j < strArray[i].length(); j++) {\n     \
    \           // Get the character at the current index\n                char c\
    \ = strArray[i].charAt(j);\n                // Check if the character is a consonant\n\
    \                if (Character.toLowerCase(c) != 'a' && Character.toLowerCase(c)\
    \ != 'e' &&\n                Character.toLowerCase(c) != 'i' && Character.toLowerCase(c)\
    \ != 'o' &&\n                Character.toLowerCase(c) != 'u') {\n            \
    \        // increment the counter\n                    counter++;\n          \
    \      }\n            }\n            // Check if the number of consonants is n\n\
    \            if (counter == n) {\n                // Add the word to the array\n\
    \                list.add(strArray[i]);\n            }\n            // Reset the\
    \ counter\n            counter = 0;\n        }\n        // return the array\n\
    \        return list;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> ans = new ArrayList<String>();\n    \
    \    String[] words = s.split(\" \");\n        for (String word : words) {\n \
    \           int wordLen = word.length();\n            int consCnt = 0;\n     \
    \       for (int i = 0; i < wordLen; i++) {\n                if (!isVowel(word.charAt(i)))\
    \ {\n                    consCnt++;\n                }\n            }\n      \
    \      if (consCnt == n) {\n                ans.add(word);\n            }\n  \
    \      }\n        return ans;\n}\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57s3dy5s.java:27: error: cannot find symbol\n                if\
    \ (!isVowel(word.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> lst = new ArrayList<String>();\n    \
    \    for (String a : s.split(\"\\\\s+\")) {\n            if (countConsonants(a)\
    \ == n) {\n                lst.add(a);\n            }\n        }\n        return\
    \ lst;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpms7orpbt.java:23: error: cannot find symbol\n            if (countConsonants(a)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       // TODO: Implement your solution here\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0k7hx1gp.java:26)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ results = new ArrayList<String>();\n        for (String word : words) {\n  \
    \          int count = 0;\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                if (!isVowel(word.charAt(i))) {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     results.add(word);\n            }\n        }\n        return results;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6em2dwlt.java:26: error: cannot find symbol\n                if\
    \ (!isVowel(word.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       s = s.toLowerCase();\n        String[] words = s.split(\" \");\n     \
    \   for (String w : words) {\n            int num_of_consonants = numOfConsonants(w);\n\
    \            if (num_of_consonants == n) {\n                result.add(w);\n \
    \           }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpga40xt56.java:25: error: cannot find symbol\n            int num_of_consonants\
    \ = numOfConsonants(w);\n                                    ^\n  symbol:   method\
    \ numOfConsonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: Write code here\n        String[] words = s.split(\"\
    \ \");\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String word : words) {\n            int consonants = 0;\n            for (char\
    \ c : word.toCharArray()) {\n                if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n        \
    \        }\n            }\n            if (consonants == n) {\n              \
    \  result.add(word);\n            }\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6nw0c94.java:42)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Write your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmp773uqaft.java:25)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        StringBuilder\
    \ word = new StringBuilder();\n        int count = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c\
    \ == ' ') {\n                if (count == n) {\n                    res.add(word.toString());\n\
    \                }\n                word = new StringBuilder();\n            \
    \    count = 0;\n            } else {\n                word.append(c);\n     \
    \           if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       if (count == n) {\n            res.add(word.toString());\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbi5vq1lx.java:49)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        String[]\
    \ a = s.split(\" \");\n        for (String word : a) {\n            if (getConsonantsCount(word)\
    \ == n)\n                res.add(word);\n        }\n        return res;\n}\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2dcoxr5.java:24: error: cannot find symbol\n            if (getConsonantsCount(word)\
    \ == n)\n                ^\n  symbol:   method getConsonantsCount(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Your code here\n        // It will not be tested for\
    \ n = 0 or n = 1 or n = 2\n        // It will not be tested for n = bigger than\
    \ the length of the longest word in the string s.\n        ArrayList<String> words\
    \ = new ArrayList<String>();\n        Pattern p = Pattern.compile(\"[^aeiou]\"\
    );\n        String[] strings = s.split(\"\\\\s+\");\n        for (String word\
    \ : strings) {\n            if (p.matcher(word).results().count() == n) {\n  \
    \              words.add(word);\n            }\n        }\n        return words;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzvn98ar.java:25: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"[^aeiou]\");\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpyzvn98ar.java:25: error: cannot find symbol\n       \
    \ Pattern p = Pattern.compile(\"[^aeiou]\");\n                    ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // your code here\n        // ...\n        // ...\n   \
    \     return new ArrayList<String>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt_pk2sg0.java:27)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        var list = new ArrayList<String>();\n        var count\
    \ = 0;\n        var word = new StringBuilder();\n        for (var i = 0; i < s.length();\
    \ i++) {\n            var ch = s.charAt(i);\n            if (ch != ' ') {\n  \
    \              word.append(ch);\n                if (isConsonant(ch)) {\n    \
    \                count++;\n                }\n            } else {\n         \
    \       if (count == n) {\n                    list.add(word.toString());\n  \
    \              }\n                word = new StringBuilder();\n              \
    \  count = 0;\n            }\n        }\n        if (count == n) {\n         \
    \   list.add(word.toString());\n        }\n        return list;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0f0g23ru.java:28: error: cannot find symbol\n                if\
    \ (isConsonant(ch)) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      for (String word : s.split(\" \")) {\n            if (numConsonants(word)\
    \ == n) {\n                words.add(word);\n            }\n        }\n      \
    \  return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptb64mery.java:23: error: cannot find symbol\n            if (numConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method numConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] arr = s.split(\" \");\n        for (String word : arr) {\n   \
    \         int count = 0;\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                if (!isVowel(word.charAt(i))) {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     words.add(word);\n            }\n        }\n        return words;\n}\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytyzu5zq.java:26: error: cannot find symbol\n                if\
    \ (!isVowel(word.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       if (s.length() == 0) return result;\n        String[] words = s.split(\"\
    \ \");\n        for (String word : words) {\n            int numberOfConsonants\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c))\
    \ numberOfConsonants++;\n            }\n            if (numberOfConsonants ==\
    \ n) result.add(word);\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pbfobji.java:27: error: cannot find symbol\n                if\
    \ (isConsonant(c)) numberOfConsonants++;\n                    ^\n  symbol:   method\
    \ isConsonant(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] array = s.split(\" \");\n        for (String w : array) {\n  \
    \          if (w.length() == n) {\n                words.add(w);\n           \
    \ }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt6mxqvgg.java:31)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return new ArrayList<String>();\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi1v8k5h.java:24)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // write your code here\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp8wh9czjh.java:22: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return selectWordsStream(s, n);\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_6tcsf7.java:21: error: cannot find symbol\n        return selectWordsStream(s,\
    \ n);\n               ^\n  symbol:   method selectWordsStream(String,int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       if (s.length() == 0) {\n            return result;\n        }\n      \
    \  String[] words = s.split(\" \");\n        for (String word : words) {\n   \
    \         int numConsonants = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n                    numConsonants++;\n                }\n          \
    \  }\n            if (numConsonants == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2cf6z5rs.java:44)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        // TODO: implement this function\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexbnkfks.java:27)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        String[]\
    \ words = s.split(\" \");\n        String vowels = \"aeiou\";\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                if (vowels.indexOf(word.charAt(i)) ==\
    \ -1) {\n                    count++;\n                }\n            }\n    \
    \        if (count == n) {\n                res.add(word);\n            }\n  \
    \      }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30xf36yb.java:42)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        for\
    \ (String word : s.split(\" \")) {\n            if (countConsonants(word) == n)\
    \ res.add(word);\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeig3fequ.java:23: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) res.add(word);\n                ^\n  symbol:   method countConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzc6pgl_.java:42)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: Implement your code here.\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmp5i8wpzzp.java:25)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> l = new ArrayList<String>();\n      \
    \  int m = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char\
    \ c = s.charAt(i);\n            if (c != ' ') {\n                if (!\"aeiouAEIOU\"\
    .contains(String.valueOf(c))) {\n                    m++;\n                }\n\
    \            } else {\n                if (m == n) {\n                    l.add(s.substring(0,\
    \ i));\n                }\n                s = s.substring(i + 1);\n         \
    \       i = 0;\n                m = 0;\n            }\n        }\n        if (m\
    \ == n) {\n            l.add(s);\n        }\n        return l;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgsbqke1r.java:44)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> ret = new ArrayList<String>();\n    \
    \    String[] words = s.split(\" \");\n        for (String word : words) {\n \
    \           if (countConsonants(word) == n)\n                ret.add(word);\n\
    \        }\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd29v7ja5.java:24: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n)\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Implement select_words function.\n        // if s is\
    \ \"\" return new ArrayList<String>()\n        if (s.equals(\"\")) return new\
    \ ArrayList<String>();\n        // else\n        else {\n            // split\
    \ string by space\n            String[] words = s.split(\" \");\n            //\
    \ new array list\n            ArrayList<String> result = new ArrayList<String>();\n\
    \            // loop through words\n            for (String word : words) {\n\
    \                // count the number of vowels, if the number of consonants equals\
    \ n, \n                // then append the word to the new array list.\n      \
    \          if (selectWordsHelper(word) == n) result.add(word);\n            }\n\
    \            // return the new array list\n            return result;\n      \
    \  }\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7s11se1x.java:34: error: cannot find symbol\n                if\
    \ (selectWordsHelper(word) == n) result.add(word);\n                    ^\n  symbol:\
    \   method selectWordsHelper(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consonants = 0;\n            for (char ch : word.toCharArray())\
    \ {\n                if (!isVowel(ch)) {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbobrlcki.java:26: error: cannot find symbol\n                if\
    \ (!isVowel(ch)) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        if (s.length() == 0) return new ArrayList<String>();\n\
    \        String[] ws = s.split(\" \");\n        int[] freq = new int[26];\n  \
    \      for (String w : ws) {\n            for (int i = 0; i < w.length(); i++)\
    \ {\n                if (!\"aeiou\".contains(w.substring(i, i + 1))) freq[w.charAt(i)\
    \ - 'a']++;\n            }\n        }\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        for (String w : ws) {\n            int f = 0;\n            for (int i\
    \ = 0; i < w.length(); i++) {\n                if (!\"aeiou\".contains(w.substring(i,\
    \ i + 1))) f += freq[w.charAt(i) - 'a'];\n            }\n            if (f ==\
    \ n) res.add(w);\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -20 out of bounds for length 26\n\tat Problem.selectWords(tmpmtnbmc9f.java:26)\n\
    \tat Problem.main(tmpmtnbmc9f.java:40)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] arr = s.split(\" \");\n        int num_consonants = 0;\n    \
    \    for (String st : arr) {\n            String[] arr_st = st.split(\"\");\n\
    \            num_consonants = 0;\n            for (String st_2 : arr_st) {\n \
    \               if (st_2.equals(\"a\") || st_2.equals(\"e\") || st_2.equals(\"\
    i\") || st_2.equals(\"o\") || st_2.equals(\"u\")) {\n                    continue;\n\
    \                } else {\n                    num_consonants += 1;\n        \
    \        }\n            }\n            if (num_consonants == n) {\n          \
    \      result.add(st);\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppa7hfo3v.java:45)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        final ArrayList<String> result = new ArrayList<>();\n \
    \       final String[] split = s.split(\" \");\n        for (String word : split)\
    \ {\n            if (word.length() < n) {\n                continue;\n       \
    \     }\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (isConsonant(c)) {\n                    count++;\n   \
    \             }\n            }\n            if (count == n) {\n              \
    \  result.add(word);\n            }\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60ofvpog.java:29: error: cannot find symbol\n                if\
    \ (isConsonant(c)) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       for (String word : s.split(\" \")) {\n            if (getConsonantCount(word)\
    \ == n) result.add(word);\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxwr_gviq.java:23: error: cannot find symbol\n            if (getConsonantCount(word)\
    \ == n) result.add(word);\n                ^\n  symbol:   method getConsonantCount(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return new ArrayList<>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9h9fb4b.java:24)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      //int b=0;\n        int count = 0;\n        int[] a = new int[n];\n   \
    \     //  int current=0;\n        for (int i = 0; i < s.length(); i++) {\n   \
    \         if (s.charAt(i) == ' ') {\n                if (count == n) {\n     \
    \               int b = 0;\n                    for (int c : a) {\n          \
    \              b += c;\n                    }\n                    words.add(s.substring(b,\
    \ i));\n                }\n                count = 0;\n                a = new\
    \ int[n];\n            } else if (isVowel(s.charAt(i))) {\n                count\
    \ = 0;\n                a = new int[n];\n            } else {\n              \
    \  if (count < n) {\n                    a[count] = i;\n                    count++;\n\
    \                }\n            }\n        }\n        if (count == n) {\n    \
    \        int b = 0;\n            for (int c : a) {\n                b += c;\n\
    \            }\n            words.add(s.substring(b, s.length()));\n        }\n\
    \        return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpugw2eyj7.java:37: error: cannot find symbol\n            } else\
    \ if (isVowel(s.charAt(i))) {\n                       ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      if (s.length() == 0) {\n            return words;\n        }\n        String[]\
    \ arrayOfWords = s.split(\" \");\n        for (String word : arrayOfWords) {\n\
    \            if (n == countConsonants(word)) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpve2m0x8f.java:27: error: cannot find symbol\n            if (n\
    \ == countConsonants(word)) {\n                     ^\n  symbol:   method countConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        if (s.isEmpty()) return new ArrayList<>();\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        for (String word : s.split(\" \"))\n     \
    \       if (consonantsCount(word) == n) res.add(word);\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8jjzx9w.java:24: error: cannot find symbol\n            if (consonantsCount(word)\
    \ == n) res.add(word);\n                ^\n  symbol:   method consonantsCount(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] tokens = s.split(\" \");\n        for (String word : tokens)\
    \ {\n            if (isConsonant(word, n)) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjsqmrmry.java:24: error: cannot find symbol\n            if (isConsonant(word,\
    \ n)) {\n                ^\n  symbol:   method isConsonant(String,int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       ArrayList<String> words = new ArrayList<String>(Arrays.asList(s.split(\"\
    \ \")));\n        for (String word : words) {\n            if (numConsonants(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppbhhqswk.java:24: error: cannot find symbol\n            if (numConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method numConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        String[]\
    \ list = s.split(\"\\\\s+\");\n        for (String word : list) {\n          \
    \  int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n   \
    \             if (isConsonant(word.charAt(i))) {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     words.add(word);\n            }\n        }\n        return words;\n}\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsz5bbirr.java:26: error: cannot find symbol\n                if\
    \ (isConsonant(word.charAt(i))) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         if (consonantsCount(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxri_xs3.java:24: error: cannot find symbol\n            if (consonantsCount(word)\
    \ == n) {\n                ^\n  symbol:   method consonantsCount(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] wordsArr = s.split(\" \");\n        for (String w : wordsArr)\
    \ {\n            if (w.length() == n) {\n                words.add(w);\n     \
    \       }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1gnd_gr9.java:31)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.length() == 0) {\n            return result;\n        }\n     \
    \   String[] words = s.split(\" \");\n        for (String word : words) {\n  \
    \          if (isConstant(word, n)) {\n                result.add(word);\n   \
    \         }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgubt5h52.java:30: error: cannot find symbol\n            if (isConstant(word,\
    \ n)) {\n                ^\n  symbol:   method isConstant(String,int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        for (String word : words) {\n            if\
    \ (numConsonants(word) == n) res.add(word);\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3aeeqxs2.java:24: error: cannot find symbol\n            if (numConsonants(word)\
    \ == n) res.add(word);\n                ^\n  symbol:   method numConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        throw new RuntimeException(\"implement me\");\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: implement me\n\
    \tat Problem.selectWords(tmp2o7xagv3.java:21)\n\tat Problem.main(tmp2o7xagv3.java:24)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        int\
    \ cons = 0;\n        String temp = \"\";\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (s.charAt(i) == ' ') {\n                words.add(temp);\n\
    \                temp = \"\";\n                cons = 0;\n            } else {\n\
    \                temp += s.charAt(i);\n                if (!isVowel(s.charAt(i)))\
    \ cons++;\n            }\n        }\n        words.add(temp);\n        for (int\
    \ i = 0; i < words.size(); i++) {\n            if (countConsonants(words.get(i))\
    \ != n) {\n                words.remove(i);\n                i--;\n          \
    \  }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3uz5imt.java:31: error: cannot find symbol\n                if\
    \ (!isVowel(s.charAt(i))) cons++;\n                     ^\n  symbol:   method\
    \ isVowel(char)\n  location: class Problem\n/tmp/tmpq3uz5imt.java:36: error: cannot\
    \ find symbol\n            if (countConsonants(words.get(i)) != n) {\n       \
    \         ^\n  symbol:   method countConsonants(String)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ words_n = new ArrayList<String>();\n        for (String word : words) {\n  \
    \          if (word.length() == n) {\n                words_n.add(word);\n   \
    \         }\n        }\n        return words_n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnp6mx8of.java:31)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return new ArrayList<>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9h9fb4b.java:24)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Your code here:\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmp2ojrotok.java:25)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> a = new ArrayList<String>();\n      \
    \  ArrayList<String> words = new ArrayList<String>(Arrays.asList(s.split(\" \"\
    )));\n        for (String word : words) {\n            if (nConsonants(word) ==\
    \ n) {\n                a.add(word);\n            }\n        }\n        return\
    \ a;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnb__kah.java:24: error: cannot find symbol\n            if (nConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method nConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: Implement this function\n        // (Hint: One\
    \ way to do it is to convert string s to an array of words)\n        // throw\
    \ new NotImplementedException();\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>(Arrays.asList(s.split(\"\
    \ \")));\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqemphjw.java:27: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      // int n = 4;\n        // String s = \"Mary had a little lamb\";\n    \
    \    Pattern p = Pattern.compile(\"[bcdfghjklmnpqrstvwxyz]\", Pattern.CASE_INSENSITIVE);\n\
    \        for (String word : s.split(\" \")) {\n            int count = 0;\n  \
    \          for (int i = 0; i < word.length(); i++) {\n                if (p.matcher(String.valueOf(word.charAt(i))).matches())\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                words.add(word);\n            }\n    \
    \    }\n        return words;\n}\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ld_x_el.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"[bcdfghjklmnpqrstvwxyz]\", Pattern.CASE_INSENSITIVE);\n\
    \        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmp9ld_x_el.java:24:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"[bcdfghjklmnpqrstvwxyz]\"\
    , Pattern.CASE_INSENSITIVE);\n                                               \
    \                ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmp9ld_x_el.java:24: error: cannot find symbol\n        Pattern p = Pattern.compile(\"\
    [bcdfghjklmnpqrstvwxyz]\", Pattern.CASE_INSENSITIVE);\n                    ^\n\
    \  symbol:   variable Pattern\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        if (s.isEmpty()) return new ArrayList<>();\n        if\
    \ (n == 0) return new ArrayList<>();\n        final String[] words = s.split(\"\
    \\\\s+\");\n        final ArrayList<String> result = new ArrayList<>();\n    \
    \    for (final String word : words) {\n            if (isConsonant(word.charAt(0)))\
    \ {\n                int cnt = 1;\n                for (int i = 1; i < word.length();\
    \ i++) {\n                    if (isConsonant(word.charAt(i))) cnt++;\n      \
    \          }\n                if (cnt == n) result.add(word);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqgk5c9sl.java:26: error: cannot find symbol\n            if (isConsonant(word.charAt(0)))\
    \ {\n                ^\n  symbol:   method isConsonant(char)\n  location: class\
    \ Problem\n/tmp/tmpqgk5c9sl.java:29: error: cannot find symbol\n             \
    \       if (isConsonant(word.charAt(i))) cnt++;\n                        ^\n \
    \ symbol:   method isConsonant(char)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> retVal = new ArrayList<String>();\n \
    \       // put your code here\n        String[] words = s.split(\" \");\n    \
    \    for (String word : words) {\n            int num_consonants = 0;\n      \
    \      for (char c : word.toCharArray()) {\n                if (!isVowel(c)) {\n\
    \                    num_consonants++;\n                }\n            }\n   \
    \         if (num_consonants == n) {\n                retVal.add(word);\n    \
    \        }\n        }\n        return retVal;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nqiff8g.java:27: error: cannot find symbol\n                if\
    \ (!isVowel(c)) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> rv = new ArrayList<String>();\n     \
    \   // implementation\n        return rv;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwglkl_po.java:26)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (checkConsonants(word, n)) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt8onu2bp.java:24: error: cannot find symbol\n            if (checkConsonants(word,\
    \ n)) {\n                ^\n  symbol:   method checkConsonants(String,int)\n \
    \ location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (words.length == 0) {\n      \
    \      return result;\n        }\n        for (String word : words) {\n      \
    \      int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                char letter = word.charAt(i);\n                if (letter !=\
    \ 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count == n) {\n                result.add(word);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp58088uwg.java:45)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     result.add(word);\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0uj0w3d6.java:38)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (isConsonant(word.charAt(i))) consonants++;\n   \
    \         }\n            if (consonants == n) result.add(word);\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf3ocsz0.java:26: error: cannot find symbol\n                if\
    \ (isConsonant(word.charAt(i))) consonants++;\n                    ^\n  symbol:\
    \   method isConsonant(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] split_s = s.split(\" \");\n        for (String w : split_s) {\n\
    \            int count = 0;\n            for (int i = 0; i < w.length(); i++)\
    \ {\n                String c = w.substring(i, i + 1);\n                if (c.equals(\"\
    a\") || c.equals(\"e\") || c.equals(\"i\") || c.equals(\"o\") || c.equals(\"u\"\
    ))\n                    count++;\n            }\n            if (count == n)\n\
    \                words.add(w);\n        }\n        return words;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_nbofz3.java:36)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Please implement the function\n        // input: string\
    \ s, a natural number n\n        // output: arraylist of strings\n        // constraints:\
    \ space complexity O(1)\n        //              time complexity O(n)\n      \
    \  //              use of a hashtable is allowed\n        //              use\
    \ of a buffer is allowed (but not recommended)\n        //              use of\
    \ a hashmap is allowed\n        // edge cases: string s is empty -> return empty\
    \ list\n        //             n is 0 -> return empty list\n        // test cases:\
    \ empty string, n = 0\n        //             s = \"abc\" n = 0\n        //  \
    \           s = \"abc\" n = 1\n        //             s = \"abc\" n = 2\n    \
    \    //             s = \"abc\" n = 3\n        //             s = \"abc\" n =\
    \ 4\n        //             s = \"abc\" n = 5\n        //             s = \"abc\"\
    \ n = 6\n        //             s = \"Mary had a little lamb\" n = 4\n       \
    \ //             s = \"Mary had a little lamb\" n = 3\n        //            \
    \ s = \"simple white space\" n = 2\n        //             s = \"Hello world\"\
    \ n = 4\n        //             s = \"Uncle sam\" n = 3\n        // runtime: O(n)\n\
    \        ArrayList<String> output = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (numConsonants(word) == n) {\n                output.add(word);\n          \
    \  }\n        }\n        return output;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_4o1abqj.java:48: error: cannot find symbol\n            if (numConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method numConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        s = s.toLowerCase();\n        ArrayList<String> words =\
    \ new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants = new ArrayList<>();\n\
    \        String[] splitted = s.split(\" \");\n        for (String word : splitted)\
    \ {\n            words.add(word);\n        }\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     wordsWithNConsonants.add(word);\n            }\n        }\n        return\
    \ wordsWithNConsonants;\n}\n    public static void main(String[] args) {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdufgisst.java:44)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] tokens = s.split(\" \");\n        for (String token : tokens)\
    \ {\n            int count = 0;\n            for (int i = 0; i < token.length();\
    \ i++) {\n                if (!Problem.isVowel(token.charAt(i))) {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ == n) {\n                words.add(token);\n            }\n        }\n     \
    \   return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8xvaepo.java:26: error: cannot find symbol\n                if\
    \ (!Problem.isVowel(token.charAt(i))) {\n                            ^\n  symbol:\
    \   method isVowel(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Initialize result\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        // Split given string into words\n     \
    \   String[] words = s.split(\" \");\n        // Iterate through the words\n \
    \       for (String word : words) {\n            // Iterate through each letter\
    \ in each word\n            int consonants = 0;\n            for (int i = 0; i\
    \ < word.length(); i++) {\n                // If the current letter is a consonant\n\
    \                if (!isVowel(word.charAt(i))) {\n                    // Increment\
    \ the consonant count\n                    consonants++;\n                }\n\
    \            }\n            // If the number of consonants is equal to the desired\
    \ number\n            if (consonants == n) {\n                // Append the word\
    \ to the result\n                result.add(word);\n            }\n        }\n\
    \        // Return the result\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ydxkk7s.java:31: error: cannot find symbol\n                if\
    \ (!isVowel(word.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (check(word, n)) {\n                result.add(word);\n      \
    \      }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8b67xs0b.java:24: error: cannot find symbol\n            if (check(word,\
    \ n)) {\n                ^\n  symbol:   method check(String,int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         int consonants = word.chars().filter(ch -> \"qwrtypsdfghjklzxcvbnm\"\
    .indexOf(ch) >= 0).toArray().length;\n            if (consonants == n) {\n   \
    \             result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpok8jd6gw.java:33)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (getConsonantCount(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk6i9dc1.java:24: error: cannot find symbol\n            if (getConsonantCount(word)\
    \ == n) {\n                ^\n  symbol:   method getConsonantCount(String)\n \
    \ location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       if (s.length() == 0) return result;\n        String[] words = s.split(\"\
    \ \");\n        for (String word : words) {\n            int count = 0;\n    \
    \        for (char c : word.toCharArray()) {\n                if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') count++;\n            }\n    \
    \        if (count == n) result.add(word);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6s297ra.java:38)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] split = s.split(\" \");\n        for (String word : split) {\n\
    \            int numConsonants = 0;\n            int wordLength = word.length();\n\
    \            for (int i = 0; i < wordLength; i++) {\n                String currentLetter\
    \ = word.substring(i, i + 1);\n                if (isConsonant(currentLetter))\
    \ {\n                    numConsonants++;\n                }\n            }\n\
    \            if (numConsonants == n) {\n                words.add(word);\n   \
    \         }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzhqw9zh0.java:28: error: cannot find symbol\n                if\
    \ (isConsonant(currentLetter)) {\n                    ^\n  symbol:   method isConsonant(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ selectedWords = new ArrayList<String>();\n        for (String word : words)\
    \ {\n            int totalConsonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    totalConsonants++;\n\
    \                }\n            }\n            if (totalConsonants == n) {\n \
    \               selectedWords.add(word);\n            }\n        }\n        return\
    \ selectedWords;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkcwppfvg.java:42)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] parts = s.split(\" \");\n        for (String part : parts) {\n\
    \            if (nOfConsonants(part) == n) {\n                words.add(part);\n\
    \            }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcj9329ox.java:24: error: cannot find symbol\n            if (nOfConsonants(part)\
    \ == n) {\n                ^\n  symbol:   method nOfConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         int num_con = 0;\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                if (word.charAt(i) != 'a' && word.charAt(i) != 'e' && word.charAt(i)\
    \ != 'i' && word.charAt(i) != 'o' && word.charAt(i) != 'u') {\n              \
    \      num_con++;\n                }\n            }\n            if (num_con ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6bpcqk6.java:41)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // write your code here\n        ArrayList<String> ws =\
    \ new ArrayList<>();\n        String[] ss = s.split(\" \");\n        for (String\
    \ x : ss) {\n            if (consonants(x) == n) {\n                ws.add(x);\n\
    \            }\n        }\n        return ws;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhcv_x84.java:25: error: cannot find symbol\n            if (consonants(x)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        for (String w : words) {\n            if (getConsoCount(w)\
    \ == n) res.add(w);\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvg9co42c.java:24: error: cannot find symbol\n            if (getConsoCount(w)\
    \ == n) res.add(w);\n                ^\n  symbol:   method getConsoCount(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            int wordLength = word.length();\n            int vowelLength\
    \ = 0;\n            char[] ch = word.toCharArray();\n            for (char c :\
    \ ch) {\n                if (isVowel(c)) {\n                    vowelLength++;\n\
    \                }\n            }\n            if (wordLength - vowelLength ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfeecmt7r.java:28: error: cannot find symbol\n                if\
    \ (isVowel(c)) {\n                    ^\n  symbol:   method isVowel(char)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Code here.\n        ArrayList<String> words = new ArrayList<>();\n\
    \        String[] arr = s.split(\" \");\n        for (String word : arr) {\n \
    \           if (consonants(word) == n) {\n                words.add(word);\n \
    \           }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppy7vokua.java:25: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        var output = new ArrayList<String>();\n        var words\
    \ = s.split(\"\\\\s+\");\n        for (String word : words) {\n            var\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ == n) {\n                output.add(word);\n            }\n        }\n     \
    \   return output;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmporffz07a.java:37)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        if (s.length() == 0) return new ArrayList<String>();\n\
    \        return Arrays.stream(s.split(\" \"))\n            .filter(str -> countConsonants(str)\
    \ == n)\n            .collect(Collectors.toCollection(ArrayList::new));\n}\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85vvmll5.java:23: error: cannot find symbol\n            .filter(str\
    \ -> countConsonants(str) == n)\n                           ^\n  symbol:   method\
    \ countConsonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (!isVowel(word.charAt(i))) {\n                  \
    \  count++;\n                }\n            }\n            if (count == n) {\n\
    \                result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw90sxj5h.java:26: error: cannot find symbol\n                if\
    \ (!isVowel(word.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> list = new ArrayList<String>();\n   \
    \     String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          list.add(word);\n            }\n        }\n        return list;\n}\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5f4z6mdd.java:42)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (word.replaceAll(\"[^aeiouAEIOU]\", \"\").length() == n) {\n \
    \               result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptfv_wj1a.java:31)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] allWords = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ rtn = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>(Arrays.asList(allWords));\n\
    \        for (String word : words) {\n            if (word.matches(\"[^aeiouAEIOU\\\
    \\s]+\")) {\n                int count = word.replaceAll(\"[^aeiouAEIOU\\\\s]\"\
    , \"\").length();\n                if (count == n) {\n                    rtn.add(word);\n\
    \                }\n            }\n        }\n        return rtn;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiiz1jvx_.java:35)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: make this function return a list of all words\
    \ from the string s that contain exactly n consonants.\n        // TODO: sort\
    \ words by the order they appear in the string.\n        // TODO: return an empty\
    \ list if the string s is empty.\n        return null;\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpnbndraov.java:27)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> selected = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (numConsonants(word) == n)\n                selected.add(word);\n\
    \        }\n        return selected;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxfiqr1t.java:24: error: cannot find symbol\n            if (numConsonants(word)\
    \ == n)\n                ^\n  symbol:   method numConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return new ArrayList<String>();\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi1v8k5h.java:24)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        String[]\
    \ splitted = s.split(\" \");\n        for (String word : splitted) {\n       \
    \     if (n == getConsonantsCount(word)) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd95kffav.java:24: error: cannot find symbol\n            if (n\
    \ == getConsonantsCount(word)) {\n                     ^\n  symbol:   method getConsonantsCount(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return new ArrayList<String>();\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi1v8k5h.java:24)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String vowels = \"aeiou\";\n        return Stream.of(s.split(\"\
    \ \"))\n            .filter(word -> word.length() > 0)\n            .filter(word\
    \ -> word.chars().filter(c -> vowels.indexOf(c) < 0).count() == n)\n         \
    \   .collect(Collectors.toCollection(ArrayList::new));\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2wu2aue3.java:32)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        int\
    \ count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (isConsonant(s.charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            words.add(s);\n        }\n        return words;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvvv_3k6k.java:24: error: cannot find symbol\n            if (isConsonant(s.charAt(i)))\
    \ {\n                ^\n  symbol:   method isConsonant(char)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] wordArr = s.split(\" \");\n        int counter = 0;\n        for\
    \ (String w : wordArr) {\n            if (w.length() == 0) continue;\n       \
    \     counter = 0;\n            for (int i = 0; i < w.length(); i++) {\n     \
    \           char c = w.charAt(i);\n                if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                    counter++;\n      \
    \          }\n            }\n            if (counter == n) {\n               \
    \ words.add(w);\n            }\n        }\n        return words;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeer3ers_.java:40)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> output = new ArrayList<String>();\n \
    \       String[] arr = s.split(\" \");\n        for (String el : arr) {\n    \
    \        int counter = 0;\n            for (int i = 0; i < el.length(); i++) {\n\
    \                if (el.charAt(i) != 'a' && el.charAt(i) != 'e' && el.charAt(i)\
    \ != 'i' && el.charAt(i) != 'o' && el.charAt(i) != 'u') {\n                  \
    \  counter++;\n                }\n            }\n            if (counter == n)\
    \ {\n                output.add(el);\n            }\n        }\n        return\
    \ output;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp599zwtsh.java:41)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> list = new ArrayList<String>();\n   \
    \     String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consCount = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char ch = word.charAt(i);\n                boolean isCons\
    \ = !(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');\n      \
    \          if (isCons) consCount++;\n            }\n            if (consCount\
    \ == n) list.add(word);\n        }\n        return list;\n}\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecloz6hf.java:39)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> answer = new ArrayList<String>();\n \
    \       // Your code here\n        return answer;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32gtltol.java:26)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1rcceu4.java:25)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        if\
    \ (s.length() == 0) return res;\n        for (String word : s.split(\" \")) {\n\
    \            int numConsonants = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (!isVowel(c)) {\n                    numConsonants++;\n\
    \                }\n            }\n            if (numConsonants == n) {\n   \
    \             res.add(word);\n            }\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9pr3gz4.java:26: error: cannot find symbol\n                if\
    \ (!isVowel(c)) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       int[] cnt = new int[(int)'z'+1];\n        for (int i = 0; i < (int)'z'+1;\
    \ i++) cnt[i] = 0;\n        for (int i = 0; i < (int)'z'+1; i++) {\n         \
    \   if (i == (int)'a' || i == (int)'e' || i == (int)'i' || i == (int)'o' || i\
    \ == (int)'u') {\n                cnt[i] = 1;\n            } else if (i >= (int)'a'\
    \ && i <= (int)'z') {\n                cnt[i] = 2;\n            }\n        }\n\
    \        int i = 0;\n        while (i < s.length()) {\n            int j = i;\n\
    \            while (j < s.length() && s.charAt(j) != ' ') j++;\n            int\
    \ word_consonants = 0;\n            for (int k = i; k < j; k++) {\n          \
    \      word_consonants += cnt[(int)s.charAt(k)];\n            }\n            if\
    \ (word_consonants == n) {\n                result.add(s.substring(i, j));\n \
    \           }\n            i = j+1;\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwqj22pds.java:47)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpidju6qu8.java:24: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] arr = s.split(\" \");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : arr) {\n     \
    \       if (consonants(word) == n) {\n                result.add(word);\n    \
    \        }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb32uaya7.java:24: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] ss = s.split(\" \");\n        for (String w : ss) {\n        \
    \    if (consonants(w) == n) {\n                words.add(w);\n            }\n\
    \        }\n        return words;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1krhj19n.java:24: error: cannot find symbol\n            if (consonants(w)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consonants = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n                    consonants++;\n                }\n            }\n\
    \            if (consonants == n) {\n                result.add(word);\n     \
    \       }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrn1316t.java:41)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: Write your solution here\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpif9qavhw.java:25)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return new ArrayList<>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9h9fb4b.java:24)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0b2vpg1.java:24: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // enter your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpbydntqld.java:25)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> ans = new ArrayList<String>();\n    \
    \    if (s.length() == 0) {\n            return ans;\n        }\n        String[]\
    \ words = s.split(\" \");\n        for (String w : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < w.length(); i++) {\n                char\
    \ c = w.charAt(i);\n                if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u') {\n                    count++;\n                }\n   \
    \         }\n            if (count == n) {\n                ans.add(w);\n    \
    \        }\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfhqhftfo.java:45)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        StringTokenizer\
    \ st = new StringTokenizer(s);\n        while (st.hasMoreTokens()) {\n       \
    \     String word = st.nextToken();\n            if (countConsonants(word) ==\
    \ n) {\n                words.add(word);\n            }\n        }\n        return\
    \ words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaong0qr2.java:25: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       int num_consonants = 0;\n        int index = 0;\n        for (String word\
    \ : s.split(\" \")) {\n            index = 0;\n            num_consonants = 0;\n\
    \            for (int i = 0; i < word.length(); i++) {\n                if (isVowel(word.charAt(i)))\
    \ {\n                    index = 0;\n                } else {\n              \
    \      index++;\n                    if (index == n) {\n                     \
    \   num_consonants++;\n                        index = 0;\n                  \
    \  }\n                }\n            }\n            if (num_consonants == 1) {\n\
    \                result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg7hpgd_.java:28: error: cannot find symbol\n                if\
    \ (isVowel(word.charAt(i))) {\n                    ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      // TODO: implement this\n        return words;\n}\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4ap4w37.java:26)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> v = new ArrayList<String>();\n      \
    \  int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char\
    \ c = s.charAt(i);\n            if (c == ' ') {\n                if (cnt == n)\
    \ v.add(s.substring(i - cnt, i));\n                cnt = 0;\n            } else\
    \ {\n                if (isConsonant(c)) cnt++;\n            }\n        }\n  \
    \      if (cnt == n) v.add(s.substring(s.length() - cnt, s.length()));\n     \
    \   return v;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl97yiih2.java:29: error: cannot find symbol\n                if\
    \ (isConsonant(c)) cnt++;\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String [] words = s.split(\" \");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         if (word.length() == n) {\n                result.add(word);\n     \
    \       }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjufgsfmh.java:31)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> list = new ArrayList<String>();\n   \
    \     if (s == null || s.isEmpty()) {\n            return list;\n        }\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int count = 0;\n            char[] chars = word.toCharArray();\n\
    \            for (char c : chars) {\n                if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n     \
    \           }\n            }\n            if (count == n) {\n                list.add(word);\n\
    \            }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprd2msa3c.java:41)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ lst = new ArrayList<String>();\n        for (String word : words) {\n      \
    \      if (countConsonants(word) == n) {\n                lst.add(word);\n   \
    \         }\n        }\n        return lst;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpivugmtt4.java:24: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            String test = word.replaceAll(\"[aAeEiIoOuU]\", \"\");\n    \
    \        if (test.length() == n) {\n                result.add(word);\n      \
    \      }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] wordsInS = s.split(\" \");\n        for (String word : wordsInS)\
    \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char ch = word.charAt(i);\n                if (ch !=\
    \ 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u') {\n               \
    \     count++;\n                }\n            }\n            if (count == n)\
    \ {\n                words.add(word);\n            }\n        }\n        return\
    \ words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyehn2bfb.java:42)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> array = new ArrayList<String>();\n  \
    \      for (String word : s.split(\" \")) {\n            if (word.chars().filter(i\
    \ -> i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u').count() == n) {\n\
    \                array.add(word);\n            }\n        }\n        return array;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz91ubb65.java:34)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Edge Cases\n        if (s.isEmpty()) return new ArrayList<String>();\n\
    \        // A list of characters which we consider to be consonants\n        char[]\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'};\n        // A set containing all consonants\
    \ (duplicates will be removed)\n        Set<Character> set = new HashSet<Character>();\n\
    \        for (char c : consonants) {\n            set.add(c);\n        }\n   \
    \     // A list to store words from the input string\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        // A list to store characters which\
    \ belong to the same word\n        ArrayList<Character> word = new ArrayList<Character>();\n\
    \        // A list to store words that contain exactly n consonants\n        ArrayList<String>\
    \ n_consonants = new ArrayList<String>();\n        // Flag to indicate the start\
    \ of a new word\n        boolean new_word = true;\n        // Flag to indicate\
    \ that a word has the required number of consonants\n        boolean correct_consonants\
    \ = false;\n        // Count of the number of consonants in a word\n        int\
    \ consonants_count = 0;\n        // Store each character from the input string\n\
    \        for (char c : s.toCharArray()) {\n            // If we encounter a space,\
    \ then we have finished a word\n            if (c == ' ') {\n                //\
    \ But first, we check if the previous word satisfies the requirements\n      \
    \          // Count the number of consonants in the word\n                for\
    \ (char letter : word) {\n                    if (set.contains(letter)) consonants_count++;\n\
    \                }\n                // If we find exactly n consonants, then add\
    \ the word to the list\n                if (consonants_count == n) {\n       \
    \             // Convert our character list to a string\n                    String\
    \ str = \"\";\n                    for (char letter : word) {\n              \
    \          str += letter;\n                    }\n                    n_consonants.add(str);\n\
    \                }\n                //\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ughqqs7.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: implementation\n        if (s.isEmpty()) {\n \
    \           return new ArrayList<String>();\n        }\n        String[] words\
    \ = s.split(\" \");\n        ArrayList<String> answer = new ArrayList<String>();\n\
    \        for (String w : words) {\n            if (countConsonants(w) == n) {\n\
    \                answer.add(w);\n            }\n        }\n        return answer;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7u0nc9d.java:28: error: cannot find symbol\n            if (countConsonants(w)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        int\
    \ i = 0;\n        for (String p : s.split(\" \")) {\n            int count = 0;\n\
    \            for (int j = 0; j < p.length(); j++) {\n                char ch =\
    \ p.charAt(j);\n                if (\"AEIOUaeiou\".indexOf(ch) == -1) {\n    \
    \                count++;\n                }\n            }\n            if (count\
    \ == n) {\n                words.add(p);\n            }\n        }\n        return\
    \ words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       HashSet<Character> vowels = new HashSet<Character>();\n        vowels.add('a');\n\
    \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
    \        vowels.add('u');\n        for (String word : s.split(\" \")) {\n    \
    \        int consonants = 0;\n            for (char c : word.toCharArray()) {\n\
    \                if (!vowels.contains(c)) {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5h64my3.java:46)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        if (s.isEmpty()) return new ArrayList<>();\n        String[]\
    \ words = s.split(\" \");\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String word : words) {\n            int consonants = 0;\n      \
    \      for (int i = 0; i < word.length(); i++) {\n                if (!\"AEIOUaeiou\"\
    .contains(word.substring(i, i + 1))) {\n                    consonants++;\n  \
    \              }\n            }\n            if (consonants == n) {\n        \
    \        result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // TODO: implement\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpi2vgaa81.java:25)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return new ArrayList<>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9h9fb4b.java:24)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Implement this function\n        ArrayList<String> res\
    \ = new ArrayList<String>();\n        String[] words = s.split(\" \");\n     \
    \   for (String w : words) {\n            int vowels = 0;\n            for (int\
    \ i = 0; i < w.length(); i++) {\n                if (isVowel(w.charAt(i))) vowels++;\n\
    \            }\n            if (w.length() - vowels == n) res.add(w);\n      \
    \  }\n        return res;\n}\n    public static void main(String[] args) {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn2ox5tf1.java:27: error: cannot find symbol\n                if\
    \ (isVowel(w.charAt(i))) vowels++;\n                    ^\n  symbol:   method\
    \ isVowel(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       int consonants = 0;\n        String word = \"\";\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n         \
    \       word = \"\";\n                consonants = 0;\n            } else {\n\
    \                word += s.charAt(i);\n                if (!isVowel(s.charAt(i)))\
    \ consonants++;\n                if (consonants == n) result.add(word);\n    \
    \        }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s1ghfgt.java:30: error: cannot find symbol\n                if\
    \ (!isVowel(s.charAt(i))) consonants++;\n                     ^\n  symbol:   method\
    \ isVowel(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ selectedWords = new ArrayList<String>();\n        for (String word : words)\
    \ {\n            int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n                    consonants++;\n\
    \            }\n            if (consonants == n)\n                selectedWords.add(word);\n\
    \        }\n        return selectedWords;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9hbepgz.java:40)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Your code here\n        ArrayList<String> wordList =\
    \ new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String\
    \ word : words) {\n            char[] array = word.toCharArray();\n          \
    \  int counter = 0;\n            for (char ch : array) {\n                if (!(ch\
    \ == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')) {\n           \
    \         counter++;\n                }\n            }\n            if (counter\
    \ == n) {\n                wordList.add(word);\n            }\n        }\n   \
    \     return wordList;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_jxb8sz.java:43)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0b2vpg1.java:24: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        String[]\
    \ ss = s.split(\" \");\n        for (String str : ss) {\n            if (countConsonants(str)\
    \ == n) {\n                res.add(str);\n            }\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppd37p39b.java:24: error: cannot find symbol\n            if (countConsonants(str)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (numConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2peu78z.java:24: error: cannot find symbol\n            if (numConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method numConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Solution 1\n        // int total = 0;\n        // boolean\
    \ m = false;\n        // int start = 0;\n        // ArrayList<String> list = new\
    \ ArrayList<String>();\n        // for (int i = 0; i < s.length(); i++) {\n  \
    \      //     if (s.charAt(i) == ' ') {\n        //         if (total == n) {\n\
    \        //             list.add(s.substring(start, i));\n        //         }\n\
    \        //         total = 0;\n        //         m = false;\n        //    \
    \     start = i + 1;\n        //     } else if (s.charAt(i) != 'a' && s.charAt(i)\
    \ != 'e' && s.charAt(i) != 'i' && s.charAt(i) != 'o' && s.charAt(i) != 'u') {\n\
    \        //         total++;\n        //     }\n        // }\n        // if (total\
    \ == n) {\n        //     list.add(s.substring(start, s.length()));\n        //\
    \ }\n        // return list;\n        // Solution 2\n        ArrayList<String>\
    \ list = new ArrayList<String>();\n        String[] arr = s.split(\" \");\n  \
    \      for (int i = 0; i < arr.length; i++) {\n            int count = 0;\n  \
    \          for (int j = 0; j < arr[i].length(); j++) {\n                if (arr[i].charAt(j)\
    \ != 'a' && arr[i].charAt(j) != 'e' && arr[i].charAt(j) != 'i' && arr[i].charAt(j)\
    \ != 'o' && arr[i].charAt(j) != 'u') {\n                    count++;\n       \
    \         }\n            }\n            if (count == n) {\n                list.add(arr[i]);\n\
    \            }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsyn4vkw.java:63)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      // Write your solution here\n        return words;\n}\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjcl552p.java:26)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n      return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmphy1knhhc.java:24)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       if (s == null || s.length() == 0) {\n            return result;\n    \
    \    }\n        String[] words = s.split(\"\\\\s+\");\n        for (String word\
    \ : words) {\n            if (word.length() >= n) {\n                String wordLower\
    \ = word.toLowerCase();\n                int consonantCount = 0;\n           \
    \     for (int i = 0; i < wordLower.length(); i++) {\n                    char\
    \ c = wordLower.charAt(i);\n                    if (c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u') {\n                        consonantCount++;\n\
    \                    }\n                }\n                if (consonantCount\
    \ == n) {\n                    result.add(word);\n                }\n        \
    \    }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003963
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                String letter = word.substring(i, i + 1);\n        \
    \        if (!letter.matches(\"[aeiouAEIOU]\")) {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] arr = s.split(\" \");\n        for (String word : arr) {\n   \
    \         if (word.length() > n) {\n                String cons = word.replaceAll(\"\
    [aeiou]\", \"\");\n                if (cons.length() == n) {\n               \
    \     words.add(word);\n                }\n            }\n        }\n        return\
    \ words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeb2gskcq.java:38)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        for\
    \ (String word : s.split(\" \")) {\n            int wordLength = word.length();\n\
    \            if (n == wordLength) {\n                if (n % 2 == 0) {\n     \
    \               words.add(word);\n                }\n            } else if (n\
    \ == wordLength + 1) {\n                if (n % 2 == 1) {\n                  \
    \  words.add(word);\n                }\n            }\n        }\n        return\
    \ words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7uxbs2y.java:37)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0b2vpg1.java:24: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] result = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        String vowels = \"aeiou\";\n        for\
    \ (String word : result) {\n            int consonants = 0;\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                if (!vowels.contains(word.substring(i,\
    \ i + 1))) {\n                    consonants++;\n                }\n         \
    \   }\n            if (consonants == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfg3jck45.java:42)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp57awxr9h.java:25)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> selected = new ArrayList<String>();\n\
    \        int length = s.length();\n        String word = \"\";\n        int consonants\
    \ = 0;\n        for (int i = 0; i < length; i++) {\n            if (s.charAt(i)\
    \ != ' ') {\n                word += s.charAt(i);\n                if (!isVowel(s.charAt(i)))\
    \ {\n                    consonants++;\n                }\n            } else\
    \ {\n                if (consonants == n) {\n                    selected.add(word);\n\
    \                }\n                word = \"\";\n                consonants =\
    \ 0;\n            }\n        }\n        if (consonants == n) {\n            selected.add(word);\n\
    \        }\n        return selected;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7clkjcj1.java:28: error: cannot find symbol\n                if\
    \ (!isVowel(s.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // YOUR CODE GOES HERE\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpz1ma7wme.java:25)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      String[] split = s.split(\" \");\n        for (String str : split) {\n\
    \            String[] letters = str.split(\"\");\n            int count = 0;\n\
    \            for (String letter : letters) {\n                if (letter.matches(\"\
    [^aeiou]\")) {\n                    count++;\n                }\n            }\n\
    \            if (count == n) {\n                words.add(str);\n            }\n\
    \        }\n        return words;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0psf72v.java:42)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.replaceAll(\"[aeiouAEIOU]\", \"\").length() == n) {\n                res.add(word);\n\
    \            }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        // Write your code here\n        if (s.length()\
    \ == 0) return result;\n        s = s.toLowerCase();\n        int cnt = 0;\n \
    \       for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) ==\
    \ ' ') {\n                if (cnt == n) words.add(s.substring(0, i));\n      \
    \          cnt = 0;\n                s = s.substring(i + 1);\n               \
    \ i = 0;\n            } else if (isConsonant(s.charAt(i))) {\n               \
    \ cnt++;\n            }\n        }\n        if (cnt == n) words.add(s);\n    \
    \    return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n05opf7.java:33: error: cannot find symbol\n            } else\
    \ if (isConsonant(s.charAt(i))) {\n                       ^\n  symbol:   method\
    \ isConsonant(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        throw new UnsupportedOperationException(\"Not implemented.\"\
    );\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented.\n\tat Problem.selectWords(tmp3l0lpd73.java:21)\n\tat Problem.main(tmp3l0lpd73.java:24)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        //return new ArrayList<String>();\n        return Stream.of(s.split(\"\
    \\\\s+\"))\n            .filter(w -> w.replaceAll(\"[^aeiou]\", \"\").length()\
    \ == n)\n            .collect(Collectors.toCollection(ArrayList::new));\n}\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprpz73fre.java:27)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> res = new ArrayList<>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            String\
    \ onlyLetters = word.replaceAll(\"[^a-zA-Z]\", \"\");\n            int noOfConsonants\
    \ = onlyLetters.length() - vowelCount(onlyLetters);\n            if (noOfConsonants\
    \ == n) {\n                res.add(word);\n            }\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkz3t4j42.java:25: error: cannot find symbol\n            int noOfConsonants\
    \ = onlyLetters.length() - vowelCount(onlyLetters);\n                        \
    \                                ^\n  symbol:   method vowelCount(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.add(word);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzc6pgl_.java:42)\n"
  stdout: ''
  timestamp: 1660003956
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        for (String word : words) {\n            if\
    \ (numConsonants(word) == n) res.add(word);\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3aeeqxs2.java:24: error: cannot find symbol\n            if (numConsonants(word)\
    \ == n) res.add(word);\n                ^\n  symbol:   method numConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // It's a good idea to always make variable declarations\
    \ at the top of the \n        // method. This is just good practice and makes\
    \ the code a little more \n        // readable.\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        String[] tokens = s.split(\" \");\n    \
    \    for (String token : tokens) {\n            char[] characters = token.toCharArray();\n\
    \            int consCount = 0;\n            for (char c : characters) {\n   \
    \             // The HashSet consonants is being rebuilt every time you call\n\
    \                // this function. It's better to create it once and only once\n\
    \                // then to create it over and over again.\n                HashSet<Character>\
    \ consonants = new HashSet<Character>();\n                consonants.add('a');\n\
    \                consonants.add('e');\n                consonants.add('i');\n\
    \                consonants.add('o');\n                consonants.add('u');\n\
    \                consonants.add('y');\n                // A good time to use .contains\
    \ is when you have a HashSet. \n                // If you are using a list or\
    \ an array, then it's better to \n                // use the for loop.\n     \
    \           if (!consonants.contains(c)) {\n                    consCount++;\n\
    \                }\n            }\n            if (consCount == n) {\n       \
    \         result.add(token);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprg_e52_0.java:55)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> l = new ArrayList<String>();\n      \
    \  return l;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0zxv2gl.java:25)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        List<Pair<Integer,\
    \ Integer>> word_ranges = wordRanges(s);\n        for (Pair<Integer, Integer>\
    \ range : word_ranges) {\n            int word_start = range.getValue0();\n  \
    \          int word_end = range.getValue1();\n            String word = s.substring(word_start,\
    \ word_end);\n            int num_consonants = numConsonants(word);\n        \
    \    if (num_consonants == n) {\n                words.add(word);\n          \
    \  }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1u5rmypf.java:22: error: cannot find symbol\n        List<Pair<Integer,\
    \ Integer>> word_ranges = wordRanges(s);\n                                   \
    \                ^\n  symbol:   method wordRanges(String)\n  location: class Problem\n\
    /tmp/tmp1u5rmypf.java:27: error: cannot find symbol\n            int num_consonants\
    \ = numConsonants(word);\n                                 ^\n  symbol:   method\
    \ numConsonants(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        String[]\
    \ wordsArr = s.split(\" \");\n        for (String word : wordsArr) {\n       \
    \     if (countConsonants(word) == n) {\n                words.add(word);\n  \
    \          }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pvqm_e6.java:24: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> ret = new ArrayList<String>();\n    \
    \    String pattern = \"[bcdfghjklmnpqrstvwxyz]{\" + n + \"}\";\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.matches(pattern)) {\n                ret.add(word);\n            }\n \
    \       }\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8x3q1b6.java:32)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // your code here\n        String[] words = s.split(\"\
    \ \");\n        ArrayList<String> ret = new ArrayList<String>();\n        for\
    \ (String word : words) {\n            int cons = 0;\n            for (char c\
    \ : word.toCharArray()) {\n                if (!Character.isLetter(c)) continue;\n\
    \                switch (c) {\n                    case 'a': case 'e': case 'i':\
    \ case 'o': case 'u': break;\n                    default: cons++;\n         \
    \       }\n            }\n            if (cons == n) ret.add(word);\n        }\n\
    \        return ret;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1inkc3n4.java:42)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> list = new ArrayList<String>();\n   \
    \     int nbConsonants = 0;\n        String[] words = s.split(\" \");\n      \
    \  for (String word : words) {\n            nbConsonants = 0;\n            for\
    \ (char ch : word.toCharArray()) {\n                if (!\"aeiou\".contains(String.valueOf(ch)))\n\
    \                    nbConsonants++;\n            }\n            if (nbConsonants\
    \ == n)\n                list.add(word);\n        }\n        return list;\n}\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdv5ltm6h.java:40)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        if (s.length() == 0) return new ArrayList<String>();\n\
    \        // Use a set of characters as a filter.\n        Set<Character> filter\
    \ = new HashSet<>();\n        filter.add('a');\n        filter.add('e');\n   \
    \     filter.add('i');\n        filter.add('o');\n        filter.add('u');\n \
    \       ArrayList<String> words = new ArrayList<>();\n        for (String word\
    \ : s.split(\" \")) {\n            int c = 0;\n            for (int i = 0; i <\
    \ word.length(); i++) {\n                if (!filter.contains(word.charAt(i)))\
    \ c++;\n            }\n            if (c == n) words.add(word);\n        }\n \
    \       return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnw82mt6f.java:44)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> ret = new ArrayList<String>();\n    \
    \    // [your code here]\n        int count = 0;\n        for(int i = 0; i < s.length();\
    \ i++) {\n            if(isVowel(s.charAt(i))) {\n                count = 0;\n\
    \            } else {\n                count++;\n            }\n            if(count\
    \ == n) {\n                ret.add(s.substring(0, i+1));\n                s =\
    \ s.substring(i + 1);\n                i = 0;\n                count = 0;\n  \
    \          }\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnsj8wr0x.java:25: error: cannot find symbol\n            if(isVowel(s.charAt(i)))\
    \ {\n               ^\n  symbol:   method isVowel(char)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        s = s.toLowerCase();\n        ArrayList<String> words =\
    \ new ArrayList<String>();\n        int index = 0;\n        while (index < s.length())\
    \ {\n            while (index < s.length() && !Character.isLetter(s.charAt(index)))\
    \ index++;\n            if (index >= s.length()) break;\n            int start\
    \ = index;\n            while (index < s.length() && Character.isLetter(s.charAt(index)))\
    \ index++;\n            int end = index;\n            int numberOfConsonants =\
    \ 0;\n            for (int i = start; i < end; i++) {\n                if (s.charAt(i)\
    \ != 'a' && s.charAt(i) != 'e' && s.charAt(i) != 'i' && s.charAt(i) != 'o' &&\
    \ s.charAt(i) != 'u') {\n                    numberOfConsonants++;\n         \
    \       }\n            }\n            if (numberOfConsonants == n) {\n       \
    \         words.add(s.substring(start, end));\n            }\n        }\n    \
    \    return words;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxxo06rf0.java:44)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Do not edit this line\n        return new ArrayList<String>();\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg_sa8f2.java:25)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] splitted = s.split(\" \");\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        for (String word : splitted) {\n \
    \           int consonants = 0;\n            word = word.toLowerCase();\n    \
    \        for (int i = 0; i < word.length(); i++) {\n                if (!isVowel(word.charAt(i)))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19_rqeyu.java:27: error: cannot find symbol\n                if\
    \ (!isVowel(word.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<String>();\n  \
    \      for (String word : s.split(\" \")) {\n            if (countConsonants(word)\
    \ == n) words.add(word);\n        }\n        return words;\n}\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9rqwe_rb.java:23: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) words.add(word);\n                ^\n  symbol:   method countConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (isConsonant(word, n)) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioup0_x3.java:24: error: cannot find symbol\n            if (isConsonant(word,\
    \ n)) {\n                ^\n  symbol:   method isConsonant(String,int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       Pattern p = Pattern.compile(\"\\\\w+\");\n        Matcher m = p.matcher(s);\n\
    \        while (m.find()) {\n            String word = m.group();\n          \
    \  if (word.length() > n) {\n                int consonants = 0;\n           \
    \     for (int i = 0; i < word.length(); i++) {\n                    char c =\
    \ word.charAt(i);\n                    if (c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n                        consonants++;\n           \
    \         }\n                }\n                if (consonants == n) {\n     \
    \               result.add(word);\n                }\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowem0d_m.java:22: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"\\\\w+\");\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpowem0d_m.java:22: error: cannot find symbol\n       \
    \ Pattern p = Pattern.compile(\"\\\\w+\");\n                    ^\n  symbol: \
    \  variable Pattern\n  location: class Problem\n/tmp/tmpowem0d_m.java:23: error:\
    \ cannot find symbol\n        Matcher m = p.matcher(s);\n        ^\n  symbol:\
    \   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // your code here\n        ArrayList<String> words = new\
    \ ArrayList<>();\n        int consonants = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (s.charAt(i) == ' ') {\n                if (consonants\
    \ == n) {\n                    words.add(s.substring(0, i));\n               \
    \ }\n                s = s.substring(i + 1);\n                i = 0;\n       \
    \         consonants = 0;\n            } else if (!isVowel(s.charAt(i))) {\n \
    \               consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            words.add(s);\n        }\n        return words;\n}\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9jiwc6o.java:32: error: cannot find symbol\n            } else\
    \ if (!isVowel(s.charAt(i))) {\n                        ^\n  symbol:   method\
    \ isVowel(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpe6fu8v4p.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ list = new ArrayList<String>();\n        for (String w : words) {\n        \
    \    int numConsonants = 0;\n            w = w.toLowerCase();\n            for\
    \ (int i = 0; i < w.length(); i++) {\n                if (w.charAt(i) != 'a' &&\
    \ w.charAt(i) != 'e' && w.charAt(i) != 'i' && w.charAt(i) != 'o' && w.charAt(i)\
    \ != 'u') {\n                    numConsonants++;\n                }\n       \
    \     }\n            if (numConsonants == n) {\n                list.add(w);\n\
    \            }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplz98l3bl.java:39)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> words = new ArrayList<>();\n        ArrayList<Integer>\
    \ consonants = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            String letter = String.valueOf(s.charAt(i));\n            if\
    \ (letter.equals(\" \")) {\n                if (consonants.size() == n) {\n  \
    \                  words.add(s.substring(i - consonants.size(), i));\n       \
    \         }\n                consonants.clear();\n            } else if (isVowel(letter.toLowerCase()))\
    \ {\n                continue;\n            } else {\n                consonants.add(i);\n\
    \            }\n        }\n        if (consonants.size() == n) {\n           \
    \ words.add(s.substring(s.length() - consonants.size(), s.length()));\n      \
    \  }\n        return words;\n}\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl00uv6gf.java:30: error: cannot find symbol\n            } else\
    \ if (isVowel(letter.toLowerCase())) {\n                       ^\n  symbol:  \
    \ method isVowel(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> out = new ArrayList<String>();\n    \
    \    if (s.length() == 0) {\n            return out;\n        }\n        char[]\
    \ vowel = {'a', 'e', 'i', 'o', 'u'};\n        boolean isvowel = false;\n     \
    \   int cnt = 0;\n        String wrd = \"\";\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (s.charAt(i) == ' ') {\n                if (cnt == n)\
    \ {\n                    out.add(wrd);\n                }\n                cnt\
    \ = 0;\n                wrd = \"\";\n            } else {\n                for\
    \ (int j = 0; j < vowel.length; j++) {\n                    if (s.charAt(i) ==\
    \ vowel[j]) {\n                        isvowel = true;\n                     \
    \   break;\n                    }\n                }\n                if (!isvowel)\
    \ {\n                    cnt++;\n                }\n                isvowel =\
    \ false;\n                wrd += s.charAt(i);\n            }\n        }\n    \
    \    if (cnt == n) {\n            out.add(wrd);\n        }\n        return out;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrt_gmde.java:60)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        ArrayList<String> answer = new ArrayList<String>();\n \
    \       int counter = 0;\n        String word = \"\";\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (s.charAt(i) != ' ') {\n            \
    \    word += s.charAt(i);\n                if (isConsonant(s.charAt(i))) counter++;\n\
    \            } else {\n                if (counter == n) answer.add(word);\n \
    \               word = \"\";\n                counter = 0;\n            }\n  \
    \      }\n        if (counter == n) answer.add(word);\n        return answer;\n\
    }\n    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4feoorny.java:27: error: cannot find symbol\n                if\
    \ (isConsonant(s.charAt(i))) counter++;\n                    ^\n  symbol:   method\
    \ isConsonant(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // Your code here...\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpgdnxxq_b.java:25)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return\
    \ result;\n        }\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2xcr1q5.java:27: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        String[] split = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String word : split) {\n         \
    \   int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n  \
    \              if (word.charAt(i) != 'a' &&\n                    word.charAt(i)\
    \ != 'e' &&\n                    word.charAt(i) != 'i' &&\n                  \
    \  word.charAt(i) != 'o' &&\n                    word.charAt(i) != 'u') {\n  \
    \                  count++;\n                }\n            }\n            if\
    \ (count == n) {\n                result.add(word);\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvsowuhrk.java:45)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, int n) {\n        // your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ int)\" is null\n\tat Problem.main(tmpbsi2a7b3.java:25)\n"
  stdout: ''
  timestamp: 1660003965
