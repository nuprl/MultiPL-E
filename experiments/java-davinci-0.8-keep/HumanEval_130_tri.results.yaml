name: HumanEval_130_tri
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) {\n            return new ArrayList<Integer>();\n        } else if\
    \ (n == 1) {\n            return new ArrayList<Integer>(Arrays.asList(1));\n \
    \       } else if (n == 2) {\n            return new ArrayList<Integer>(Arrays.asList(1,\
    \ 3));\n        } else {\n            ArrayList<Integer> list = new ArrayList<Integer>(Arrays.asList(1,\
    \ 3, 2));\n            for (int i = 3; i <= n; i++) {\n                if (i %\
    \ 2 == 0) {\n                    list.add(1 + i / 2);\n                } else\
    \ {\n                    list.add(list.get(i - 1) + list.get(i - 2) + list.get(i\
    \ + 1));\n                }\n            }\n            return list;\n       \
    \ }\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrvlry4a.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n < 1) {\n            return new ArrayList<>();\n        }\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        result.add(1);\n        if (n == 1) {\n\
    \            return result;\n        }\n        result.add(3);\n        if (n\
    \ == 2) {\n            return result;\n        }\n        result.add(2);\n   \
    \     if (n == 3) {\n            return result;\n        }\n        int prev =\
    \ 3;\n        int preprev = 2;\n        int prepreprev = 1;\n        for (int\
    \ i = 4; i <= n; i++) {\n            int temp = prev;\n            prev = preprev\
    \ + prev + prepreprev;\n            prepreprev = preprev;\n            preprev\
    \ = temp;\n            result.add(prev);\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc7j251kj.java:52: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ t = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n    \
    \        if (i == 0) {\n                t.add(1);\n            } else if (i ==\
    \ 1) {\n                t.add(3);\n            } else if (i == 2) {\n        \
    \        t.add(2);\n            } else if (i % 2 == 0) {\n                t.add(1\
    \ + i / 2);\n            } else {\n                t.add(t.get(i - 1) + t.get(i\
    \ - 2) + t.get(i + 1));\n            }\n        }\n        return t;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp09_vug8i.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        for (int i = 1; i <= n + 1; i++) {\n\
    \            if (i == 1) {\n                list.add(3);\n            } else if\
    \ (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n\
    \                list.add(list.get(i - 1 - 1) + list.get(i - 2 - 1) + list.get(i\
    \ + 1 - 1));\n            }\n        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt_16mn7_.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ output = new ArrayList<Integer>();\n        if (n < 1) {\n            return\
    \ output;\n        }\n        output.add(1);\n        if (n < 2) {\n         \
    \   return output;\n        }\n        output.add(3);\n        if (n < 3) {\n\
    \            return output;\n        }\n        output.add(2);\n        if (n\
    \ < 4) {\n            return output;\n        }\n        int tri1 = 1;\n     \
    \   int tri2 = 3;\n        int tri3 = 2;\n        int tri = 0;\n        for (int\
    \ i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                tri =\
    \ 1 + i / 2;\n            } else {\n                tri = tri1 + tri2 + tri3;\n\
    \            }\n            tri1 = tri2;\n            tri2 = tri3;\n         \
    \   tri3 = tri;\n            output.add(tri);\n        }\n        return output;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfr5mrdoq.java:57: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        res.add(1);\n        if (n == 0) {\n\
    \            return res;\n        }\n        res.add(3);\n        for (int i =\
    \ 2; i <= n; i++) {\n            int a = res.get(i - 2);\n            int b =\
    \ res.get(i - 1);\n            int c = i % 2 == 0 ? 1 + i / 2 : a + b + res.get(i\
    \ + 1);\n            res.add(c);\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxjuqbc6h.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        int next = 0;\n        for (int i = 3; i <= n;\
    \ i++) {\n            if (i % 2 == 0) {\n                next = 1 + i / 2;\n \
    \           } else {\n                next = result.get(i - 1) + result.get(i\
    \ - 2) + result.get(i + 1);\n            }\n            result.add(next);\n  \
    \      }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps0l2agom.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0)\
    \ {\n            return list;\n        }\n        list.add(3);\n        if (n\
    \ == 1) {\n            return list;\n        }\n        list.add(2);\n       \
    \ if (n == 2) {\n            return list;\n        }\n        for (int i = 3;\
    \ i <= n; i++) {\n            int x = list.get(i - 1) + list.get(i - 2) + list.get(i\
    \ - 3);\n            list.add(x);\n        }\n        return list;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_b5vhua.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        // fill in res with the first n + 1\
    \ terms of the sequence\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bb6sugk.java:28: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            if (i == 0) {\n                result.add(1);\n            } else\
    \ if (i == 1) {\n                result.add(3);\n            } else if (i == 2)\
    \ {\n                result.add(2);\n            } else if (i % 2 == 0) {\n  \
    \              result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv7533den.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ fill in here...\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbbq3tx51.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        res.add(1);\n        res.add(3);\n       \
    \ res.add(2);\n        res.add(8);\n        for (int i = 4; i <= n; i++) {\n \
    \           if (i % 2 == 0) {\n                res.add(1 + i / 2);\n         \
    \   } else {\n                res.add(res.get(i - 1) + res.get(i - 2) + res.get(i\
    \ + 1));\n            }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnj7b7_rm.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n  \
    \          if (i == 0) res.add(1);\n            else if (i == 1) res.add(3);\n\
    \            else if (i == 2) res.add(2);\n            else if (i % 2 == 0) res.add(1\
    \ + i / 2);\n            else res.add(res.get(i - 1) + res.get(i - 2) + res.get(i\
    \ + 1));\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpksthvx2d.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ A little tricky.\n        // Totally I need to return n + 1 number.\n      \
    \  // For the first 1 number, if I use fib(1), I will get 3.\n        // So I\
    \ use fib(0) which is 1.\n        // Then the rest of the numbers in the sequence,\
    \ I use fib(n) which is (n + 1) + (n / 2).\n        // If n is even, then it becomes\
    \ fib(n + 1) = fib(n) / 2 + (n + 1) / 2 + 1\n        // If n is odd, then it becomes\
    \ fib(n + 1) = fib(n) + fib(n - 1) + fib(n + 2)\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n      \
    \      if (i == 0) {\n                result.add(fib(0));\n            } else\
    \ if (i % 2 == 0) {\n                result.add(fib(i + 1) / 2 + (i + 1) / 2 +\
    \ 1);\n            } else {\n                result.add(fib(i) + fib(i - 1) +\
    \ fib(i + 2));\n            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu9g19mhl.java:35: error: cannot find symbol\n                result.add(fib(0));\n\
    \                           ^\n  symbol:   method fib(int)\n  location: class\
    \ Problem\n/tmp/tmpu9g19mhl.java:37: error: cannot find symbol\n             \
    \   result.add(fib(i + 1) / 2 + (i + 1) / 2 + 1);\n                          \
    \ ^\n  symbol:   method fib(int)\n  location: class Problem\n/tmp/tmpu9g19mhl.java:39:\
    \ error: cannot find symbol\n                result.add(fib(i) + fib(i - 1) +\
    \ fib(i + 2));\n                           ^\n  symbol:   method fib(int)\n  location:\
    \ class Problem\n/tmp/tmpu9g19mhl.java:39: error: cannot find symbol\n       \
    \         result.add(fib(i) + fib(i - 1) + fib(i + 2));\n                    \
    \                ^\n  symbol:   method fib(int)\n  location: class Problem\n/tmp/tmpu9g19mhl.java:39:\
    \ error: cannot find symbol\n                result.add(fib(i) + fib(i - 1) +\
    \ fib(i + 2));\n                                                 ^\n  symbol:\
    \   method fib(int)\n  location: class Problem\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<Integer>();\n        if (n == 0) {\n            return ret;\n\
    \        }\n        ret.add(1);\n        if (n == 1) {\n            return ret;\n\
    \        }\n        ret.add(3);\n        if (n == 2) {\n            return ret;\n\
    \        }\n        ret.add(2);\n        int a = ret.get(ret.size() - 3);\n  \
    \      int b = ret.get(ret.size() - 2);\n        int c = ret.get(ret.size() -\
    \ 1);\n        for (int i = 3; i <= n; i++) {\n            int d = 1 + i / 2;\n\
    \            if (i % 2 == 1) {\n                d = a + b + c;\n            }\n\
    \            ret.add(d);\n            a = b;\n            b = c;\n           \
    \ c = d;\n        }\n        return ret;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxp7j8fro.java:52: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        ans.add(1);\n        ans.add(3);\n       \
    \ for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n            \
    \    ans.add(1 + i / 2);\n            } else {\n                ans.add(ans.get(i\
    \ - 1) + ans.get(i - 2) + ans.get(i + 1));\n            }\n        }\n       \
    \ return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp79o930kh.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ WRITE YOUR CODE HERE\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplci1dbz4.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            if (i == 0) {\n                result.add(1);\n            } else\
    \ if (i == 1) {\n                result.add(3);\n            } else if (i == 2)\
    \ {\n                result.add(2);\n            } else if (i % 2 == 0) {\n  \
    \              result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ssvn5dj.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0)\
    \ return list;\n        list.add(3);\n        if (n == 1) return list;\n     \
    \   list.add(2);\n        if (n == 2) return list;\n        int prev1 = 1;\n \
    \       int prev2 = 3;\n        int prev3 = 2;\n        for (int i = 3; i <= n;\
    \ i++) {\n            int tri = isEven(i) ? 1 + i / 2 : prev1 + prev2 + prev3;\n\
    \            list.add(tri);\n            prev1 = prev2;\n            prev2 = prev3;\n\
    \            prev3 = tri;\n        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbc15ajbh.java:36: error: cannot find symbol\n            int tri\
    \ = isEven(i) ? 1 + i / 2 : prev1 + prev2 + prev3;\n                      ^\n\
    \  symbol:   method isEven(int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp50a8_6dq.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        a.add(1);\n        a.add(3);\n      \
    \  a.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 ==\
    \ 0) {\n                a.add(1 + i / 2);\n            } else {\n            \
    \    a.add(a.get(i - 1) + a.get(i - 2) + a.get(i + 1));\n            }\n     \
    \   }\n        return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp96t8rs71.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Write your code here\n        ArrayList<Integer> tri = new ArrayList<Integer>();\n\
    \        tri.add(1);\n        tri.add(3);\n        tri.add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tri.add(1\
    \ + i / 2);\n            } else {\n                tri.add(tri.get(i - 1) + tri.get(i\
    \ - 2) + tri.get(i + 1));\n            }\n        }\n        return tri;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_zm9uzhq.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        ans.add(1);\n        ans.add(3);\n       \
    \ ans.add(2);\n        int A = 1, B = 3, C = 2;\n        for (int i = 0; i < n;\
    \ i++) {\n            int sum = A + B + C;\n            if (i % 2 == 0) sum =\
    \ (i + 1) / 2;\n            ans.add(sum);\n            A = B;\n            B =\
    \ C;\n            C = sum;\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vmnqnhl.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<>();\n        tri.add(1);\n        tri.add(3);\n       \
    \ tri.add(2);\n        if (n == 2) {\n            return tri;\n        }\n   \
    \     for (int i = 3; i <= n; i++) {\n            int a = tri.get(i - 3);\n  \
    \          int b = tri.get(i - 2);\n            int c = tri.get(i - 1);\n    \
    \        if (i % 2 == 0) {\n                tri.add(1 + i / 2);\n            }\
    \ else {\n                tri.add(a + b + c);\n            }\n        }\n    \
    \    return tri;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp568qr869.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpusppo_9y.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ answer = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ answer;\n        }\n        answer.add(1);\n        if (n == 1) {\n        \
    \    return answer;\n        }\n        answer.add(3);\n        if (n == 2) {\n\
    \            return answer;\n        }\n        answer.add(2);\n        if (n\
    \ == 3) {\n            return answer;\n        }\n        for (int i = 4; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                answer.add(1 + i /\
    \ 2);\n            } else {\n                answer.add(answer.get(i - 1) + answer.get(i\
    \ - 2) + answer.get(i + 1));\n            }\n        }\n        return answer;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3t3fmj_9.java:49: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n      ArrayList<Integer>\
    \ ans = new ArrayList<Integer>();\n      if (n < 1) {\n        return ans;\n \
    \     }\n      if (n == 1) {\n        ans.add(1);\n        ans.add(3);\n     \
    \   return ans;\n      }\n      ans.add(1);\n      ans.add(3);\n      for (int\
    \ i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n          ans.add(1 + i /\
    \ 2);\n        } else {\n          ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i\
    \ + 1));\n        }\n      }\n      return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qht_200.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ list;\n        }\n        list.add(1);\n        list.add(3);\n        list.add(2);\n\
    \        n -= 2;\n        while (n > 0) {\n            int v = list.get(list.size()\
    \ - 1);\n            if (v % 2 == 0) {\n                list.add(1 + v / 2);\n\
    \            } else {\n                list.add(list.get(list.size() - 1) + list.get(list.size()\
    \ - 2) + list.get(list.size() - 3));\n            }\n            n--;\n      \
    \  }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp01mvwzr.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ list;\n        }\n        if (n == 1) {\n            list.add(1);\n        \
    \    return list;\n        }\n        if (n == 2) {\n            list.add(1);\n\
    \            list.add(3);\n            return list;\n        }\n        list.add(1);\n\
    \        list.add(3);\n        list.add(2);\n        int i = 3;\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                list.add(1 + i /\
    \ 2);\n            } else {\n                list.add(list.get(i - 1) + list.get(i\
    \ - 2) + list.get(i + 1));\n            }\n            i++;\n        }\n     \
    \   return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpac57mryl.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Good luck!\n        int[] memo = new int[n + 1];\n        memo[0] = 1;\n   \
    \     memo[1] = 3;\n        memo[2] = 2;\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0)\n                memo[i] = 1 + i / 2;\n     \
    \       else\n                memo[i] = memo[i - 1] + memo[i - 2] + memo[i + 1];\n\
    \        }\n        ArrayList<Integer> answer = new ArrayList<>();\n        for\
    \ (int i = 0; i <= n; i++)\n            answer.add(memo[i]);\n        return answer;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp45osu7o9.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ your code here\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8lhqullv.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Fill here with your code\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjjdnhkb.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<Integer>();\n        tri.add(1);\n        tri.add(3);\n\
    \        tri.add(2);\n        int a = 1;\n        int b = 3;\n        int c =\
    \ 2;\n        int d = 0;\n        if (n > 2) {\n            for (int i = 0; i\
    \ < n - 2; i++) {\n                if (i % 2 == 0) {\n                    d =\
    \ a + b + c;\n                } else {\n                    d = 1 + i / 2;\n \
    \               }\n                a = b;\n                b = c;\n          \
    \      c = d;\n                tri.add(d);\n            }\n        }\n       \
    \ return tri;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp443n84uo.java:47: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ array = new ArrayList<Integer>();\n        array.add(1);\n        for (int i\
    \ = 1; i <= n; i++) {\n            int num = i;\n            if (num % 2 == 0)\
    \ {\n                array.add(1 + num / 2);\n            } else {\n         \
    \       int first = array.get(i - 1);\n                int second = array.get(i\
    \ - 2);\n                int third = array.get(i + 1);\n                array.add(first\
    \ + second + third);\n            }\n        }\n        return array;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_3eg8yey.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0)\
    \ {\n            return list;\n        }\n        list.add(3);\n        if (n\
    \ == 1) {\n            return list;\n        }\n        list.add(2);\n       \
    \ if (n == 2) {\n            return list;\n        }\n        for (int i = 3;\
    \ i <= n; i++) {\n            int v;\n            if (i % 2 == 0) {\n        \
    \        v = 1 + i / 2;\n            } else {\n                v = list.get(i\
    \ - 1) + list.get(i - 2) + list.get(i + 1);\n            }\n            list.add(v);\n\
    \        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ciakrla.java:48: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ values = new ArrayList<>();\n        int first = 1;\n        int second = 3;\n\
    \        int third = 2;\n        values.add(first);\n        values.add(second);\n\
    \        values.add(third);\n        int current = 0;\n        while (values.size()\
    \ <= n) {\n            if (values.size() % 2 == 0) {\n                current\
    \ = 1 + values.size() / 2;\n            } else {\n                current = values.get(values.size()\
    \ - 1) + values.get(values.size() - 2) + values.get(values.size() - 3);\n    \
    \        }\n            values.add(current);\n        }\n        return values;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpko65bx29.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        int x, y, z, w;\n        x = 1;\n\
    \        y = 3;\n        z = 2;\n        for (int i = 0; i <= n; i++) {\n    \
    \        if (i == 0) {\n                list.add(1);\n            } else if (i\
    \ == 1) {\n                list.add(3);\n            } else if (i == 2) {\n  \
    \              list.add(2);\n            } else {\n                w = x + y +\
    \ z;\n                list.add(w);\n                x = y;\n                y\
    \ = z;\n                z = w;\n            }\n        }\n        return list;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn4_gixg_.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ YOUR CODE HERE\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr97mnudk.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        list.add(3);\n\
    \        list.add(2);\n        for (int i = 3; i <= n; i++) {\n            int\
    \ num = 0;\n            if (i % 2 == 0) {\n                num = 1 + i / 2;\n\
    \            } else {\n                num = list.get(i - 1) + list.get(i - 2)\
    \ + list.get(i + 1);\n            }\n            list.add(num);\n        }\n \
    \       return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp72r3uaxb.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ answer = new ArrayList<Integer>();\n        int prev1 = 3;\n        int prev2\
    \ = 0;\n        int prev3 = 0;\n        answer.add(1);\n        answer.add(3);\n\
    \        for (int i = 2; i <= n; i++) {\n            int current = 0;\n      \
    \      if (i % 2 == 0) {\n                current = 1 + i / 2;\n            }\
    \ else {\n                current = prev1 + prev2 + prev3;\n            }\n  \
    \          answer.add(current);\n            prev3 = prev2;\n            prev2\
    \ = prev1;\n            prev1 = current;\n        }\n        return answer;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnf3c7kqy.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n     \
    \       if (i == 1) {\n                ans.add(3);\n            } else if (i %\
    \ 2 == 0) {\n                ans.add(1 + i / 2);\n            } else {\n     \
    \           ans.add(ans.get(i - 1 - 1) + ans.get(i - 2 - 1) + ans.get(i + 1 -\
    \ 1));\n            }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphktz_v4v.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tris = new ArrayList<Integer>();\n        if (n >= 1) {\n            tris.add(1);\n\
    \        }\n        if (n >= 2) {\n            tris.add(3);\n        }\n     \
    \   if (n >= 3) {\n            tris.add(2);\n        }\n        int i = 4;\n \
    \       while (i <= n) {\n            tris.add(tris.get(i - 2) + tris.get(i -\
    \ 3) + tris.get(i - 4));\n            i++;\n        }\n        return tris;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqaefpwmq.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ write your code here ...\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1h0ux1ps.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            if (i == 0) {\n                result.add(1);\n            } else\
    \ if (i == 1) {\n                result.add(3);\n            } else if (i == 2)\
    \ {\n                result.add(2);\n            } else if (i % 2 == 0) {\n  \
    \              result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8h8d4rn.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n         \
    \   if (i == 0) {\n                res.add(1);\n            } else if (i == 1)\
    \ {\n                res.add(3);\n            } else if (i == 2) {\n         \
    \       res.add(2);\n            } else if (i % 2 == 0) {\n                res.add(1\
    \ + i / 2);\n            } else {\n                res.add(res.get(i - 1) + res.get(i\
    \ - 2) + res.get(i + 1));\n            }\n        }\n        return res;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07prv9qo.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<Integer>();\n        if (n == 0) {\n            return ret;\n\
    \        }\n        ret.add(1);\n        if (n == 1) {\n            return ret;\n\
    \        }\n        ret.add(3);\n        if (n == 2) {\n            return ret;\n\
    \        }\n        ret.add(2);\n        int a = 1;\n        int b = 3;\n    \
    \    int c = 2;\n        for (int i = 0; i < n - 2; i++) {\n            int d\
    \ = 0;\n            if (c % 2 == 0) {\n                d = 1 + c / 2;\n      \
    \      } else {\n                d = a + b + c;\n            }\n            a\
    \ = b;\n            b = c;\n            c = d;\n            ret.add(d);\n    \
    \    }\n        return ret;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7gmc3a1d.java:54: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        if (n ==\
    \ 0) {\n            return result;\n        }\n        result.add(3);\n      \
    \  if (n == 1) {\n            return result;\n        }\n        result.add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            int new_element = 0;\n            if (i %\
    \ 2 == 0) {\n                new_element = 1 + i / 2;\n            } else {\n\
    \                new_element = result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ + 1);\n            }\n            result.add(new_element);\n        }\n    \
    \    return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu8lvkf87.java:48: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n\
    \                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ + 1));\n            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfetqkd75.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        int\
    \ a = 1, b = 3, c = 2;\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        result.add(a);\n        result.add(b);\n        result.add(c);\n    \
    \    for (int i = 2; i < n; i++) {\n            int num = a + b + c;\n       \
    \     result.add(num);\n            a = b;\n            b = c;\n            c\
    \ = num;\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn3tmka1k.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp02jsdez3.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Your code goes here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        result.add(1);\n        result.add(3);\n        result.add(2);\n    \
    \    if (n == 0) {\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.remove(2);\n            return result;\n        }\n  \
    \      if (n == 2) {\n            result.remove(1);\n            return result;\n\
    \        }\n        int sum = 0;\n        for (int i = 3; i <= n; i++) {\n   \
    \         if (i % 2 == 0) {\n                sum = 1 + i / 2;\n            } else\
    \ {\n                sum = result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ + 1);\n            }\n            result.add(sum);\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiwb0ngzf.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        if (n == 0) {\n            return ans;\n \
    \       }\n        ans.add(1);\n        if (n == 1) {\n            return ans;\n\
    \        }\n        ans.add(3);\n        if (n == 2) {\n            return ans;\n\
    \        }\n        ans.add(2);\n        for (int i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                ans.add(1 + i / 2);\n            }\
    \ else {\n                ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i\
    \ + 1));\n            }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqvrnehgg.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        int l = 0;\n        while (l <= n)\
    \ {\n            list.add(tri(l));\n            l++;\n        }\n        return\
    \ list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7oca8s32.java:28: error: no suitable method found for add(ArrayList<Integer>)\n\
    \            list.add(tri(l));\n                ^\n    method Collection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method List.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method AbstractCollection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method AbstractList.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method ArrayList.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        result.add(8);\n        while (result.size()\
    \ <= n) {\n            if (result.size() % 2 == 0) {\n                result.add(1\
    \ + result.size() / 2);\n            } else {\n                result.add(result.get(result.size()\
    \ - 1) + result.get(result.size() - 2) + result.get(result.size() - 3));\n   \
    \         }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23p6n8mj.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Fill in\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2qv6w6rb.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.add(1);\n\
    \            result.add(3);\n            return result;\n        }\n        result.add(1);\n\
    \        result.add(3);\n        result.add(2);\n        int x = 2;\n        int\
    \ y = 3;\n        int z = 8;\n        for (int i = 3; i < n; i++) {\n        \
    \    result.add(z);\n            int t = x;\n            x = y;\n            y\
    \ = z;\n            z = y + t + (i + 1) / 2;\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi41xjspw.java:52: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n         \
    \   if (i == 0) {\n                ret.add(1);\n            } else if (i == 1)\
    \ {\n                ret.add(3);\n            } else if (i == 2) {\n         \
    \       ret.add(2);\n            } else if (i % 2 == 0) {\n                ret.add(1\
    \ + i / 2);\n            } else {\n                ret.add(ret.get(i - 1) + ret.get(i\
    \ - 2) + ret.get(i + 1));\n            }\n        }\n        return ret;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp58cnrneo.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int i = 1;\n        while (i <=\
    \ n) {\n            if (i == 1) {\n                result.add(3);\n          \
    \  } else if (i % 2 == 0) {\n                result.add(1 + i / 2);\n        \
    \    } else {\n                result.add(result.get(i - 2) + result.get(i - 1)\
    \ + result.get(i));\n            }\n            i++;\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb4_nb70y.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptdblqkzb.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyd1g_493.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n     \
    \       if (i % 2 == 0) {\n                ans.add(1 + i / 2);\n            }\
    \ else {\n                ans.add(ans.get(i - 2) + ans.get(i - 3) + ans.get(i\
    \ - 1));\n            }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuhswhdry.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n\
    \                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ + 1));\n            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbzyu2jen.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n\
    \                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ + 1));\n            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5bbgb0al.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        a.add(1);\n        a.add(3);\n        a.add(2);\n\
    \        if (n <= 2) return a;\n        while (a.size() < n + 1) {\n         \
    \   int N = a.size();\n            int A = a.get(N - 3);\n            int B =\
    \ a.get(N - 2);\n            int C = a.get(N - 1);\n            int D = (N % 2\
    \ == 0) ? (1 + N / 2) : (A + B + C);\n            a.add(D);\n        }\n     \
    \   return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp86rmohmi.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ output = new ArrayList<Integer>();\n        output.add(0);\n        output.add(1);\n\
    \        output.add(3);\n        output.add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                output.add(1 + i /\
    \ 2);\n            } else {\n                output.add(output.get(i - 1) + output.get(i\
    \ - 2) + output.get(i + 1));\n            }\n        }\n        return output;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpezijsii9.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ list;\n        }\n        list.add(1);\n        if (n == 1) {\n            return\
    \ list;\n        }\n        list.add(3);\n        if (n == 2) {\n            return\
    \ list;\n        }\n        list.add(2);\n        if (n == 3) {\n            return\
    \ list;\n        }\n        for (int i = 3; i < n; i++) {\n            if (i %\
    \ 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n    \
    \            list.add(list.get(i - 1) + list.get(i - 2) + list.get(i + 1));\n\
    \            }\n        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1oocxpkf.java:49: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpox_cwf60.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) return new ArrayList<Integer>();\n        if (n == 1) return new ArrayList<Integer>(Arrays.asList(3));\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>(Arrays.asList(1, 3,\
    \ 2));\n        for (int i = 3; i <= n; i++) {\n            int pre = result.get(i\
    \ - 3);\n            int pre1 = result.get(i - 2);\n            int pre2 = result.get(i\
    \ - 1);\n            int value = pre + pre1 + pre2;\n            result.add(value);\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpedda0ua3.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.add(8);\n        for (int i = 4; i <= n; i++) {\n  \
    \          if (i % 2 == 0) {\n                result.add(1 + i / 2);\n       \
    \     } else {\n                result.add(result.get(i - 1) + result.get(i -\
    \ 2) + result.get(i + 1));\n            }\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8jvd61lj.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ write your code here\n        // Hey friend! I'm really sorry if you have to\
    \ read this code.\n        // This is not my style of coding, I can't help it\n\
    \        // It was the only way I could come up with, because it was necessary\
    \ to \n        // compute the sequence in O(n).\n        if (n == 0) return new\
    \ ArrayList<Integer>();\n        if (n == 1) return new ArrayList<Integer>(Arrays.asList(1));\n\
    \        if (n == 2) return new ArrayList<Integer>(Arrays.asList(1, 3));\n   \
    \     if (n == 3) return new ArrayList<Integer>(Arrays.asList(1, 3, 2, 8));\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>(Arrays.asList(1, 3,\
    \ 2, 8));\n        int i = 4;\n        int curr = 6;\n        int min = 8;\n \
    \       int max = 10;\n        int j = 4;\n        while (i <= n) {\n        \
    \    if (curr == min) {\n                result.add(i, min);\n               \
    \ min = curr;\n                max = min + 1;\n                curr = max;\n \
    \               i++;\n                j = i;\n            } else if (curr == max)\
    \ {\n                result.add(i, max);\n                max = curr;\n      \
    \          curr = min;\n                i++;\n                j = i;\n       \
    \     } else {\n                curr = result.get(j - 1) + result.get(j - 2) +\
    \ result.get(j - 3);\n                result.add(i, curr);\n                i++;\n\
    \                j++;\n            }\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpugvu6cun.java:62: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ s = new ArrayList<>();\n        s.add(1);\n        for (int i = 1; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                s.add(1 + i / 2);\n      \
    \      } else {\n                s.add(s.get(i - 1) + s.get(i - 2) + s.get(i +\
    \ 1));\n            }\n        }\n        return s;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfb0ljzsd.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ type your code here\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5dnbx42h.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        if (n == 0) {\n            return ans;\n \
    \       }\n        ans.add(1);\n        if (n == 1) {\n            return ans;\n\
    \        }\n        ans.add(3);\n        if (n == 2) {\n            return ans;\n\
    \        }\n        ans.add(2);\n        for (int i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                ans.add(1 + i / 2);\n            }\
    \ else {\n                ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i\
    \ + 1));\n            }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89u3a_vv.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Your Code here\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6cin4wrx.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) return new ArrayList<Integer>();\n        if (n == 1) return new ArrayList<Integer>(Arrays.asList(3));\n\
    \        ArrayList<Integer> tri = new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n\
    \        while (tri.size() < n + 1) {\n            tri.add(tri.get(tri.size()\
    \ - 1) + tri.get(tri.size() - 2) + tri.get(tri.size() - 3));\n        }\n    \
    \    return tri;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn_z92vmd.java:32: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        if (n ==\
    \ 0) return result;\n        result.add(3);\n        if (n == 1) return result;\n\
    \        result.add(2);\n        if (n == 2) return result;\n        int tri =\
    \ 8;\n        for (int i = 2; i < n; i++) {\n            result.add(tri);\n  \
    \          if (i % 2 == 0) {\n                tri = (i + 2) / 2;\n           \
    \ } else {\n                tri = result.get(i) + result.get(i - 1) + result.get(i\
    \ + 1);\n            }\n        }\n        result.add(tri);\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpacn1afiu.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjknfh2oh.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5la8juvm.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tribonacci = new ArrayList<Integer>();\n        tribonacci.add(1);\n       \
    \ if (n < 1) {\n            return tribonacci;\n        }\n        tribonacci.add(3);\n\
    \        if (n < 2) {\n            return tribonacci;\n        }\n        tribonacci.add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           tribonacci.add(1 + i / 2);\n            } else {\n               \
    \ tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i\
    \ + 1));\n            }\n        }\n        return tribonacci;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf8oi3sj3.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ output = new ArrayList<Integer>();\n        output.add(1);\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                output.add(1\
    \ + i / 2);\n            } else {\n                output.add(output.get(i - 1)\
    \ + output.get(i - 2) + output.get(i + 1));\n            }\n        }\n      \
    \  return output;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n  \
    \  public static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpno62cpve.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Write your code here:\n        ArrayList<Integer> tribonacci = new ArrayList<Integer>();\n\
    \        tribonacci.add(1);\n        if (n == 0) return tribonacci;\n        tribonacci.add(3);\n\
    \        if (n == 1) return tribonacci;\n        tribonacci.add(2);\n        if\
    \ (n == 2) return tribonacci;\n        for (int i = 3; i <= n; i++) {\n      \
    \      if (i % 2 == 0) {\n                tribonacci.add(1 + i / 2);\n       \
    \     } else {\n                tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i\
    \ - 2) + tribonacci.get(i + 1));\n            }\n        }\n        return tribonacci;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7b7cwp1j.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        res.add(1);\n        if (n == 0) {\n     \
    \       return res;\n        }\n        res.add(3);\n        if (n == 1) {\n \
    \           return res;\n        }\n        res.add(2);\n        if (n == 2) {\n\
    \            return res;\n        }\n        for (int i = 3; i <= n; i++) {\n\
    \            if (i % 2 == 0) {\n                res.add(1 + i / 2);\n        \
    \    } else {\n                res.add(res.get(i - 1) + res.get(i - 2) + res.get(i\
    \ + 1));\n            }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2xfmdtap.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Write your code here\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvndrjbqi.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ l = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n    \
    \        if (i == 0) {\n                l.add(1);\n            } else if (i ==\
    \ 1) {\n                l.add(3);\n            } else if (i == 2) {\n        \
    \        l.add(2);\n            } else if (i % 2 == 0) {\n                l.add(1\
    \ + i / 2);\n            } else {\n                l.add(l.get(i - 1) + l.get(i\
    \ - 2) + l.get(i + 1));\n            }\n        }\n        return l;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_6zwjvxy.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ arr = new ArrayList<Integer>();\n        // write your code here and replace\
    \ '0'\n        return arr;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpci8k__8z.java:28: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        if (n == 0) {\n            return res;\n\
    \        }\n        res.add(1);\n        if (n == 1) {\n            return res;\n\
    \        }\n        res.add(3);\n        if (n == 2) {\n            return res;\n\
    \        }\n        res.add(2);\n        if (n == 3) {\n            return res;\n\
    \        }\n        for (int i = 4; i <= n; i++) {\n            int add = 0;\n\
    \            if (i % 2 == 0) {\n                add = 1 + i / 2;\n           \
    \ } else {\n                add = res.get(i - 1) + res.get(i - 2) + res.get(i\
    \ - 3);\n            }\n            res.add(add);\n        }\n        return res;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuomxuqcc.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) {\n            return new ArrayList<Integer>();\n        }\n      \
    \  if (n == 1) {\n            return new ArrayList<Integer>(Arrays.asList(3));\n\
    \        }\n        if (n == 2) {\n            return new ArrayList<Integer>(Arrays.asList(1,\
    \ 3, 2));\n        }\n        ArrayList<Integer> answer = new ArrayList<Integer>(Arrays.asList(1,\
    \ 3, 2));\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0)\
    \ {\n                answer.add(1 + i / 2);\n            } else {\n          \
    \      answer.add(answer.get(i - 1) + answer.get(i - 2) + answer.get(i + 1));\n\
    \            }\n        }\n        return answer;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcrul9z6_.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<>();\n        tri.add(1);\n        if (n == 0) return tri;\n\
    \        tri.add(3);\n        if (n == 1) return tri;\n        for (int i = 2;\
    \ i <= n; i++) {\n            if (i % 2 == 0) {\n                tri.add(1 + i\
    \ / 2);\n            } else {\n                tri.add(tri.get(i - 1) + tri.get(i\
    \ - 2) + tri.get(i + 1));\n            }\n        }\n        return tri;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcj1l9xdo.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) return new ArrayList<Integer>();\n        if (n == 1) return new ArrayList<Integer>(Arrays.asList(1));\n\
    \        if (n == 2) return new ArrayList<Integer>(Arrays.asList(1, 3));\n   \
    \     ArrayList<Integer> ans = new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n\
    \        int a = ans.get(0), b = ans.get(1), c = ans.get(2);\n        while (ans.size()\
    \ < n + 1) {\n            int d = a + b + c;\n            ans.add(d);\n      \
    \      a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_hffp64n.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ arrayList = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n\
    \            arrayList.add(fib(i));\n        }\n        return arrayList;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1xbvo9un.java:27: error: cannot find symbol\n            arrayList.add(fib(i));\n\
    \                          ^\n  symbol:   method fib(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ l = new ArrayList<Integer>();\n        l.add(1);\n        l.add(3);\n      \
    \  l.add(2);\n        if (n == 0) return l;\n        for (int i = 3; i <= n; i++)\
    \ {\n            int x = l.get(i - 1) + l.get(i - 2) + l.get(i - 3);\n       \
    \     l.add(x);\n        }\n        return l;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjiha3l9z.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) {\n            return new ArrayList<Integer>();\n        }\n      \
    \  ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.add(1);\n \
    \       ans.add(3);\n        if (n == 1) {\n            return ans;\n        }\n\
    \        ans.add(2);\n        if (n == 2) {\n            return ans;\n       \
    \ }\n        while (ans.size() - 1 < n) {\n            int last = ans.get(ans.size()\
    \ - 1);\n            int secondLast = ans.get(ans.size() - 2);\n            int\
    \ thirdLast = ans.get(ans.size() - 3);\n            if (last % 2 == 0) {\n   \
    \             ans.add(1 + last / 2);\n            } else {\n                ans.add(thirdLast\
    \ + secondLast + ans.get(ans.size()));\n            }\n        }\n        return\
    \ ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ycpvzty.java:49: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Your code here!\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2edntbz6.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ For now just return an array of 1, 3, 2, 8. \n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        result.add(8);\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23bw1tst.java:32: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.add(1);\n\
    \            result.add(3);\n            return result;\n        }\n        result.add(1);\n\
    \        result.add(3);\n        result.add(2);\n        int prev = 2;\n     \
    \   int prevPrev = 3;\n        int prevPrevPrev = 1;\n        for (int i = 3;\
    \ i <= n; i++) {\n            int addend = 0;\n            if (i % 2 == 0) {\n\
    \                addend = 1 + i / 2;\n            } else {\n                addend\
    \ = prev + prevPrev + prevPrevPrev;\n            }\n            result.add(addend);\n\
    \            prevPrevPrev = prevPrev;\n            prevPrev = prev;\n        \
    \    prev = addend;\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kksq8jd.java:57: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Your code here.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        if (n == 0) {\n            result.add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n\
    \            result.add(3);\n            result.add(2);\n            return result;\n\
    \        }\n        int i = 0;\n        while (i <= n) {\n            if (i ==\
    \ 0) {\n                result.add(1);\n            } else if (i == 1) {\n   \
    \             result.add(3);\n            } else if (i == 2) {\n             \
    \   result.add(2);\n            } else {\n                int partialSum = result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i - 3);\n                result.add(partialSum);\n\
    \            }\n            i++;\n        }\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkebe4eoa.java:57: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ result;\n        }\n        result.add(1);\n        if (n == 1) {\n        \
    \    return result;\n        }\n        result.add(3);\n        if (n == 2) {\n\
    \            return result;\n        }\n        result.add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            int prev = result.get(i - 1);\n         \
    \   int prev2 = result.get(i - 2);\n            int prev3 = result.get(i - 3);\n\
    \            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n     \
    \       } else {\n                result.add(prev + prev2 + prev3);\n        \
    \    }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn9zxi89h.java:49: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        // Your code here!\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmyyknxje.java:28: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        int\
    \ triN = n;\n        int triNMinus1 = n-1;\n        int triNMinus2 = n-2;\n  \
    \      int triNPlus1 = n+1;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        if (n == 0) {\n            return list;\n        }\n        list.add(3);\n\
    \        if (n == 1) {\n            return list;\n        }\n        list.add(2);\n\
    \        if (n == 2) {\n            return list;\n        }\n        list.add(8);\n\
    \        for (int i = 3; i < n; i++) {\n            int nextNumber = triN + triNMinus1\
    \ + triNMinus2;\n            list.add(nextNumber);\n            triNMinus2 = triNMinus1;\n\
    \            triNMinus1 = triN;\n            triN = nextNumber;\n        }\n \
    \       return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3sv82g6.java:50: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n < 0) {\n            return new ArrayList<Integer>();\n        }\n       \
    \ ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(1);\n\
    \        if (n == 0) {\n            return list;\n        }\n        list.add(3);\n\
    \        if (n == 1) {\n            return list;\n        }\n        list.add(2);\n\
    \        if (n == 2) {\n            return list;\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            int a = list.get(i - 1);\n            int\
    \ b = list.get(i - 2);\n            int c = list.get(i - 3);\n            int\
    \ d = 1 + i / 2;\n            int e = a + b + c;\n            list.add(i % 2 ==\
    \ 0 ? d : e);\n        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5sk06rzd.java:50: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ arrayList = new ArrayList<>();\n        arrayList.add(1);\n        if (n ==\
    \ 0) return arrayList;\n        arrayList.add(3);\n        if (n == 1) return\
    \ arrayList;\n        arrayList.add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            int last = arrayList.get(arrayList.size() - 1);\n           \
    \ int secondLast = arrayList.get(arrayList.size() - 2);\n            int thirdLast\
    \ = arrayList.get(arrayList.size() - 3);\n            if (i % 2 == 0) {\n    \
    \            arrayList.add(1 + i / 2);\n            } else {\n               \
    \ arrayList.add(last + secondLast + thirdLast);\n            }\n        }\n  \
    \      return arrayList;\nreturn new ArrayList<Integer>(Arrays.asList());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6cp_jk53.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        list.add(3);\n\
    \        if (n == 0) return list;\n        list.add(2);\n        if (n == 1) return\
    \ list;\n        int sum = 8;\n        int i = 3;\n        while (i < n + 1) {\n\
    \            list.add(sum);\n            sum = i * 2;\n            i += 2;\n \
    \       }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplwd_pi5s.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        // Generate tribonacci sequence.\n\
    \        for (int i = 0; i <= n; i++) {\n            result.add(tri(i));\n   \
    \     }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps37hxmt0.java:28: error: no suitable method found for add(ArrayList<Integer>)\n\
    \            result.add(tri(i));\n                  ^\n    method Collection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method List.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method AbstractCollection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method AbstractList.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method ArrayList.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ seq = new ArrayList<>();\n        seq.add(1);\n        if (n == 0) return seq;\n\
    \        seq.add(3);\n        if (n == 1) return seq;\n        seq.add(2);\n \
    \       if (n == 2) return seq;\n        for (int i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                seq.add(1 + i / 2);\n            }\
    \ else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + seq.get(i\
    \ + 1));\n            }\n        }\n        return seq;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpohd3oviz.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ l = new ArrayList<>();\n        if (n < 1) {\n            return l;\n      \
    \  }\n        l.add(1);\n        if (n == 1) {\n            return l;\n      \
    \  }\n        l.add(3);\n        if (n == 2) {\n            return l;\n      \
    \  }\n        l.add(2);\n        for (int i = 2; i < n; i++) {\n            int\
    \ x = l.get(i);\n            if (x % 2 == 0) {\n                l.add(1 + x /\
    \ 2);\n            } else {\n                l.add(l.get(i - 1) + l.get(i - 2)\
    \ + l.get(i + 1));\n            }\n        }\n        return l;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9z5m9zk.java:47: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<Integer>();\n        tri.add(1);\n        tri.add(3);\n\
    \        tri.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                tri.add(1 + i / 2);\n            } else {\n   \
    \             tri.add(tri.get(i - 1) + tri.get(i - 2) + tri.get(i + 1));\n   \
    \         }\n        }\n        return tri;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn2iesj7h.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) return new ArrayList<Integer>();\n        if (n == 1) return new ArrayList<Integer>(Arrays.asList(1));\n\
    \        if (n == 2) return new ArrayList<Integer>(Arrays.asList(1, 3));\n   \
    \     if (n == 3) return new ArrayList<Integer>(Arrays.asList(1, 3, 2, 8));\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>(Arrays.asList(1, 3,\
    \ 2, 8));\n        for (int i = 4; i <= n; i++) {\n            int s;\n      \
    \      if (i % 2 == 0) {\n                s = (i / 2) + 1;\n            } else\
    \ {\n                s = result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ - 3);\n            }\n            result.add(s);\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszrjg6iw.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        a.add(1);\n        if (n == 0) return\
    \ a;\n        a.add(3);\n        if (n == 1) return a;\n        a.add(2);\n  \
    \      if (n == 2) return a;\n        int n1 = 1, n2 = 3, n3 = 2;\n        for\
    \ (int i = 3; i <= n; i++) {\n            int t = n1 + n2 + n3;\n            a.add(t);\n\
    \            n1 = n2;\n            n2 = n3;\n            n3 = t;\n        }\n\
    \        return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpga33cqdj.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<Integer>();\n        tri.add(1);\n        tri.add(3);\n\
    \        tri.add(2);\n        for (int i = 4; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                tri.add(1 + i / 2);\n            } else {\n   \
    \             tri.add(tri.get(i - 1) + tri.get(i - 2) + tri.get(i + 1));\n   \
    \         }\n        }\n        return tri;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnqfa33dk.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n < 0) return new ArrayList<Integer>();\n        if (n == 0) return new ArrayList<Integer>(Arrays.asList(new\
    \ Integer[]{1}));\n        if (n == 1) return new ArrayList<Integer>(Arrays.asList(new\
    \ Integer[]{1, 3}));\n        if (n == 2) return new ArrayList<Integer>(Arrays.asList(new\
    \ Integer[]{1, 3, 2}));\n        ArrayList<Integer> r = new ArrayList<Integer>(Arrays.asList(new\
    \ Integer[]{1, 3, 2}));\n        int i = 3;\n        while (i < n + 1) {\n   \
    \         int x = (i % 2 == 0) ? 1 + i / 2 : r.get(i - 1) + r.get(i - 2) + r.get(i\
    \ + 1);\n            r.add(x);\n            i++;\n        }\n        return r;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8uoohre0.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ v = new ArrayList<Integer>();\n        v.add(1);\n        for (int i = 1; i\
    \ <= n; i++) {\n            int k = i / 2;\n            if (i % 2 == 0) {\n  \
    \              v.add(1 + k);\n            } else {\n                int p = v.get(i\
    \ - 1);\n                int q = v.get(i - 2);\n                int r = v.get(i\
    \ + 1);\n                v.add(p + q + r);\n            }\n        }\n       \
    \ return v;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjs4vhqf4.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0)\
    \ return list;\n        list.add(3);\n        if (n == 1) return list;\n     \
    \   list.add(2);\n        if (n == 2) return list;\n        for (int i = 3; i\
    \ <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(1 + i\
    \ / 2);\n            } else {\n                list.add(list.get(i - 1) + list.get(i\
    \ - 2) + list.get(i + 1));\n            }\n        }\n        return list;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgu94p_m.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        if (n == 0) {\n            return res;\n\
    \        }\n        if (n == 1) {\n            res.add(1);\n            return\
    \ res;\n        }\n        if (n == 2) {\n            res.add(1);\n          \
    \  res.add(3);\n            return res;\n        }\n        res.add(1);\n    \
    \    res.add(3);\n        res.add(2);\n        for (int i = 3; i <= n; i++) {\n\
    \            if (i % 2 == 0) {\n                res.add(1 + i / 2);\n        \
    \    } else {\n                res.add(res.get(i - 1) + res.get(i - 2) + res.get(i\
    \ + 1));\n            }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8319fj28.java:49: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            if (i == 0) result.add(1);\n            else if (i == 1) result.add(3);\n\
    \            else if (i == 2) result.add(2);\n            else {\n           \
    \     if (i % 2 == 0) result.add(1 + i / 2);\n                else result.add(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36m_7rt7.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw10e5q47.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            if (i == 0) {\n                result.add(1);\n            } else\
    \ if (i == 1) {\n                result.add(3);\n            } else if (i == 2)\
    \ {\n                result.add(2);\n            } else if (i % 2 == 0) {\n  \
    \              result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6srm11s.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        a.add(1);\n        a.add(3);\n        a.add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            int e = 0;\n            if\
    \ (i % 2 == 0) {\n                e = 1 + i / 2;\n            } else {\n     \
    \           e = a.get(i - 1) + a.get(i - 2) + a.get(i + 1);\n            }\n \
    \           a.add(e);\n        }\n        return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp893ctork.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<Integer>();\n        ret.add(1);\n        for (int i = 0;\
    \ i < n; i++) {\n            int next = 0;\n            if (i == 0) {\n      \
    \          next = 3;\n            } else if (i % 2 == 0) {\n                next\
    \ = 1 + i / 2;\n            } else {\n                next = ret.get(i - 1) +\
    \ ret.get(i - 2) + ret.get(i + 1);\n            }\n            ret.add(next);\n\
    \        }\n        return ret;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd4275yq7.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        if (n ==\
    \ 0) return result;\n        result.add(3);\n        if (n == 1) return result;\n\
    \        result.add(2);\n        if (n == 2) return result;\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) result.add(1 + i / 2);\n\
    \            else result.add(result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ + 1));\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqfvw174g.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tribonacci = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++)\
    \ {\n            tribonacci.add(tribonacci(i));\n        }\n        return tribonacci;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsm5vl701.java:27: error: cannot find symbol\n            tribonacci.add(tribonacci(i));\n\
    \                           ^\n  symbol:   method tribonacci(int)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.add(tri(i));\n        }\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprx_8wkvh.java:27: error: no suitable method found for add(ArrayList<Integer>)\n\
    \            result.add(tri(i));\n                  ^\n    method Collection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method List.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method AbstractCollection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method AbstractList.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method ArrayList.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ arr = new ArrayList<Integer>();\n        for (int i = 1; i <= n + 1; i++) {\n\
    \            if (i == 1) {\n                arr.add(3);\n            } else if\
    \ (i % 2 == 0) {\n                arr.add(1 + i / 2);\n            } else {\n\
    \                arr.add(arr.get(i - 2) + arr.get(i - 3) + arr.get(i - 1));\n\
    \            }\n        }\n        return arr;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0vftao43.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Write your code here.\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_k1zbznk.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ new ArrayList<Integer>();\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvustk297.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //throw\
    \ new UnsupportedOperationException(\"TODO - implement\");\n        ArrayList<Integer>\
    \ l = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n    \
    \        l.add(tri(i));\n        }\n        return l;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw3323rpj.java:28: error: no suitable method found for add(ArrayList<Integer>)\n\
    \            l.add(tri(i));\n             ^\n    method Collection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method List.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method AbstractCollection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method AbstractList.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method ArrayList.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ triList = new ArrayList<Integer>();\n        // your code here\n        return\
    \ triList;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdukr8fj9.java:28: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ sequence = new ArrayList<Integer>();\n        sequence.add(1);\n        sequence.add(3);\n\
    \        sequence.add(2);\n        int next = 1;\n        while (sequence.size()\
    \ < n + 1) {\n            sequence.add(next);\n            next = sequence.get(sequence.size()\
    \ - 1) + sequence.get(sequence.size() - 2) + sequence.get(sequence.size() - 3);\n\
    \        }\n        return sequence;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxg5_fzh2.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Don't forget to check the base cases\n        if (n == 0) return new ArrayList<Integer>(Arrays.asList(1));\n\
    \        if (n == 1) return new ArrayList<Integer>(Arrays.asList(1, 3));\n   \
    \     if (n == 2) return new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n   \
    \     ArrayList<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) list.add(1\
    \ + i / 2);\n            else list.add(list.get(i - 1) + list.get(i - 2) + list.get(i\
    \ + 1));\n        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaec1mk4w.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        res.add(1);\n        res.add(3);\n       \
    \ for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n            \
    \    res.add(1 + i / 2);\n            } else {\n                res.add(res.get(i\
    \ - 1) + res.get(i - 2) + res.get(i + 1));\n            }\n        }\n       \
    \ return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnvmlxci.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ output = new ArrayList<Integer>();\n        int e1 = 1;\n        int e2 = 3;\n\
    \        int e3 = 2;\n        output.add(e1);\n        output.add(e2);\n     \
    \   output.add(e3);\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                output.add(e1 + (i / 2));\n            } else {\n\
    \                output.add(output.get(i - 1) + output.get(i - 2) + output.get(i\
    \ + 1));\n            }\n        }\n        return output;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpskh7tqj4.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        a.add(1);\n        if (n == 0) return\
    \ a;\n        a.add(3);\n        if (n == 1) return a;\n        a.add(2);\n  \
    \      if (n == 2) return a;\n        for (int i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                a.add(1 + i / 2);\n            } else\
    \ {\n                a.add(a.get(i - 1) + a.get(i - 2) + a.get(i + 1));\n    \
    \        }\n        }\n        return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_xzsnox.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Your code here!\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzf5w2ct9.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.add(get_tri(i));\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo6dcqqoq.java:28: error: cannot find symbol\n            result.add(get_tri(i));\n\
    \                       ^\n  symbol:   method get_tri(int)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (n < 0) {\n            return\
    \ result;\n        }\n        if (n == 0) {\n            result.add(1);\n    \
    \        return result;\n        }\n        if (n == 1) {\n            result.add(1);\n\
    \            result.add(3);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.add(1);\n            result.add(3);\n       \
    \     result.add(2);\n            return result;\n        }\n        result.add(1);\n\
    \        result.add(3);\n        result.add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            int sum = 0;\n            if (i % 2 == 0) {\n       \
    \         sum = 1 + i / 2;\n            } else {\n                sum = result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1);\n            }\n            result.add(sum);\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7sl2rqew.java:57: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        if (n <= 0) return res;\n        res.add(1);\n\
    \        for (int i = 1; i <= n; i++) {\n            int cur = res.get(res.size()\
    \ - 1);\n            if (i % 2 == 0) {\n                cur = 1 + i / 2;\n   \
    \         } else {\n                if (i == 1) cur = 3;\n                else\
    \ {\n                    cur = res.get(res.size() - 1) + res.get(res.size() -\
    \ 2) + res.get(res.size() - 3);\n                }\n            }\n          \
    \  res.add(cur);\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmbwb3fxt.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ new ArrayList<>();\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdkaepg5c.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        result.add(1);\n        result.add(3);\n        result.add(2);\n    \
    \    int triN = 8;\n        for (int i = 3; i < n; i++) {\n            result.add(triN);\n\
    \            triN = triN + result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ - 3);\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpladxm8u6.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ your code here\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
    \        if (n == 0) {\n            ans.add(1);\n            return ans;\n   \
    \     }\n        if (n == 1) {\n            ans.add(1);\n            ans.add(3);\n\
    \            return ans;\n        }\n        ans.add(1);\n        ans.add(3);\n\
    \        ans.add(2);\n        for (int i = 3; i <= n; i++) {\n            int\
    \ curr = (i % 2 == 0) ? (1 + i / 2) : (ans.get(i - 1) + ans.get(i - 2) + ans.get(i\
    \ + 1));\n            ans.add(curr);\n        }\n        return ans;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jdtv4qb.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbrsp1d5.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ new ArrayList<Integer>();\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwoawahxj.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<>();\n        if (n < 0) {\n            return ret;\n  \
    \      }\n        ret.add(1);\n        if (n == 0) {\n            return ret;\n\
    \        }\n        ret.add(3);\n        if (n == 1) {\n            return ret;\n\
    \        }\n        ret.add(2);\n        for (int i = 3; i <= n; i++) {\n    \
    \        int a = ret.get(i - 1);\n            int b = ret.get(i - 2);\n      \
    \      int c = ret.get(i - 3);\n            if (i % 2 == 0) {\n              \
    \  ret.add(1 + i / 2);\n            } else {\n                ret.add(a + b +\
    \ c);\n            }\n        }\n        return ret;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwohv73hv.java:49: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ array = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ array;\n        }\n        array.add(1);\n        if (n == 1) {\n          \
    \  return array;\n        }\n        array.add(3);\n        if (n == 2) {\n  \
    \          return array;\n        }\n        int x = 2;\n        int y = 3;\n\
    \        int z = 3;\n        while (array.size() < n + 1) {\n            int next;\n\
    \            if (array.size() % 2 == 0) {\n                next = 1 + array.size()\
    \ / 2;\n            } else {\n                next = x + y + z;\n            }\n\
    \            x = y;\n            y = z;\n            z = next;\n            array.add(next);\n\
    \        }\n        return array;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzpxuyffe.java:53: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        for (int i = 0; i <= n; i++)\n           \
    \ res.add(tri(i));\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpksn04cog.java:27: error: no suitable method found for add(ArrayList<Integer>)\n\
    \            res.add(tri(i));\n               ^\n    method Collection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method List.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method AbstractCollection.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method AbstractList.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method ArrayList.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<Integer>();\n        ret.add(1);\n        for (int i = 1;\
    \ i <= n; i++) {\n            if (i == 1) {\n                ret.add(3);\n   \
    \         } else if (i % 2 == 0) {\n                ret.add(1 + i / 2);\n    \
    \        } else {\n                ret.add(ret.get(i - 1) + ret.get(i - 2) + ret.get(i\
    \ + 1));\n            }\n        }\n        return ret;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6payljbj.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n  \
    \          if (i == 0) {\n                res.add(1);\n            } else if (i\
    \ == 1) {\n                res.add(3);\n            } else if (i == 2) {\n   \
    \             res.add(2);\n            } else if (i % 2 == 0) {\n            \
    \    res.add(1 + i / 2);\n            } else {\n                res.add(res.get(i\
    \ - 1) + res.get(i - 2) + res.get(i + 1));\n            }\n        }\n       \
    \ return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0qu6qe3t.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) {\n            return new ArrayList<>();\n        }\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        ans.add(1);\n        if (n == 1) {\n     \
    \       return ans;\n        }\n        ans.add(3);\n        if (n == 2) {\n \
    \           return ans;\n        }\n        ans.add(2);\n        for (int i =\
    \ 3; i <= n; i++) {\n            int num = ans.get(i - 1) + ans.get(i - 2) + ans.get(i\
    \ - 3);\n            ans.add(num);\n        }\n        return ans;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwa7opizp.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        ans.add(1);\n        ans.add(3);\n       \
    \ ans.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 ==\
    \ 0) {\n                ans.add(1 + i / 2);\n            } else {\n          \
    \      ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i + 1));\n          \
    \  }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgjlg4p3_.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ seq = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n  \
    \          seq.add(i);\n        }\n        for (int i = 0; i <= n; i++) {\n  \
    \          if (i == 0) {\n                seq.set(i, 1);\n            } else if\
    \ (i == 1) {\n                seq.set(i, 3);\n            } else if (i == 2) {\n\
    \                seq.set(i, 2);\n            } else if (i % 2 == 0) {\n      \
    \          seq.set(i, 1 + i / 2);\n            } else {\n                seq.set(i,\
    \ seq.get(i - 1) + seq.get(i - 2) + seq.get(i + 1));\n            }\n        }\n\
    \        return seq;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpztsbw4w_.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) {\n            return new ArrayList<Integer>();\n        }\n      \
    \  if (n == 1) {\n            return new ArrayList<Integer>(Arrays.asList(1));\n\
    \        }\n        if (n == 2) {\n            return new ArrayList<Integer>(Arrays.asList(1,\
    \ 3));\n        }\n        ArrayList<Integer> res = new ArrayList<Integer>(Arrays.asList(1,\
    \ 3, 2));\n        for (int i = 3; i <= n; i++) {\n            int x = i;\n  \
    \          int y = i - 1;\n            int z = i - 2;\n            res.add(res.get(y)\
    \ + res.get(z) + res.get(x));\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn_relhwa.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        a.add(1);\n        a.add(3);\n      \
    \  a.add(2);\n        int m = 3;\n        while (m <= n) {\n            a.add(a.get(m\
    \ - 2) + a.get(m - 1) + a.get(m));\n            m = m + 1;\n        }\n      \
    \  return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw22_toxs.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ your code\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gns79rx.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0)\
    \ {\n            return list;\n        }\n        list.add(3);\n        if (n\
    \ == 1) {\n            return list;\n        }\n        list.add(2);\n       \
    \ if (n == 2) {\n            return list;\n        }\n        list.add(8);\n \
    \       if (n == 3) {\n            return list;\n        }\n        return triHelp(list,\
    \ n);\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpizvpp_gz.java:42: error: cannot find symbol\n        return triHelp(list,\
    \ n);\n               ^\n  symbol:   method triHelp(ArrayList<Integer>,int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ seq = new ArrayList<Integer>();\n        seq.add(1); seq.add(3); seq.add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            int x = seq.get(i - 1);\n\
    \            int y = seq.get(i - 2);\n            int z = seq.get(i - 3);\n  \
    \          int k = i % 2 == 0 ? i / 2 : x + y + z;\n            seq.add(k);\n\
    \        }\n        return seq;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0lc0c4q2.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ls = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n      \
    \      if (i == 1) {\n                ls.add(3);\n            } else if (i % 2\
    \ == 0) {\n                ls.add(i / 2);\n            } else {\n            \
    \    ls.add(ls.get(i - 2) + ls.get(i - 3) + ls.get(i - 1));\n            }\n \
    \       }\n        return ls;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjpiqqd_r.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<>();\n        if (n == 0) {\n            return ret;\n \
    \       }\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n\
    \                ret.add(3);\n            } else if (i % 2 == 0) {\n         \
    \       ret.add(1 + i / 2);\n            } else {\n                ret.add(ret.get(i\
    \ - 2) + ret.get(i - 1) + ret.get(i + 1));\n            }\n        }\n       \
    \ return ret;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0713x3rg.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ sequence = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ sequence;\n        }\n        if (n == 1) {\n            sequence.add(1);\n\
    \            return sequence;\n        }\n        sequence.add(1);\n        sequence.add(3);\n\
    \        sequence.add(2);\n        while (sequence.size() <= n) {\n          \
    \  int m = sequence.size();\n            int a = sequence.get(m - 3);\n      \
    \      int b = sequence.get(m - 2);\n            int c = sequence.get(m - 1);\n\
    \            if (m % 2 == 0) {\n                sequence.add(1 + m / 2);\n   \
    \         } else {\n                sequence.add(a + b + c);\n            }\n\
    \        }\n        return sequence;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbefea9d0.java:48: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        for (int i = 1; i <= n + 1; i++) {\n\
    \            if (i == 1) {\n                list.add(3);\n            } else if\
    \ (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n\
    \                list.add(list.get(i - 2) + list.get(i - 3) + list.get(i - 1));\n\
    \            }\n        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp26lar90n.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.add(i, triImpl(i));\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflox9so6.java:27: error: cannot find symbol\n            result.add(i,\
    \ triImpl(i));\n                          ^\n  symbol:   method triImpl(int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        if (n <= 0) {\n            return a;\n\
    \        }\n        if (n == 1) {\n            a.add(1);\n            a.add(3);\n\
    \            return a;\n        }\n        if (n == 2) {\n            a.add(1);\n\
    \            a.add(3);\n            a.add(2);\n            return a;\n       \
    \ }\n        a.add(1);\n        a.add(3);\n        a.add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                a.add(1\
    \ + i / 2);\n            } else {\n                a.add(a.get(i - 1) + a.get(i\
    \ - 2) + a.get(i + 1));\n            }\n        }\n        return a;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpceg9q8g3.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Your code here.\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9kvrxuig.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        int cur = 1;\n        for (int i = 0; i <=\
    \ n; i++) {\n            if (i == 0) {\n                res.add(1);\n        \
    \    } else if (i == 1) {\n                res.add(3);\n            } else if\
    \ (i == 2) {\n                res.add(2);\n            } else {\n            \
    \    if (i % 2 == 0) {\n                    cur = 1 + i / 2;\n               \
    \ } else {\n                    cur = cur + res.get(i - 1) + res.get(i - 2);\n\
    \                }\n                res.add(cur);\n            }\n        }\n\
    \        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy_608t_3.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ arr = new ArrayList<Integer>();\n        for (int i = 1; i <= n + 1; i++) {\n\
    \            if (i % 2 == 0) {\n                arr.add(1 + i / 2);\n        \
    \    } else {\n                if (i == 1) {\n                    arr.add(3);\n\
    \                } else {\n                    arr.add(arr.get(i - 2) + arr.get(i\
    \ - 3) + arr.get(i - 1));\n                }\n            }\n        }\n     \
    \   return arr;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7tjyzdqq.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        res.add(1);\n        if (n >= 1) {\n\
    \            res.add(3);\n        }\n        if (n >= 2) {\n            res.add(2);\n\
    \        }\n        for (int i = 3; i <= n; i++) {\n            int x = 0;\n \
    \           if (i % 2 == 0) {\n                x = 1 + i / 2;\n            } else\
    \ {\n                x = res.get(i - 1) + res.get(i - 2) + res.get(i + 1);\n \
    \           }\n            res.add(x);\n        }\n        return res;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkcahofky.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ This problem was taken from a book: The Joy of Haskell\n        // by Chris\
    \ Allen and Julie Moronuki.\n        // I couldn't solve it, but I could translate\
    \ it from Haskell to Java.\n        // Haskell solution:\n        // tri = 1 :\
    \ 3 : 2 : helper 1 3 2\n        // where helper l m o = l + m + o : helper m o\
    \ (l + m + o)\n        ArrayList<Integer> array = new ArrayList<>();\n       \
    \ array.add(1);\n        array.add(3);\n        array.add(2);\n        int l =\
    \ 1;\n        int m = 3;\n        int o = 2;\n        while (array.size() <= n)\
    \ {\n            int lm = l + m + o;\n            array.add(lm);\n           \
    \ l = m;\n            m = o;\n            o = lm;\n        }\n        return array;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxh1dh2h6.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        int a = 1;\n        int b = 3;\n        int c\
    \ = 2;\n        for (int i = 4; i <= n; i++) {\n            int v = 0;\n     \
    \       if (i % 2 == 0) {\n                v = 1 + i / 2;\n            } else\
    \ {\n                v = a + b + c;\n            }\n            result.add(v);\n\
    \            a = b;\n            b = c;\n            c = v;\n        }\n     \
    \   return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4al5k1so.java:45: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ l = new ArrayList<Integer>();\n        l.add(1);\n        if (n == 0) return\
    \ l;\n        l.add(3);\n        if (n == 1) return l;\n        l.add(2);\n  \
    \      if (n == 2) return l;\n        for (int i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                l.add(1 + i / 2);\n            } else\
    \ {\n                l.add(l.get(i - 1) + l.get(i - 2) + l.get(i + 1));\n    \
    \        }\n        }\n        return l;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8c50s6d.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            if (i == 0) {\n                result.add(1);\n            } else\
    \ if (i == 1) {\n                result.add(3);\n            } else if (i == 2)\
    \ {\n                result.add(2);\n            } else if (i % 2 == 0) {\n  \
    \              result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxa2f2wg.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n     \
    \       if (i == 1) {\n                ans.add(3);\n            } else if (i %\
    \ 2 == 0) {\n                ans.add(1 + i / 2);\n            } else {\n     \
    \           ans.add(ans.get(i - 2) + ans.get(i - 3) + ans.get(i));\n         \
    \   }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprsox1r17.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Type your code here.\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn9rpshm3.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n\
    \        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            int\
    \ x = result.get(i - 1);\n            int y = result.get(i - 2);\n           \
    \ int z = result.get(i - 3);\n            result.add(i % 2 == 0 ? 1 + i / 2 :\
    \ x + y + z);\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpky3j1ecr.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Your code here.\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpth9wa23b.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        int\
    \ MAX = 1000;\n        ArrayList<Integer> sequence = new ArrayList<>();\n    \
    \    int[] tri = new int[MAX];\n        tri[0] = 1;\n        tri[1] = 3;\n   \
    \     tri[2] = 2;\n        int triIndex = 2;\n        while (n-- > 0) {\n    \
    \        sequence.add(tri[triIndex]);\n            if (triIndex > 2) {\n     \
    \           if (triIndex % 2 == 0)\n                    tri[triIndex + 1] = 1\
    \ + (triIndex + 1) / 2;\n                else\n                    tri[triIndex\
    \ + 1] = tri[triIndex] + tri[triIndex - 1] + tri[triIndex + 1];\n            }\n\
    \            ++triIndex;\n        }\n        return sequence;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuhzntjfa.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.add(1);\n\
    \            result.add(3);\n            return result;\n        }\n        int[]\
    \ cache = new int[n + 1];\n        cache[0] = 1;\n        cache[1] = 3;\n    \
    \    cache[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                cache[i] = 1 + i / 2;\n            } else {\n \
    \               cache[i] = cache[i - 1] + cache[i - 2] + cache[i + 1];\n     \
    \       }\n        }\n        for (int i = 0; i <= n; i++) {\n            result.add(cache[i]);\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpibaci222.java:53: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ array = new ArrayList<Integer>();\n        array.add(1);\n        array.add(3);\n\
    \        array.add(2);\n        int lastEven = 2;\n        int lastOdd1 = 3;\n\
    \        int lastOdd2 = 1;\n        int lastOdd3 = 0;\n        for (int i = 3;\
    \ i <= n; i++) {\n            int next;\n            if (i % 2 == 0) {\n     \
    \           next = lastEven + 1;\n                lastEven = next;\n         \
    \   } else {\n                next = lastOdd1 + lastOdd2 + lastOdd3;\n       \
    \         lastOdd3 = lastOdd2;\n                lastOdd2 = lastOdd1;\n       \
    \         lastOdd1 = next;\n            }\n            array.add(next);\n    \
    \    }\n        return array;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm3gw3lcn.java:47: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnwe117j2.java:29: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        if (n < 1) return ans;\n        ans.add(1);\n\
    \        if (n == 1) return ans;\n        ans.add(3);\n        if (n == 2) return\
    \ ans;\n        ans.add(2);\n        if (n == 3) return ans;\n        int a =\
    \ 1, b = 3, c = 2;\n        for (int i = 4; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                int x = 1 + i / 2;\n                ans.add(x);\n\
    \                a = b;\n                b = c;\n                c = x;\n    \
    \        } else {\n                int x = a + b + c;\n                ans.add(x);\n\
    \                a = b;\n                b = c;\n                c = x;\n    \
    \        }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphpqcp2me.java:50: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ new ArrayList<Integer>();\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphuwuh9bs.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0)\
    \ {\n            return list;\n        }\n        list.add(3);\n        if (n\
    \ == 1) {\n            return list;\n        }\n        list.add(2);\n       \
    \ if (n == 2) {\n            return list;\n        }\n        for (int i = 3;\
    \ i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(1 +\
    \ i / 2);\n            } else {\n                list.add(list.get(i - 1) + list.get(i\
    \ - 2) + list.get(i + 1));\n            }\n        }\n        return list;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfd0wc7rl.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        result.add(1);\n        if (n ==\
    \ 0) return result;\n        result.add(3);\n        if (n == 1) return result;\n\
    \        result.add(2);\n        if (n == 2) return result;\n        for (int\
    \ i = 3; i <= n; i++) {\n            int val = result.get(i - 1) + result.get(i\
    \ - 2) + result.get(i - 3);\n            result.add(val);\n        }\n       \
    \ return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9c__pp2y.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n     \
    \       if (i == 1) {\n                ans.add(3);\n            } else if (i %\
    \ 2 == 0) {\n                ans.add(1 + i / 2);\n            } else {\n     \
    \           ans.add(ans.get(i - 2) + ans.get(i - 3) + ans.get(i));\n         \
    \   }\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdm6vzn9_.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<Integer>();\n        tri.add(1);\n        tri.add(3);\n\
    \        tri.add(2);\n        tri.add(8);\n        for (int i = 4; i <= n; i++)\
    \ {\n            int value = tri.get(i - 1) + tri.get(i - 2) + tri.get(i - 3);\n\
    \            tri.add(value);\n        }\n        return tri;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1asi34nt.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            if (i == 0) {\n                result.add(1);\n            } else\
    \ if (i == 1) {\n                result.add(3);\n            } else if (i == 2)\
    \ {\n                result.add(2);\n            } else if (i % 2 == 0) {\n  \
    \              result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwf2_ydav.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tribonacci = new ArrayList<Integer>();\n        tribonacci.add(1);\n       \
    \ tribonacci.add(3);\n        tribonacci.add(2);\n        if (n == 0) {\n    \
    \        tribonacci.clear();\n            return tribonacci;\n        }\n    \
    \    if (n == 1) {\n            tribonacci.remove(2);\n            return tribonacci;\n\
    \        }\n        if (n == 2) {\n            tribonacci.remove(1);\n       \
    \     return tribonacci;\n        }\n        for (int i = 3; i <= n; i++) {\n\
    \            int temp = 0;\n            if (i % 2 == 0) {\n                temp\
    \ = 1 + i / 2;\n            } else {\n                temp = tribonacci.get(i\
    \ - 1) + tribonacci.get(i - 2) + tribonacci.get(i + 1);\n            }\n     \
    \       tribonacci.add(temp);\n        }\n        return tribonacci;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8bsa5r3j.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ret = new ArrayList<>();\n        ret.add(1);\n        ret.add(3);\n       \
    \ ret.add(2);\n        for (int i = 3; i <= n; i++) {\n            int odd = ret.get(i\
    \ - 1) + ret.get(i - 2) + ret.get(i - 3);\n            int even = 1 + i / 2;\n\
    \            ret.add(i % 2 == 0 ? even : odd);\n        }\n        return ret;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyh_qo4z3.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        a.add(1);\n        a.add(3);\n      \
    \  a.add(2);\n        for (int i = 3; i <= n; i++) {\n            int c;\n   \
    \         if (i % 2 == 0) {\n                c = 1 + i / 2;\n            } else\
    \ {\n                c = a.get(i - 1) + a.get(i - 2) + a.get(i + 1);\n       \
    \     }\n            a.add(c);\n        }\n        return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpemdj0bbg.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        if (n == 0) return res;\n        res.add(1);\n\
    \        if (n == 1) return res;\n        res.add(3);\n        if (n == 2) return\
    \ res;\n        res.add(2);\n        int a = 1, b = 3, c = 2;\n        while (res.size()\
    \ <= n) {\n            int d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n            res.add(d);\n        }\n        return res;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeiscbg7h.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        if (n == 0) return ans;\n        ans.add(1);\n\
    \        for (int i = 1; i <= n; i++) {\n            int num = 0;\n          \
    \  if (i % 2 == 0) {\n                num = 1 + i / 2;\n            } else {\n\
    \                int j = i;\n                num = ans.get(j - 1) + ans.get(j\
    \ - 2) + ans.get(j + 1);\n            }\n            ans.add(num);\n        }\n\
    \        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe3kbvl3n.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<>();\n        tri.add(1);\n        for (int i = 1; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                tri.add(1 + i / 2);\n\
    \            } else {\n                tri.add(tri.get(i - 1) + tri.get(i - 2)\
    \ + tri.get(i + 1));\n            }\n        }\n        return tri;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ej_28eg.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        if\
    \ (n == 0) return new ArrayList<>();\n        if (n == 1) return new ArrayList<>(Arrays.asList(1));\n\
    \        ArrayList<Integer> res = new ArrayList<>(Arrays.asList(1, 3, 2));\n \
    \       if (n == 2) return res;\n        int index = 3;\n        while (index\
    \ <= n) {\n            int x = res.get(index - 1) + res.get(index - 2) + res.get(index\
    \ - 3);\n            res.add(x);\n            index++;\n        }\n        return\
    \ res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpig58vt67.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Type your solution here\n        ArrayList<Integer> trib = new ArrayList<Integer>();\n\
    \        trib.add(1);\n        trib.add(3);\n        trib.add(2);\n        trib.add(8);\n\
    \        // trib.add(2);\n        // trib.add(3);\n        for (int i = 4; i <=\
    \ n; i++) {\n            int n1 = trib.get(i - 1);\n            int n2 = trib.get(i\
    \ - 2);\n            int n3 = trib.get(i - 3);\n            trib.add(n1 + n2 +\
    \ n3);\n        }\n        return trib;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvjml_u79.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        if (n < 0) return ans;\n        ans.add(1);\n\
    \        if (n < 1) return ans;\n        ans.add(3);\n        if (n < 2) return\
    \ ans;\n        ans.add(2);\n        if (n < 3) return ans;\n        int a = 1,\
    \ b = 3, c = 2;\n        for (int i = 3; i <= n; i++) {\n            int d = i\
    \ % 2 == 0 ? (1 + i / 2) : (a + b + c);\n            ans.add(d);\n           \
    \ a = b;\n            b = c;\n            c = d;\n        }\n        return ans;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4y1rjmmh.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n  \
    \          if (i == 0) res.add(1);\n            else if (i == 1) res.add(3);\n\
    \            else if (i == 2) res.add(2);\n            else if (i % 2 == 0) res.add(res.get(i\
    \ - 1) + 1 + i / 2);\n            else res.add(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i - 3));\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp475x3rj9.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ a = new ArrayList<Integer>();\n        a.add(1);\n        a.add(3);\n      \
    \  a.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 ==\
    \ 0) {\n                a.add(1 + i / 2);\n            } else {\n            \
    \    a.add(a.get(i - 1) + a.get(i - 2) + a.get(i + 1));\n            }\n     \
    \   }\n        return a;\nreturn new ArrayList<Integer>(Arrays.asList());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
    \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n   \
    \ assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n  \
    \  assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph7mqd7mr.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.add(triRec(i));\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vxknr71.java:27: error: cannot find symbol\n            result.add(triRec(i));\n\
    \                       ^\n  symbol:   method triRec(int)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<Integer>();\n        if (n == 0) {\n            return tri;\n\
    \        }\n        if (n == 1) {\n            tri.add(1);\n            return\
    \ tri;\n        }\n        if (n == 2) {\n            tri.add(1);\n          \
    \  tri.add(3);\n            return tri;\n        }\n        if (n == 3) {\n  \
    \          tri.add(1);\n            tri.add(3);\n            tri.add(2);\n   \
    \         return tri;\n        }\n        tri.add(1);\n        tri.add(3);\n \
    \       tri.add(2);\n        for (int i = 3; i < n; i++) {\n            int num\
    \ = 0;\n            if (i % 2 == 0) {\n                num = 1 + i / 2;\n    \
    \        } else {\n                num = tri.get(i - 1) + tri.get(i - 2) + tri.get(i\
    \ + 1);\n            }\n            tri.add(num);\n        }\n        return tri;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp05hoh4qg.java:57: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<>();\n        tri.add(1);\n        tri.add(3);\n       \
    \ tri.add(2);\n        while (tri.size() < n + 1) {\n            int num = tri.get(tri.size()\
    \ - 1);\n            if (num % 2 == 0) {\n                tri.add(1 + num / 2);\n\
    \            } else {\n                tri.add(tri.get(tri.size() - 1) + tri.get(tri.size()\
    \ - 2) + tri.get(tri.size() - 3));\n            }\n        }\n        return tri;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdh40y6pr.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        //\
    \ Write your code here\n        if (n < 0) {\n            return new ArrayList<Integer>();\n\
    \        } else if (n == 0) {\n            return new ArrayList<Integer>(Arrays.asList(1));\n\
    \        } else if (n == 1) {\n            return new ArrayList<Integer>(Arrays.asList(1,\
    \ 3));\n        } else if (n == 2) {\n            return new ArrayList<Integer>(Arrays.asList(1,\
    \ 3, 2));\n        } else {\n            ArrayList<Integer> result = new ArrayList<Integer>(Arrays.asList(1,\
    \ 3, 2));\n            for (int i = 3; i <= n; i++) {\n                if (i %\
    \ 2 == 0) {\n                    result.add(1 + i / 2);\n                } else\
    \ {\n                    result.add(result.get(i - 1) + result.get(i - 2) + result.get(i\
    \ + 1));\n                }\n            }\n            return result;\n     \
    \   }\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6fncd1ut.java:45: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        return\
    \ null;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpztnwh0v_.java:26: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ tri = new ArrayList<Integer>();\n        for (int i = 0; i <= n; i++) {\n  \
    \          if (i == 0) {\n                tri.add(0);\n            } else if (i\
    \ == 1) {\n                tri.add(3);\n            } else if (i == 2) {\n   \
    \             tri.add(2);\n            } else if (i % 2 == 0) {\n            \
    \    tri.add(1 + i / 2);\n            } else {\n                tri.add(tri.get(i\
    \ - 1) + tri.get(i - 2) + tri.get(i + 1));\n            }\n        }\n       \
    \ return tri;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw1l5jxen.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        // Your code here\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3)))));\n    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4)))));\n    assert(tri((7)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24)))));\n    assert(tri((8)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
    \ (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35)))));\n\
    \    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
    \ (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6, (int)48,\
    \ (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120, (int)11)))));\n\
    \    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
    \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpua_mng_3.java:28: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
